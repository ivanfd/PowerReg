

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Aug 10 11:53:24 2021

Microchip MPLAB XC8 C Compiler v2.32 (Pro license) build 20210201212658 Og9s 
     1                           	processor	18F25K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    85                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    86                           	psect	pa_nodes0,global,class=CODE,delta=1
    87  0000                     
    88                           ; Version 2.20
    89                           ; Generated 05/05/2020 GMT
    90                           ; 
    91                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution.
   105                           ; 
   106                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   107                           ;        software without specific prior written permission.
   108                           ; 
   109                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   110                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   111                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   112                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   113                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   114                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   115                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   116                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   117                           ; 
   118                           ; 
   119                           ; Code-generator required, PIC18F25K20 Definitions
   120                           ; 
   121                           ; SFR Addresses
   122  0000                     
   123                           	psect	eeprom_data
   124  F00000  18 14 21 00 00 00 00 00 	db	24,20,33,0,0,0,0,0	;# 
   125  0000                     
   126                           	psect	idataCOMRAM
   127  0036BD                     __pidataCOMRAM:
   128                           	callstack 0
   129                           
   130                           ;initializer for _pp
   131  0036BD  01                 	db	1
   132                           
   133                           	psect	idataBANK1
   134  0036B6                     __pidataBANK1:
   135                           	callstack 0
   136                           
   137                           ;initializer for stoa@F1160
   138  0036B6  28                 	db	40
   139  0036B7  6E                 	db	110
   140  0036B8  75                 	db	117
   141  0036B9  6C                 	db	108
   142  0036BA  6C                 	db	108
   143  0036BB  29                 	db	41
   144  0036BC  00                 	db	0
   145                           
   146                           	psect	mediumconst
   147  007DFA                     __pmediumconst:
   148                           	callstack 0
   149  007DFA  00                 	db	0
   150  007DFB                     _HD44780_CYR:
   151                           	callstack 0
   152  007DFB  41                 	db	65
   153  007DFC  A0                 	db	160
   154  007DFD  42                 	db	66
   155  007DFE  A1                 	db	161
   156  007DFF  E0                 	db	224
   157  007E00  45                 	db	69
   158  007E01  A3                 	db	163
   159  007E02  A4                 	db	164
   160  007E03  A5                 	db	165
   161  007E04  A6                 	db	166
   162  007E05  4B                 	db	75
   163  007E06  A7                 	db	167
   164  007E07  4D                 	db	77
   165  007E08  48                 	db	72
   166  007E09  4F                 	db	79
   167  007E0A  A8                 	db	168
   168  007E0B  50                 	db	80
   169  007E0C  43                 	db	67
   170  007E0D  54                 	db	84
   171  007E0E  A9                 	db	169
   172  007E0F  AA                 	db	170
   173  007E10  58                 	db	88
   174  007E11  E1                 	db	225
   175  007E12  AB                 	db	171
   176  007E13  AC                 	db	172
   177  007E14  E2                 	db	226
   178  007E15  AD                 	db	173
   179  007E16  AE                 	db	174
   180  007E17  62                 	db	98
   181  007E18  AF                 	db	175
   182  007E19  B0                 	db	176
   183  007E1A  B1                 	db	177
   184  007E1B  61                 	db	97
   185  007E1C  B2                 	db	178
   186  007E1D  B3                 	db	179
   187  007E1E  B4                 	db	180
   188  007E1F  E3                 	db	227
   189  007E20  65                 	db	101
   190  007E21  B6                 	db	182
   191  007E22  B7                 	db	183
   192  007E23  B8                 	db	184
   193  007E24  B9                 	db	185
   194  007E25  BA                 	db	186
   195  007E26  BB                 	db	187
   196  007E27  BC                 	db	188
   197  007E28  BD                 	db	189
   198  007E29  6F                 	db	111
   199  007E2A  BE                 	db	190
   200  007E2B  70                 	db	112
   201  007E2C  63                 	db	99
   202  007E2D  BF                 	db	191
   203  007E2E  79                 	db	121
   204  007E2F  E4                 	db	228
   205  007E30  78                 	db	120
   206  007E31  E5                 	db	229
   207  007E32  C0                 	db	192
   208  007E33  C1                 	db	193
   209  007E34  E6                 	db	230
   210  007E35  C2                 	db	194
   211  007E36  C3                 	db	195
   212  007E37  C4                 	db	196
   213  007E38  C5                 	db	197
   214  007E39  C6                 	db	198
   215  007E3A  C7                 	db	199
   216  007E3B                     __end_of_HD44780_CYR:
   217                           	callstack 0
   218  007E3B                     _EncState_:
   219                           	callstack 0
   220  007E3B  00                 	db	0
   221  007E3C  FF                 	db	255
   222  007E3D  01                 	db	1
   223  007E3E  7F                 	db	127
   224  007E3F  01                 	db	1
   225  007E40  00                 	db	0
   226  007E41  7F                 	db	127
   227  007E42  FF                 	db	255
   228  007E43  FF                 	db	255
   229  007E44  7F                 	db	127
   230  007E45  00                 	db	0
   231  007E46  01                 	db	1
   232  007E47  7F                 	db	127
   233  007E48  01                 	db	1
   234  007E49  FF                 	db	255
   235  007E4A  00                 	db	0
   236  007E4B                     __end_of_EncState_:
   237                           	callstack 0
   238  007E4B                     _compile_date:
   239                           	callstack 0
   240  007E4B  41                 	db	65
   241  007E4C  75                 	db	117
   242  007E4D  67                 	db	103
   243  007E4E  20                 	db	32
   244  007E4F  31                 	db	49
   245  007E50  30                 	db	48
   246  007E51  20                 	db	32
   247  007E52  32                 	db	50
   248  007E53  30                 	db	48
   249  007E54  32                 	db	50
   250  007E55  31                 	db	49
   251  007E56  00                 	db	0
   252  007E57                     __end_of_compile_date:
   253                           	callstack 0
   254  007E57                     _compile_time:
   255                           	callstack 0
   256  007E57  31                 	db	49
   257  007E58  31                 	db	49
   258  007E59  3A                 	db	58
   259  007E5A  35                 	db	53
   260  007E5B  33                 	db	51
   261  007E5C  3A                 	db	58
   262  007E5D  31                 	db	49
   263  007E5E  31                 	db	49
   264  007E5F  00                 	db	0
   265  007E60                     __end_of_compile_time:
   266                           	callstack 0
   267  007E60                     _symbol_6:
   268                           	callstack 0
   269  007E60  00                 	db	0
   270  007E61  0E                 	db	14
   271  007E62  1F                 	db	31
   272  007E63  1B                 	db	27
   273  007E64  1F                 	db	31
   274  007E65  0E                 	db	14
   275  007E66  00                 	db	0
   276  007E67  00                 	db	0
   277  007E68                     __end_of_symbol_6:
   278                           	callstack 0
   279  007E68                     _symbol_5:
   280                           	callstack 0
   281  007E68  00                 	db	0
   282  007E69  00                 	db	0
   283  007E6A  1F                 	db	31
   284  007E6B  1F                 	db	31
   285  007E6C  1F                 	db	31
   286  007E6D  00                 	db	0
   287  007E6E  00                 	db	0
   288  007E6F  00                 	db	0
   289  007E70                     __end_of_symbol_5:
   290                           	callstack 0
   291  007E70                     _symbol_4:
   292                           	callstack 0
   293  007E70  00                 	db	0
   294  007E71  04                 	db	4
   295  007E72  0F                 	db	15
   296  007E73  1F                 	db	31
   297  007E74  0F                 	db	15
   298  007E75  04                 	db	4
   299  007E76  00                 	db	0
   300  007E77  00                 	db	0
   301  007E78                     __end_of_symbol_4:
   302                           	callstack 0
   303  007E78                     _symbol_3:
   304                           	callstack 0
   305  007E78  00                 	db	0
   306  007E79  04                 	db	4
   307  007E7A  1E                 	db	30
   308  007E7B  1F                 	db	31
   309  007E7C  1E                 	db	30
   310  007E7D  04                 	db	4
   311  007E7E  00                 	db	0
   312  007E7F  00                 	db	0
   313  007E80                     __end_of_symbol_3:
   314                           	callstack 0
   315  007E80                     _symbol_2:
   316                           	callstack 0
   317  007E80  0E                 	db	14
   318  007E81  11                 	db	17
   319  007E82  11                 	db	17
   320  007E83  11                 	db	17
   321  007E84  0A                 	db	10
   322  007E85  1B                 	db	27
   323  007E86  00                 	db	0
   324  007E87  00                 	db	0
   325  007E88                     __end_of_symbol_2:
   326                           	callstack 0
   327  007E88                     _symbol_1:
   328                           	callstack 0
   329  007E88  00                 	db	0
   330  007E89  00                 	db	0
   331  007E8A  08                 	db	8
   332  007E8B  15                 	db	21
   333  007E8C  02                 	db	2
   334  007E8D  00                 	db	0
   335  007E8E  00                 	db	0
   336  007E8F  00                 	db	0
   337  007E90                     __end_of_symbol_1:
   338                           	callstack 0
   339  0000                     _RCONbits	set	4048
   340  0000                     _T3CONbits	set	4017
   341  0000                     _T1CONbits	set	4045
   342  0000                     _IPR1bits	set	3999
   343  0000                     _ANSELbits	set	3966
   344  0000                     _ADCON1	set	4033
   345  0000                     _ADCON2bits	set	4032
   346  0000                     _INTCON2bits	set	4081
   347  0000                     _T0CONbits	set	4053
   348  0000                     _TRISB	set	3987
   349  0000                     _LATB	set	3978
   350  0000                     _PORTB	set	3969
   351  0000                     _WPUB	set	3964
   352  0000                     _TRISC	set	3988
   353  0000                     _LATC	set	3979
   354  0000                     _PORTC	set	3970
   355  0000                     _LATA	set	3977
   356  0000                     _PORTA	set	3968
   357  0000                     _TRISA	set	3986
   358  0000                     _OSCTUNEbits	set	3995
   359  0000                     _OSCCONbits	set	4051
   360  0000                     _PIR1bits	set	3998
   361  0000                     _ADRESL	set	4035
   362  0000                     _ADRESH	set	4036
   363  0000                     _ADCON0bits	set	4034
   364  0000                     _TMR0L	set	4054
   365  0000                     _LATCbits	set	3979
   366  0000                     _LATAbits	set	3977
   367  0000                     _PIE1bits	set	3997
   368  0000                     _TXREG	set	4013
   369  0000                     _EECON2	set	4007
   370  0000                     _INTCONbits	set	4082
   371  0000                     _EEDATA	set	4008
   372  0000                     _EEADR	set	4009
   373  0000                     _EECON1bits	set	4006
   374  0000                     _TMR3IP	set	32017
   375  0000                     _TMR1ON	set	32360
   376  0000                     _TMR1IP	set	31992
   377  0000                     _T1OSCEN	set	32363
   378  0000                     _TMR1CS	set	32361
   379  0000                     _RBPU	set	32655
   380  0000                     _TMR3IF	set	32009
   381  0000                     _TMR3IE	set	32001
   382  0000                     _ADIF	set	31990
   383  0000                     _ADIE	set	31982
   384  0000                     _TMR3ON	set	32136
   385  0000                     _INT0IF	set	32657
   386  0000                     _INT0IE	set	32660
   387  0000                     _TMR1IF	set	31984
   388  0000                     _TMR1IE	set	31976
   389  0000                     _TMR0IF	set	32658
   390  0000                     _TMR0IE	set	32661
   391  0000                     _TXIF	set	31988
   392  007E90                     STR_8:
   393  007E90  20                 	db	32
   394  007E91  20                 	db	32
   395  007E92  20                 	db	32
   396  007E93  20                 	db	32
   397  007E94  20                 	db	32
   398  007E95  20                 	db	32
   399  007E96  20                 	db	32
   400  007E97  20                 	db	32
   401  007E98  20                 	db	32
   402  007E99  45                 	db	69	;'E'
   403  007E9A  58                 	db	88	;'X'
   404  007E9B  49                 	db	73	;'I'
   405  007E9C  54                 	db	84	;'T'
   406  007E9D  20                 	db	32
   407  007E9E  20                 	db	32
   408  007E9F  20                 	db	32
   409  007EA0  20                 	db	32
   410  007EA1  20                 	db	32
   411  007EA2  20                 	db	32
   412  007EA3  20                 	db	32
   413  007EA4  20                 	db	32
   414  007EA5  00                 	db	0
   415  007EA6                     STR_20:
   416  007EA6  43                 	db	67	;'C'
   417  007EA7  6C                 	db	108	;'l'
   418  007EA8  63                 	db	99	;'c'
   419  007EA9  50                 	db	80	;'P'
   420  007EAA  3A                 	db	58	;':'
   421  007EAB  25                 	db	37
   422  007EAC  63                 	db	99	;'c'
   423  007EAD  25                 	db	37
   424  007EAE  30                 	db	48	;'0'
   425  007EAF  34                 	db	52	;'4'
   426  007EB0  75                 	db	117	;'u'
   427  007EB1  57                 	db	87	;'W'
   428  007EB2  20                 	db	32
   429  007EB3  25                 	db	37
   430  007EB4  63                 	db	99	;'c'
   431  007EB5  3D                 	db	61	;'='
   432  007EB6  25                 	db	37
   433  007EB7  75                 	db	117	;'u'
   434  007EB8  2E                 	db	46
   435  007EB9  25                 	db	37
   436  007EBA  75                 	db	117	;'u'
   437  007EBB  00                 	db	0
   438  007EBC                     STR_23:
   439  007EBC  41                 	db	65	;'A'
   440  007EBD  70                 	db	112	;'p'
   441  007EBE  78                 	db	120	;'x'
   442  007EBF  50                 	db	80	;'P'
   443  007EC0  3A                 	db	58	;':'
   444  007EC1  25                 	db	37
   445  007EC2  63                 	db	99	;'c'
   446  007EC3  25                 	db	37
   447  007EC4  30                 	db	48	;'0'
   448  007EC5  34                 	db	52	;'4'
   449  007EC6  75                 	db	117	;'u'
   450  007EC7  57                 	db	87	;'W'
   451  007EC8  20                 	db	32
   452  007EC9  25                 	db	37
   453  007ECA  63                 	db	99	;'c'
   454  007ECB  3D                 	db	61	;'='
   455  007ECC  25                 	db	37
   456  007ECD  75                 	db	117	;'u'
   457  007ECE  2E                 	db	46
   458  007ECF  25                 	db	37
   459  007ED0  75                 	db	117	;'u'
   460  007ED1  00                 	db	0
   461  007ED2                     STR_7:
   462  007ED2  20                 	db	32
   463  007ED3  20                 	db	32
   464  007ED4  20                 	db	32
   465  007ED5  53                 	db	83	;'S'
   466  007ED6  45                 	db	69	;'E'
   467  007ED7  54                 	db	84	;'T'
   468  007ED8  20                 	db	32
   469  007ED9  31                 	db	49	;'1'
   470  007EDA  30                 	db	48	;'0'
   471  007EDB  30                 	db	48	;'0'
   472  007EDC  25                 	db	37
   473  007EDD  20                 	db	32
   474  007EDE  50                 	db	80	;'P'
   475  007EDF  4F                 	db	79	;'O'
   476  007EE0  57                 	db	87	;'W'
   477  007EE1  45                 	db	69	;'E'
   478  007EE2  52                 	db	82	;'R'
   479  007EE3  20                 	db	32
   480  007EE4  20                 	db	32
   481  007EE5  20                 	db	32
   482  007EE6  00                 	db	0
   483  007EE7                     STR_5:
   484  007EE7  20                 	db	32
   485  007EE8  20                 	db	32
   486  007EE9  20                 	db	32
   487  007EEA  45                 	db	69	;'E'
   488  007EEB  44                 	db	68	;'D'
   489  007EEC  49                 	db	73	;'I'
   490  007EED  54                 	db	84	;'T'
   491  007EEE  20                 	db	32
   492  007EEF  52                 	db	82	;'R'
   493  007EF0  45                 	db	69	;'E'
   494  007EF1  53                 	db	83	;'S'
   495  007EF2  49                 	db	73	;'I'
   496  007EF3  53                 	db	83	;'S'
   497  007EF4  54                 	db	84	;'T'
   498  007EF5  41                 	db	65	;'A'
   499  007EF6  4E                 	db	78	;'N'
   500  007EF7  43                 	db	67	;'C'
   501  007EF8  45                 	db	69	;'E'
   502  007EF9  20                 	db	32
   503  007EFA  20                 	db	32
   504  007EFB  00                 	db	0
   505  007EFC                     STR_6:
   506  007EFC  20                 	db	32
   507  007EFD  20                 	db	32
   508  007EFE  53                 	db	83	;'S'
   509  007EFF  41                 	db	65	;'A'
   510  007F00  56                 	db	86	;'V'
   511  007F01  45                 	db	69	;'E'
   512  007F02  20                 	db	32
   513  007F03  4C                 	db	76	;'L'
   514  007F04  4F                 	db	79	;'O'
   515  007F05  41                 	db	65	;'A'
   516  007F06  44                 	db	68	;'D'
   517  007F07  20                 	db	32
   518  007F08  44                 	db	68	;'D'
   519  007F09  45                 	db	69	;'E'
   520  007F0A  46                 	db	70	;'F'
   521  007F0B  41                 	db	65	;'A'
   522  007F0C  55                 	db	85	;'U'
   523  007F0D  4C                 	db	76	;'L'
   524  007F0E  54                 	db	84	;'T'
   525  007F0F  20                 	db	32
   526  007F10  00                 	db	0
   527  007F11                     STR_1:
   528  007F11  2D                 	db	45
   529  007F12  2D                 	db	45
   530  007F13  2D                 	db	45
   531  007F14  42                 	db	66	;'B'
   532  007F15  52                 	db	82	;'R'
   533  007F16  45                 	db	69	;'E'
   534  007F17  53                 	db	83	;'S'
   535  007F18  45                 	db	69	;'E'
   536  007F19  4E                 	db	78	;'N'
   537  007F1A  48                 	db	72	;'H'
   538  007F1B  41                 	db	65	;'A'
   539  007F1C  4D                 	db	77	;'M'
   540  007F1D  20                 	db	32
   541  007F1E  53                 	db	83	;'S'
   542  007F1F  54                 	db	84	;'T'
   543  007F20  41                 	db	65	;'A'
   544  007F21  42                 	db	66	;'B'
   545  007F22  2D                 	db	45
   546  007F23  2D                 	db	45
   547  007F24  2D                 	db	45
   548  007F25  00                 	db	0
   549  007F26                     STR_12:
   550  007F26  52                 	db	82	;'R'
   551  007F27  65                 	db	101	;'e'
   552  007F28  73                 	db	115	;'s'
   553  007F29  69                 	db	105	;'i'
   554  007F2A  73                 	db	115	;'s'
   555  007F2B  74                 	db	116	;'t'
   556  007F2C  3A                 	db	58	;':'
   557  007F2D  25                 	db	37
   558  007F2E  30                 	db	48	;'0'
   559  007F2F  32                 	db	50	;'2'
   560  007F30  75                 	db	117	;'u'
   561  007F31  2E                 	db	46
   562  007F32  25                 	db	37
   563  007F33  75                 	db	117	;'u'
   564  007F34  20                 	db	32
   565  007F35  4F                 	db	79	;'O'
   566  007F36  68                 	db	104	;'h'
   567  007F37  6D                 	db	109	;'m'
   568  007F38  20                 	db	32
   569  007F39  00                 	db	0
   570  007F3A                     STR_10:
   571  007F3A  4C                 	db	76	;'L'
   572  007F3B  6F                 	db	111	;'o'
   573  007F3C  6E                 	db	110	;'n'
   574  007F3D  67                 	db	103	;'g'
   575  007F3E  20                 	db	32
   576  007F3F  70                 	db	112	;'p'
   577  007F40  72                 	db	114	;'r'
   578  007F41  65                 	db	101	;'e'
   579  007F42  73                 	db	115	;'s'
   580  007F43  73                 	db	115	;'s'
   581  007F44  20                 	db	32
   582  007F45  66                 	db	102	;'f'
   583  007F46  6F                 	db	111	;'o'
   584  007F47  72                 	db	114	;'r'
   585  007F48  20                 	db	32
   586  007F49  73                 	db	115	;'s'
   587  007F4A  61                 	db	97	;'a'
   588  007F4B  76                 	db	118	;'v'
   589  007F4C  65                 	db	101	;'e'
   590  007F4D  00                 	db	0
   591  007F4E                     STR_9:
   592  007F4E  20                 	db	32
   593  007F4F  20                 	db	32
   594  007F50  2D                 	db	45
   595  007F51  20                 	db	32
   596  007F52  57                 	db	87	;'W'
   597  007F53  68                 	db	104	;'h'
   598  007F54  6F                 	db	111	;'o'
   599  007F55  6C                 	db	108	;'l'
   600  007F56  65                 	db	101	;'e'
   601  007F57  20                 	db	32
   602  007F58  70                 	db	112	;'p'
   603  007F59  61                 	db	97	;'a'
   604  007F5A  72                 	db	114	;'r'
   605  007F5B  74                 	db	116	;'t'
   606  007F5C  20                 	db	32
   607  007F5D  2D                 	db	45
   608  007F5E  20                 	db	32
   609  007F5F  20                 	db	32
   610  007F60  00                 	db	0
   611  007F61                     STR_14:
   612  007F61  20                 	db	32
   613  007F62  20                 	db	32
   614  007F63  2D                 	db	45
   615  007F64  20                 	db	32
   616  007F65  46                 	db	70	;'F'
   617  007F66  72                 	db	114	;'r'
   618  007F67  61                 	db	97	;'a'
   619  007F68  63                 	db	99	;'c'
   620  007F69  74                 	db	116	;'t'
   621  007F6A  20                 	db	32
   622  007F6B  70                 	db	112	;'p'
   623  007F6C  61                 	db	97	;'a'
   624  007F6D  72                 	db	114	;'r'
   625  007F6E  74                 	db	116	;'t'
   626  007F6F  20                 	db	32
   627  007F70  2D                 	db	45
   628  007F71  20                 	db	32
   629  007F72  20                 	db	32
   630  007F73  00                 	db	0
   631  007F74                     STR_11:
   632  007F74  20                 	db	32
   633  007F75  20                 	db	32
   634  007F76  20                 	db	32
   635  007F77  20                 	db	32
   636  007F78  74                 	db	116	;'t'
   637  007F79  6F                 	db	111	;'o'
   638  007F7A  20                 	db	32
   639  007F7B  45                 	db	69	;'E'
   640  007F7C  45                 	db	69	;'E'
   641  007F7D  50                 	db	80	;'P'
   642  007F7E  52                 	db	82	;'R'
   643  007F7F  4F                 	db	79	;'O'
   644  007F80  4D                 	db	77	;'M'
   645  007F81  2E                 	db	46
   646  007F82  00                 	db	0
   647  007F83                     STR_2:
   648  007F83  28                 	db	40
   649  007F84  63                 	db	99	;'c'
   650  007F85  29                 	db	41
   651  007F86  49                 	db	73	;'I'
   652  007F87  76                 	db	118	;'v'
   653  007F88  61                 	db	97	;'a'
   654  007F89  6E                 	db	110	;'n'
   655  007F8A  5F                 	db	95	;'_'
   656  007F8B  66                 	db	102	;'f'
   657  007F8C  64                 	db	100	;'d'
   658  007F8D  20                 	db	32
   659  007F8E  76                 	db	118	;'v'
   660  007F8F  25                 	db	37
   661  007F90  73                 	db	115	;'s'
   662  007F91  00                 	db	0
   663  007F92                     STR_22:
   664  007F92  50                 	db	80	;'P'
   665  007F93  77                 	db	119	;'w'
   666  007F94  55                 	db	85	;'U'
   667  007F95  3A                 	db	58	;':'
   668  007F96  25                 	db	37
   669  007F97  75                 	db	117	;'u'
   670  007F98  25                 	db	37
   671  007F99  25                 	db	37
   672  007F9A  20                 	db	32
   673  007F9B  20                 	db	32
   674  007F9C  00                 	db	0
   675  007F9D                     STR_19:
   676  007F9D  43                 	db	67	;'C'
   677  007F9E  6F                 	db	111	;'o'
   678  007F9F  65                 	db	101	;'e'
   679  007FA0  66                 	db	102	;'f'
   680  007FA1  66                 	db	102	;'f'
   681  007FA2  3A                 	db	58	;':'
   682  007FA3  25                 	db	37
   683  007FA4  66                 	db	102	;'f'
   684  007FA5  20                 	db	32
   685  007FA6  20                 	db	32
   686  007FA7  00                 	db	0
   687  007FA8                     STR_16:
   688  007FA8  4E                 	db	78	;'N'
   689  007FA9  4F                 	db	79	;'O'
   690  007FAA  54                 	db	84	;'T'
   691  007FAB  20                 	db	32
   692  007FAC  53                 	db	83	;'S'
   693  007FAD  54                 	db	84	;'T'
   694  007FAE  41                 	db	65	;'A'
   695  007FAF  42                 	db	66	;'B'
   696  007FB0  21                 	db	33
   697  007FB1  20                 	db	32
   698  007FB2  00                 	db	0
   699  007FB3                     STR_17:
   700  007FB3  53                 	db	83	;'S'
   701  007FB4  54                 	db	84	;'T'
   702  007FB5  41                 	db	65	;'A'
   703  007FB6  42                 	db	66	;'B'
   704  007FB7  49                 	db	73	;'I'
   705  007FB8  4C                 	db	76	;'L'
   706  007FB9  49                 	db	73	;'I'
   707  007FBA  5A                 	db	90	;'Z'
   708  007FBB  45                 	db	69	;'E'
   709  007FBC  20                 	db	32
   710  007FBD  00                 	db	0
   711  007FBE                     STR_18:
   712  007FBE  50                 	db	80	;'P'
   713  007FBF  77                 	db	119	;'w'
   714  007FC0  52                 	db	82	;'R'
   715  007FC1  3A                 	db	58	;':'
   716  007FC2  25                 	db	37
   717  007FC3  75                 	db	117	;'u'
   718  007FC4  25                 	db	37
   719  007FC5  25                 	db	37
   720  007FC6  20                 	db	32
   721  007FC7  00                 	db	0
   722  007FC8                     STR_15:
   723  007FC8  55                 	db	85	;'U'
   724  007FC9  5F                 	db	95	;'_'
   725  007FCA  49                 	db	73	;'I'
   726  007FCB  6E                 	db	110	;'n'
   727  007FCC  3A                 	db	58	;':'
   728  007FCD  25                 	db	37
   729  007FCE  75                 	db	117	;'u'
   730  007FCF  56                 	db	86	;'V'
   731  007FD0  20                 	db	32
   732  007FD1  00                 	db	0
   733  007FD2                     STR_21:
   734  007FD2  50                 	db	80	;'P'
   735  007FD3  77                 	db	119	;'w'
   736  007FD4  55                 	db	85	;'U'
   737  007FD5  3A                 	db	58	;':'
   738  007FD6  25                 	db	37
   739  007FD7  75                 	db	117	;'u'
   740  007FD8  25                 	db	37
   741  007FD9  25                 	db	37
   742  007FDA  2A                 	db	42
   743  007FDB  00                 	db	0
   744  007FDC                     STR_3:
   745  007FDC  33                 	db	51	;'3'
   746  007FDD  31                 	db	49	;'1'
   747  007FDE  2E                 	db	46
   748  007FDF  30                 	db	48	;'0'
   749  007FE0  33                 	db	51	;'3'
   750  007FE1  2E                 	db	46
   751  007FE2  32                 	db	50	;'2'
   752  007FE3  31                 	db	49	;'1'
   753  007FE4  00                 	db	0
   754  007FE5                     STR_4:
   755  007FE5  25                 	db	37
   756  007FE6  73                 	db	115	;'s'
   757  007FE7  20                 	db	32
   758  007FE8  25                 	db	37
   759  007FE9  73                 	db	115	;'s'
   760  007FEA  00                 	db	0
   761  007FEB                     STR_25:
   762  007FEB  49                 	db	73	;'I'
   763  007FEC  4E                 	db	78	;'N'
   764  007FED  46                 	db	70	;'F'
   765  007FEE  00                 	db	0
   766  007FEF                     STR_29:
   767  007FEF  4E                 	db	78	;'N'
   768  007FF0  41                 	db	65	;'A'
   769  007FF1  4E                 	db	78	;'N'
   770  007FF2  00                 	db	0
   771  007FF3                     STR_26:
   772  007FF3  69                 	db	105	;'i'
   773  007FF4  6E                 	db	110	;'n'
   774  007FF5  66                 	db	102	;'f'
   775  007FF6  00                 	db	0
   776  007FF7                     STR_30:
   777  007FF7  6E                 	db	110	;'n'
   778  007FF8  61                 	db	97	;'a'
   779  007FF9  6E                 	db	110	;'n'
   780  007FFA  00                 	db	0
   781  007FFB                     STR_33:
   782  007FFB  6C                 	db	108	;'l'
   783  007FFC  66                 	db	102	;'f'
   784  007FFD  00                 	db	0
   785  007FFE  00                 	db	0	; dummy byte at the end
   786  0000                     
   787                           ; #config settings
   788                           
   789                           	psect	cinit
   790  0030DE                     __pcinit:
   791                           	callstack 0
   792  0030DE                     start_initialization:
   793                           	callstack 0
   794  0030DE                     __initialization:
   795                           	callstack 0
   796                           
   797                           ; Initialize objects allocated to BANK1 (7 bytes)
   798                           ; load TBLPTR registers with __pidataBANK1
   799  0030DE  0EB6               	movlw	low __pidataBANK1
   800  0030E0  6EF6               	movwf	tblptrl,c
   801  0030E2  0E36               	movlw	high __pidataBANK1
   802  0030E4  6EF7               	movwf	tblptrh,c
   803  0030E6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   804  0030E8  6EF8               	movwf	tblptru,c
   805  0030EA  EE01  F0D6         	lfsr	0,__pdataBANK1
   806  0030EE  EE10 F007          	lfsr	1,7
   807  0030F2                     copy_data0:
   808  0030F2  0009               	tblrd		*+
   809  0030F4  CFF5 FFEE          	movff	tablat,postinc0
   810  0030F8  50E5               	movf	postdec1,w,c
   811  0030FA  50E1               	movf	fsr1l,w,c
   812  0030FC  E1FA               	bnz	copy_data0
   813                           
   814                           ; Initialize objects allocated to COMRAM (1 bytes)
   815                           ; load TBLPTR registers with __pidataCOMRAM
   816  0030FE  0EBD               	movlw	low __pidataCOMRAM
   817  003100  6EF6               	movwf	tblptrl,c
   818  003102  0E36               	movlw	high __pidataCOMRAM
   819  003104  6EF7               	movwf	tblptrh,c
   820  003106  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   821  003108  6EF8               	movwf	tblptru,c
   822  00310A  0009               	tblrd		*+	;fetch initializer
   823  00310C  CFF5 F045          	movff	tablat,__pdataCOMRAM
   824                           
   825                           ; Clear objects allocated to BANK1 (140 bytes)
   826  003110  EE01  F000         	lfsr	0,__pbssBANK1
   827  003114  0E8C               	movlw	140
   828  003116                     clear_0:
   829  003116  6AEE               	clrf	postinc0,c
   830  003118  06E8               	decf	wreg,f,c
   831  00311A  E1FD               	bnz	clear_0
   832                           
   833                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   834  00311C  6A44               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   835                           
   836                           ; Clear objects allocated to COMRAM (29 bytes)
   837  00311E  EE00  F027         	lfsr	0,__pbssCOMRAM
   838  003122  0E1D               	movlw	29
   839  003124                     clear_1:
   840  003124  6AEE               	clrf	postinc0,c
   841  003126  06E8               	decf	wreg,f,c
   842  003128  E1FD               	bnz	clear_1
   843  00312A                     end_of_initialization:
   844                           	callstack 0
   845  00312A                     __end_of__initialization:
   846                           	callstack 0
   847  00312A  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   848  00312C  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   849  00312E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   850  003130  6EF8               	movwf	tblptru,c
   851  003132  0100               	movlb	0
   852  003134  EFF3  F003         	goto	_main	;jump to C main() function
   853                           
   854                           	psect	bitbssCOMRAM
   855  000220                     __pbitbssCOMRAM:
   856                           	callstack 0
   857  000220                     main@whole_dec:
   858                           	callstack 0
   859  000220                     	ds	1
   860  000221                     _inc_data:
   861                           	callstack 0
   862  000221                     	ds	1
   863  000222                     _power_100:
   864                           	callstack 0
   865  000222                     	ds	1
   866  000223                     _show_tp:
   867                           	callstack 0
   868  000223                     	ds	1
   869  000224                     _is_power:
   870                           	callstack 0
   871  000224                     	ds	1
   872  000225                     _is_stab:
   873                           	callstack 0
   874  000225                     	ds	1
   875                           
   876                           	psect	bssCOMRAM
   877  000027                     __pbssCOMRAM:
   878                           	callstack 0
   879  000027                     ___fpclassifyf@F465:
   880                           	callstack 0
   881  000027                     	ds	4
   882  00002B                     _U_meas:
   883                           	callstack 0
   884  00002B                     	ds	4
   885  00002F                     _width:
   886                           	callstack 0
   887  00002F                     	ds	2
   888  000031                     _prec:
   889                           	callstack 0
   890  000031                     	ds	2
   891  000033                     _flags:
   892                           	callstack 0
   893  000033                     	ds	2
   894  000035                     key_press@count:
   895                           	callstack 0
   896  000035                     	ds	2
   897  000037                     _ps:
   898                           	callstack 0
   899  000037                     	ds	2
   900  000039                     _err:
   901                           	callstack 0
   902  000039                     	ds	2
   903  00003B                     _t_power:
   904                           	callstack 0
   905  00003B                     	ds	2
   906  00003D                     _key_pressed:
   907                           	callstack 0
   908  00003D                     	ds	1
   909  00003E                     EncPoll@Enc:
   910                           	callstack 0
   911  00003E                     	ds	1
   912  00003F                     EncPoll@EncVal:
   913                           	callstack 0
   914  00003F                     	ds	1
   915  000040                     _getU:
   916                           	callstack 0
   917  000040                     	ds	1
   918  000041                     _zero:
   919                           	callstack 0
   920  000041                     	ds	1
   921  000042                     _eusartRxCount:
   922                           	callstack 0
   923  000042                     	ds	1
   924  000043                     _eusartTxBufferRemaining:
   925                           	callstack 0
   926  000043                     	ds	1
   927                           
   928                           	psect	dataCOMRAM
   929  000045                     __pdataCOMRAM:
   930                           	callstack 0
   931  000045                     _pp:
   932                           	callstack 0
   933  000045                     	ds	1
   934                           
   935                           	psect	bssBANK1
   936  000100                     __pbssBANK1:
   937                           	callstack 0
   938  000100                     floorf@F527:
   939                           	callstack 0
   940  000100                     	ds	4
   941  000104                     _t_res:
   942                           	callstack 0
   943  000104                     	ds	4
   944  000108                     _coef:
   945                           	callstack 0
   946  000108                     	ds	4
   947  00010C                     _sqrtU_sum:
   948                           	callstack 0
   949  00010C                     	ds	4
   950  000110                     _U_summ:
   951                           	callstack 0
   952  000110                     	ds	4
   953  000114                     _nout:
   954                           	callstack 0
   955  000114                     	ds	2
   956  000116                     _EncData:
   957                           	callstack 0
   958  000116                     	ds	2
   959  000118                     _watt_disp:
   960                           	callstack 0
   961  000118                     	ds	2
   962  00011A                     _cnt_adc:
   963                           	callstack 0
   964  00011A                     	ds	2
   965  00011C                     _sel_main:
   966                           	callstack 0
   967  00011C                     	ds	1
   968  00011D                     _r_dec:
   969                           	callstack 0
   970  00011D                     	ds	1
   971  00011E                     _r_whole:
   972                           	callstack 0
   973  00011E                     	ds	1
   974  00011F                     _count_enc:
   975                           	callstack 0
   976  00011F                     	ds	1
   977  000120                     _power:
   978                           	callstack 0
   979  000120                     	ds	1
   980  000121                     _pressed_key:
   981                           	callstack 0
   982  000121                     	ds	1
   983  000122                     _read_key:
   984                           	callstack 0
   985  000122                     	ds	1
   986  000123                     _tick_t1_1:
   987                           	callstack 0
   988  000123                     	ds	1
   989  000124                     _tick_t1:
   990                           	callstack 0
   991  000124                     	ds	1
   992  000125                     _dbuf:
   993                           	callstack 0
   994  000125                     	ds	80
   995  000175                     _TxtBuf:
   996                           	callstack 0
   997  000175                     	ds	21
   998  00018A                     _U_real:
   999                           	callstack 0
  1000  00018A                     	ds	2
  1001                           
  1002                           	psect	dataBANK1
  1003  0001D6                     __pdataBANK1:
  1004                           	callstack 0
  1005  0001D6                     stoa@F1160:
  1006                           	callstack 0
  1007  0001D6                     	ds	7
  1008                           
  1009                           	psect	cstackBANK1
  1010  00018C                     __pcstackBANK1:
  1011                           	callstack 0
  1012  00018C                     _efgtoa$2020:
  1013                           	callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x0
  1016  00018C                     	ds	2
  1017  00018E                     _efgtoa$2021:
  1018                           	callstack 0
  1019                           
  1020                           ; 2 bytes @ 0x2
  1021  00018E                     	ds	2
  1022  000190                     _efgtoa$2026:
  1023                           	callstack 0
  1024                           
  1025                           ; 2 bytes @ 0x4
  1026  000190                     	ds	2
  1027  000192                     _efgtoa$2030:
  1028                           	callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x6
  1031  000192                     	ds	2
  1032  000194                     _efgtoa$2031:
  1033                           	callstack 0
  1034                           
  1035                           ; 2 bytes @ 0x8
  1036  000194                     	ds	2
  1037  000196                     _efgtoa$2032:
  1038                           	callstack 0
  1039                           
  1040                           ; 2 bytes @ 0xA
  1041  000196                     	ds	2
  1042  000198                     efgtoa@t:
  1043                           	callstack 0
  1044                           
  1045                           ; 2 bytes @ 0xC
  1046  000198                     	ds	2
  1047  00019A                     efgtoa@pp:
  1048                           	callstack 0
  1049                           
  1050                           ; 2 bytes @ 0xE
  1051  00019A                     	ds	2
  1052  00019C                     efgtoa@ne:
  1053                           	callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x10
  1056  00019C                     	ds	2
  1057  00019E                     efgtoa@m:
  1058                           	callstack 0
  1059                           
  1060                           ; 2 bytes @ 0x12
  1061  00019E                     	ds	2
  1062  0001A0                     efgtoa@ou:
  1063                           	callstack 0
  1064                           
  1065                           ; 4 bytes @ 0x14
  1066  0001A0                     	ds	4
  1067  0001A4                     efgtoa@d:
  1068                           	callstack 0
  1069                           
  1070                           ; 2 bytes @ 0x18
  1071  0001A4                     	ds	2
  1072  0001A6                     efgtoa@sign:
  1073                           	callstack 0
  1074                           
  1075                           ; 2 bytes @ 0x1A
  1076  0001A6                     	ds	2
  1077  0001A8                     efgtoa@p:
  1078                           	callstack 0
  1079                           
  1080                           ; 2 bytes @ 0x1C
  1081  0001A8                     	ds	2
  1082  0001AA                     efgtoa@nmode:
  1083                           	callstack 0
  1084                           
  1085                           ; 1 bytes @ 0x1E
  1086  0001AA                     	ds	1
  1087  0001AB                     efgtoa@w:
  1088                           	callstack 0
  1089                           
  1090                           ; 2 bytes @ 0x1F
  1091  0001AB                     	ds	2
  1092  0001AD                     efgtoa@mode:
  1093                           	callstack 0
  1094                           
  1095                           ; 1 bytes @ 0x21
  1096  0001AD                     	ds	1
  1097  0001AE                     efgtoa@h:
  1098                           	callstack 0
  1099                           
  1100                           ; 4 bytes @ 0x22
  1101  0001AE                     	ds	4
  1102  0001B2                     efgtoa@l:
  1103                           	callstack 0
  1104                           
  1105                           ; 4 bytes @ 0x26
  1106  0001B2                     	ds	4
  1107  0001B6                     efgtoa@g:
  1108                           	callstack 0
  1109                           
  1110                           ; 4 bytes @ 0x2A
  1111  0001B6                     	ds	4
  1112  0001BA                     efgtoa@i:
  1113                           	callstack 0
  1114                           
  1115                           ; 2 bytes @ 0x2E
  1116  0001BA                     	ds	2
  1117  0001BC                     efgtoa@e:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x30
  1121  0001BC                     	ds	2
  1122  0001BE                     efgtoa@n:
  1123                           	callstack 0
  1124                           
  1125                           ; 2 bytes @ 0x32
  1126  0001BE                     	ds	2
  1127  0001C0                     efgtoa@u:
  1128                           	callstack 0
  1129                           
  1130                           ; 4 bytes @ 0x34
  1131  0001C0                     	ds	4
  1132  0001C4                     ?_sprintf:
  1133                           	callstack 0
  1134  0001C4                     sprintf@s:
  1135                           	callstack 0
  1136                           
  1137                           ; 2 bytes @ 0x38
  1138  0001C4                     	ds	2
  1139  0001C6                     sprintf@fmt:
  1140                           	callstack 0
  1141                           
  1142                           ; 2 bytes @ 0x3A
  1143  0001C6                     	ds	12
  1144  0001D2                     _main$2467:
  1145                           	callstack 0
  1146                           
  1147                           ; 4 bytes @ 0x46
  1148  0001D2                     	ds	4
  1149                           
  1150                           	psect	cstackBANK0
  1151  000060                     __pcstackBANK0:
  1152                           	callstack 0
  1153  000060                     ??_atoi:
  1154  000060                     ??_lcdPrint:
  1155  000060                     ?___lwdiv:
  1156                           	callstack 0
  1157  000060                     ?_stoa:
  1158                           	callstack 0
  1159  000060                     ?___lodiv:
  1160                           	callstack 0
  1161  000060                     ?___lomod:
  1162                           	callstack 0
  1163  000060                     ___xxtofl@sign:
  1164                           	callstack 0
  1165  000060                     stoa@fp:
  1166                           	callstack 0
  1167  000060                     ___lwdiv@dividend:
  1168                           	callstack 0
  1169  000060                     ctoa@l:
  1170                           	callstack 0
  1171  000060                     ___fpclassifyf@e:
  1172                           	callstack 0
  1173  000060                     fputs@s:
  1174                           	callstack 0
  1175  000060                     _tolower$2230:
  1176                           	callstack 0
  1177  000060                     ___lodiv@dividend:
  1178                           	callstack 0
  1179  000060                     ___lomod@dividend:
  1180                           	callstack 0
  1181                           
  1182                           ; 8 bytes @ 0x0
  1183  000060                     	ds	1
  1184  000061                     ___xxtofl@exp:
  1185                           	callstack 0
  1186  000061                     stoa@s:
  1187                           	callstack 0
  1188                           
  1189                           ; 2 bytes @ 0x1
  1190  000061                     	ds	1
  1191  000062                     fputs@fp:
  1192                           	callstack 0
  1193  000062                     ___lwdiv@divisor:
  1194                           	callstack 0
  1195  000062                     ctoa@w:
  1196                           	callstack 0
  1197  000062                     ___xxtofl@arg:
  1198                           	callstack 0
  1199  000062                     ___fpclassifyf@u:
  1200                           	callstack 0
  1201                           
  1202                           ; 4 bytes @ 0x2
  1203  000062                     	ds	1
  1204  000063                     ?_pad:
  1205                           	callstack 0
  1206  000063                     pad@fp:
  1207                           	callstack 0
  1208  000063                     stoa@nuls:
  1209                           	callstack 0
  1210                           
  1211                           ; 7 bytes @ 0x3
  1212  000063                     	ds	1
  1213  000064                     ___lwdiv@counter:
  1214                           	callstack 0
  1215  000064                     pad@buf:
  1216                           	callstack 0
  1217  000064                     atoi@neg:
  1218                           	callstack 0
  1219                           
  1220                           ; 2 bytes @ 0x4
  1221  000064                     	ds	1
  1222  000065                     ___lwdiv@quotient:
  1223                           	callstack 0
  1224                           
  1225                           ; 2 bytes @ 0x5
  1226  000065                     	ds	1
  1227  000066                     ?___fldiv:
  1228                           	callstack 0
  1229  000066                     ?___flmul:
  1230                           	callstack 0
  1231  000066                     pad@p:
  1232                           	callstack 0
  1233  000066                     _atoi$2105:
  1234                           	callstack 0
  1235  000066                     ___fldiv@b:
  1236                           	callstack 0
  1237  000066                     ___flmul@b:
  1238                           	callstack 0
  1239                           
  1240                           ; 4 bytes @ 0x6
  1241  000066                     	ds	1
  1242  000067                     ?_calc_power:
  1243                           	callstack 0
  1244  000067                     calc_power@res:
  1245                           	callstack 0
  1246                           
  1247                           ; 4 bytes @ 0x7
  1248  000067                     	ds	1
  1249  000068                     pad@i:
  1250                           	callstack 0
  1251  000068                     _atoi$2107:
  1252                           	callstack 0
  1253  000068                     ___lodiv@divisor:
  1254                           	callstack 0
  1255  000068                     ___lomod@divisor:
  1256                           	callstack 0
  1257                           
  1258                           ; 8 bytes @ 0x8
  1259  000068                     	ds	2
  1260  00006A                     _atoi$2106:
  1261                           	callstack 0
  1262  00006A                     pad@w:
  1263                           	callstack 0
  1264  00006A                     stoa@i:
  1265                           	callstack 0
  1266  00006A                     ___fldiv@a:
  1267                           	callstack 0
  1268  00006A                     ___flmul@a:
  1269                           	callstack 0
  1270                           
  1271                           ; 4 bytes @ 0xA
  1272  00006A                     	ds	1
  1273  00006B                     calc_power@u_rl:
  1274                           	callstack 0
  1275  00006B                     atoi@n:
  1276                           	callstack 0
  1277                           
  1278                           ; 2 bytes @ 0xB
  1279  00006B                     	ds	1
  1280  00006C                     stoa@w:
  1281                           	callstack 0
  1282                           
  1283                           ; 2 bytes @ 0xC
  1284  00006C                     	ds	1
  1285  00006D                     ??_calc_power:
  1286                           
  1287                           ; 1 bytes @ 0xD
  1288  00006D                     	ds	1
  1289  00006E                     ___flmul@sign:
  1290                           	callstack 0
  1291  00006E                     stoa@cp:
  1292                           	callstack 0
  1293  00006E                     ___fldiv@rem:
  1294                           	callstack 0
  1295                           
  1296                           ; 4 bytes @ 0xE
  1297  00006E                     	ds	1
  1298  00006F                     ___flmul@aexp:
  1299                           	callstack 0
  1300  00006F                     calc_power@tt:
  1301                           	callstack 0
  1302                           
  1303                           ; 4 bytes @ 0xF
  1304  00006F                     	ds	1
  1305  000070                     ?_utoa:
  1306                           	callstack 0
  1307  000070                     ___flmul@bexp:
  1308                           	callstack 0
  1309  000070                     utoa@fp:
  1310                           	callstack 0
  1311  000070                     stoa@p:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x10
  1315  000070                     	ds	1
  1316  000071                     ___flmul@grs:
  1317                           	callstack 0
  1318  000071                     utoa@d:
  1319                           	callstack 0
  1320                           
  1321                           ; 8 bytes @ 0x11
  1322  000071                     	ds	1
  1323  000072                     ___fldiv@sign:
  1324                           	callstack 0
  1325  000072                     stoa@l:
  1326                           	callstack 0
  1327                           
  1328                           ; 2 bytes @ 0x12
  1329  000072                     	ds	1
  1330  000073                     ___fldiv@new_exp:
  1331                           	callstack 0
  1332  000073                     _calc_power$2468:
  1333                           	callstack 0
  1334                           
  1335                           ; 4 bytes @ 0x13
  1336  000073                     	ds	2
  1337  000075                     ___fldiv@grs:
  1338                           	callstack 0
  1339  000075                     ___flmul@prod:
  1340                           	callstack 0
  1341                           
  1342                           ; 4 bytes @ 0x15
  1343  000075                     	ds	2
  1344  000077                     _calc_power$2469:
  1345                           	callstack 0
  1346                           
  1347                           ; 2 bytes @ 0x17
  1348  000077                     	ds	2
  1349  000079                     ??_utoa:
  1350  000079                     calc_power@pwr:
  1351                           	callstack 0
  1352  000079                     ___fldiv@bexp:
  1353                           	callstack 0
  1354  000079                     ___flmul@temp:
  1355                           	callstack 0
  1356                           
  1357                           ; 2 bytes @ 0x19
  1358  000079                     	ds	1
  1359  00007A                     ___fldiv@aexp:
  1360                           	callstack 0
  1361  00007A                     calc_power@p_w:
  1362                           	callstack 0
  1363                           
  1364                           ; 2 bytes @ 0x1A
  1365  00007A                     	ds	1
  1366  00007B                     ?___fladd:
  1367                           	callstack 0
  1368  00007B                     ?_floorf:
  1369                           	callstack 0
  1370  00007B                     ___flge@ff1:
  1371                           	callstack 0
  1372  00007B                     ___fladd@b:
  1373                           	callstack 0
  1374  00007B                     floorf@x:
  1375                           	callstack 0
  1376                           
  1377                           ; 4 bytes @ 0x1B
  1378  00007B                     	ds	4
  1379  00007F                     ??_floorf:
  1380  00007F                     ___flge@ff2:
  1381                           	callstack 0
  1382  00007F                     ___fladd@a:
  1383                           	callstack 0
  1384                           
  1385                           ; 4 bytes @ 0x1F
  1386  00007F                     	ds	2
  1387  000081                     utoa@p:
  1388                           	callstack 0
  1389                           
  1390                           ; 2 bytes @ 0x21
  1391  000081                     	ds	2
  1392  000083                     ??___fladd:
  1393  000083                     ??___flge:
  1394  000083                     utoa@w:
  1395                           	callstack 0
  1396                           
  1397                           ; 2 bytes @ 0x23
  1398  000083                     	ds	2
  1399  000085                     floorf@m:
  1400                           	callstack 0
  1401  000085                     utoa@n:
  1402                           	callstack 0
  1403                           
  1404                           ; 8 bytes @ 0x25
  1405  000085                     	ds	2
  1406  000087                     ___fladd@signs:
  1407                           	callstack 0
  1408                           
  1409                           ; 1 bytes @ 0x27
  1410  000087                     	ds	1
  1411  000088                     ___fladd@aexp:
  1412                           	callstack 0
  1413                           
  1414                           ; 1 bytes @ 0x28
  1415  000088                     	ds	1
  1416  000089                     ___fladd@bexp:
  1417                           	callstack 0
  1418  000089                     floorf@e:
  1419                           	callstack 0
  1420                           
  1421                           ; 2 bytes @ 0x29
  1422  000089                     	ds	1
  1423  00008A                     ___fladd@grs:
  1424                           	callstack 0
  1425                           
  1426                           ; 1 bytes @ 0x2A
  1427  00008A                     	ds	1
  1428  00008B                     ?_sqrtf:
  1429                           	callstack 0
  1430  00008B                     ?___flsub:
  1431                           	callstack 0
  1432  00008B                     ___flsub@b:
  1433                           	callstack 0
  1434  00008B                     floorf@u:
  1435                           	callstack 0
  1436  00008B                     sqrtf@x:
  1437                           	callstack 0
  1438                           
  1439                           ; 4 bytes @ 0x2B
  1440  00008B                     	ds	2
  1441  00008D                     utoa@i:
  1442                           	callstack 0
  1443                           
  1444                           ; 2 bytes @ 0x2D
  1445  00008D                     	ds	2
  1446  00008F                     ??_sqrtf:
  1447  00008F                     ___flsub@a:
  1448                           	callstack 0
  1449                           
  1450                           ; 4 bytes @ 0x2F
  1451  00008F                     	ds	5
  1452  000094                     sqrtf@s:
  1453                           	callstack 0
  1454                           
  1455                           ; 4 bytes @ 0x34
  1456  000094                     	ds	4
  1457  000098                     sqrtf@i:
  1458                           	callstack 0
  1459                           
  1460                           ; 4 bytes @ 0x38
  1461  000098                     	ds	4
  1462  00009C                     sqrtf@__xc8_float_word:
  1463                           	callstack 0
  1464                           
  1465                           ; 4 bytes @ 0x3C
  1466  00009C                     	ds	4
  1467  0000A0                     sqrtf@q:
  1468                           	callstack 0
  1469                           
  1470                           ; 4 bytes @ 0x40
  1471  0000A0                     	ds	4
  1472  0000A4                     sqrtf@t:
  1473                           	callstack 0
  1474                           
  1475                           ; 4 bytes @ 0x44
  1476  0000A4                     	ds	4
  1477  0000A8                     sqrtf@z:
  1478                           	callstack 0
  1479                           
  1480                           ; 4 bytes @ 0x48
  1481  0000A8                     	ds	4
  1482  0000AC                     sqrtf@m:
  1483                           	callstack 0
  1484                           
  1485                           ; 4 bytes @ 0x4C
  1486  0000AC                     	ds	4
  1487  0000B0                     sqrtf@r:
  1488                           	callstack 0
  1489                           
  1490                           ; 4 bytes @ 0x50
  1491  0000B0                     	ds	4
  1492  0000B4                     sqrtf@ix:
  1493                           	callstack 0
  1494                           
  1495                           ; 4 bytes @ 0x54
  1496  0000B4                     	ds	4
  1497  0000B8                     ?___fltol:
  1498                           	callstack 0
  1499  0000B8                     ___fltol@f1:
  1500                           	callstack 0
  1501                           
  1502                           ; 4 bytes @ 0x58
  1503  0000B8                     	ds	4
  1504  0000BC                     ??___fltol:
  1505                           
  1506                           ; 1 bytes @ 0x5C
  1507  0000BC                     	ds	4
  1508  0000C0                     ___fltol@sign1:
  1509                           	callstack 0
  1510                           
  1511                           ; 1 bytes @ 0x60
  1512  0000C0                     	ds	1
  1513  0000C1                     ___fltol@exp1:
  1514                           	callstack 0
  1515                           
  1516                           ; 1 bytes @ 0x61
  1517  0000C1                     	ds	1
  1518  0000C2                     ?_efgtoa:
  1519                           	callstack 0
  1520  0000C2                     efgtoa@fp:
  1521                           	callstack 0
  1522                           
  1523                           ; 1 bytes @ 0x62
  1524  0000C2                     	ds	1
  1525  0000C3                     efgtoa@f:
  1526                           	callstack 0
  1527                           
  1528                           ; 4 bytes @ 0x63
  1529  0000C3                     	ds	4
  1530  0000C7                     efgtoa@c:
  1531                           	callstack 0
  1532                           
  1533                           ; 1 bytes @ 0x67
  1534  0000C7                     	ds	1
  1535  0000C8                     ??_efgtoa:
  1536                           
  1537                           ; 1 bytes @ 0x68
  1538  0000C8                     	ds	5
  1539  0000CD                     ?_vfpfcnvrt:
  1540                           	callstack 0
  1541  0000CD                     vfpfcnvrt@fp:
  1542                           	callstack 0
  1543                           
  1544                           ; 1 bytes @ 0x6D
  1545  0000CD                     	ds	1
  1546  0000CE                     vfpfcnvrt@fmt:
  1547                           	callstack 0
  1548                           
  1549                           ; 1 bytes @ 0x6E
  1550  0000CE                     	ds	1
  1551  0000CF                     vfpfcnvrt@ap:
  1552                           	callstack 0
  1553                           
  1554                           ; 1 bytes @ 0x6F
  1555  0000CF                     	ds	1
  1556  0000D0                     ??_vfpfcnvrt:
  1557                           
  1558                           ; 1 bytes @ 0x70
  1559  0000D0                     	ds	4
  1560  0000D4                     vfpfcnvrt@llu:
  1561                           	callstack 0
  1562                           
  1563                           ; 8 bytes @ 0x74
  1564  0000D4                     	ds	8
  1565  0000DC                     vfpfcnvrt@cp:
  1566                           	callstack 0
  1567                           
  1568                           ; 2 bytes @ 0x7C
  1569  0000DC                     	ds	2
  1570  0000DE                     vfpfcnvrt@done:
  1571                           	callstack 0
  1572                           
  1573                           ; 2 bytes @ 0x7E
  1574  0000DE                     	ds	2
  1575  0000E0                     _vfpfcnvrt$2064:
  1576                           	callstack 0
  1577                           
  1578                           ; 2 bytes @ 0x80
  1579  0000E0                     	ds	2
  1580  0000E2                     _vfpfcnvrt$2069:
  1581                           	callstack 0
  1582                           
  1583                           ; 2 bytes @ 0x82
  1584  0000E2                     	ds	2
  1585  0000E4                     vfpfcnvrt@f:
  1586                           	callstack 0
  1587                           
  1588                           ; 4 bytes @ 0x84
  1589  0000E4                     	ds	4
  1590  0000E8                     vfpfcnvrt@ct:
  1591                           	callstack 0
  1592                           
  1593                           ; 3 bytes @ 0x88
  1594  0000E8                     	ds	3
  1595  0000EB                     vfpfcnvrt@c:
  1596                           	callstack 0
  1597                           
  1598                           ; 1 bytes @ 0x8B
  1599  0000EB                     	ds	1
  1600  0000EC                     ?_vfprintf:
  1601                           	callstack 0
  1602  0000EC                     vfprintf@fp:
  1603                           	callstack 0
  1604                           
  1605                           ; 1 bytes @ 0x8C
  1606  0000EC                     	ds	1
  1607  0000ED                     vfprintf@fmt:
  1608                           	callstack 0
  1609                           
  1610                           ; 2 bytes @ 0x8D
  1611  0000ED                     	ds	2
  1612  0000EF                     vfprintf@ap:
  1613                           	callstack 0
  1614                           
  1615                           ; 1 bytes @ 0x8F
  1616  0000EF                     	ds	1
  1617  0000F0                     vfprintf@cfmt:
  1618                           	callstack 0
  1619                           
  1620                           ; 2 bytes @ 0x90
  1621  0000F0                     	ds	2
  1622  0000F2                     sprintf@ap:
  1623                           	callstack 0
  1624                           
  1625                           ; 2 bytes @ 0x92
  1626  0000F2                     	ds	2
  1627  0000F4                     sprintf@f:
  1628                           	callstack 0
  1629                           
  1630                           ; 6 bytes @ 0x94
  1631  0000F4                     	ds	6
  1632  0000FA                     show_lcd_main@pwr_dsp:
  1633                           	callstack 0
  1634                           
  1635                           ; 2 bytes @ 0x9A
  1636  0000FA                     	ds	2
  1637  0000FC                     ??_main:
  1638                           
  1639                           ; 1 bytes @ 0x9C
  1640  0000FC                     	ds	4
  1641                           
  1642                           	psect	cstackCOMRAM
  1643  000001                     __pcstackCOMRAM:
  1644                           	callstack 0
  1645  000001                     ?i2___wmul:
  1646                           	callstack 0
  1647  000001                     ?i2___lmul:
  1648                           	callstack 0
  1649  000001                     i2___wmul@multiplier:
  1650                           	callstack 0
  1651  000001                     i2___lmul@multiplier:
  1652                           	callstack 0
  1653                           
  1654                           ; 4 bytes @ 0x0
  1655  000001                     	ds	2
  1656  000003                     i2___wmul@multiplicand:
  1657                           	callstack 0
  1658                           
  1659                           ; 2 bytes @ 0x2
  1660  000003                     	ds	2
  1661  000005                     i2___wmul@product:
  1662                           	callstack 0
  1663  000005                     i2___lmul@multiplicand:
  1664                           	callstack 0
  1665                           
  1666                           ; 4 bytes @ 0x4
  1667  000005                     	ds	4
  1668  000009                     i2___lmul@product:
  1669                           	callstack 0
  1670                           
  1671                           ; 4 bytes @ 0x8
  1672  000009                     	ds	4
  1673  00000D                     ??_Inter_hi:
  1674                           
  1675                           ; 1 bytes @ 0xC
  1676  00000D                     	ds	4
  1677  000011                     _Inter_hi$2484:
  1678                           	callstack 0
  1679                           
  1680                           ; 2 bytes @ 0x10
  1681  000011                     	ds	2
  1682  000013                     Inter_hi@lev:
  1683                           	callstack 0
  1684                           
  1685                           ; 2 bytes @ 0x12
  1686  000013                     	ds	2
  1687  000015                     Inter_hi@pulse:
  1688                           	callstack 0
  1689                           
  1690                           ; 2 bytes @ 0x14
  1691  000015                     	ds	2
  1692  000017                     ??_Inter_lo:
  1693                           
  1694                           ; 1 bytes @ 0x16
  1695  000017                     	ds	3
  1696  00001A                     ??_lcdNibble:
  1697  00001A                     ?_strlen:
  1698                           	callstack 0
  1699  00001A                     ?___fpclassifyf:
  1700                           	callstack 0
  1701  00001A                     ?_isupper:
  1702                           	callstack 0
  1703  00001A                     ?_isdigit:
  1704                           	callstack 0
  1705  00001A                     ?_strncmp:
  1706                           	callstack 0
  1707  00001A                     ?_isspace:
  1708                           	callstack 0
  1709  00001A                     ?___awdiv:
  1710                           	callstack 0
  1711  00001A                     ?___awmod:
  1712                           	callstack 0
  1713  00001A                     ?___lwmod:
  1714                           	callstack 0
  1715  00001A                     ?_nanf:
  1716                           	callstack 0
  1717  00001A                     ?___lmul:
  1718                           	callstack 0
  1719  00001A                     ?___lldiv:
  1720                           	callstack 0
  1721  00001A                     ?___flneg:
  1722                           	callstack 0
  1723  00001A                     ?___xxtofl:
  1724                           	callstack 0
  1725  00001A                     write_eep@data:
  1726                           	callstack 0
  1727  00001A                     putch@data:
  1728                           	callstack 0
  1729  00001A                     key_press@key:
  1730                           	callstack 0
  1731  00001A                     key_GetKey@key:
  1732                           	callstack 0
  1733  00001A                     ___lomod@counter:
  1734                           	callstack 0
  1735  00001A                     strncmp@_l:
  1736                           	callstack 0
  1737  00001A                     read_eep@address:
  1738                           	callstack 0
  1739  00001A                     ___awdiv@dividend:
  1740                           	callstack 0
  1741  00001A                     ___awmod@dividend:
  1742                           	callstack 0
  1743  00001A                     ___lwmod@dividend:
  1744                           	callstack 0
  1745  00001A                     isdigit@c:
  1746                           	callstack 0
  1747  00001A                     isspace@c:
  1748                           	callstack 0
  1749  00001A                     isupper@c:
  1750                           	callstack 0
  1751  00001A                     nanf@s:
  1752                           	callstack 0
  1753  00001A                     strcpy@dest:
  1754                           	callstack 0
  1755  00001A                     strlen@s:
  1756                           	callstack 0
  1757  00001A                     ___lmul@multiplier:
  1758                           	callstack 0
  1759  00001A                     ___lldiv@dividend:
  1760                           	callstack 0
  1761  00001A                     ___fleq@ff1:
  1762                           	callstack 0
  1763  00001A                     ___flneg@f1:
  1764                           	callstack 0
  1765  00001A                     ___xxtofl@val:
  1766                           	callstack 0
  1767  00001A                     ___fpclassifyf@x:
  1768                           	callstack 0
  1769  00001A                     ___lodiv@quotient:
  1770                           	callstack 0
  1771                           
  1772                           ; 8 bytes @ 0x19
  1773  00001A                     	ds	1
  1774  00001B                     write_eep@address:
  1775                           	callstack 0
  1776  00001B                     lcdNibble@nibble:
  1777                           	callstack 0
  1778  00001B                     fputc@c:
  1779                           	callstack 0
  1780  00001B                     strncmp@_r:
  1781                           	callstack 0
  1782                           
  1783                           ; 2 bytes @ 0x1A
  1784  00001B                     	ds	1
  1785  00001C                     ??_isupper:
  1786  00001C                     ??_isdigit:
  1787  00001C                     ??_isspace:
  1788  00001C                     lcdWrite@type:
  1789                           	callstack 0
  1790  00001C                     ___awdiv@divisor:
  1791                           	callstack 0
  1792  00001C                     ___awmod@divisor:
  1793                           	callstack 0
  1794  00001C                     ___lwmod@divisor:
  1795                           	callstack 0
  1796  00001C                     strcpy@src:
  1797                           	callstack 0
  1798  00001C                     strlen@a:
  1799                           	callstack 0
  1800                           
  1801                           ; 2 bytes @ 0x1B
  1802  00001C                     	ds	1
  1803  00001D                     lcdWrite@byte:
  1804                           	callstack 0
  1805  00001D                     fputc@fp:
  1806                           	callstack 0
  1807  00001D                     strncmp@n:
  1808                           	callstack 0
  1809                           
  1810                           ; 2 bytes @ 0x1C
  1811  00001D                     	ds	1
  1812  00001E                     ??_clearLCD:
  1813  00001E                     ??_fputc:
  1814  00001E                     ??___fpclassifyf:
  1815  00001E                     ??_strcpy:
  1816  00001E                     ??___xxtofl:
  1817  00001E                     lcd_gotoxy@y:
  1818                           	callstack 0
  1819  00001E                     lcd_putc@c:
  1820                           	callstack 0
  1821  00001E                     ___awdiv@counter:
  1822                           	callstack 0
  1823  00001E                     ___awmod@counter:
  1824                           	callstack 0
  1825  00001E                     ___lwmod@counter:
  1826                           	callstack 0
  1827  00001E                     cgrom_char@symbol:
  1828                           	callstack 0
  1829  00001E                     ___lmul@multiplicand:
  1830                           	callstack 0
  1831  00001E                     ___lldiv@divisor:
  1832                           	callstack 0
  1833  00001E                     ___fleq@ff2:
  1834                           	callstack 0
  1835  00001E                     nanf@u:
  1836                           	callstack 0
  1837                           
  1838                           ; 4 bytes @ 0x1D
  1839  00001E                     	ds	1
  1840  00001F                     ??_strncmp:
  1841  00001F                     ??_initLCD:
  1842  00001F                     ??_lcd_gotoxy:
  1843  00001F                     ?___wmul:
  1844                           	callstack 0
  1845  00001F                     ___awdiv@sign:
  1846                           	callstack 0
  1847  00001F                     ___awmod@sign:
  1848                           	callstack 0
  1849  00001F                     ___wmul@multiplier:
  1850                           	callstack 0
  1851                           
  1852                           ; 2 bytes @ 0x1E
  1853  00001F                     	ds	1
  1854  000020                     ?_tolower:
  1855                           	callstack 0
  1856  000020                     cgrom_char@address:
  1857                           	callstack 0
  1858  000020                     _isspace$2136:
  1859                           	callstack 0
  1860  000020                     ___awdiv@quotient:
  1861                           	callstack 0
  1862  000020                     strcpy@s:
  1863                           	callstack 0
  1864  000020                     strncmp@r:
  1865                           	callstack 0
  1866  000020                     tolower@c:
  1867                           	callstack 0
  1868                           
  1869                           ; 2 bytes @ 0x1F
  1870  000020                     	ds	1
  1871  000021                     lcd_gotoxy@x:
  1872                           	callstack 0
  1873  000021                     cgrom_char@i:
  1874                           	callstack 0
  1875  000021                     ___wmul@multiplicand:
  1876                           	callstack 0
  1877                           
  1878                           ; 2 bytes @ 0x20
  1879  000021                     	ds	1
  1880  000022                     ??_init_cpu:
  1881  000022                     ??___fldiv:
  1882  000022                     ??___flmul:
  1883  000022                     ??_tolower:
  1884  000022                     ??___fleq:
  1885  000022                     lcd_gotoxy@address:
  1886                           	callstack 0
  1887  000022                     ___lodiv@counter:
  1888                           	callstack 0
  1889  000022                     strncmp@l:
  1890                           	callstack 0
  1891  000022                     strcpy@d:
  1892                           	callstack 0
  1893  000022                     ___lmul@product:
  1894                           	callstack 0
  1895  000022                     ___lldiv@quotient:
  1896                           	callstack 0
  1897                           
  1898                           ; 4 bytes @ 0x21
  1899  000022                     	ds	1
  1900  000023                     ??_stoa:
  1901  000023                     ?_ctoa:
  1902                           	callstack 0
  1903  000023                     ctoa@fp:
  1904                           	callstack 0
  1905  000023                     fputs@c:
  1906                           	callstack 0
  1907  000023                     lcdPrint@t:
  1908                           	callstack 0
  1909  000023                     ___wmul@product:
  1910                           	callstack 0
  1911                           
  1912                           ; 2 bytes @ 0x22
  1913  000023                     	ds	1
  1914  000024                     ctoa@c:
  1915                           	callstack 0
  1916  000024                     fputs@i:
  1917                           	callstack 0
  1918                           
  1919                           ; 2 bytes @ 0x23
  1920  000024                     	ds	1
  1921  000025                     ??_ctoa:
  1922  000025                     ?_atoi:
  1923                           	callstack 0
  1924  000025                     atoi@s:
  1925                           	callstack 0
  1926                           
  1927                           ; 2 bytes @ 0x24
  1928  000025                     	ds	1
  1929  000026                     ??_pad:
  1930  000026                     ___lldiv@counter:
  1931                           	callstack 0
  1932                           
  1933                           ; 1 bytes @ 0x25
  1934  000026                     	ds	1
  1935  000027                     
  1936                           ; 1 bytes @ 0x26
  1937 ;;
  1938 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1939 ;;
  1940 ;; *************** function _main *****************
  1941 ;; Defined at:
  1942 ;;		line 70 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 3F/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1956 ;;      Params:         0       0       0       0       0       0       0
  1957 ;;      Locals:         0       0       4       0       0       0       0
  1958 ;;      Temps:          0       4       0       0       0       0       0
  1959 ;;      Totals:         0       4       4       0       0       0       0
  1960 ;;Total ram usage:        8 bytes
  1961 ;; Hardware stack levels required when called: 12
  1962 ;; This function calls:
  1963 ;;		_EncPoll
  1964 ;;		___fladd
  1965 ;;		___fldiv
  1966 ;;		___flmul
  1967 ;;		___fltol
  1968 ;;		___lldiv
  1969 ;;		___lmul
  1970 ;;		___xxtofl
  1971 ;;		_calc_power
  1972 ;;		_clearLCD
  1973 ;;		_init_cpu
  1974 ;;		_key_GetKey
  1975 ;;		_key_press
  1976 ;;		_lcdPrint
  1977 ;;		_lcd_gotoxy
  1978 ;;		_lcd_putc
  1979 ;;		_read_eep
  1980 ;;		_show_lcd_main
  1981 ;;		_sprintf
  1982 ;;		_sqrtf
  1983 ;;		_write_eep
  1984 ;; This function is called by:
  1985 ;;		Startup code after reset
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text0
  1990  0007E6                     __ptext0:
  1991                           	callstack 0
  1992  0007E6                     _main:
  1993                           	callstack 19
  1994                           
  1995                           ;main.c: 72:     static __bit whole_dec = 0;;main.c: 77:     init_cpu();
  1996                           
  1997                           ;incstack = 0
  1998  0007E6  EC1C  F012         	call	_init_cpu	;wreg free
  1999                           
  2000                           ;main.c: 78:     EncData = power;
  2001  0007EA  DB46               	call	PL106	;call to abstracted procedure
  2002                           
  2003                           ; BSR set to: 1
  2004                           ;main.c: 79:     _delay((unsigned long)((10)*(64000000/4000.0)));
  2005  0007EC  0ED0               	movlw	208
  2006  0007EE  0100               	movlb	0	; () banked
  2007  0007F0  6FFC               	movwf	??_main& (0+255),b
  2008  0007F2  0EC9               	movlw	201
  2009  0007F4                     u14317:
  2010  0007F4  2EE8               	decfsz	wreg,f,c
  2011  0007F6  D7FE               	bra	u14317
  2012  0007F8  2FFC               	decfsz	??_main& (0+255),f,b
  2013  0007FA  D7FC               	bra	u14317
  2014  0007FC  F000 F000          	nop2	
  2015                           
  2016                           ;main.c: 82:     lcd_gotoxy(1, 1);
  2017  000800  0E01               	movlw	1
  2018  000802  6E1E               	movwf	lcd_gotoxy@y^0,c
  2019  000804  EC9D  F019         	call	_lcd_gotoxy
  2020                           
  2021                           ;main.c: 83:     lcdPrint("---BRESENHAM STAB---");
  2022  000808  0E11               	movlw	low STR_1
  2023  00080A  6E23               	movwf	lcdPrint@t^0,c
  2024  00080C  0E7F               	movlw	high STR_1
  2025  00080E  6E24               	movwf	(lcdPrint@t+1)^0,c
  2026  000810  ECB1  F013         	call	_lcdPrint	;wreg free
  2027                           
  2028                           ;main.c: 84:     lcd_gotoxy(1, 2);
  2029  000814  DB40               	call	PL126	;call to abstracted procedure
  2030  000816  EC9D  F019         	call	_lcd_gotoxy
  2031                           
  2032                           ;main.c: 85:     sprintf(TxtBuf, "(c)Ivan_fd v%s", "31.03.21");
  2033  00081A  ECA4  F00D         	call	PL22	;call to abstracted procedure
  2034  00081E  0E83               	movlw	low STR_2
  2035  000820  6FC6               	movwf	sprintf@fmt& (0+255),b
  2036  000822  0E7F               	movlw	high STR_2
  2037  000824  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  2038  000826  0EDC               	movlw	low STR_3
  2039  000828  6FC8               	movwf	(?_sprintf+4)& (0+255),b
  2040  00082A  0E7F               	movlw	high STR_3
  2041  00082C  6FC9               	movwf	(?_sprintf+5)& (0+255),b
  2042  00082E  EC7A  F019         	call	_sprintf	;wreg free
  2043                           
  2044                           ; BSR set to: 1
  2045                           ;main.c: 86:     lcdPrint(TxtBuf);
  2046  000832  ECAA  F00D         	call	PL40	;call to abstracted procedure
  2047  000836  ECB1  F013         	call	_lcdPrint	;wreg free
  2048                           
  2049                           ;main.c: 87:     lcd_gotoxy(1, 3);
  2050  00083A  DB2A               	call	PL120	;call to abstracted procedure
  2051  00083C  EC9D  F019         	call	_lcd_gotoxy
  2052                           
  2053                           ;main.c: 88:     sprintf(TxtBuf, "%s %s", compile_date, compile_time);
  2054  000840  ECA4  F00D         	call	PL22	;call to abstracted procedure
  2055  000844  0EE5               	movlw	low STR_4
  2056  000846  6FC6               	movwf	sprintf@fmt& (0+255),b
  2057  000848  0E7F               	movlw	high STR_4
  2058  00084A  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  2059  00084C  0E4B               	movlw	low _compile_date
  2060  00084E  6FC8               	movwf	(?_sprintf+4)& (0+255),b
  2061  000850  0E7E               	movlw	high _compile_date
  2062  000852  6FC9               	movwf	(?_sprintf+5)& (0+255),b
  2063  000854  0E57               	movlw	low _compile_time
  2064  000856  6FCA               	movwf	(?_sprintf+6)& (0+255),b
  2065  000858  0E7E               	movlw	high _compile_time
  2066  00085A  6FCB               	movwf	(?_sprintf+7)& (0+255),b
  2067  00085C  EC7A  F019         	call	_sprintf	;wreg free
  2068                           
  2069                           ; BSR set to: 1
  2070                           ;main.c: 89:     lcdPrint(TxtBuf);
  2071  000860  ECAA  F00D         	call	PL40	;call to abstracted procedure
  2072  000864  ECB1  F013         	call	_lcdPrint	;wreg free
  2073                           
  2074                           ;main.c: 92:     _delay((unsigned long)((2000)*(64000000/4000.0)));
  2075  000868  0EA3               	movlw	163
  2076  00086A  0100               	movlb	0	; () banked
  2077  00086C  6FFD               	movwf	(??_main+1)& (0+255),b
  2078  00086E  0E57               	movlw	87
  2079  000870  6FFC               	movwf	??_main& (0+255),b
  2080  000872  0E02               	movlw	2
  2081  000874                     u14327:
  2082  000874  2EE8               	decfsz	wreg,f,c
  2083  000876  D7FE               	bra	u14327
  2084  000878  2FFC               	decfsz	??_main& (0+255),f,b
  2085  00087A  D7FC               	bra	u14327
  2086  00087C  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  2087  00087E  D7FA               	bra	u14327
  2088  000880  F000               	nop	
  2089  000882  0004               	clrwdt		;# 
  2090                           
  2091                           ;main.c: 94:     clearLCD();
  2092  000884  EC35  F01B         	call	_clearLCD	;wreg free
  2093                           
  2094                           ;main.c: 95:     power = read_eep(2);
  2095  000888  6A1B               	clrf	(read_eep@address+1)^0,c
  2096  00088A  0E02               	movlw	2
  2097  00088C  6E1A               	movwf	read_eep@address^0,c
  2098  00088E  EC41  F01B         	call	_read_eep	;wreg free
  2099  000892  0101               	movlb	1	; () banked
  2100  000894  6F20               	movwf	_power& (0+255),b
  2101                           
  2102                           ; BSR set to: 1
  2103                           ;main.c: 96:     EncData = power;
  2104  000896  C120  F116         	movff	_power,_EncData
  2105  00089A  6B17               	clrf	(_EncData+1)& (0+255),b
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 97:     r_whole = read_eep(0);
  2109  00089C  6A1B               	clrf	(read_eep@address+1)^0,c
  2110  00089E  6A1A               	clrf	read_eep@address^0,c
  2111  0008A0  EC41  F01B         	call	_read_eep	;wreg free
  2112  0008A4  0101               	movlb	1	; () banked
  2113  0008A6  6F1E               	movwf	_r_whole& (0+255),b
  2114                           
  2115                           ; BSR set to: 1
  2116                           ;main.c: 98:     r_dec = read_eep(1);
  2117  0008A8  6A1B               	clrf	(read_eep@address+1)^0,c
  2118  0008AA  0E01               	movlw	1
  2119  0008AC  6E1A               	movwf	read_eep@address^0,c
  2120  0008AE  EC41  F01B         	call	_read_eep	;wreg free
  2121  0008B2  0101               	movlb	1	; () banked
  2122  0008B4  6F1D               	movwf	_r_dec& (0+255),b
  2123                           
  2124                           ; BSR set to: 1
  2125                           ;main.c: 99:     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  2126  0008B6  DAA0               	call	PL14	;call to abstracted procedure
  2127  0008B8  EC9C  F018         	call	___lmul	;wreg free
  2128  0008BC  DAB6               	call	PL24	;call to abstracted procedure
  2129  0008BE                     l442:
  2130  0008BE  0004               	clrwdt		;# 
  2131                           
  2132                           ;main.c: 110:         if (read_key) {
  2133  0008C0  0101               	movlb	1	; () banked
  2134  0008C2  5122               	movf	_read_key& (0+255),w,b
  2135  0008C4  E003               	bz	l10749
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;main.c: 111:             key_press();
  2139  0008C6  ECDD  F019         	call	_key_press	;wreg free
  2140                           
  2141                           ; BSR set to: 1
  2142                           ;main.c: 112:             read_key = 0;
  2143  0008CA  6B22               	clrf	_read_key& (0+255),b
  2144  0008CC                     l10749:
  2145                           
  2146                           ; BSR set to: 1
  2147                           ;main.c: 114:         pressed_key = key_GetKey();
  2148  0008CC  EC56  F01B         	call	_key_GetKey	;wreg free
  2149  0008D0  6F21               	movwf	_pressed_key& (0+255),b
  2150                           
  2151                           ; BSR set to: 1
  2152                           ;main.c: 117:         count_enc += EncPoll();
  2153  0008D2  EC82  F01A         	call	_EncPoll	;wreg free
  2154  0008D6  271F               	addwf	_count_enc& (0+255),f,b
  2155                           
  2156                           ; BSR set to: 1
  2157                           ;main.c: 118:         if (((count_enc % 2) == 0) && !(count_enc == 0)) {
  2158  0008D8  B11F               	btfsc	_count_enc& (0+255),0,b
  2159  0008DA  D01B               	goto	l10777
  2160                           
  2161                           ; BSR set to: 1
  2162  0008DC  511F               	movf	_count_enc& (0+255),w,b
  2163  0008DE  E019               	bz	l10777
  2164                           
  2165                           ; BSR set to: 1
  2166                           ;main.c: 119:             if ((count_enc & (1 << (7)))) {
  2167  0008E0  AF1F               	btfss	_count_enc& (0+255),7,b
  2168  0008E2  D00A               	goto	l445
  2169                           
  2170                           ; BSR set to: 1
  2171                           ;main.c: 120:                 if (inc_data)
  2172  0008E4  A244               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2173  0008E6  D004               	goto	l10763
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;main.c: 121:                     EncData -= 10;
  2177  0008E8  0EF6               	movlw	246
  2178  0008EA  2716               	addwf	_EncData& (0+255),f,b
  2179  0008EC  0EFF               	movlw	255
  2180  0008EE  D009               	goto	L1
  2181  0008F0                     l10763:
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;main.c: 123:                     EncData--;
  2185  0008F0  0716               	decf	_EncData& (0+255),f,b
  2186  0008F2  A0D8               	btfss	status,0,c
  2187  0008F4  0717               	decf	(_EncData+1)& (0+255),f,b
  2188  0008F6  D009               	goto	l10769
  2189  0008F8                     l445:
  2190                           
  2191                           ; BSR set to: 1
  2192                           ;main.c: 125:                 if (inc_data)
  2193  0008F8  A244               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2194  0008FA  D005               	goto	l10767
  2195                           
  2196                           ; BSR set to: 1
  2197                           ;main.c: 126:                     EncData += 10;
  2198  0008FC  0E0A               	movlw	10
  2199  0008FE  2716               	addwf	_EncData& (0+255),f,b
  2200  000900  0E00               	movlw	0
  2201  000902                     L1:
  2202  000902  2317               	addwfc	(_EncData+1)& (0+255),f,b
  2203  000904  D002               	goto	l10769
  2204  000906                     l10767:
  2205                           
  2206                           ; BSR set to: 1
  2207                           ;main.c: 128:                     EncData++;
  2208  000906  4B16               	infsnz	_EncData& (0+255),f,b
  2209  000908  2B17               	incf	(_EncData+1)& (0+255),f,b
  2210  00090A                     l10769:
  2211                           
  2212                           ; BSR set to: 1
  2213                           ;main.c: 130:             count_enc = 0;
  2214  00090A  6B1F               	clrf	_count_enc& (0+255),b
  2215                           
  2216                           ; BSR set to: 1
  2217                           ;main.c: 131:             is_power = 0;
  2218  00090C  9844               	bcf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;main.c: 132:             show_tp = 1;
  2222  00090E  8644               	bsf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  2223                           
  2224                           ; BSR set to: 1
  2225                           ;main.c: 133:             tick_t1_1 = 0;
  2226  000910  6B23               	clrf	_tick_t1_1& (0+255),b
  2227  000912                     l10777:
  2228                           
  2229                           ; BSR set to: 1
  2230                           ;main.c: 137:         if (!getU && (zero == 50)) {
  2231  000912  5040               	movf	_getU^0,w,c
  2232  000914  E001 D25B          	bnz	l10999
  2233                           
  2234                           ; BSR set to: 1
  2235  000918  0E32               	movlw	50
  2236  00091A  1841               	xorwf	_zero^0,w,c
  2237  00091C  E001 D257          	bnz	l10999
  2238                           
  2239                           ; BSR set to: 1
  2240                           ;main.c: 140:             sqrtU_sum = U_summ / cnt_adc;
  2241  000920  C110  F01A         	movff	_U_summ,___lldiv@dividend
  2242  000924  C111  F01B         	movff	_U_summ+1,___lldiv@dividend+1
  2243  000928  C112  F01C         	movff	_U_summ+2,___lldiv@dividend+2
  2244  00092C  C113  F01D         	movff	_U_summ+3,___lldiv@dividend+3
  2245  000930  C11A  F01E         	movff	_cnt_adc,___lldiv@divisor
  2246  000934  C11B  F01F         	movff	_cnt_adc+1,___lldiv@divisor+1
  2247  000938  6A20               	clrf	(___lldiv@divisor+2)^0,c
  2248  00093A  6A21               	clrf	(___lldiv@divisor+3)^0,c
  2249  00093C  ECD2  F017         	call	___lldiv	;wreg free
  2250  000940  C01A  F10C         	movff	?___lldiv,_sqrtU_sum
  2251  000944  C01B  F10D         	movff	?___lldiv+1,_sqrtU_sum+1
  2252  000948  C01C  F10E         	movff	?___lldiv+2,_sqrtU_sum+2
  2253  00094C  C01D  F10F         	movff	?___lldiv+3,_sqrtU_sum+3
  2254                           
  2255                           ;main.c: 141:             U_real = sqrtf(sqrtU_sum);
  2256  000950  C10C  F01A         	movff	_sqrtU_sum,___xxtofl@val
  2257  000954  C10D  F01B         	movff	_sqrtU_sum+1,___xxtofl@val+1
  2258  000958  C10E  F01C         	movff	_sqrtU_sum+2,___xxtofl@val+2
  2259  00095C  C10F  F01D         	movff	_sqrtU_sum+3,___xxtofl@val+3
  2260  000960  0E00               	movlw	0
  2261  000962  EC2A  F013         	call	___xxtofl
  2262  000966  C01A  F08B         	movff	?___xxtofl,sqrtf@x
  2263  00096A  C01B  F08C         	movff	?___xxtofl+1,sqrtf@x+1
  2264  00096E  C01C  F08D         	movff	?___xxtofl+2,sqrtf@x+2
  2265  000972  C01D  F08E         	movff	?___xxtofl+3,sqrtf@x+3
  2266  000976  EC53  F007         	call	_sqrtf	;wreg free
  2267  00097A  C08B  F0B8         	movff	?_sqrtf,___fltol@f1
  2268  00097E  C08C  F0B9         	movff	?_sqrtf+1,___fltol@f1+1
  2269  000982  C08D  F0BA         	movff	?_sqrtf+2,___fltol@f1+2
  2270  000986  C08E  F0BB         	movff	?_sqrtf+3,___fltol@f1+3
  2271  00098A  ECBD  F015         	call	___fltol	;wreg free
  2272  00098E  C0B8  F18A         	movff	?___fltol,_U_real
  2273  000992  C0B9  F18B         	movff	?___fltol+1,_U_real+1
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;main.c: 142:             U_real = U_real / 2;
  2277  000996  90D8               	bcf	status,0,c
  2278  000998  0101               	movlb	1	; () banked
  2279  00099A  318B               	rrcf	(_U_real+1)& (0+255),w,b
  2280  00099C  0100               	movlb	0	; () banked
  2281  00099E  6FFC               	movwf	??_main& (0+255),b
  2282  0009A0  0101               	movlb	1	; () banked
  2283  0009A2  318A               	rrcf	_U_real& (0+255),w,b
  2284  0009A4  6F8A               	movwf	_U_real& (0+255),b
  2285  0009A6  C0FC  F18B         	movff	??_main,_U_real+1
  2286                           
  2287                           ; BSR set to: 1
  2288                           ;main.c: 143:             coef = 220.0 / U_real;
  2289  0009AA  0100               	movlb	0	; () banked
  2290  0009AC  6B66               	clrf	___fldiv@b& (0+255),b
  2291  0009AE  6B67               	clrf	(___fldiv@b+1)& (0+255),b
  2292  0009B0  0E5C               	movlw	92
  2293  0009B2  6F68               	movwf	(___fldiv@b+2)& (0+255),b
  2294  0009B4  0E43               	movlw	67
  2295  0009B6  6F69               	movwf	(___fldiv@b+3)& (0+255),b
  2296  0009B8  C18A  F01A         	movff	_U_real,___xxtofl@val
  2297  0009BC  C18B  F01B         	movff	_U_real+1,___xxtofl@val+1
  2298  0009C0  6A1C               	clrf	(___xxtofl@val+2)^0,c
  2299  0009C2  6A1D               	clrf	(___xxtofl@val+3)^0,c
  2300  0009C4  0E00               	movlw	0
  2301  0009C6  EC2A  F013         	call	___xxtofl
  2302  0009CA  C01A  F06A         	movff	?___xxtofl,___fldiv@a
  2303  0009CE  C01B  F06B         	movff	?___xxtofl+1,___fldiv@a+1
  2304  0009D2  C01C  F06C         	movff	?___xxtofl+2,___fldiv@a+2
  2305  0009D6  C01D  F06D         	movff	?___xxtofl+3,___fldiv@a+3
  2306  0009DA  ECDB  F00D         	call	___fldiv	;wreg free
  2307  0009DE  C066  F108         	movff	?___fldiv,_coef
  2308  0009E2  C067  F109         	movff	?___fldiv+1,_coef+1
  2309  0009E6  C068  F10A         	movff	?___fldiv+2,_coef+2
  2310  0009EA  C069  F10B         	movff	?___fldiv+3,_coef+3
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 144:             U_summ = 0;
  2314  0009EE  0101               	movlb	1	; () banked
  2315  0009F0  6B10               	clrf	_U_summ& (0+255),b
  2316  0009F2  6B11               	clrf	(_U_summ+1)& (0+255),b
  2317  0009F4  6B12               	clrf	(_U_summ+2)& (0+255),b
  2318  0009F6  6B13               	clrf	(_U_summ+3)& (0+255),b
  2319                           
  2320                           ; BSR set to: 1
  2321                           ;main.c: 145:             getU = 1;
  2322  0009F8  0E01               	movlw	1
  2323  0009FA  6E40               	movwf	_getU^0,c
  2324                           
  2325                           ; BSR set to: 1
  2326                           ;main.c: 146:             if (!power_100)
  2327  0009FC  B444               	btfsc	(_power_100/(0+8))^0,_power_100& (0+7),c
  2328  0009FE  D03D               	goto	l10797
  2329                           
  2330                           ; BSR set to: 1
  2331                           ;main.c: 147:                 t_power = (uint16_t)(power * coef * coef + 0.5);
  2332  000A00  DA29               	call	PL78	;call to abstracted procedure
  2333  000A02  5120               	movf	_power& (0+255),w,b
  2334  000A04  6E1A               	movwf	___xxtofl@val^0,c
  2335  000A06  6A1B               	clrf	(___xxtofl@val+1)^0,c
  2336  000A08  6A1C               	clrf	(___xxtofl@val+2)^0,c
  2337  000A0A  6A1D               	clrf	(___xxtofl@val+3)^0,c
  2338  000A0C  0E01               	movlw	1
  2339  000A0E  EC2A  F013         	call	___xxtofl
  2340  000A12  C01A  F066         	movff	?___xxtofl,___flmul@b
  2341  000A16  C01B  F067         	movff	?___xxtofl+1,___flmul@b+1
  2342  000A1A  C01C  F068         	movff	?___xxtofl+2,___flmul@b+2
  2343  000A1E  C01D  F069         	movff	?___xxtofl+3,___flmul@b+3
  2344  000A22  ECE0  F00B         	call	___flmul	;wreg free
  2345  000A26  C066  F1D2         	movff	?___flmul,_main$2467
  2346  000A2A  C067  F1D3         	movff	?___flmul+1,_main$2467+1
  2347  000A2E  C068  F1D4         	movff	?___flmul+2,_main$2467+2
  2348  000A32  C069  F1D5         	movff	?___flmul+3,_main$2467+3
  2349                           
  2350                           ;main.c: 147:                 t_power = (uint16_t)(power * coef * coef + 0.5);
  2351  000A36  6B7F               	clrf	___fladd@a& (0+255),b
  2352  000A38  6B80               	clrf	(___fladd@a+1)& (0+255),b
  2353  000A3A  6B81               	clrf	(___fladd@a+2)& (0+255),b
  2354  000A3C  0E3F               	movlw	63
  2355  000A3E  6F82               	movwf	(___fladd@a+3)& (0+255),b
  2356  000A40  DA09               	call	PL78	;call to abstracted procedure
  2357  000A42  C1D2  F066         	movff	_main$2467,___flmul@b
  2358  000A46  C1D3  F067         	movff	_main$2467+1,___flmul@b+1
  2359  000A4A  C1D4  F068         	movff	_main$2467+2,___flmul@b+2
  2360  000A4E  C1D5  F069         	movff	_main$2467+3,___flmul@b+3
  2361  000A52  ECE0  F00B         	call	___flmul	;wreg free
  2362  000A56  DA07               	call	PL88	;call to abstracted procedure
  2363  000A58  ECB2  F00A         	call	___fladd	;wreg free
  2364  000A5C  C07B  F0B8         	movff	?___fladd,___fltol@f1
  2365  000A60  C07C  F0B9         	movff	?___fladd+1,___fltol@f1+1
  2366  000A64  C07D  F0BA         	movff	?___fladd+2,___fltol@f1+2
  2367  000A68  C07E  F0BB         	movff	?___fladd+3,___fltol@f1+3
  2368  000A6C  ECBD  F015         	call	___fltol	;wreg free
  2369  000A70  C0B8  F03B         	movff	?___fltol,_t_power
  2370  000A74  C0B9  F03C         	movff	?___fltol+1,_t_power+1
  2371  000A78  D004               	goto	l10799
  2372  000A7A                     l10797:
  2373                           
  2374                           ; BSR set to: 1
  2375                           ;main.c: 149:                 t_power = 100;
  2376  000A7A  0E00               	movlw	0
  2377  000A7C  6E3C               	movwf	(_t_power+1)^0,c
  2378  000A7E  0E64               	movlw	100
  2379  000A80  6E3B               	movwf	_t_power^0,c
  2380  000A82                     l10799:
  2381                           
  2382                           ;main.c: 150:             if (t_power > 100) {
  2383  000A82  503C               	movf	(_t_power+1)^0,w,c
  2384  000A84  E103               	bnz	u14060
  2385  000A86  0E65               	movlw	101
  2386  000A88  5C3B               	subwf	_t_power^0,w,c
  2387  000A8A  E305               	bnc	l454
  2388  000A8C                     u14060:
  2389                           
  2390                           ;main.c: 151:                 t_power = 100;
  2391  000A8C  6A3C               	clrf	(_t_power+1)^0,c
  2392  000A8E  0E64               	movlw	100
  2393  000A90  6E3B               	movwf	_t_power^0,c
  2394                           
  2395                           ;main.c: 152:                 is_stab = 0;
  2396  000A92  9A44               	bcf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2397                           
  2398                           ;main.c: 153:             } else
  2399  000A94  D001               	goto	l10805
  2400  000A96                     l454:
  2401                           
  2402                           ;main.c: 154:                 is_stab = 1;
  2403  000A96  8A44               	bsf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2404  000A98                     l10805:
  2405                           
  2406                           ;main.c: 156:             LATAbits.LA3 = !LATAbits.LA3;
  2407  000A98  B689               	btfsc	137,3,c	;volatile
  2408  000A9A  D004               	goto	u14070
  2409  000A9C  0100               	movlb	0	; () banked
  2410  000A9E  6BFC               	clrf	??_main& (0+255),b
  2411  000AA0  2BFC               	incf	??_main& (0+255),f,b
  2412  000AA2  D002               	goto	u14088
  2413  000AA4                     u14070:
  2414  000AA4  0100               	movlb	0	; () banked
  2415  000AA6  6BFC               	clrf	??_main& (0+255),b
  2416  000AA8                     u14088:
  2417  000AA8  47FC               	rlncf	??_main& (0+255),f,b
  2418  000AAA  47FC               	rlncf	??_main& (0+255),f,b
  2419  000AAC  47FC               	rlncf	??_main& (0+255),f,b
  2420  000AAE  5089               	movf	137,w,c	;volatile
  2421  000AB0  19FC               	xorwf	??_main& (0+255),w,b
  2422  000AB2  0BF7               	andlw	-9
  2423  000AB4  19FC               	xorwf	??_main& (0+255),w,b
  2424  000AB6  6E89               	movwf	137,c	;volatile
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;main.c: 157:             watt_disp = calc_power(t_power, t_res, U_real);
  2428  000AB8  ECB9  F00D         	call	PL82	;call to abstracted procedure
  2429  000ABC  C18A  F06B         	movff	_U_real,calc_power@u_rl
  2430  000AC0  C18B  F06C         	movff	_U_real+1,calc_power@u_rl+1
  2431  000AC4  503B               	movf	_t_power^0,w,c
  2432  000AC6  ECED  F010         	call	_calc_power
  2433  000ACA  C067  F118         	movff	?_calc_power,_watt_disp
  2434  000ACE  C068  F119         	movff	?_calc_power+1,_watt_disp+1
  2435  000AD2  D17D               	goto	l10999
  2436  000AD4                     l10809:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 165:                 if (tick_t1 >= 6) {
  2440  000AD4  0E05               	movlw	5
  2441  000AD6  0101               	movlb	1	; () banked
  2442  000AD8  6524               	cpfsgt	_tick_t1& (0+255),b
  2443  000ADA  D003               	goto	l10815
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;main.c: 166:                     tick_t1 = 0;
  2447  000ADC  6B24               	clrf	_tick_t1& (0+255),b
  2448                           
  2449                           ; BSR set to: 1
  2450                           ;main.c: 173:                     show_lcd_main();
  2451  000ADE  ECF5  F00C         	call	_show_lcd_main	;wreg free
  2452  000AE2                     l10815:
  2453                           
  2454                           ;main.c: 178:                 if (EncData < 0)
  2455  000AE2  0101               	movlb	1	; () banked
  2456  000AE4  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2457  000AE6  D003               	goto	l10819
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 179:                     EncData = 0;
  2461  000AE8  6B16               	clrf	_EncData& (0+255),b
  2462  000AEA  6B17               	clrf	(_EncData+1)& (0+255),b
  2463  000AEC  D00A               	goto	l10823
  2464  000AEE                     l10819:
  2465                           
  2466                           ; BSR set to: 1
  2467  000AEE  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2468  000AF0  D008               	goto	l10823
  2469  000AF2  5117               	movf	(_EncData+1)& (0+255),w,b
  2470  000AF4  E103               	bnz	u14110
  2471  000AF6  0E65               	movlw	101
  2472  000AF8  5D16               	subwf	_EncData& (0+255),w,b
  2473  000AFA  E303               	bnc	l10823
  2474  000AFC                     u14110:
  2475                           
  2476                           ; BSR set to: 1
  2477                           ;main.c: 181:                     EncData = 100;
  2478  000AFC  6B17               	clrf	(_EncData+1)& (0+255),b
  2479  000AFE  0E64               	movlw	100
  2480  000B00  6F16               	movwf	_EncData& (0+255),b
  2481  000B02                     l10823:
  2482                           
  2483                           ; BSR set to: 1
  2484                           ;main.c: 183:                 if (pressed_key == 1) {
  2485  000B02  0521               	decf	_pressed_key& (0+255),w,b
  2486  000B04  E104               	bnz	l10827
  2487                           
  2488                           ; BSR set to: 1
  2489                           ;main.c: 185:                     power = EncData;
  2490  000B06  C116  F120         	movff	_EncData,_power
  2491                           
  2492                           ;main.c: 186:                     is_power = 1;
  2493  000B0A  8844               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2494                           
  2495                           ;main.c: 187:                     power_100 = 0;
  2496  000B0C  9444               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2497  000B0E                     l10827:
  2498                           
  2499                           ; BSR set to: 1
  2500                           ;main.c: 190:                 if (pressed_key == 2) {
  2501  000B0E  0E02               	movlw	2
  2502  000B10  1921               	xorwf	_pressed_key& (0+255),w,b
  2503  000B12  E001 D6D4          	bnz	l442
  2504                           
  2505                           ; BSR set to: 1
  2506                           ;main.c: 191:                     clearLCD();
  2507  000B16  EC35  F01B         	call	_clearLCD	;wreg free
  2508                           
  2509                           ;main.c: 192:                     sel_main = 3;
  2510  000B1A  0E03               	movlw	3
  2511  000B1C  0101               	movlb	1	; () banked
  2512  000B1E  6F1C               	movwf	_sel_main& (0+255),b
  2513                           
  2514                           ; BSR set to: 1
  2515                           ;main.c: 193:                     lcd_gotoxy(5, 2);
  2516  000B20  0E02               	movlw	2
  2517  000B22  6E1E               	movwf	lcd_gotoxy@y^0,c
  2518  000B24  0E05               	movlw	5
  2519  000B26  EC9D  F019         	call	_lcd_gotoxy
  2520                           
  2521                           ;main.c: 194:                     lcd_putc(0x04);
  2522  000B2A  0E04               	movlw	4
  2523  000B2C  EC50  F01B         	call	_lcd_putc
  2524                           
  2525                           ;main.c: 195:                     lcd_putc(0x05);
  2526  000B30  0E05               	movlw	5
  2527  000B32  EC50  F01B         	call	_lcd_putc
  2528                           
  2529                           ;main.c: 196:                     lcd_putc(0x05);
  2530  000B36  0E05               	movlw	5
  2531  000B38  EC50  F01B         	call	_lcd_putc
  2532                           
  2533                           ;main.c: 197:                     lcd_putc(0x05);
  2534  000B3C  0E05               	movlw	5
  2535  000B3E  EC50  F01B         	call	_lcd_putc
  2536                           
  2537                           ;main.c: 198:                     lcd_putc(0x05);
  2538  000B42  0E05               	movlw	5
  2539  000B44  EC50  F01B         	call	_lcd_putc
  2540                           
  2541                           ;main.c: 199:                     lcd_putc(' ');
  2542  000B48  0E20               	movlw	32
  2543  000B4A  EC50  F01B         	call	_lcd_putc
  2544                           
  2545                           ;main.c: 200:                     lcd_putc(0x06);
  2546  000B4E  0E06               	movlw	6
  2547  000B50  EC50  F01B         	call	_lcd_putc
  2548                           
  2549                           ;main.c: 201:                     lcd_putc(' ');
  2550  000B54  0E20               	movlw	32
  2551  000B56  EC50  F01B         	call	_lcd_putc
  2552                           
  2553                           ;main.c: 202:                     lcd_putc(0x05);
  2554  000B5A  0E05               	movlw	5
  2555  000B5C  EC50  F01B         	call	_lcd_putc
  2556                           
  2557                           ;main.c: 203:                     lcd_putc(0x05);
  2558  000B60  0E05               	movlw	5
  2559  000B62  EC50  F01B         	call	_lcd_putc
  2560                           
  2561                           ;main.c: 204:                     lcd_putc(0x05);
  2562  000B66  0E05               	movlw	5
  2563  000B68  EC50  F01B         	call	_lcd_putc
  2564                           
  2565                           ;main.c: 205:                     lcd_putc(0x05);
  2566  000B6C  0E05               	movlw	5
  2567  000B6E  EC50  F01B         	call	_lcd_putc
  2568                           
  2569                           ;main.c: 206:                     lcd_putc(0x03);
  2570  000B72  0E03               	movlw	3
  2571  000B74  EC50  F01B         	call	_lcd_putc
  2572                           
  2573                           ;main.c: 208:                     EncData = 0;
  2574  000B78  0101               	movlb	1	; () banked
  2575  000B7A  6B16               	clrf	_EncData& (0+255),b
  2576  000B7C  D07F               	goto	L2
  2577  000B7E                     l10863:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;main.c: 216:                 if (EncData > 3)
  2581  000B7E  0101               	movlb	1	; () banked
  2582  000B80  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2583  000B82  D008               	goto	l10867
  2584  000B84  5117               	movf	(_EncData+1)& (0+255),w,b
  2585  000B86  E103               	bnz	u14140
  2586  000B88  0E04               	movlw	4
  2587  000B8A  5D16               	subwf	_EncData& (0+255),w,b
  2588  000B8C  E303               	bnc	l10867
  2589  000B8E                     u14140:
  2590                           
  2591                           ; BSR set to: 1
  2592                           ;main.c: 217:                     EncData = 3;
  2593  000B8E  6B17               	clrf	(_EncData+1)& (0+255),b
  2594  000B90  0E03               	movlw	3
  2595  000B92  6F16               	movwf	_EncData& (0+255),b
  2596  000B94                     l10867:
  2597                           
  2598                           ; BSR set to: 1
  2599                           ;main.c: 218:                 if (EncData < 0)
  2600  000B94  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2601  000B96  D02B               	goto	l10889
  2602                           
  2603                           ; BSR set to: 1
  2604                           ;main.c: 219:                     EncData = 0;
  2605  000B98  6B16               	clrf	_EncData& (0+255),b
  2606  000B9A  6B17               	clrf	(_EncData+1)& (0+255),b
  2607  000B9C  D028               	goto	l10889
  2608  000B9E                     l10871:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 223:                         lcd_gotoxy(1, 3);
  2612  000B9E  D978               	call	PL120	;call to abstracted procedure
  2613  000BA0  EC9D  F019         	call	_lcd_gotoxy
  2614                           
  2615                           ;main.c: 224:                         lcdPrint("   EDIT RESISTANCE  ");
  2616  000BA4  0EE7               	movlw	low STR_5
  2617  000BA6  6E23               	movwf	lcdPrint@t^0,c
  2618  000BA8  0E7E               	movlw	high STR_5
  2619  000BAA  6E24               	movwf	(lcdPrint@t+1)^0,c
  2620  000BAC  ECB1  F013         	call	_lcdPrint	;wreg free
  2621                           
  2622                           ;main.c: 225:                         break;
  2623  000BB0  D028               	goto	l10891
  2624  000BB2                     l10875:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 227:                         lcd_gotoxy(1, 3);
  2628  000BB2  D96E               	call	PL120	;call to abstracted procedure
  2629  000BB4  EC9D  F019         	call	_lcd_gotoxy
  2630                           
  2631                           ;main.c: 228:                         lcdPrint("  SAVE LOAD DEFAULT ");
  2632  000BB8  0EFC               	movlw	low STR_6
  2633  000BBA  6E23               	movwf	lcdPrint@t^0,c
  2634  000BBC  0E7E               	movlw	high STR_6
  2635  000BBE  6E24               	movwf	(lcdPrint@t+1)^0,c
  2636  000BC0  ECB1  F013         	call	_lcdPrint	;wreg free
  2637                           
  2638                           ;main.c: 229:                         break;
  2639  000BC4  D01E               	goto	l10891
  2640  000BC6                     l10879:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 231:                         lcd_gotoxy(1, 3);
  2644  000BC6  D964               	call	PL120	;call to abstracted procedure
  2645  000BC8  EC9D  F019         	call	_lcd_gotoxy
  2646                           
  2647                           ;main.c: 232:                         lcdPrint("   SET 100% POWER   ");
  2648  000BCC  0ED2               	movlw	low STR_7
  2649  000BCE  6E23               	movwf	lcdPrint@t^0,c
  2650  000BD0  0E7E               	movlw	high STR_7
  2651  000BD2  6E24               	movwf	(lcdPrint@t+1)^0,c
  2652  000BD4  ECB1  F013         	call	_lcdPrint	;wreg free
  2653                           
  2654                           ;main.c: 233:                         break;
  2655  000BD8  D014               	goto	l10891
  2656  000BDA                     l10883:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 235:                         lcd_gotoxy(1, 3);
  2660  000BDA  D95A               	call	PL120	;call to abstracted procedure
  2661  000BDC  EC9D  F019         	call	_lcd_gotoxy
  2662                           
  2663                           ;main.c: 236:                         lcdPrint("         EXIT        ");
  2664  000BE0  0E90               	movlw	low STR_8
  2665  000BE2  6E23               	movwf	lcdPrint@t^0,c
  2666  000BE4  0E7E               	movlw	high STR_8
  2667  000BE6  6E24               	movwf	(lcdPrint@t+1)^0,c
  2668  000BE8  ECB1  F013         	call	_lcdPrint	;wreg free
  2669                           
  2670                           ;main.c: 237:                         break; }
  2671  000BEC  D00A               	goto	l10891
  2672  000BEE                     l10889:
  2673                           
  2674                           ; BSR set to: 1
  2675                           
  2676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2677                           ; Switch size 1, requested type "space"
  2678                           ; Number of cases is 1, Range of values is 0 to 0
  2679                           ; switch strategies available:
  2680                           ; Name         Instructions Cycles
  2681                           ; simple_byte            4     3 (average)
  2682                           ;	Chosen strategy is simple_byte
  2683  000BEE  D949               	call	PL118	;call to abstracted procedure
  2684  000BF0  E108               	bnz	l10891
  2685                           
  2686                           ; BSR set to: 0
  2687                           ; Switch size 1, requested type "space"
  2688                           ; Number of cases is 4, Range of values is 0 to 3
  2689                           ; switch strategies available:
  2690                           ; Name         Instructions Cycles
  2691                           ; simple_byte           13     7 (average)
  2692                           ;	Chosen strategy is simple_byte
  2693  000BF2  51FC               	movf	??_main& (0+255),w,b
  2694  000BF4  E0D4               	bz	l10871
  2695  000BF6  0A01               	xorlw	1	; case 1
  2696  000BF8  E0DC               	bz	l10875
  2697  000BFA  0A03               	xorlw	3	; case 2
  2698  000BFC  E0E4               	bz	l10879
  2699  000BFE  0A01               	xorlw	1	; case 3
  2700  000C00  E0EC               	bz	l10883
  2701  000C02                     l10891:
  2702                           
  2703                           ;main.c: 238:                 if (pressed_key == 1) {
  2704  000C02  0101               	movlb	1	; () banked
  2705  000C04  0521               	decf	_pressed_key& (0+255),w,b
  2706  000C06  E041               	bz	l10929
  2707  000C08  D65A               	goto	l442
  2708  000C0A                     l476:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;main.c: 241:                             t_power = 0;
  2712  000C0A  6A3B               	clrf	_t_power^0,c
  2713  000C0C  6A3C               	clrf	(_t_power+1)^0,c
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;main.c: 242:                             clearLCD();
  2717  000C0E  EC35  F01B         	call	_clearLCD	;wreg free
  2718                           
  2719                           ;main.c: 243:                             EncData = r_whole;
  2720  000C12  C11E  F116         	movff	_r_whole,_EncData
  2721  000C16  0101               	movlb	1	; () banked
  2722  000C18  6B17               	clrf	(_EncData+1)& (0+255),b
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;main.c: 244:                             whole_dec = 1;
  2726  000C1A  8044               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2727                           
  2728                           ;main.c: 245:                             lcd_gotoxy(1, 2);
  2729  000C1C  D93C               	call	PL126	;call to abstracted procedure
  2730  000C1E  EC9D  F019         	call	_lcd_gotoxy
  2731                           
  2732                           ;main.c: 246:                             lcdPrint("  - Whole part -  ");
  2733  000C22  D93C               	call	PL180	;call to abstracted procedure
  2734  000C24  ECB1  F013         	call	_lcdPrint	;wreg free
  2735                           
  2736                           ;main.c: 247:                             lcd_gotoxy(1, 3);
  2737  000C28  D933               	call	PL120	;call to abstracted procedure
  2738  000C2A  EC9D  F019         	call	_lcd_gotoxy
  2739                           
  2740                           ;main.c: 248:                             lcdPrint("Long press for save");
  2741  000C2E  0E3A               	movlw	low STR_10
  2742  000C30  6E23               	movwf	lcdPrint@t^0,c
  2743  000C32  0E7F               	movlw	high STR_10
  2744  000C34  6E24               	movwf	(lcdPrint@t+1)^0,c
  2745  000C36  ECB1  F013         	call	_lcdPrint	;wreg free
  2746                           
  2747                           ;main.c: 249:                             lcd_gotoxy(1, 4);
  2748  000C3A  ECD5  F00D         	call	PL186	;call to abstracted procedure
  2749  000C3E  EC9D  F019         	call	_lcd_gotoxy
  2750                           
  2751                           ;main.c: 250:                             lcdPrint("    to EEPROM.");
  2752  000C42  0E74               	movlw	low STR_11
  2753  000C44  6E23               	movwf	lcdPrint@t^0,c
  2754  000C46  0E7F               	movlw	high STR_11
  2755  000C48  6E24               	movwf	(lcdPrint@t+1)^0,c
  2756  000C4A  ECB1  F013         	call	_lcdPrint	;wreg free
  2757                           
  2758                           ;main.c: 251:                             sel_main = 1;
  2759  000C4E  0E01               	movlw	1
  2760  000C50  0101               	movlb	1	; () banked
  2761  000C52  6F1C               	movwf	_sel_main& (0+255),b
  2762                           
  2763                           ;main.c: 252:                             break;
  2764  000C54  D634               	goto	l442
  2765  000C56                     l478:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 254:                             sel_main = 0;
  2769  000C56  0101               	movlb	1	; () banked
  2770  000C58  6B1C               	clrf	_sel_main& (0+255),b
  2771                           
  2772                           ; BSR set to: 1
  2773                           ;main.c: 255:                             write_eep(2, power);
  2774  000C5A  C120  F01A         	movff	_power,write_eep@data
  2775  000C5E  0E02               	movlw	2
  2776  000C60  EC05  F01B         	call	_write_eep
  2777                           
  2778                           ;main.c: 256:                             EncData = power;
  2779  000C64  D909               	call	PL106	;call to abstracted procedure
  2780                           
  2781                           ; BSR set to: 1
  2782                           ;main.c: 257:                             clearLCD();
  2783  000C66  EC35  F01B         	call	_clearLCD	;wreg free
  2784                           
  2785                           ;main.c: 258:                             break;
  2786  000C6A  D629               	goto	l442
  2787  000C6C                     l479:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;main.c: 260:                             sel_main = 0;
  2791  000C6C  0101               	movlb	1	; () banked
  2792  000C6E  6B1C               	clrf	_sel_main& (0+255),b
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;main.c: 261:                             clearLCD();
  2796  000C70  EC35  F01B         	call	_clearLCD	;wreg free
  2797                           
  2798                           ;main.c: 262:                             power_100 = 1;
  2799  000C74  8444               	bsf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2800  000C76                     l10921:
  2801                           
  2802                           ;main.c: 263:                             EncData = power;
  2803  000C76  C120  F116         	movff	_power,_EncData
  2804  000C7A  0101               	movlb	1	; () banked
  2805  000C7C                     L2:
  2806  000C7C  6B17               	clrf	(_EncData+1)& (0+255),b
  2807                           
  2808                           ;main.c: 264:                             break;
  2809  000C7E  D61F               	goto	l442
  2810  000C80                     l480:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;main.c: 266:                             sel_main = 0;
  2814  000C80  0101               	movlb	1	; () banked
  2815  000C82  6B1C               	clrf	_sel_main& (0+255),b
  2816                           
  2817                           ; BSR set to: 1
  2818                           ;main.c: 267:                             clearLCD();
  2819  000C84  EC35  F01B         	call	_clearLCD	;wreg free
  2820  000C88  D7F6               	goto	l10921
  2821  000C8A                     l10929:
  2822                           
  2823                           ; BSR set to: 1
  2824                           
  2825                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 1, Range of values is 0 to 0
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte            4     3 (average)
  2831                           ;	Chosen strategy is simple_byte
  2832  000C8A  D8FB               	call	PL118	;call to abstracted procedure
  2833  000C8C  E001 D617          	bnz	l442
  2834                           
  2835                           ; BSR set to: 0
  2836                           ; Switch size 1, requested type "space"
  2837                           ; Number of cases is 4, Range of values is 0 to 3
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte           13     7 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  000C90  51FC               	movf	??_main& (0+255),w,b
  2843  000C92  E0BB               	bz	l476
  2844  000C94  0A01               	xorlw	1	; case 1
  2845  000C96  E0DF               	bz	l478
  2846  000C98  0A03               	xorlw	3	; case 2
  2847  000C9A  E0E8               	bz	l479
  2848  000C9C  0A01               	xorlw	1	; case 3
  2849  000C9E  E0F0               	bz	l480
  2850  000CA0  D60E               	goto	l442
  2851  000CA2                     l481:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 279:                 if (whole_dec) {
  2855  000CA2  A044               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2856  000CA4  D012               	goto	l10939
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;main.c: 280:                     if (EncData >= 100)
  2860  000CA6  0101               	movlb	1	; () banked
  2861  000CA8  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2862  000CAA  D008               	goto	l10935
  2863  000CAC  5117               	movf	(_EncData+1)& (0+255),w,b
  2864  000CAE  E103               	bnz	u14180
  2865  000CB0  0E64               	movlw	100
  2866  000CB2  5D16               	subwf	_EncData& (0+255),w,b
  2867  000CB4  E303               	bnc	l10935
  2868  000CB6                     u14180:
  2869                           
  2870                           ; BSR set to: 1
  2871                           ;main.c: 281:                         EncData = 99;
  2872  000CB6  6B17               	clrf	(_EncData+1)& (0+255),b
  2873  000CB8  0E63               	movlw	99
  2874  000CBA  6F16               	movwf	_EncData& (0+255),b
  2875  000CBC                     l10935:
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;main.c: 282:                     if (EncData < 0)
  2879  000CBC  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2880  000CBE  D002               	goto	l484
  2881                           
  2882                           ; BSR set to: 1
  2883                           ;main.c: 283:                         EncData = 0;
  2884  000CC0  6B16               	clrf	_EncData& (0+255),b
  2885  000CC2  6B17               	clrf	(_EncData+1)& (0+255),b
  2886  000CC4                     l484:
  2887                           
  2888                           ; BSR set to: 1
  2889                           ;main.c: 284:                     r_whole = (uint8_t) EncData;
  2890  000CC4  C116  F11E         	movff	_EncData,_r_whole
  2891                           
  2892                           ;main.c: 285:                 } else {
  2893  000CC8  D033               	goto	l10959
  2894  000CCA                     l10939:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;main.c: 286:                     if (EncData >= 100)
  2898  000CCA  0101               	movlb	1	; () banked
  2899  000CCC  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2900  000CCE  D009               	goto	l10943
  2901  000CD0  5117               	movf	(_EncData+1)& (0+255),w,b
  2902  000CD2  E103               	bnz	u14200
  2903  000CD4  0E64               	movlw	100
  2904  000CD6  5D16               	subwf	_EncData& (0+255),w,b
  2905  000CD8  E304               	bnc	l10943
  2906  000CDA                     u14200:
  2907                           
  2908                           ; BSR set to: 1
  2909                           ;main.c: 287:                         EncData = 99;
  2910  000CDA  0E00               	movlw	0
  2911  000CDC  6F17               	movwf	(_EncData+1)& (0+255),b
  2912  000CDE  0E63               	movlw	99
  2913  000CE0  6F16               	movwf	_EncData& (0+255),b
  2914  000CE2                     l10943:
  2915                           
  2916                           ; BSR set to: 1
  2917                           ;main.c: 288:                     if ((EncData < 10) && (EncData > 5))
  2918  000CE2  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2919  000CE4  D005               	goto	u14210
  2920  000CE6  5117               	movf	(_EncData+1)& (0+255),w,b
  2921  000CE8  E10D               	bnz	l10949
  2922  000CEA  0E0A               	movlw	10
  2923  000CEC  5D16               	subwf	_EncData& (0+255),w,b
  2924  000CEE  E20A               	bc	l10949
  2925  000CF0                     u14210:
  2926                           
  2927                           ; BSR set to: 1
  2928  000CF0  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2929  000CF2  D008               	goto	l10949
  2930  000CF4  5117               	movf	(_EncData+1)& (0+255),w,b
  2931  000CF6  E103               	bnz	u14220
  2932  000CF8  0E06               	movlw	6
  2933  000CFA  5D16               	subwf	_EncData& (0+255),w,b
  2934  000CFC  E303               	bnc	l10949
  2935  000CFE                     u14220:
  2936                           
  2937                           ; BSR set to: 1
  2938                           ;main.c: 289:                         EncData = 0;
  2939  000CFE  6B16               	clrf	_EncData& (0+255),b
  2940  000D00  6B17               	clrf	(_EncData+1)& (0+255),b
  2941  000D02  D010               	goto	l10955
  2942  000D04                     l10949:
  2943                           
  2944                           ; BSR set to: 1
  2945  000D04  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2946  000D06  D00E               	goto	l10955
  2947  000D08  5117               	movf	(_EncData+1)& (0+255),w,b
  2948  000D0A  E102               	bnz	u14230
  2949  000D0C  0516               	decf	_EncData& (0+255),w,b
  2950  000D0E  E30A               	bnc	l10955
  2951  000D10                     u14230:
  2952                           
  2953                           ; BSR set to: 1
  2954  000D10  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2955  000D12  D005               	goto	u14240
  2956  000D14  5117               	movf	(_EncData+1)& (0+255),w,b
  2957  000D16  E106               	bnz	l10955
  2958  000D18  0E05               	movlw	5
  2959  000D1A  5D16               	subwf	_EncData& (0+255),w,b
  2960  000D1C  E203               	bc	l10955
  2961  000D1E                     u14240:
  2962                           
  2963                           ; BSR set to: 1
  2964                           ;main.c: 291:                         EncData = 10;
  2965  000D1E  6B17               	clrf	(_EncData+1)& (0+255),b
  2966  000D20  0E0A               	movlw	10
  2967  000D22  6F16               	movwf	_EncData& (0+255),b
  2968  000D24                     l10955:
  2969                           
  2970                           ; BSR set to: 1
  2971                           ;main.c: 292:                     if (EncData < 0)
  2972  000D24  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2973  000D26  D002               	goto	l490
  2974                           
  2975                           ; BSR set to: 1
  2976                           ;main.c: 293:                         EncData = 0;
  2977  000D28  6B16               	clrf	_EncData& (0+255),b
  2978  000D2A  6B17               	clrf	(_EncData+1)& (0+255),b
  2979  000D2C                     l490:
  2980                           
  2981                           ; BSR set to: 1
  2982                           ;main.c: 295:                     r_dec = (uint8_t) EncData;
  2983  000D2C  C116  F11D         	movff	_EncData,_r_dec
  2984  000D30                     l10959:
  2985                           
  2986                           ; BSR set to: 1
  2987                           ;main.c: 297:                 sprintf(TxtBuf, "Resist:%02u.%u Ohm ", r_whole, r_dec);
  2988  000D30  ECCB  F00D         	call	PL130	;call to abstracted procedure
  2989  000D34  0E26               	movlw	low STR_12
  2990  000D36  6FC6               	movwf	sprintf@fmt& (0+255),b
  2991  000D38  0E7F               	movlw	high STR_12
  2992  000D3A  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  2993  000D3C  C11E  F1C8         	movff	_r_whole,?_sprintf+4
  2994  000D40  6BC9               	clrf	(?_sprintf+5)& (0+255),b
  2995  000D42  C11D  F1CA         	movff	_r_dec,?_sprintf+6
  2996  000D46  6BCB               	clrf	(?_sprintf+7)& (0+255),b
  2997  000D48  EC7A  F019         	call	_sprintf	;wreg free
  2998                           
  2999                           ; BSR set to: 1
  3000                           ;main.c: 298:                 lcd_gotoxy(1, 1);
  3001  000D4C  0E01               	movlw	1
  3002  000D4E  6E1E               	movwf	lcd_gotoxy@y^0,c
  3003  000D50  EC9D  F019         	call	_lcd_gotoxy
  3004                           
  3005                           ;main.c: 299:                 lcdPrint(TxtBuf);
  3006  000D54  ECAA  F00D         	call	PL40	;call to abstracted procedure
  3007  000D58  ECB1  F013         	call	_lcdPrint	;wreg free
  3008                           
  3009                           ;main.c: 301:                 if (pressed_key == 1) {
  3010  000D5C  0101               	movlb	1	; () banked
  3011  000D5E  0521               	decf	_pressed_key& (0+255),w,b
  3012  000D60  E11D               	bnz	l10981
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;main.c: 302:                     whole_dec = ~whole_dec;
  3016  000D62  B044               	btfsc	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3017  000D64  D002               	goto	u14270
  3018  000D66  8044               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3019  000D68  D001               	goto	u14285
  3020  000D6A                     u14270:
  3021  000D6A  9044               	bcf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3022  000D6C                     u14285:
  3023                           
  3024                           ;main.c: 303:                     if (whole_dec) {
  3025  000D6C  A044               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3026  000D6E  D009               	goto	l10975
  3027                           
  3028                           ;main.c: 304:                         lcd_gotoxy(1, 2);
  3029  000D70  D892               	call	PL126	;call to abstracted procedure
  3030  000D72  EC9D  F019         	call	_lcd_gotoxy
  3031                           
  3032                           ;main.c: 305:                         lcdPrint("  - Whole part -  ");
  3033  000D76  D892               	call	PL180	;call to abstracted procedure
  3034  000D78  ECB1  F013         	call	_lcdPrint	;wreg free
  3035                           
  3036                           ;main.c: 306:                         EncData = r_whole;
  3037  000D7C  C11E  F116         	movff	_r_whole,_EncData
  3038  000D80  D00B               	goto	L3
  3039  000D82                     l10975:
  3040                           
  3041                           ;main.c: 308:                         lcd_gotoxy(1, 2);
  3042  000D82  D889               	call	PL126	;call to abstracted procedure
  3043  000D84  EC9D  F019         	call	_lcd_gotoxy
  3044                           
  3045                           ;main.c: 309:                         lcdPrint("  - Fract part -  ");
  3046  000D88  0E61               	movlw	low STR_14
  3047  000D8A  6E23               	movwf	lcdPrint@t^0,c
  3048  000D8C  0E7F               	movlw	high STR_14
  3049  000D8E  6E24               	movwf	(lcdPrint@t+1)^0,c
  3050  000D90  ECB1  F013         	call	_lcdPrint	;wreg free
  3051                           
  3052                           ;main.c: 310:                         EncData = r_dec;
  3053  000D94  C11D  F116         	movff	_r_dec,_EncData
  3054  000D98                     L3:
  3055  000D98  0101               	movlb	1	; () banked
  3056  000D9A  6B17               	clrf	(_EncData+1)& (0+255),b
  3057  000D9C                     l10981:
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;main.c: 314:                 if (pressed_key == 2) {
  3061  000D9C  0E02               	movlw	2
  3062  000D9E  1921               	xorwf	_pressed_key& (0+255),w,b
  3063  000DA0  E001 D58D          	bnz	l442
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;main.c: 315:                     clearLCD();
  3067  000DA4  EC35  F01B         	call	_clearLCD	;wreg free
  3068                           
  3069                           ;main.c: 316:                     sel_main = 0;
  3070  000DA8  0101               	movlb	1	; () banked
  3071  000DAA  6B1C               	clrf	_sel_main& (0+255),b
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;main.c: 318:                     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  3075  000DAC  D825               	call	PL14	;call to abstracted procedure
  3076  000DAE  EC9C  F018         	call	___lmul	;wreg free
  3077  000DB2  D83B               	call	PL24	;call to abstracted procedure
  3078                           
  3079                           ; BSR set to: 1
  3080                           ;main.c: 320:                     write_eep(0, r_whole);
  3081  000DB4  C11E  F01A         	movff	_r_whole,write_eep@data
  3082  000DB8  0E00               	movlw	0
  3083  000DBA  EC05  F01B         	call	_write_eep
  3084                           
  3085                           ;main.c: 321:                     write_eep(1, r_dec);
  3086  000DBE  C11D  F01A         	movff	_r_dec,write_eep@data
  3087  000DC2  0E01               	movlw	1
  3088  000DC4  EC05  F01B         	call	_write_eep
  3089                           
  3090                           ;main.c: 322:                     EncData = power;
  3091  000DC8  D857               	call	PL106	;call to abstracted procedure
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;main.c: 323:                         inc_data = 0;
  3095  000DCA  9244               	bcf	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  3096  000DCC  D578               	goto	l442
  3097  000DCE                     l10999:
  3098  000DCE  0101               	movlb	1	; () banked
  3099  000DD0  511C               	movf	_sel_main& (0+255),w,b
  3100  000DD2  0100               	movlb	0	; () banked
  3101  000DD4  6FFC               	movwf	??_main& (0+255),b
  3102  000DD6  6BFD               	clrf	(??_main+1)& (0+255),b
  3103                           
  3104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 1, Range of values is 0 to 0
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte            4     3 (average)
  3110                           ;	Chosen strategy is simple_byte
  3111  000DD8  51FD               	movf	(??_main+1)& (0+255),w,b
  3112  000DDA  E001 D570          	bnz	l442
  3113                           
  3114                           ; BSR set to: 0
  3115                           ; Switch size 1, requested type "space"
  3116                           ; Number of cases is 4, Range of values is 0 to 3
  3117                           ; switch strategies available:
  3118                           ; Name         Instructions Cycles
  3119                           ; simple_byte           13     7 (average)
  3120                           ;	Chosen strategy is simple_byte
  3121  000DDE  51FC               	movf	??_main& (0+255),w,b
  3122  000DE0  E101 D678          	bz	l10809
  3123  000DE4  0A01               	xorlw	1	; case 1
  3124  000DE6  E101 D75C          	bz	l481
  3125  000DEA  0A03               	xorlw	3	; case 2
  3126  000DEC  E101 D567          	bz	l442
  3127  000DF0  0A01               	xorlw	1	; case 3
  3128  000DF2  E101 D6C4          	bz	l10863
  3129                           
  3130                           ; BSR set to: 0
  3131  000DF6  D563               	goto	l442
  3132  000DF8                     __end_of_main:
  3133                           	callstack 0
  3134  000DF8                     PL14:
  3135                           	callstack 19
  3136  000DF8  511D               	movf	_r_dec& (0+255),w,b
  3137  000DFA  0D0A               	mullw	10
  3138  000DFC  CFF3 F0FC          	movff	prodl,??_main
  3139  000E00  CFF4 F0FD          	movff	prodh,??_main+1
  3140  000E04  0E00               	movlw	0
  3141  000E06  0100               	movlb	0	; () banked
  3142  000E08  BFFD               	btfsc	(??_main+1)& (0+255),7,b
  3143  000E0A  0EFF               	movlw	255
  3144  000E0C  6FFE               	movwf	(??_main+2)& (0+255),b
  3145  000E0E  6FFF               	movwf	(??_main+3)& (0+255),b
  3146  000E10  0101               	movlb	1	; () banked
  3147  000E12  511E               	movf	_r_whole& (0+255),w,b
  3148  000E14  6E1A               	movwf	___lmul@multiplier^0,c
  3149  000E16  6A1B               	clrf	(___lmul@multiplier+1)^0,c
  3150  000E18  6A1C               	clrf	(___lmul@multiplier+2)^0,c
  3151  000E1A  6A1D               	clrf	(___lmul@multiplier+3)^0,c
  3152  000E1C  0EE8               	movlw	232
  3153  000E1E  6E1E               	movwf	___lmul@multiplicand^0,c
  3154  000E20  0E03               	movlw	3
  3155  000E22  6E1F               	movwf	(___lmul@multiplicand+1)^0,c
  3156  000E24  6A20               	clrf	(___lmul@multiplicand+2)^0,c
  3157  000E26  6A21               	clrf	(___lmul@multiplicand+3)^0,c
  3158  000E28  0C03               	retlw	3
  3159  000E2A                     __end_ofPL14:
  3160                           	callstack 0
  3161  000E2A                     PL24:
  3162                           	callstack 19
  3163  000E2A  0100               	movlb	0	; () banked
  3164  000E2C  51FC               	movf	??_main& (0+255),w,b
  3165  000E2E  241A               	addwf	?___lmul^0,w,c
  3166  000E30  0101               	movlb	1	; () banked
  3167  000E32  6F04               	movwf	_t_res& (0+255),b
  3168  000E34  0100               	movlb	0	; () banked
  3169  000E36  51FD               	movf	(??_main+1)& (0+255),w,b
  3170  000E38  201B               	addwfc	(?___lmul+1)^0,w,c
  3171  000E3A  0101               	movlb	1	; () banked
  3172  000E3C  6F05               	movwf	(_t_res+1)& (0+255),b
  3173  000E3E  0100               	movlb	0	; () banked
  3174  000E40  51FE               	movf	(??_main+2)& (0+255),w,b
  3175  000E42  201C               	addwfc	(?___lmul+2)^0,w,c
  3176  000E44  0101               	movlb	1	; () banked
  3177  000E46  6F06               	movwf	(_t_res+2)& (0+255),b
  3178  000E48  0100               	movlb	0	; () banked
  3179  000E4A  51FF               	movf	(??_main+3)& (0+255),w,b
  3180  000E4C  201D               	addwfc	(?___lmul+3)^0,w,c
  3181  000E4E  0101               	movlb	1	; () banked
  3182  000E50  6F07               	movwf	(_t_res+3)& (0+255),b
  3183  000E52  0012               	return	
  3184  000E54                     __end_ofPL24:
  3185                           	callstack 0
  3186  000E54                     PL78:
  3187                           	callstack 19
  3188  000E54  C108  F06A         	movff	_coef,___flmul@a
  3189  000E58  C109  F06B         	movff	_coef+1,___flmul@a+1
  3190  000E5C  C10A  F06C         	movff	_coef+2,___flmul@a+2
  3191  000E60  C10B  F06D         	movff	_coef+3,___flmul@a+3
  3192  000E64  0012               	return	
  3193  000E66                     __end_ofPL78:
  3194                           	callstack 0
  3195  000E66                     PL88:
  3196                           	callstack 26
  3197  000E66  C066  F07B         	movff	?___flmul,___fladd@b
  3198  000E6A  C067  F07C         	movff	?___flmul+1,___fladd@b+1
  3199  000E6E  C068  F07D         	movff	?___flmul+2,___fladd@b+2
  3200  000E72  C069  F07E         	movff	?___flmul+3,___fladd@b+3
  3201  000E76  0012               	return	
  3202  000E78                     __end_ofPL88:
  3203                           	callstack 0
  3204  000E78                     PL106:
  3205                           	callstack 19
  3206  000E78  C120  F116         	movff	_power,_EncData
  3207  000E7C  0101               	movlb	1	; () banked
  3208  000E7E  6B17               	clrf	(_EncData+1)& (0+255),b
  3209  000E80  0012               	return	
  3210  000E82                     __end_ofPL106:
  3211                           	callstack 0
  3212  000E82                     PL118:
  3213                           	callstack 19
  3214  000E82  C116  F0FC         	movff	_EncData,??_main
  3215  000E86  C117  F0FD         	movff	_EncData+1,??_main+1
  3216  000E8A  0100               	movlb	0	; () banked
  3217  000E8C  51FD               	movf	(??_main+1)& (0+255),w,b
  3218  000E8E  0012               	return	
  3219  000E90                     __end_ofPL118:
  3220                           	callstack 0
  3221  000E90                     PL120:
  3222                           	callstack 19
  3223  000E90  0E03               	movlw	3
  3224  000E92  6E1E               	movwf	lcd_gotoxy@y^0,c
  3225  000E94  0C01               	retlw	1
  3226  000E96                     __end_ofPL120:
  3227                           	callstack 0
  3228  000E96                     PL126:
  3229                           	callstack 19
  3230  000E96  0E02               	movlw	2
  3231  000E98  6E1E               	movwf	lcd_gotoxy@y^0,c
  3232  000E9A  0C01               	retlw	1
  3233  000E9C                     __end_ofPL126:
  3234                           	callstack 0
  3235  000E9C                     PL180:
  3236                           	callstack 19
  3237  000E9C  0E4E               	movlw	low STR_9
  3238  000E9E  6E23               	movwf	lcdPrint@t^0,c
  3239  000EA0  0E7F               	movlw	high STR_9
  3240  000EA2  6E24               	movwf	(lcdPrint@t+1)^0,c
  3241  000EA4  0012               	return	
  3242  000EA6                     __end_ofPL180:
  3243                           	callstack 0
  3244                           
  3245 ;; *************** function _write_eep *****************
  3246 ;; Defined at:
  3247 ;;		line 5 in file "eeprom.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  address         1    wreg     unsigned char 
  3250 ;;  data            1   25[COMRAM] unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  address         1   26[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/1
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         1       0       0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0
  3265 ;;      Totals:         2       0       0       0       0       0       0
  3266 ;;Total ram usage:        2 bytes
  3267 ;; Hardware stack levels used: 1
  3268 ;; Hardware stack levels required when called: 3
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text1
  3277  00360A                     __ptext1:
  3278                           	callstack 0
  3279  00360A                     _write_eep:
  3280                           	callstack 27
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;incstack = 0
  3284                           ;write_eep@address stored from wreg
  3285  00360A  6E1B               	movwf	write_eep@address^0,c
  3286  00360C                     
  3287                           ;eeprom.c: 7:     while( EECON1bits.WR )
  3288                           
  3289                           ;eeprom.c: 8:     {}
  3290  00360C  B2A6               	btfsc	166,1,c	;volsfr
  3291  00360E  D7FE               	goto	l5789
  3292                           
  3293                           ;eeprom.c: 11:     EEADR = address;
  3294  003610  C01B  FFA9         	movff	write_eep@address,4009	;volatile
  3295                           
  3296                           ;eeprom.c: 12:     EEDATA = data;
  3297  003614  C01A  FFA8         	movff	write_eep@data,4008	;volatile
  3298                           
  3299                           ;eeprom.c: 13:     EECON1bits.EEPGD = 0;
  3300  003618  9EA6               	bcf	166,7,c	;volsfr
  3301                           
  3302                           ;eeprom.c: 14:     EECON1bits.CFGS = 0;
  3303  00361A  9CA6               	bcf	166,6,c	;volsfr
  3304                           
  3305                           ;eeprom.c: 15:     EECON1bits.WREN = 1;
  3306  00361C  84A6               	bsf	166,2,c	;volsfr
  3307                           
  3308                           ;eeprom.c: 16:     INTCONbits.GIE = 0;
  3309  00361E  9EF2               	bcf	242,7,c	;volatile
  3310                           
  3311                           ;eeprom.c: 18:     EECON2 = 0x55;
  3312  003620  0E55               	movlw	85
  3313  003622  6EA7               	movwf	167,c	;volsfr
  3314                           
  3315                           ;eeprom.c: 19:     EECON2 = 0xAA;
  3316  003624  0EAA               	movlw	170
  3317  003626  6EA7               	movwf	167,c	;volsfr
  3318                           
  3319                           ;eeprom.c: 20:     EECON1bits.WR = 1;
  3320  003628  82A6               	bsf	166,1,c	;volsfr
  3321                           
  3322                           ;eeprom.c: 22:     INTCONbits.GIE = 1;
  3323  00362A  8EF2               	bsf	242,7,c	;volatile
  3324  00362C  0CAA               	retlw	170	;funcret
  3325  00362E                     __end_of_write_eep:
  3326                           	callstack 0
  3327                           
  3328 ;; *************** function _sqrtf *****************
  3329 ;; Defined at:
  3330 ;;		line 22 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sqrtf.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  x               4   43[BANK0 ] float 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  ix              4   84[BANK0 ] long 
  3335 ;;  r               4   80[BANK0 ] unsigned long 
  3336 ;;  m               4   76[BANK0 ] long 
  3337 ;;  z               4   72[BANK0 ] float 
  3338 ;;  t               4   68[BANK0 ] long 
  3339 ;;  q               4   64[BANK0 ] long 
  3340 ;;  __xc8_float_    4   60[BANK0 ] struct .
  3341 ;;  i               4   56[BANK0 ] long 
  3342 ;;  s               4   52[BANK0 ] long 
  3343 ;;  sign            4    0        long 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  4   43[BANK0 ] float 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 3F/0
  3350 ;;		On exit  : 3F/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3353 ;;      Params:         0       4       0       0       0       0       0
  3354 ;;      Locals:         0      36       0       0       0       0       0
  3355 ;;      Temps:          0       5       0       0       0       0       0
  3356 ;;      Totals:         0      45       0       0       0       0       0
  3357 ;;Total ram usage:       45 bytes
  3358 ;; Hardware stack levels used: 1
  3359 ;; Hardware stack levels required when called: 4
  3360 ;; This function calls:
  3361 ;;		___fladd
  3362 ;;		___flge
  3363 ;;		___flmul
  3364 ;;		_nanf
  3365 ;; This function is called by:
  3366 ;;		_main
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text2
  3371  000EA6                     __ptext2:
  3372                           	callstack 0
  3373  000EA6                     _sqrtf:
  3374                           	callstack 26
  3375                           
  3376                           ; BSR set to: 0
  3377                           
  3378                           ; BSR set to: 0
  3379                           
  3380                           ;incstack = 0
  3381  000EA6  C08B  F09C         	movff	sqrtf@x,sqrtf@__xc8_float_word
  3382  000EAA  C08C  F09D         	movff	sqrtf@x+1,sqrtf@__xc8_float_word+1
  3383  000EAE  C08D  F09E         	movff	sqrtf@x+2,sqrtf@__xc8_float_word+2
  3384  000EB2  C08E  F09F         	movff	sqrtf@x+3,sqrtf@__xc8_float_word+3
  3385                           
  3386                           ; BSR set to: 0
  3387  000EB6  C09C  F0B4         	movff	sqrtf@__xc8_float_word,sqrtf@ix
  3388  000EBA  C09D  F0B5         	movff	sqrtf@__xc8_float_word+1,sqrtf@ix+1
  3389  000EBE  C09E  F0B6         	movff	sqrtf@__xc8_float_word+2,sqrtf@ix+2
  3390  000EC2  C09F  F0B7         	movff	sqrtf@__xc8_float_word+3,sqrtf@ix+3
  3391                           
  3392                           ; BSR set to: 0
  3393  000EC6  6B8F               	clrf	??_sqrtf& (0+255),b
  3394  000EC8  6B90               	clrf	(??_sqrtf+1)& (0+255),b
  3395  000ECA  0E80               	movlw	128
  3396  000ECC  15B6               	andwf	(sqrtf@ix+2)& (0+255),w,b
  3397  000ECE  D9A4               	call	PL160	;call to abstracted procedure
  3398  000ED0  0E80               	movlw	128
  3399  000ED2  1991               	xorwf	(??_sqrtf+2)& (0+255),w,b
  3400  000ED4  E12C               	bnz	l10583
  3401  000ED6  0E7F               	movlw	127
  3402  000ED8  1992               	xorwf	(??_sqrtf+3)& (0+255),w,b
  3403  000EDA  118F               	iorwf	??_sqrtf& (0+255),w,b
  3404  000EDC  1190               	iorwf	(??_sqrtf+1)& (0+255),w,b
  3405  000EDE  E127               	bnz	l10583
  3406                           
  3407                           ; BSR set to: 0
  3408  000EE0  C08B  F06A         	movff	sqrtf@x,___flmul@a
  3409  000EE4  C08C  F06B         	movff	sqrtf@x+1,___flmul@a+1
  3410  000EE8  C08D  F06C         	movff	sqrtf@x+2,___flmul@a+2
  3411  000EEC  C08E  F06D         	movff	sqrtf@x+3,___flmul@a+3
  3412  000EF0  C08B  F066         	movff	sqrtf@x,___flmul@b
  3413  000EF4  C08C  F067         	movff	sqrtf@x+1,___flmul@b+1
  3414  000EF8  C08D  F068         	movff	sqrtf@x+2,___flmul@b+2
  3415  000EFC  C08E  F069         	movff	sqrtf@x+3,___flmul@b+3
  3416  000F00  ECE0  F00B         	call	___flmul	;wreg free
  3417  000F04  EC33  F007         	call	PL88	;call to abstracted procedure
  3418  000F08  C08B  F07F         	movff	sqrtf@x,___fladd@a
  3419  000F0C  C08C  F080         	movff	sqrtf@x+1,___fladd@a+1
  3420  000F10  C08D  F081         	movff	sqrtf@x+2,___fladd@a+2
  3421  000F14  C08E  F082         	movff	sqrtf@x+3,___fladd@a+3
  3422  000F18  ECB2  F00A         	call	___fladd	;wreg free
  3423  000F1C  C07B  F08B         	movff	?___fladd,?_sqrtf
  3424  000F20  C07C  F08C         	movff	?___fladd+1,?_sqrtf+1
  3425  000F24  C07D  F08D         	movff	?___fladd+2,?_sqrtf+2
  3426  000F28  C07E  F08E         	movff	?___fladd+3,?_sqrtf+3
  3427  000F2C  0012               	return	
  3428  000F2E                     l10583:
  3429                           
  3430                           ; BSR set to: 0
  3431  000F2E  BFB7               	btfsc	(sqrtf@ix+3)& (0+255),7,b
  3432  000F30  D006               	goto	u13800
  3433  000F32  51B7               	movf	(sqrtf@ix+3)& (0+255),w,b
  3434  000F34  11B6               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  3435  000F36  11B5               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  3436  000F38  E124               	bnz	l10595
  3437  000F3A  05B4               	decf	sqrtf@ix& (0+255),w,b
  3438  000F3C  E222               	bc	l10595
  3439  000F3E                     u13800:
  3440                           
  3441                           ; BSR set to: 0
  3442  000F3E  D971               	call	PL176	;call to abstracted procedure
  3443  000F40  51B6               	movf	(sqrtf@ix+2)& (0+255),w,b
  3444  000F42  D96A               	call	PL160	;call to abstracted procedure
  3445  000F44  518F               	movf	??_sqrtf& (0+255),w,b
  3446  000F46  1190               	iorwf	(??_sqrtf+1)& (0+255),w,b
  3447  000F48  1191               	iorwf	(??_sqrtf+2)& (0+255),w,b
  3448  000F4A  1192               	iorwf	(??_sqrtf+3)& (0+255),w,b
  3449  000F4C  E109               	bnz	l10589
  3450                           
  3451                           ; BSR set to: 0
  3452  000F4E  C08B  F08B         	movff	sqrtf@x,?_sqrtf
  3453  000F52  C08C  F08C         	movff	sqrtf@x+1,?_sqrtf+1
  3454  000F56  C08D  F08D         	movff	sqrtf@x+2,?_sqrtf+2
  3455  000F5A  C08E  F08E         	movff	sqrtf@x+3,?_sqrtf+3
  3456  000F5E  0012               	return	
  3457  000F60                     l10589:
  3458                           
  3459                           ; BSR set to: 0
  3460  000F60  AFB7               	btfss	(sqrtf@ix+3)& (0+255),7,b
  3461  000F62  D00F               	goto	l10595
  3462                           
  3463                           ; BSR set to: 0
  3464  000F64  0EA5               	movlw	low (STR_8+21)
  3465  000F66  6E1A               	movwf	nanf@s^0,c
  3466  000F68  0E7E               	movlw	high (STR_8+21)
  3467  000F6A  6E1B               	movwf	(nanf@s+1)^0,c
  3468  000F6C  EC27  F01B         	call	_nanf	;wreg free
  3469  000F70  C01A  F08B         	movff	?_nanf,?_sqrtf
  3470  000F74  C01B  F08C         	movff	?_nanf+1,?_sqrtf+1
  3471  000F78  C01C  F08D         	movff	?_nanf+2,?_sqrtf+2
  3472  000F7C  C01D  F08E         	movff	?_nanf+3,?_sqrtf+3
  3473  000F80  0012               	return	
  3474  000F82                     l10595:
  3475                           
  3476                           ; BSR set to: 0
  3477  000F82  0E17               	movlw	23
  3478  000F84  6F8F               	movwf	??_sqrtf& (0+255),b
  3479  000F86  C0B4  F090         	movff	sqrtf@ix,??_sqrtf+1
  3480  000F8A  C0B5  F091         	movff	sqrtf@ix+1,??_sqrtf+2
  3481  000F8E  C0B6  F092         	movff	sqrtf@ix+2,??_sqrtf+3
  3482  000F92  C0B7  F093         	movff	sqrtf@ix+3,??_sqrtf+4
  3483  000F96                     u13835:
  3484  000F96  678F               	tstfsz	??_sqrtf& (0+255),b
  3485  000F98  D001               	goto	u13836
  3486  000F9A  D007               	goto	u13837
  3487  000F9C                     u13836:
  3488  000F9C  3593               	rlcf	(??_sqrtf+4)& (0+255),w,b
  3489  000F9E  3393               	rrcf	(??_sqrtf+4)& (0+255),f,b
  3490  000FA0  3392               	rrcf	(??_sqrtf+3)& (0+255),f,b
  3491  000FA2  3391               	rrcf	(??_sqrtf+2)& (0+255),f,b
  3492  000FA4  3390               	rrcf	(??_sqrtf+1)& (0+255),f,b
  3493  000FA6  2F8F               	decfsz	??_sqrtf& (0+255),f,b
  3494  000FA8  D7F6               	goto	u13835
  3495  000FAA                     u13837:
  3496  000FAA  C090  F0AC         	movff	??_sqrtf+1,sqrtf@m
  3497  000FAE  C091  F0AD         	movff	??_sqrtf+2,sqrtf@m+1
  3498  000FB2  C092  F0AE         	movff	??_sqrtf+3,sqrtf@m+2
  3499  000FB6  C093  F0AF         	movff	??_sqrtf+4,sqrtf@m+3
  3500  000FBA  0100               	movlb	0	; () banked
  3501  000FBC  51AC               	movf	sqrtf@m& (0+255),w,b
  3502  000FBE  11AD               	iorwf	(sqrtf@m+1)& (0+255),w,b
  3503  000FC0  11AE               	iorwf	(sqrtf@m+2)& (0+255),w,b
  3504  000FC2  11AF               	iorwf	(sqrtf@m+3)& (0+255),w,b
  3505  000FC4  E125               	bnz	l1576
  3506                           
  3507                           ; BSR set to: 0
  3508  000FC6  6B98               	clrf	sqrtf@i& (0+255),b
  3509  000FC8  6B99               	clrf	(sqrtf@i+1)& (0+255),b
  3510  000FCA  6B9A               	clrf	(sqrtf@i+2)& (0+255),b
  3511  000FCC  6B9B               	clrf	(sqrtf@i+3)& (0+255),b
  3512  000FCE  D00A               	goto	l10603
  3513  000FD0                     l10599:
  3514                           
  3515                           ; BSR set to: 0
  3516  000FD0  90D8               	bcf	status,0,c
  3517  000FD2  37B4               	rlcf	sqrtf@ix& (0+255),f,b
  3518  000FD4  37B5               	rlcf	(sqrtf@ix+1)& (0+255),f,b
  3519  000FD6  37B6               	rlcf	(sqrtf@ix+2)& (0+255),f,b
  3520  000FD8  37B7               	rlcf	(sqrtf@ix+3)& (0+255),f,b
  3521                           
  3522                           ; BSR set to: 0
  3523  000FDA  2B98               	incf	sqrtf@i& (0+255),f,b
  3524  000FDC  0E00               	movlw	0
  3525  000FDE  2399               	addwfc	(sqrtf@i+1)& (0+255),f,b
  3526  000FE0  239A               	addwfc	(sqrtf@i+2)& (0+255),f,b
  3527  000FE2  239B               	addwfc	(sqrtf@i+3)& (0+255),f,b
  3528  000FE4                     l10603:
  3529                           
  3530                           ; BSR set to: 0
  3531  000FE4  AFB6               	btfss	(sqrtf@ix+2)& (0+255),7,b
  3532  000FE6  D7F4               	goto	l10599
  3533                           
  3534                           ; BSR set to: 0
  3535  000FE8  0EFF               	movlw	255
  3536  000FEA  2598               	addwf	sqrtf@i& (0+255),w,b
  3537  000FEC  6F8F               	movwf	??_sqrtf& (0+255),b
  3538  000FEE  0EFF               	movlw	255
  3539  000FF0  2199               	addwfc	(sqrtf@i+1)& (0+255),w,b
  3540  000FF2  6F90               	movwf	(??_sqrtf+1)& (0+255),b
  3541  000FF4  0EFF               	movlw	255
  3542  000FF6  219A               	addwfc	(sqrtf@i+2)& (0+255),w,b
  3543  000FF8  6F91               	movwf	(??_sqrtf+2)& (0+255),b
  3544  000FFA  0EFF               	movlw	255
  3545  000FFC  219B               	addwfc	(sqrtf@i+3)& (0+255),w,b
  3546  000FFE  6F92               	movwf	(??_sqrtf+3)& (0+255),b
  3547  001000  518F               	movf	??_sqrtf& (0+255),w,b
  3548  001002  5FAC               	subwf	sqrtf@m& (0+255),f,b
  3549  001004  5190               	movf	(??_sqrtf+1)& (0+255),w,b
  3550  001006  5BAD               	subwfb	(sqrtf@m+1)& (0+255),f,b
  3551  001008  5191               	movf	(??_sqrtf+2)& (0+255),w,b
  3552  00100A  5BAE               	subwfb	(sqrtf@m+2)& (0+255),f,b
  3553  00100C  5192               	movf	(??_sqrtf+3)& (0+255),w,b
  3554  00100E  5BAF               	subwfb	(sqrtf@m+3)& (0+255),f,b
  3555  001010                     l1576:
  3556                           
  3557                           ; BSR set to: 0
  3558  001010  0E81               	movlw	129
  3559  001012  27AC               	addwf	sqrtf@m& (0+255),f,b
  3560  001014  0EFF               	movlw	255
  3561  001016  23AD               	addwfc	(sqrtf@m+1)& (0+255),f,b
  3562  001018  23AE               	addwfc	(sqrtf@m+2)& (0+255),f,b
  3563  00101A  23AF               	addwfc	(sqrtf@m+3)& (0+255),f,b
  3564  00101C  D902               	call	PL176	;call to abstracted procedure
  3565  00101E  0E7F               	movlw	127
  3566  001020  15B6               	andwf	(sqrtf@ix+2)& (0+255),w,b
  3567  001022  6F91               	movwf	(??_sqrtf+2)& (0+255),b
  3568  001024  0E00               	movlw	0
  3569  001026  6B92               	clrf	(??_sqrtf+3)& (0+255),b
  3570  001028  118F               	iorwf	??_sqrtf& (0+255),w,b
  3571  00102A  6FB4               	movwf	sqrtf@ix& (0+255),b
  3572  00102C  0E00               	movlw	0
  3573  00102E  1190               	iorwf	(??_sqrtf+1)& (0+255),w,b
  3574  001030  6FB5               	movwf	(sqrtf@ix+1)& (0+255),b
  3575  001032  0E80               	movlw	128
  3576  001034  1191               	iorwf	(??_sqrtf+2)& (0+255),w,b
  3577  001036  6FB6               	movwf	(sqrtf@ix+2)& (0+255),b
  3578  001038  0E00               	movlw	0
  3579  00103A  1192               	iorwf	(??_sqrtf+3)& (0+255),w,b
  3580  00103C  6FB7               	movwf	(sqrtf@ix+3)& (0+255),b
  3581                           
  3582                           ; BSR set to: 0
  3583  00103E  B1AC               	btfsc	sqrtf@m& (0+255),0,b
  3584                           
  3585                           ; BSR set to: 0
  3586  001040  D8DB               	call	PL46	;call to abstracted procedure
  3587  001042                     l1580:
  3588                           
  3589                           ; BSR set to: 0
  3590  001042  35AF               	rlcf	(sqrtf@m+3)& (0+255),w,b
  3591  001044  33AF               	rrcf	(sqrtf@m+3)& (0+255),f,b
  3592  001046  33AE               	rrcf	(sqrtf@m+2)& (0+255),f,b
  3593  001048  33AD               	rrcf	(sqrtf@m+1)& (0+255),f,b
  3594  00104A  33AC               	rrcf	sqrtf@m& (0+255),f,b
  3595  00104C  D8D5               	call	PL46	;call to abstracted procedure
  3596                           
  3597                           ; BSR set to: 0
  3598  00104E  6B94               	clrf	sqrtf@s& (0+255),b
  3599  001050  6B95               	clrf	(sqrtf@s+1)& (0+255),b
  3600  001052  6B96               	clrf	(sqrtf@s+2)& (0+255),b
  3601  001054  6B97               	clrf	(sqrtf@s+3)& (0+255),b
  3602  001056  6BA0               	clrf	sqrtf@q& (0+255),b
  3603  001058  6BA1               	clrf	(sqrtf@q+1)& (0+255),b
  3604  00105A  6BA2               	clrf	(sqrtf@q+2)& (0+255),b
  3605  00105C  6BA3               	clrf	(sqrtf@q+3)& (0+255),b
  3606                           
  3607                           ; BSR set to: 0
  3608  00105E  6BB0               	clrf	sqrtf@r& (0+255),b
  3609  001060  6BB1               	clrf	(sqrtf@r+1)& (0+255),b
  3610  001062  6BB2               	clrf	(sqrtf@r+2)& (0+255),b
  3611  001064  0E01               	movlw	1
  3612  001066  6FB3               	movwf	(sqrtf@r+3)& (0+255),b
  3613  001068  D03B               	goto	l10621
  3614  00106A                     l10615:
  3615                           
  3616                           ; BSR set to: 0
  3617  00106A  5194               	movf	sqrtf@s& (0+255),w,b
  3618  00106C  25B0               	addwf	sqrtf@r& (0+255),w,b
  3619  00106E  6FA4               	movwf	sqrtf@t& (0+255),b
  3620  001070  5195               	movf	(sqrtf@s+1)& (0+255),w,b
  3621  001072  21B1               	addwfc	(sqrtf@r+1)& (0+255),w,b
  3622  001074  6FA5               	movwf	(sqrtf@t+1)& (0+255),b
  3623  001076  5196               	movf	(sqrtf@s+2)& (0+255),w,b
  3624  001078  21B2               	addwfc	(sqrtf@r+2)& (0+255),w,b
  3625  00107A  6FA6               	movwf	(sqrtf@t+2)& (0+255),b
  3626  00107C  5197               	movf	(sqrtf@s+3)& (0+255),w,b
  3627  00107E  21B3               	addwfc	(sqrtf@r+3)& (0+255),w,b
  3628  001080  6FA7               	movwf	(sqrtf@t+3)& (0+255),b
  3629  001082  51A4               	movf	sqrtf@t& (0+255),w,b
  3630  001084  5DB4               	subwf	sqrtf@ix& (0+255),w,b
  3631  001086  51A5               	movf	(sqrtf@t+1)& (0+255),w,b
  3632  001088  59B5               	subwfb	(sqrtf@ix+1)& (0+255),w,b
  3633  00108A  51A6               	movf	(sqrtf@t+2)& (0+255),w,b
  3634  00108C  59B6               	subwfb	(sqrtf@ix+2)& (0+255),w,b
  3635  00108E  51B7               	movf	(sqrtf@ix+3)& (0+255),w,b
  3636  001090  0A80               	xorlw	128
  3637  001092  6F8F               	movwf	??_sqrtf& (0+255),b
  3638  001094  51A7               	movf	(sqrtf@t+3)& (0+255),w,b
  3639  001096  0A80               	xorlw	128
  3640  001098  598F               	subwfb	??_sqrtf& (0+255),w,b
  3641  00109A  E31C               	bnc	l1583
  3642                           
  3643                           ; BSR set to: 0
  3644  00109C  51A4               	movf	sqrtf@t& (0+255),w,b
  3645  00109E  25B0               	addwf	sqrtf@r& (0+255),w,b
  3646  0010A0  6F94               	movwf	sqrtf@s& (0+255),b
  3647  0010A2  51A5               	movf	(sqrtf@t+1)& (0+255),w,b
  3648  0010A4  21B1               	addwfc	(sqrtf@r+1)& (0+255),w,b
  3649  0010A6  6F95               	movwf	(sqrtf@s+1)& (0+255),b
  3650  0010A8  51A6               	movf	(sqrtf@t+2)& (0+255),w,b
  3651  0010AA  21B2               	addwfc	(sqrtf@r+2)& (0+255),w,b
  3652  0010AC  6F96               	movwf	(sqrtf@s+2)& (0+255),b
  3653  0010AE  51A7               	movf	(sqrtf@t+3)& (0+255),w,b
  3654  0010B0  21B3               	addwfc	(sqrtf@r+3)& (0+255),w,b
  3655  0010B2  6F97               	movwf	(sqrtf@s+3)& (0+255),b
  3656  0010B4  51A4               	movf	sqrtf@t& (0+255),w,b
  3657  0010B6  5FB4               	subwf	sqrtf@ix& (0+255),f,b
  3658  0010B8  51A5               	movf	(sqrtf@t+1)& (0+255),w,b
  3659  0010BA  5BB5               	subwfb	(sqrtf@ix+1)& (0+255),f,b
  3660  0010BC  51A6               	movf	(sqrtf@t+2)& (0+255),w,b
  3661  0010BE  5BB6               	subwfb	(sqrtf@ix+2)& (0+255),f,b
  3662  0010C0  51A7               	movf	(sqrtf@t+3)& (0+255),w,b
  3663  0010C2  5BB7               	subwfb	(sqrtf@ix+3)& (0+255),f,b
  3664  0010C4  51B0               	movf	sqrtf@r& (0+255),w,b
  3665  0010C6  27A0               	addwf	sqrtf@q& (0+255),f,b
  3666  0010C8  51B1               	movf	(sqrtf@r+1)& (0+255),w,b
  3667  0010CA  23A1               	addwfc	(sqrtf@q+1)& (0+255),f,b
  3668  0010CC  51B2               	movf	(sqrtf@r+2)& (0+255),w,b
  3669  0010CE  23A2               	addwfc	(sqrtf@q+2)& (0+255),f,b
  3670  0010D0  51B3               	movf	(sqrtf@r+3)& (0+255),w,b
  3671  0010D2  23A3               	addwfc	(sqrtf@q+3)& (0+255),f,b
  3672  0010D4                     l1583:
  3673                           
  3674                           ; BSR set to: 0
  3675  0010D4  D891               	call	PL46	;call to abstracted procedure
  3676                           
  3677                           ; BSR set to: 0
  3678  0010D6  90D8               	bcf	status,0,c
  3679  0010D8  33B3               	rrcf	(sqrtf@r+3)& (0+255),f,b
  3680  0010DA  33B2               	rrcf	(sqrtf@r+2)& (0+255),f,b
  3681  0010DC  33B1               	rrcf	(sqrtf@r+1)& (0+255),f,b
  3682  0010DE  33B0               	rrcf	sqrtf@r& (0+255),f,b
  3683  0010E0                     l10621:
  3684                           
  3685                           ; BSR set to: 0
  3686  0010E0  51B0               	movf	sqrtf@r& (0+255),w,b
  3687  0010E2  11B1               	iorwf	(sqrtf@r+1)& (0+255),w,b
  3688  0010E4  11B2               	iorwf	(sqrtf@r+2)& (0+255),w,b
  3689  0010E6  11B3               	iorwf	(sqrtf@r+3)& (0+255),w,b
  3690  0010E8  E1C0               	bnz	l10615
  3691                           
  3692                           ; BSR set to: 0
  3693  0010EA  51B4               	movf	sqrtf@ix& (0+255),w,b
  3694  0010EC  11B5               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  3695  0010EE  11B6               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  3696  0010F0  11B7               	iorwf	(sqrtf@ix+3)& (0+255),w,b
  3697  0010F2  E038               	bz	l1585
  3698                           
  3699                           ; BSR set to: 0
  3700  0010F4  D88A               	call	PL122	;call to abstracted procedure
  3701                           
  3702                           ; BSR set to: 0
  3703  0010F6  C0A8  F07B         	movff	sqrtf@z,___flge@ff1
  3704  0010FA  C0A9  F07C         	movff	sqrtf@z+1,___flge@ff1+1
  3705  0010FE  C0AA  F07D         	movff	sqrtf@z+2,___flge@ff1+2
  3706  001102  C0AB  F07E         	movff	sqrtf@z+3,___flge@ff1+3
  3707  001106  6B7F               	clrf	___flge@ff2& (0+255),b
  3708  001108  6B80               	clrf	(___flge@ff2+1)& (0+255),b
  3709  00110A  0E80               	movlw	128
  3710  00110C  6F81               	movwf	(___flge@ff2+2)& (0+255),b
  3711  00110E  0E3F               	movlw	63
  3712  001110  6F82               	movwf	(___flge@ff2+3)& (0+255),b
  3713  001112  EC56  F016         	call	___flge	;wreg free
  3714  001116  E326               	bnc	l1585
  3715                           
  3716                           ; BSR set to: 0
  3717  001118  D878               	call	PL122	;call to abstracted procedure
  3718                           
  3719                           ; BSR set to: 0
  3720  00111A  6B7B               	clrf	___flge@ff1& (0+255),b
  3721  00111C  6B7C               	clrf	(___flge@ff1+1)& (0+255),b
  3722  00111E  0E80               	movlw	128
  3723  001120  6F7D               	movwf	(___flge@ff1+2)& (0+255),b
  3724  001122  0E3F               	movlw	63
  3725  001124  6F7E               	movwf	(___flge@ff1+3)& (0+255),b
  3726  001126  C0A8  F07F         	movff	sqrtf@z,___flge@ff2
  3727  00112A  C0A9  F080         	movff	sqrtf@z+1,___flge@ff2+1
  3728  00112E  C0AA  F081         	movff	sqrtf@z+2,___flge@ff2+2
  3729  001132  C0AB  F082         	movff	sqrtf@z+3,___flge@ff2+3
  3730  001136  EC56  F016         	call	___flge	;wreg free
  3731  00113A  E206               	bc	l10635
  3732                           
  3733                           ; BSR set to: 0
  3734  00113C  0E02               	movlw	2
  3735  00113E  27A0               	addwf	sqrtf@q& (0+255),f,b
  3736  001140  0E00               	movlw	0
  3737  001142  23A1               	addwfc	(sqrtf@q+1)& (0+255),f,b
  3738  001144  23A2               	addwfc	(sqrtf@q+2)& (0+255),f,b
  3739  001146  D00D               	goto	L4
  3740  001148                     l10635:
  3741                           
  3742                           ; BSR set to: 0
  3743  001148  0E01               	movlw	1
  3744  00114A  15A0               	andwf	sqrtf@q& (0+255),w,b
  3745  00114C  6F8F               	movwf	??_sqrtf& (0+255),b
  3746  00114E  6B90               	clrf	(??_sqrtf+1)& (0+255),b
  3747  001150  6B91               	clrf	(??_sqrtf+2)& (0+255),b
  3748  001152  6B92               	clrf	(??_sqrtf+3)& (0+255),b
  3749  001154  518F               	movf	??_sqrtf& (0+255),w,b
  3750  001156  27A0               	addwf	sqrtf@q& (0+255),f,b
  3751  001158  5190               	movf	(??_sqrtf+1)& (0+255),w,b
  3752  00115A  23A1               	addwfc	(sqrtf@q+1)& (0+255),f,b
  3753  00115C  5191               	movf	(??_sqrtf+2)& (0+255),w,b
  3754  00115E  23A2               	addwfc	(sqrtf@q+2)& (0+255),f,b
  3755  001160  5192               	movf	(??_sqrtf+3)& (0+255),w,b
  3756  001162                     L4:
  3757  001162  23A3               	addwfc	(sqrtf@q+3)& (0+255),f,b
  3758  001164                     l1585:
  3759                           
  3760                           ; BSR set to: 0
  3761  001164  C0A0  F08F         	movff	sqrtf@q,??_sqrtf
  3762  001168  C0A1  F090         	movff	sqrtf@q+1,??_sqrtf+1
  3763  00116C  C0A2  F091         	movff	sqrtf@q+2,??_sqrtf+2
  3764  001170  C0A3  F092         	movff	sqrtf@q+3,??_sqrtf+3
  3765  001174  3592               	rlcf	(??_sqrtf+3)& (0+255),w,b
  3766  001176  3392               	rrcf	(??_sqrtf+3)& (0+255),f,b
  3767  001178  3391               	rrcf	(??_sqrtf+2)& (0+255),f,b
  3768  00117A  3390               	rrcf	(??_sqrtf+1)& (0+255),f,b
  3769  00117C  338F               	rrcf	??_sqrtf& (0+255),f,b
  3770  00117E  0E00               	movlw	0
  3771  001180  258F               	addwf	??_sqrtf& (0+255),w,b
  3772  001182  6FB4               	movwf	sqrtf@ix& (0+255),b
  3773  001184  0E00               	movlw	0
  3774  001186  2190               	addwfc	(??_sqrtf+1)& (0+255),w,b
  3775  001188  6FB5               	movwf	(sqrtf@ix+1)& (0+255),b
  3776  00118A  0E00               	movlw	0
  3777  00118C  2191               	addwfc	(??_sqrtf+2)& (0+255),w,b
  3778  00118E  6FB6               	movwf	(sqrtf@ix+2)& (0+255),b
  3779  001190  0E3F               	movlw	63
  3780  001192  2192               	addwfc	(??_sqrtf+3)& (0+255),w,b
  3781  001194  6FB7               	movwf	(sqrtf@ix+3)& (0+255),b
  3782  001196  C0AC  F08F         	movff	sqrtf@m,??_sqrtf
  3783  00119A  C0AD  F090         	movff	sqrtf@m+1,??_sqrtf+1
  3784  00119E  C0AE  F091         	movff	sqrtf@m+2,??_sqrtf+2
  3785  0011A2  C0AF  F092         	movff	sqrtf@m+3,??_sqrtf+3
  3786  0011A6  0E17               	movlw	23
  3787  0011A8                     u13925:
  3788  0011A8  90D8               	bcf	status,0,c
  3789  0011AA  378F               	rlcf	??_sqrtf& (0+255),f,b
  3790  0011AC  3790               	rlcf	(??_sqrtf+1)& (0+255),f,b
  3791  0011AE  3791               	rlcf	(??_sqrtf+2)& (0+255),f,b
  3792  0011B0  3792               	rlcf	(??_sqrtf+3)& (0+255),f,b
  3793  0011B2  2EE8               	decfsz	wreg,f,c
  3794  0011B4  D7F9               	goto	u13925
  3795  0011B6  518F               	movf	??_sqrtf& (0+255),w,b
  3796  0011B8  27B4               	addwf	sqrtf@ix& (0+255),f,b
  3797  0011BA  5190               	movf	(??_sqrtf+1)& (0+255),w,b
  3798  0011BC  23B5               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  3799  0011BE  5191               	movf	(??_sqrtf+2)& (0+255),w,b
  3800  0011C0  23B6               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  3801  0011C2  5192               	movf	(??_sqrtf+3)& (0+255),w,b
  3802  0011C4  23B7               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  3803                           
  3804                           ; BSR set to: 0
  3805  0011C6  C0B4  F09C         	movff	sqrtf@ix,sqrtf@__xc8_float_word
  3806  0011CA  C0B5  F09D         	movff	sqrtf@ix+1,sqrtf@__xc8_float_word+1
  3807  0011CE  C0B6  F09E         	movff	sqrtf@ix+2,sqrtf@__xc8_float_word+2
  3808  0011D2  C0B7  F09F         	movff	sqrtf@ix+3,sqrtf@__xc8_float_word+3
  3809                           
  3810                           ; BSR set to: 0
  3811  0011D6  C09C  F0A8         	movff	sqrtf@__xc8_float_word,sqrtf@z
  3812  0011DA  C09D  F0A9         	movff	sqrtf@__xc8_float_word+1,sqrtf@z+1
  3813  0011DE  C09E  F0AA         	movff	sqrtf@__xc8_float_word+2,sqrtf@z+2
  3814  0011E2  C09F  F0AB         	movff	sqrtf@__xc8_float_word+3,sqrtf@z+3
  3815                           
  3816                           ; BSR set to: 0
  3817  0011E6  C0A8  F08B         	movff	sqrtf@z,?_sqrtf
  3818  0011EA  C0A9  F08C         	movff	sqrtf@z+1,?_sqrtf+1
  3819  0011EE  C0AA  F08D         	movff	sqrtf@z+2,?_sqrtf+2
  3820  0011F2  C0AB  F08E         	movff	sqrtf@z+3,?_sqrtf+3
  3821                           
  3822                           ; BSR set to: 0
  3823  0011F6  0012               	return		;funcret
  3824  0011F8                     __end_of_sqrtf:
  3825                           	callstack 0
  3826  0011F8                     PL46:
  3827                           	callstack 26
  3828  0011F8  51B4               	movf	sqrtf@ix& (0+255),w,b
  3829  0011FA  27B4               	addwf	sqrtf@ix& (0+255),f,b
  3830  0011FC  51B5               	movf	(sqrtf@ix+1)& (0+255),w,b
  3831  0011FE  23B5               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  3832  001200  51B6               	movf	(sqrtf@ix+2)& (0+255),w,b
  3833  001202  23B6               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  3834  001204  51B7               	movf	(sqrtf@ix+3)& (0+255),w,b
  3835  001206  23B7               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  3836  001208  0012               	return	
  3837  00120A                     __end_ofPL46:
  3838                           	callstack 0
  3839  00120A                     PL122:
  3840                           	callstack 26
  3841  00120A  6BA8               	clrf	sqrtf@z& (0+255),b
  3842  00120C  6BA9               	clrf	(sqrtf@z+1)& (0+255),b
  3843  00120E  0E80               	movlw	128
  3844  001210  6FAA               	movwf	(sqrtf@z+2)& (0+255),b
  3845  001212  0E3F               	movlw	63
  3846  001214  6FAB               	movwf	(sqrtf@z+3)& (0+255),b
  3847  001216  0C3F               	retlw	63
  3848  001218                     __end_ofPL122:
  3849                           	callstack 0
  3850  001218                     PL160:
  3851                           	callstack 26
  3852  001218  6F91               	movwf	(??_sqrtf+2)& (0+255),b
  3853  00121A  0E7F               	movlw	127
  3854  00121C  15B7               	andwf	(sqrtf@ix+3)& (0+255),w,b
  3855  00121E  6F92               	movwf	(??_sqrtf+3)& (0+255),b
  3856  001220  0012               	return	
  3857  001222                     __end_ofPL160:
  3858                           	callstack 0
  3859  001222                     PL176:
  3860                           	callstack 26
  3861  001222  51B4               	movf	sqrtf@ix& (0+255),w,b
  3862  001224  6F8F               	movwf	??_sqrtf& (0+255),b
  3863  001226  51B5               	movf	(sqrtf@ix+1)& (0+255),w,b
  3864  001228  6F90               	movwf	(??_sqrtf+1)& (0+255),b
  3865  00122A  0012               	return	
  3866  00122C                     __end_ofPL176:
  3867                           	callstack 0
  3868                           
  3869 ;; *************** function _nanf *****************
  3870 ;; Defined at:
  3871 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nanf.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  s               2   25[COMRAM] PTR const unsigned char 
  3874 ;;		 -> STR_38(1), 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  u               4   29[COMRAM] struct .
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  4   25[COMRAM] float 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2
  3881 ;; Tracked objects:
  3882 ;;		On entry : 3F/0
  3883 ;;		On exit  : 3F/0
  3884 ;;		Unchanged: 3F/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3886 ;;      Params:         4       0       0       0       0       0       0
  3887 ;;      Locals:         4       0       0       0       0       0       0
  3888 ;;      Temps:          0       0       0       0       0       0       0
  3889 ;;      Totals:         8       0       0       0       0       0       0
  3890 ;;Total ram usage:        8 bytes
  3891 ;; Hardware stack levels used: 1
  3892 ;; Hardware stack levels required when called: 3
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_sqrtf
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text3
  3901  00364E                     __ptext3:
  3902                           	callstack 0
  3903  00364E                     _nanf:
  3904                           	callstack 26
  3905                           
  3906                           ; BSR set to: 0
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;incstack = 0
  3910  00364E  681E               	setf	nanf@u^0,c
  3911  003650  681F               	setf	(nanf@u+1)^0,c
  3912  003652  6820               	setf	(nanf@u+2)^0,c
  3913  003654  0E7F               	movlw	127
  3914  003656  6E21               	movwf	(nanf@u+3)^0,c
  3915                           
  3916                           ; BSR set to: 0
  3917  003658  C01E  F01A         	movff	nanf@u,?_nanf
  3918  00365C  C01F  F01B         	movff	nanf@u+1,?_nanf+1
  3919  003660  C020  F01C         	movff	nanf@u+2,?_nanf+2
  3920  003664  C021  F01D         	movff	nanf@u+3,?_nanf+3
  3921                           
  3922                           ; BSR set to: 0
  3923  003668  0C7F               	retlw	127	;funcret
  3924  00366A                     __end_of_nanf:
  3925                           	callstack 0
  3926                           
  3927 ;; *************** function _show_lcd_main *****************
  3928 ;; Defined at:
  3929 ;;		line 473 in file "main.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  pwr_dsp         2  154[BANK0 ] unsigned short 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 3F/1
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         0       0       0       0       0       0       0
  3944 ;;      Locals:         0       2       0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0
  3946 ;;      Totals:         0       2       0       0       0       0       0
  3947 ;;Total ram usage:        2 bytes
  3948 ;; Hardware stack levels used: 1
  3949 ;; Hardware stack levels required when called: 11
  3950 ;; This function calls:
  3951 ;;		_calc_power
  3952 ;;		_lcdPrint
  3953 ;;		_lcd_gotoxy
  3954 ;;		_sprintf
  3955 ;; This function is called by:
  3956 ;;		_main
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text4
  3961  0019EA                     __ptext4:
  3962                           	callstack 0
  3963  0019EA                     _show_lcd_main:
  3964                           	callstack 0
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;main.c: 474:     uint16_t pwr_dsp;;main.c: 476:     sprintf(TxtBuf, "U_In:%uV ", U_real
      +                          );
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;incstack = 0
  3971  0019EA  D8D5               	call	PL130	;call to abstracted procedure
  3972  0019EC  0EC8               	movlw	low STR_15
  3973  0019EE  6FC6               	movwf	sprintf@fmt& (0+255),b
  3974  0019F0  0E7F               	movlw	high STR_15
  3975  0019F2  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  3976  0019F4  C18A  F1C8         	movff	_U_real,?_sprintf+4
  3977  0019F8  C18B  F1C9         	movff	_U_real+1,?_sprintf+5
  3978  0019FC  EC7A  F019         	call	_sprintf	;wreg free
  3979                           
  3980                           ; BSR set to: 1
  3981                           ;main.c: 477:     lcd_gotoxy(1, 1);
  3982  001A00  0E01               	movlw	1
  3983  001A02  6E1E               	movwf	lcd_gotoxy@y^0,c
  3984  001A04  EC9D  F019         	call	_lcd_gotoxy
  3985                           
  3986                           ;main.c: 478:     lcdPrint(TxtBuf);
  3987  001A08  D8A5               	call	PL40	;call to abstracted procedure
  3988  001A0A  ECB1  F013         	call	_lcdPrint	;wreg free
  3989                           
  3990                           ;main.c: 480:     if (!is_stab) {
  3991  001A0E  BA44               	btfsc	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  3992  001A10  D00A               	goto	l10657
  3993                           
  3994                           ;main.c: 481:         lcd_gotoxy(11, 1);
  3995  001A12  D8CE               	call	PL188	;call to abstracted procedure
  3996  001A14  EC9D  F019         	call	_lcd_gotoxy
  3997                           
  3998                           ;main.c: 482:         lcdPrint("NOT STAB! ");
  3999  001A18  0EA8               	movlw	low STR_16
  4000  001A1A  6E23               	movwf	lcdPrint@t^0,c
  4001  001A1C  0E7F               	movlw	high STR_16
  4002  001A1E  6E24               	movwf	(lcdPrint@t+1)^0,c
  4003  001A20  ECB1  F013         	call	_lcdPrint	;wreg free
  4004                           
  4005                           ;main.c: 483:     } else {
  4006  001A24  D009               	goto	l10661
  4007  001A26                     l10657:
  4008                           
  4009                           ;main.c: 484:         lcd_gotoxy(11, 1);
  4010  001A26  D8C4               	call	PL188	;call to abstracted procedure
  4011  001A28  EC9D  F019         	call	_lcd_gotoxy
  4012                           
  4013                           ;main.c: 485:         lcdPrint("STABILIZE ");
  4014  001A2C  0EB3               	movlw	low STR_17
  4015  001A2E  6E23               	movwf	lcdPrint@t^0,c
  4016  001A30  0E7F               	movlw	high STR_17
  4017  001A32  6E24               	movwf	(lcdPrint@t+1)^0,c
  4018  001A34  ECB1  F013         	call	_lcdPrint	;wreg free
  4019  001A38                     l10661:
  4020                           
  4021                           ;main.c: 488:     sprintf(TxtBuf, "PwR:%u%% ", t_power);
  4022  001A38  D887               	call	PL22	;call to abstracted procedure
  4023  001A3A  0EBE               	movlw	low STR_18
  4024  001A3C  6FC6               	movwf	sprintf@fmt& (0+255),b
  4025  001A3E  0E7F               	movlw	high STR_18
  4026  001A40  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  4027  001A42  C03B  F1C8         	movff	_t_power,?_sprintf+4
  4028  001A46  C03C  F1C9         	movff	_t_power+1,?_sprintf+5
  4029  001A4A  EC7A  F019         	call	_sprintf	;wreg free
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;main.c: 489:     lcd_gotoxy(11, 2);
  4033  001A4E  0E02               	movlw	2
  4034  001A50  6E1E               	movwf	lcd_gotoxy@y^0,c
  4035  001A52  0E0B               	movlw	11
  4036  001A54  EC9D  F019         	call	_lcd_gotoxy
  4037                           
  4038                           ;main.c: 490:     lcdPrint(TxtBuf);
  4039  001A58  D87D               	call	PL40	;call to abstracted procedure
  4040  001A5A  ECB1  F013         	call	_lcdPrint	;wreg free
  4041                           
  4042                           ;main.c: 492:     sprintf(TxtBuf, "Coeff:%f  ", coef);
  4043  001A5E  D874               	call	PL22	;call to abstracted procedure
  4044  001A60  0E9D               	movlw	low STR_19
  4045  001A62  6FC6               	movwf	sprintf@fmt& (0+255),b
  4046  001A64  0E7F               	movlw	high STR_19
  4047  001A66  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  4048  001A68  C108  F1C8         	movff	_coef,?_sprintf+4
  4049  001A6C  C109  F1C9         	movff	_coef+1,?_sprintf+5
  4050  001A70  C10A  F1CA         	movff	_coef+2,?_sprintf+6
  4051  001A74  C10B  F1CB         	movff	_coef+3,?_sprintf+7
  4052  001A78  EC7A  F019         	call	_sprintf	;wreg free
  4053                           
  4054                           ; BSR set to: 1
  4055                           ;main.c: 493:     lcd_gotoxy(1, 4);
  4056  001A7C  D896               	call	PL186	;call to abstracted procedure
  4057  001A7E  EC9D  F019         	call	_lcd_gotoxy
  4058                           
  4059                           ;main.c: 494:     lcdPrint(TxtBuf);
  4060  001A82  D868               	call	PL40	;call to abstracted procedure
  4061  001A84  ECB1  F013         	call	_lcdPrint	;wreg free
  4062                           
  4063                           ;main.c: 496:     if ((tick_t1_1 <= 100) && (show_tp)) {
  4064  001A88  0E65               	movlw	101
  4065  001A8A  0101               	movlb	1	; () banked
  4066  001A8C  6123               	cpfslt	_tick_t1_1& (0+255),b
  4067  001A8E  D03B               	goto	l10693
  4068                           
  4069                           ; BSR set to: 1
  4070  001A90  A644               	btfss	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4071  001A92  D039               	goto	l10693
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;main.c: 498:         pwr_dsp = calc_power((uint8_t) EncData, t_res, 220);
  4075  001A94  D86E               	call	PL82	;call to abstracted procedure
  4076  001A96  0100               	movlb	0	; () banked
  4077  001A98  6B6C               	clrf	(calc_power@u_rl+1)& (0+255),b
  4078  001A9A  0EDC               	movlw	220
  4079  001A9C  6F6B               	movwf	calc_power@u_rl& (0+255),b
  4080  001A9E  0101               	movlb	1	; () banked
  4081  001AA0  5116               	movf	_EncData& (0+255),w,b
  4082  001AA2  ECED  F010         	call	_calc_power
  4083  001AA6  C067  F0FA         	movff	?_calc_power,show_lcd_main@pwr_dsp
  4084  001AAA  C068  F0FB         	movff	?_calc_power+1,show_lcd_main@pwr_dsp+1
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;main.c: 499:         sprintf(TxtBuf, "ClcP:%c%04uW %c=%u.%u", 0x01, pwr_dsp, 0x02, r_wh
      +                          ole, r_dec);
  4088  001AAE  D84C               	call	PL22	;call to abstracted procedure
  4089  001AB0  0EA6               	movlw	low STR_20
  4090  001AB2  6FC6               	movwf	sprintf@fmt& (0+255),b
  4091  001AB4  0E7E               	movlw	high STR_20
  4092  001AB6  D874               	call	PL168	;call to abstracted procedure
  4093  001AB8  C0FA  F1CA         	movff	show_lcd_main@pwr_dsp,?_sprintf+6
  4094  001ABC  C0FB  F1CB         	movff	show_lcd_main@pwr_dsp+1,?_sprintf+7
  4095  001AC0  D84E               	call	PL68	;call to abstracted procedure
  4096  001AC2  EC7A  F019         	call	_sprintf	;wreg free
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;main.c: 500:         lcd_gotoxy(1, 3);
  4100  001AC6  EC48  F007         	call	PL120	;call to abstracted procedure
  4101  001ACA  EC9D  F019         	call	_lcd_gotoxy
  4102                           
  4103                           ;main.c: 501:         lcdPrint(TxtBuf);
  4104  001ACE  D842               	call	PL40	;call to abstracted procedure
  4105  001AD0  ECB1  F013         	call	_lcdPrint	;wreg free
  4106                           
  4107                           ;main.c: 502:         if (is_power) {
  4108  001AD4  A844               	btfss	(_is_power/(0+8))^0,_is_power& (0+7),c
  4109  001AD6  D005               	goto	l10687
  4110                           
  4111                           ;main.c: 503:             sprintf(TxtBuf, "PwU:%u%%*", EncData);
  4112  001AD8  D837               	call	PL22	;call to abstracted procedure
  4113  001ADA  D854               	call	PL98	;call to abstracted procedure
  4114  001ADC  EC7A  F019         	call	_sprintf	;wreg free
  4115                           
  4116                           ;main.c: 504:         } else {
  4117  001AE0  D00B               	goto	l10689
  4118  001AE2                     l10687:
  4119                           
  4120                           ;main.c: 505:             sprintf(TxtBuf, "PwU:%u%%  ", EncData);
  4121  001AE2  D832               	call	PL22	;call to abstracted procedure
  4122  001AE4  0E92               	movlw	low STR_22
  4123  001AE6  6FC6               	movwf	sprintf@fmt& (0+255),b
  4124  001AE8  0E7F               	movlw	high STR_22
  4125  001AEA  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  4126  001AEC  C116  F1C8         	movff	_EncData,?_sprintf+4
  4127  001AF0  C117  F1C9         	movff	_EncData+1,?_sprintf+5
  4128  001AF4  EC7A  F019         	call	_sprintf	;wreg free
  4129  001AF8                     l10689:
  4130                           
  4131                           ; BSR set to: 1
  4132                           ;main.c: 507:         lcd_gotoxy(1, 2);
  4133  001AF8  EC4B  F007         	call	PL126	;call to abstracted procedure
  4134  001AFC  EC9D  F019         	call	_lcd_gotoxy
  4135                           
  4136                           ;main.c: 508:         lcdPrint(TxtBuf);
  4137  001B00  D829               	call	PL40	;call to abstracted procedure
  4138  001B02  EFB1  F013         	goto	_lcdPrint	;wreg free
  4139  001B06                     l10693:
  4140                           
  4141                           ; BSR set to: 1
  4142                           ;main.c: 510:         sprintf(TxtBuf, "ApxP:%c%04uW %c=%u.%u", 0x01, watt_disp, 0x02, r_
      +                          whole, r_dec);
  4143  001B06  D847               	call	PL130	;call to abstracted procedure
  4144  001B08  0EBC               	movlw	low STR_23
  4145  001B0A  6FC6               	movwf	sprintf@fmt& (0+255),b
  4146  001B0C  0E7E               	movlw	high STR_23
  4147  001B0E  D848               	call	PL168	;call to abstracted procedure
  4148  001B10  C118  F1CA         	movff	_watt_disp,?_sprintf+6
  4149  001B14  C119  F1CB         	movff	_watt_disp+1,?_sprintf+7
  4150  001B18  D822               	call	PL68	;call to abstracted procedure
  4151  001B1A  EC7A  F019         	call	_sprintf	;wreg free
  4152                           
  4153                           ; BSR set to: 1
  4154                           ;main.c: 511:         show_tp = 0;
  4155  001B1E  9644               	bcf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4156                           
  4157                           ; BSR set to: 1
  4158                           ;main.c: 512:         lcd_gotoxy(1, 3);
  4159  001B20  EC48  F007         	call	PL120	;call to abstracted procedure
  4160  001B24  EC9D  F019         	call	_lcd_gotoxy
  4161                           
  4162                           ;main.c: 513:         lcdPrint(TxtBuf);
  4163  001B28  D815               	call	PL40	;call to abstracted procedure
  4164  001B2A  ECB1  F013         	call	_lcdPrint	;wreg free
  4165                           
  4166                           ;main.c: 514:         sprintf(TxtBuf, "PwU:%u%%*", EncData);
  4167  001B2E  D80C               	call	PL22	;call to abstracted procedure
  4168  001B30  D829               	call	PL98	;call to abstracted procedure
  4169  001B32  EC7A  F019         	call	_sprintf	;wreg free
  4170                           
  4171                           ; BSR set to: 1
  4172                           ;main.c: 515:         lcd_gotoxy(1, 2);
  4173  001B36  EC4B  F007         	call	PL126	;call to abstracted procedure
  4174  001B3A  EC9D  F019         	call	_lcd_gotoxy
  4175                           
  4176                           ;main.c: 516:         lcdPrint(TxtBuf);
  4177  001B3E  D80A               	call	PL40	;call to abstracted procedure
  4178  001B40  ECB1  F013         	call	_lcdPrint	;wreg free
  4179                           
  4180                           ;main.c: 517:         EncData = power;
  4181  001B44  EF3C  F007         	goto	PL106	;call to abstracted procedure
  4182  001B48                     __end_of_show_lcd_main:
  4183                           	callstack 0
  4184  001B48                     PL22:
  4185                           	callstack 19
  4186  001B48  0E75               	movlw	low _TxtBuf
  4187  001B4A  0101               	movlb	1	; () banked
  4188  001B4C  6FC4               	movwf	sprintf@s& (0+255),b
  4189  001B4E  0E01               	movlw	high _TxtBuf
  4190  001B50  6FC5               	movwf	(sprintf@s+1)& (0+255),b
  4191  001B52  0012               	return	
  4192  001B54                     __end_ofPL22:
  4193                           	callstack 0
  4194  001B54                     PL40:
  4195                           	callstack 19
  4196  001B54  0E75               	movlw	low _TxtBuf
  4197  001B56  6E23               	movwf	lcdPrint@t^0,c
  4198  001B58  0E01               	movlw	high _TxtBuf
  4199  001B5A  6E24               	movwf	(lcdPrint@t+1)^0,c
  4200  001B5C  0012               	return	
  4201  001B5E                     __end_ofPL40:
  4202                           	callstack 0
  4203  001B5E                     PL68:
  4204                           	callstack 19
  4205  001B5E  6BCD               	clrf	(?_sprintf+9)& (0+255),b
  4206  001B60  0E02               	movlw	2
  4207  001B62  6FCC               	movwf	(?_sprintf+8)& (0+255),b
  4208  001B64  C11E  F1CE         	movff	_r_whole,?_sprintf+10
  4209  001B68  6BCF               	clrf	(?_sprintf+11)& (0+255),b
  4210  001B6A  C11D  F1D0         	movff	_r_dec,?_sprintf+12
  4211  001B6E  6BD1               	clrf	(?_sprintf+13)& (0+255),b
  4212  001B70  0012               	return	
  4213  001B72                     __end_ofPL68:
  4214                           	callstack 0
  4215  001B72                     PL82:
  4216                           	callstack 19
  4217  001B72  C104  F067         	movff	_t_res,calc_power@res
  4218  001B76  C105  F068         	movff	_t_res+1,calc_power@res+1
  4219  001B7A  C106  F069         	movff	_t_res+2,calc_power@res+2
  4220  001B7E  C107  F06A         	movff	_t_res+3,calc_power@res+3
  4221  001B82  0012               	return	
  4222  001B84                     __end_ofPL82:
  4223                           	callstack 0
  4224  001B84                     PL98:
  4225                           	callstack 19
  4226  001B84  0ED2               	movlw	low STR_21
  4227  001B86  6FC6               	movwf	sprintf@fmt& (0+255),b
  4228  001B88  0E7F               	movlw	high STR_21
  4229  001B8A  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  4230  001B8C  C116  F1C8         	movff	_EncData,?_sprintf+4
  4231  001B90  C117  F1C9         	movff	_EncData+1,?_sprintf+5
  4232  001B94  0012               	return	
  4233  001B96                     __end_ofPL98:
  4234                           	callstack 0
  4235  001B96                     PL130:
  4236                           	callstack 19
  4237  001B96  0E75               	movlw	low _TxtBuf
  4238  001B98  6FC4               	movwf	sprintf@s& (0+255),b
  4239  001B9A  0E01               	movlw	high _TxtBuf
  4240  001B9C  6FC5               	movwf	(sprintf@s+1)& (0+255),b
  4241  001B9E  0012               	return	
  4242  001BA0                     __end_ofPL130:
  4243                           	callstack 0
  4244  001BA0                     PL168:
  4245                           	callstack 19
  4246  001BA0  6FC7               	movwf	(sprintf@fmt+1)& (0+255),b
  4247  001BA2  6BC9               	clrf	(?_sprintf+5)& (0+255),b
  4248  001BA4  0E01               	movlw	1
  4249  001BA6  6FC8               	movwf	(?_sprintf+4)& (0+255),b
  4250  001BA8  0C01               	retlw	1
  4251  001BAA                     __end_ofPL168:
  4252                           	callstack 0
  4253  001BAA                     PL186:
  4254                           	callstack 19
  4255  001BAA  0E04               	movlw	4
  4256  001BAC  6E1E               	movwf	lcd_gotoxy@y^0,c
  4257  001BAE  0C01               	retlw	1
  4258  001BB0                     __end_ofPL186:
  4259                           	callstack 0
  4260  001BB0                     PL188:
  4261                           	callstack 19
  4262  001BB0  0E01               	movlw	1
  4263  001BB2  6E1E               	movwf	lcd_gotoxy@y^0,c
  4264  001BB4  0C0B               	retlw	11
  4265  001BB6                     __end_ofPL188:
  4266                           	callstack 0
  4267                           
  4268 ;; *************** function _sprintf *****************
  4269 ;; Defined at:
  4270 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  s               2   56[BANK1 ] PTR unsigned char 
  4273 ;;		 -> TxtBuf(21), 
  4274 ;;  fmt             2   58[BANK1 ] PTR const unsigned char 
  4275 ;;		 -> STR_24(10), STR_23(22), STR_22(11), STR_21(10), 
  4276 ;;		 -> STR_20(22), STR_19(11), STR_18(10), STR_15(10), 
  4277 ;;		 -> STR_12(20), STR_4(6), STR_2(15), 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  f               6  148[BANK0 ] struct _IO_FILE
  4280 ;;  ap              2  146[BANK0 ] PTR void [1]
  4281 ;;		 -> ?_sprintf(2), 
  4282 ;;  ret             2    0        int 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  2   56[BANK1 ] int 
  4285 ;; Registers used:
  4286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 3F/1
  4289 ;;		On exit  : 3F/1
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4292 ;;      Params:         0       0      14       0       0       0       0
  4293 ;;      Locals:         0       8       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0
  4295 ;;      Totals:         0       8      14       0       0       0       0
  4296 ;;Total ram usage:       22 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 10
  4299 ;; This function calls:
  4300 ;;		_vfprintf
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;;		_show_lcd_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text5
  4308  0032F4                     __ptext5:
  4309                           	callstack 0
  4310  0032F4                     _sprintf:
  4311                           	callstack 20
  4312                           
  4313                           ; BSR set to: 1
  4314                           
  4315                           ;incstack = 0
  4316  0032F4  0EC8               	movlw	low (?_sprintf+4)
  4317  0032F6  0100               	movlb	0	; () banked
  4318  0032F8  6FF2               	movwf	sprintf@ap& (0+255),b
  4319  0032FA  0E01               	movlw	high (?_sprintf+4)
  4320  0032FC  6FF3               	movwf	(sprintf@ap+1)& (0+255),b
  4321  0032FE  C1C4  F0F4         	movff	sprintf@s,sprintf@f
  4322  003302  C1C5  F0F5         	movff	sprintf@s+1,sprintf@f+1
  4323                           
  4324                           ; BSR set to: 0
  4325  003306  6BF6               	clrf	(sprintf@f+2)& (0+255),b
  4326  003308  6BF7               	clrf	(sprintf@f+3)& (0+255),b
  4327                           
  4328                           ; BSR set to: 0
  4329  00330A  6BF8               	clrf	(sprintf@f+4)& (0+255),b
  4330  00330C  6BF9               	clrf	(sprintf@f+5)& (0+255),b
  4331                           
  4332                           ; BSR set to: 0
  4333  00330E  0EF4               	movlw	low sprintf@f
  4334  003310  6FEC               	movwf	vfprintf@fp& (0+255),b
  4335  003312  C1C6  F0ED         	movff	sprintf@fmt,vfprintf@fmt
  4336  003316  C1C7  F0EE         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4337  00331A  0EF2               	movlw	low sprintf@ap
  4338  00331C  6FEF               	movwf	vfprintf@ap& (0+255),b
  4339  00331E  EC32  F019         	call	_vfprintf	;wreg free
  4340                           
  4341                           ; BSR set to: 1
  4342  003322  0100               	movlb	0	; () banked
  4343  003324  51F6               	movf	(sprintf@f+2)& (0+255),w,b
  4344  003326  0101               	movlb	1	; () banked
  4345  003328  25C4               	addwf	sprintf@s& (0+255),w,b
  4346  00332A  6ED9               	movwf	fsr2l,c
  4347  00332C  0100               	movlb	0	; () banked
  4348  00332E  51F7               	movf	(sprintf@f+3)& (0+255),w,b
  4349  003330  0101               	movlb	1	; () banked
  4350  003332  21C5               	addwfc	(sprintf@s+1)& (0+255),w,b
  4351  003334  6EDA               	movwf	fsr2h,c
  4352  003336  6ADF               	clrf	indf2,c
  4353                           
  4354                           ; BSR set to: 1
  4355  003338  0C00               	retlw	0	;funcret
  4356  00333A                     __end_of_sprintf:
  4357                           	callstack 0
  4358                           
  4359 ;; *************** function _vfprintf *****************
  4360 ;; Defined at:
  4361 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  fp              1  140[BANK0 ] PTR struct _IO_FILE
  4364 ;;		 -> sprintf@f(6), 
  4365 ;;  fmt             2  141[BANK0 ] PTR const unsigned char 
  4366 ;;		 -> STR_24(10), STR_23(22), STR_22(11), STR_21(10), 
  4367 ;;		 -> STR_20(22), STR_19(11), STR_18(10), STR_15(10), 
  4368 ;;		 -> STR_12(20), STR_4(6), STR_2(15), 
  4369 ;;  ap              1  143[BANK0 ] PTR PTR void 
  4370 ;;		 -> sprintf@ap(2), 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  cfmt            2  144[BANK0 ] PTR unsigned char 
  4373 ;;		 -> STR_24(10), STR_23(22), STR_22(11), STR_21(10), 
  4374 ;;		 -> STR_20(22), STR_19(11), STR_18(10), STR_15(10), 
  4375 ;;		 -> STR_12(20), STR_4(6), STR_2(15), 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  2  140[BANK0 ] int 
  4378 ;; Registers used:
  4379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 3F/0
  4382 ;;		On exit  : 3F/1
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4385 ;;      Params:         0       4       0       0       0       0       0
  4386 ;;      Locals:         0       2       0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0
  4388 ;;      Totals:         0       6       0       0       0       0       0
  4389 ;;Total ram usage:        6 bytes
  4390 ;; Hardware stack levels used: 1
  4391 ;; Hardware stack levels required when called: 9
  4392 ;; This function calls:
  4393 ;;		_vfpfcnvrt
  4394 ;; This function is called by:
  4395 ;;		_sprintf
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text6
  4400  003264                     __ptext6:
  4401                           	callstack 0
  4402  003264                     _vfprintf:
  4403                           	callstack 20
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  4407                           
  4408                           ; BSR set to: 1
  4409                           ;incstack = 0
  4410  003264  C0ED  F0F0         	movff	vfprintf@fmt,vfprintf@cfmt
  4411  003268  C0EE  F0F1         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  4415  00326C  0101               	movlb	1	; () banked
  4416  00326E  6B14               	clrf	_nout& (0+255),b
  4417  003270  6B15               	clrf	(_nout+1)& (0+255),b
  4418                           
  4419                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  4420  003272  D010               	goto	l10367
  4421  003274                     l10365:
  4422                           
  4423                           ; BSR set to: 1
  4424                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  4425  003274  C0EC  F0CD         	movff	vfprintf@fp,vfpfcnvrt@fp
  4426  003278  0EF0               	movlw	low vfprintf@cfmt
  4427  00327A  0100               	movlb	0	; () banked
  4428  00327C  6FCE               	movwf	vfpfcnvrt@fmt& (0+255),b
  4429  00327E  C0EF  F0CF         	movff	vfprintf@ap,vfpfcnvrt@ap
  4430  003282  EC16  F009         	call	_vfpfcnvrt	;wreg free
  4431  003286  51CD               	movf	?_vfpfcnvrt& (0+255),w,b
  4432  003288  0101               	movlb	1	; () banked
  4433  00328A  2714               	addwf	_nout& (0+255),f,b
  4434  00328C  0100               	movlb	0	; () banked
  4435  00328E  51CE               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  4436  003290  0101               	movlb	1	; () banked
  4437  003292  2315               	addwfc	(_nout+1)& (0+255),f,b
  4438  003294                     l10367:
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  4442  003294  C0F0  FFF6         	movff	vfprintf@cfmt,tblptrl
  4443  003298  C0F1  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4444  00329C                     	if	0	;tblptru may be non-zero
  4445  00329C                     	endif
  4446  00329C                     	if	0	;tblptru may be non-zero
  4447  00329C                     	endif
  4448  00329C  0008               	tblrd		*
  4449  00329E  50F5               	movf	tablat,w,c
  4450  0032A0  E1E9               	bnz	l10365
  4451                           
  4452                           ; BSR set to: 1
  4453                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  4454  0032A2  C114  F0EC         	movff	_nout,?_vfprintf
  4455  0032A6  C115  F0ED         	movff	_nout+1,?_vfprintf+1
  4456                           
  4457                           ; BSR set to: 1
  4458  0032AA  0012               	return		;funcret
  4459  0032AC                     __end_of_vfprintf:
  4460                           	callstack 0
  4461                           
  4462 ;; *************** function _vfpfcnvrt *****************
  4463 ;; Defined at:
  4464 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  fp              1  109[BANK0 ] PTR struct _IO_FILE
  4467 ;;		 -> sprintf@f(6), 
  4468 ;;  fmt             1  110[BANK0 ] PTR PTR unsigned char 
  4469 ;;		 -> vfprintf@cfmt(2), 
  4470 ;;  ap              1  111[BANK0 ] PTR PTR void 
  4471 ;;		 -> sprintf@ap(2), 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  llu             8  116[BANK0 ] unsigned long long 
  4474 ;;  ll              8    0        long long 
  4475 ;;  f               4  132[BANK0 ] long long 
  4476 ;;  ct              3  136[BANK0 ] unsigned char [3]
  4477 ;;  vp              3    0        PTR void 
  4478 ;;  done            2  126[BANK0 ] int 
  4479 ;;  cp              2  124[BANK0 ] PTR unsigned char 
  4480 ;;		 -> ?_sprintf(2), U_real(2), compile_time(9), compile_date(12), 
  4481 ;;		 -> STR_3(9), 
  4482 ;;  i               2    0        int 
  4483 ;;  c               1  139[BANK0 ] unsigned char 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  2  109[BANK0 ] int 
  4486 ;; Registers used:
  4487 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 3F/0
  4490 ;;		On exit  : 3F/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4493 ;;      Params:         0       3       0       0       0       0       0
  4494 ;;      Locals:         0      24       0       0       0       0       0
  4495 ;;      Temps:          0       4       0       0       0       0       0
  4496 ;;      Totals:         0      31       0       0       0       0       0
  4497 ;;Total ram usage:       31 bytes
  4498 ;; Hardware stack levels used: 1
  4499 ;; Hardware stack levels required when called: 8
  4500 ;; This function calls:
  4501 ;;		_atoi
  4502 ;;		_ctoa
  4503 ;;		_efgtoa
  4504 ;;		_fputc
  4505 ;;		_isdigit
  4506 ;;		_isupper
  4507 ;;		_stoa
  4508 ;;		_strncmp
  4509 ;;		_tolower
  4510 ;;		_utoa
  4511 ;; This function is called by:
  4512 ;;		_vfprintf
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text7
  4517  00122C                     __ptext7:
  4518                           	callstack 0
  4519  00122C                     _vfpfcnvrt:
  4520                           	callstack 0
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  4524                           
  4525                           ; BSR set to: 1
  4526                           ;incstack = 0
  4527  00122C  D942               	call	PL2	;call to abstracted procedure
  4528  00122E  0A25               	xorlw	37
  4529  001230  E001 D135          	bnz	l10257
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  4533  001234  D974               	call	PL8	;call to abstracted procedure
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  4537  001236  6A2F               	clrf	_width^0,c
  4538  001238  6A30               	clrf	(_width+1)^0,c
  4539  00123A  6A33               	clrf	_flags^0,c
  4540  00123C  6A34               	clrf	(_flags+1)^0,c
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  4544  00123E  6831               	setf	_prec^0,c
  4545  001240  6832               	setf	(_prec+1)^0,c
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
  4549  001242  6BDE               	clrf	vfpfcnvrt@done& (0+255),b
  4550  001244  6BDF               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  4551                           
  4552                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  4553  001246  D020               	goto	l10157
  4554  001248                     l10131:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
  4558  001248  8033               	bsf	_flags^0,0,c
  4559  00124A                     l10133:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
  4563  00124A  D969               	call	PL8	;call to abstracted procedure
  4564                           
  4565                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
  4566  00124C  D01D               	goto	l10157
  4567  00124E                     l10135:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
  4571  00124E  8233               	bsf	_flags^0,1,c
  4572  001250  D7FC               	goto	l10133
  4573  001252                     l10139:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
  4577  001252  8433               	bsf	_flags^0,2,c
  4578  001254  D7FA               	goto	l10133
  4579  001256                     l10143:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
  4583  001256  8633               	bsf	_flags^0,3,c
  4584  001258  D7F8               	goto	l10133
  4585  00125A                     l10147:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
  4589  00125A  8833               	bsf	_flags^0,4,c
  4590  00125C  D7F6               	goto	l10133
  4591  00125E                     l10151:
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  4595  00125E  6BDF               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  4596  001260  0E01               	movlw	1
  4597  001262  6FDE               	movwf	vfpfcnvrt@done& (0+255),b
  4598                           
  4599                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  4600  001264  D011               	goto	l10157
  4601  001266                     l10155:
  4602                           
  4603                           ; BSR set to: 0
  4604  001266  D925               	call	PL2	;call to abstracted procedure
  4605  001268  6FD0               	movwf	??_vfpfcnvrt& (0+255),b
  4606  00126A  6BD1               	clrf	(??_vfpfcnvrt+1)& (0+255),b
  4607                           
  4608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4609                           ; Switch size 1, requested type "space"
  4610                           ; Number of cases is 1, Range of values is 0 to 0
  4611                           ; switch strategies available:
  4612                           ; Name         Instructions Cycles
  4613                           ; simple_byte            4     3 (average)
  4614                           ;	Chosen strategy is simple_byte
  4615  00126C  51D1               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  4616  00126E  E1F7               	bnz	l10151
  4617                           
  4618                           ; BSR set to: 0
  4619                           ; Switch size 1, requested type "space"
  4620                           ; Number of cases is 5, Range of values is 32 to 48
  4621                           ; switch strategies available:
  4622                           ; Name         Instructions Cycles
  4623                           ; simple_byte           16     9 (average)
  4624                           ;	Chosen strategy is simple_byte
  4625  001270  51D0               	movf	??_vfpfcnvrt& (0+255),w,b
  4626  001272  0A20               	xorlw	32	; case 32
  4627  001274  E0F0               	bz	l10143
  4628  001276  0A03               	xorlw	3	; case 35
  4629  001278  E0F0               	bz	l10147
  4630  00127A  0A08               	xorlw	8	; case 43
  4631  00127C  E0EA               	bz	l10139
  4632  00127E  0A06               	xorlw	6	; case 45
  4633  001280  E0E3               	bz	l10131
  4634  001282  0A1D               	xorlw	29	; case 48
  4635  001284  E0E4               	bz	l10135
  4636  001286  D7EB               	goto	l10151
  4637  001288                     l10157:
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  4641  001288  51DE               	movf	vfpfcnvrt@done& (0+255),w,b
  4642  00128A  11DF               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  4643  00128C  E0EC               	bz	l10155
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  4647  00128E  B033               	btfsc	_flags^0,0,c
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  4651  001290  9233               	bcf	_flags^0,1,c
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  4655  001292  D90F               	call	PL2	;call to abstracted procedure
  4656  001294  0A2A               	xorlw	42
  4657  001296  E10F               	bnz	l10169
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  4661  001298  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4662  00129A  6ED9               	movwf	fsr2l,c
  4663                           
  4664                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  4665  00129C  D914               	call	PL4	;call to abstracted procedure
  4666  00129E  CFDE F02F          	movff	postinc2,_width
  4667  0012A2  CFDD F030          	movff	postdec2,_width+1
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  4671  0012A6  AE30               	btfss	(_width+1)^0,7,c
  4672  0012A8  D026               	goto	u13470
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  4676  0012AA  8033               	bsf	_flags^0,0,c
  4677                           
  4678                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  4679  0012AC  6C2F               	negf	_width^0,c
  4680  0012AE  1E30               	comf	(_width+1)^0,f,c
  4681  0012B0  B0D8               	btfsc	status,0,c
  4682  0012B2  2A30               	incf	(_width+1)^0,f,c
  4683  0012B4  D020               	goto	u13470
  4684  0012B6                     l10169:
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  4688  0012B6  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4689  0012B8  6ED9               	movwf	fsr2l,c
  4690  0012BA  6ADA               	clrf	fsr2h,c
  4691  0012BC  CFDE F025          	movff	postinc2,atoi@s
  4692  0012C0  CFDD F026          	movff	postdec2,atoi@s+1
  4693  0012C4  EC31  F014         	call	_atoi	;wreg free
  4694  0012C8  C025  F02F         	movff	?_atoi,_width
  4695  0012CC  C026  F030         	movff	?_atoi+1,_width+1
  4696                           
  4697                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  4698  0012D0  D001               	goto	l10173
  4699  0012D2                     l10171:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  4703  0012D2  D925               	call	PL8	;call to abstracted procedure
  4704  0012D4                     l10173:
  4705                           
  4706                           ; BSR set to: 0
  4707  0012D4  0ED0               	movlw	208
  4708  0012D6  6FD0               	movwf	??_vfpfcnvrt& (0+255),b
  4709  0012D8  69D1               	setf	(??_vfpfcnvrt+1)& (0+255),b
  4710  0012DA  D8EB               	call	PL2	;call to abstracted procedure
  4711  0012DC  D937               	call	PL112	;call to abstracted procedure
  4712  0012DE  E105               	bnz	u13450
  4713  0012E0  0E0A               	movlw	10
  4714  0012E2  5DD2               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  4715  0012E4  E202               	bc	u13450
  4716  0012E6  0E01               	movlw	1
  4717  0012E8  D001               	goto	u13460
  4718  0012EA                     u13450:
  4719  0012EA  0E00               	movlw	0
  4720  0012EC                     u13460:
  4721  0012EC  6FE0               	movwf	_vfpfcnvrt$2064& (0+255),b
  4722  0012EE  6BE1               	clrf	(_vfpfcnvrt$2064+1)& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725  0012F0  51E0               	movf	_vfpfcnvrt$2064& (0+255),w,b
  4726  0012F2  11E1               	iorwf	(_vfpfcnvrt$2064+1)& (0+255),w,b
  4727  0012F4  E1EE               	bnz	l10171
  4728  0012F6                     u13470:
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 779:         ct[0
      +                          ] = (char)tolower((int)(*fmt)[0]);
  4732  0012F6  D8DD               	call	PL2	;call to abstracted procedure
  4733  0012F8  6E20               	movwf	tolower@c^0,c
  4734  0012FA  6A21               	clrf	(tolower@c+1)^0,c
  4735  0012FC  EC56  F019         	call	_tolower	;wreg free
  4736  001300  5020               	movf	?_tolower^0,w,c
  4737  001302  6FE8               	movwf	vfpfcnvrt@ct& (0+255),b
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 780:         if (
      +                          ct[0]) {
  4741  001304  51E8               	movf	vfpfcnvrt@ct& (0+255),w,b
  4742  001306  E013               	bz	l10189
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 781:             
      +                          ct[1] = (char)tolower((int)(*fmt)[1]);
  4746  001308  D919               	call	PL58	;call to abstracted procedure
  4747  00130A  2BD0               	incf	??_vfpfcnvrt& (0+255),f,b
  4748  00130C  D90F               	call	PL56	;call to abstracted procedure
  4749  00130E  D926               	call	PL182	;call to abstracted procedure
  4750  001310  EC56  F019         	call	_tolower	;wreg free
  4751  001314  5020               	movf	?_tolower^0,w,c
  4752  001316  6FE9               	movwf	(vfpfcnvrt@ct+1)& (0+255),b
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 782:             
      +                          if (ct[1]) {
  4756  001318  51E9               	movf	(vfpfcnvrt@ct+1)& (0+255),w,b
  4757  00131A  E009               	bz	l10189
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 783:             
      +                              ct[2] = (char)tolower((int)(*fmt)[2]);
  4761  00131C  D90F               	call	PL58	;call to abstracted procedure
  4762  00131E  0E02               	movlw	2
  4763  001320  27D0               	addwf	??_vfpfcnvrt& (0+255),f,b
  4764  001322  D904               	call	PL56	;call to abstracted procedure
  4765  001324  D91B               	call	PL182	;call to abstracted procedure
  4766  001326  EC56  F019         	call	_tolower	;wreg free
  4767  00132A  5020               	movf	?_tolower^0,w,c
  4768  00132C  6FEA               	movwf	(vfpfcnvrt@ct+2)& (0+255),b
  4769  00132E                     l10189:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 814:         if (
      +                          *fmt[0] == 'c') {
  4773  00132E  D8C1               	call	PL2	;call to abstracted procedure
  4774  001330  0A63               	xorlw	99
  4775  001332  E110               	bnz	l10197
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 815:             
      +                          ++*fmt;
  4779  001334  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4780  001336  6ED9               	movwf	fsr2l,c
  4781                           
  4782                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 816:             
      +                          c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  4783  001338  D8C6               	call	PL4	;call to abstracted procedure
  4784  00133A  50DF               	movf	indf2,w,c
  4785  00133C  6FEB               	movwf	vfpfcnvrt@c& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 817:             
      +                          return ctoa(fp, c);
  4789  00133E  C0CD  F023         	movff	vfpfcnvrt@fp,ctoa@fp
  4790  001342  C0EB  F024         	movff	vfpfcnvrt@c,ctoa@c
  4791  001346  EC9D  F016         	call	_ctoa	;wreg free
  4792  00134A  C023  F0CD         	movff	?_ctoa,?_vfpfcnvrt
  4793  00134E  C024  F0CE         	movff	?_ctoa+1,?_vfpfcnvrt+1
  4794  001352  0012               	return	
  4795  001354                     l10197:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 942:         if (
      +                          ct[0] == 'f') {
  4799  001354  0E66               	movlw	102
  4800  001356  19E8               	xorwf	vfpfcnvrt@ct& (0+255),w,b
  4801  001358  E11F               	bnz	l10209
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 944:             
      +                          c = (*fmt)[0];
  4805  00135A  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4806  00135C  6ED9               	movwf	fsr2l,c
  4807  00135E  6ADA               	clrf	fsr2h,c
  4808  001360  CFDE FFF6          	movff	postinc2,tblptrl
  4809  001364  CFDD FFF7          	movff	postdec2,tblptrh
  4810  001368                     	if	0	;tblptru may be non-zero
  4811  001368                     	endif
  4812  001368                     	if	0	;tblptru may be non-zero
  4813  001368                     	endif
  4814  001368  0008               	tblrd		*
  4815  00136A  CFF5 F0EB          	movff	tablat,vfpfcnvrt@c
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 945:             
      +                          ++*fmt;
  4819  00136E  D8D7               	call	PL8	;call to abstracted procedure
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 946:             
      +                          f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  4823  001370  D8BE               	call	PL6	;call to abstracted procedure
  4824  001372                     l10205:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 948:             
      +                          return efgtoa(fp, f, c);
  4828  001372  C0CD  F0C2         	movff	vfpfcnvrt@fp,efgtoa@fp
  4829  001376  C0E4  F0C3         	movff	vfpfcnvrt@f,efgtoa@f
  4830  00137A  C0E5  F0C4         	movff	vfpfcnvrt@f+1,efgtoa@f+1
  4831  00137E  C0E6  F0C5         	movff	vfpfcnvrt@f+2,efgtoa@f+2
  4832  001382  C0E7  F0C6         	movff	vfpfcnvrt@f+3,efgtoa@f+3
  4833  001386  C0EB  F0C7         	movff	vfpfcnvrt@c,efgtoa@c
  4834  00138A  EC2D  F000         	call	_efgtoa	;wreg free
  4835  00138E  C0C2  F0CD         	movff	?_efgtoa,?_vfpfcnvrt
  4836  001392  C0C3  F0CE         	movff	?_efgtoa+1,?_vfpfcnvrt+1
  4837  001396  0012               	return	
  4838  001398                     l10209:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 950:         if (
      +                          !strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  4842  001398  0EE8               	movlw	low vfpfcnvrt@ct
  4843  00139A  6E1A               	movwf	strncmp@_l^0,c
  4844  00139C  0EFB               	movlw	low STR_33
  4845  00139E  6E1B               	movwf	strncmp@_r^0,c
  4846  0013A0  0E7F               	movlw	high STR_33
  4847  0013A2  6E1C               	movwf	(strncmp@_r+1)^0,c
  4848  0013A4  6A1E               	clrf	(strncmp@n+1)^0,c
  4849  0013A6  0E02               	movlw	2
  4850  0013A8  6E1D               	movwf	strncmp@n^0,c
  4851  0013AA  EC5A  F017         	call	_strncmp	;wreg free
  4852  0013AE  501A               	movf	?_strncmp^0,w,c
  4853  0013B0  101B               	iorwf	(?_strncmp+1)^0,w,c
  4854  0013B2  E11D               	bnz	l10225
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 953:             
      +                          if ((0 ? isupper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  4858  0013B4  D8C3               	call	PL58	;call to abstracted procedure
  4859  0013B6  2BD0               	incf	??_vfpfcnvrt& (0+255),f,b
  4860  0013B8  D8B9               	call	PL56	;call to abstracted procedure
  4861  0013BA  CFF5 F0EB          	movff	tablat,vfpfcnvrt@c
  4862  0013BE  0EBF               	movlw	191
  4863  0013C0  6FD0               	movwf	??_vfpfcnvrt& (0+255),b
  4864  0013C2  69D1               	setf	(??_vfpfcnvrt+1)& (0+255),b
  4865  0013C4  D876               	call	PL2	;call to abstracted procedure
  4866  0013C6  D8C2               	call	PL112	;call to abstracted procedure
  4867  0013C8  E105               	bnz	u13530
  4868  0013CA  0E1A               	movlw	26
  4869  0013CC  5DD2               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  4870  0013CE  E202               	bc	u13530
  4871  0013D0  0E01               	movlw	1
  4872  0013D2  D001               	goto	u13540
  4873  0013D4                     u13530:
  4874  0013D4  0E00               	movlw	0
  4875  0013D6                     u13540:
  4876  0013D6  6FE2               	movwf	_vfpfcnvrt$2069& (0+255),b
  4877  0013D8  6BE3               	clrf	(_vfpfcnvrt$2069+1)& (0+255),b
  4878                           
  4879                           ; BSR set to: 0
  4880  0013DA  51E2               	movf	_vfpfcnvrt$2069& (0+255),w,b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 956:             
      +                              f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  4884                           
  4885                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 955:             
      +                          } else {
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 954:             
      +                              f = (*(long double *)__va_arg(*(long double **)ap, (long double)0));
  4889  0013DC  D888               	call	PL6	;call to abstracted procedure
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 958:             
      +                          *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
  4893                           
  4894                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 957:             
      +                          }
  4895  0013DE  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4896  0013E0  6ED9               	movwf	fsr2l,c
  4897  0013E2  6ADA               	clrf	fsr2h,c
  4898  0013E4  0E02               	movlw	2
  4899  0013E6  26DE               	addwf	postinc2,f,c
  4900  0013E8  0E00               	movlw	0
  4901  0013EA  22DD               	addwfc	postdec2,f,c
  4902  0013EC  D7C2               	goto	l10205
  4903  0013EE                     l10225:
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1171:         if 
      +                          (*fmt[0] == 's') {
  4907  0013EE  D861               	call	PL2	;call to abstracted procedure
  4908  0013F0  0A73               	xorlw	115
  4909  0013F2  E114               	bnz	l10233
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1173:            
      +                           ++*fmt;
  4913  0013F4  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4914  0013F6  6ED9               	movwf	fsr2l,c
  4915                           
  4916                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1174:            
      +                           cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  4917  0013F8  D866               	call	PL4	;call to abstracted procedure
  4918  0013FA  CFDE F0DC          	movff	postinc2,vfpfcnvrt@cp
  4919  0013FE  CFDD F0DD          	movff	postdec2,vfpfcnvrt@cp+1
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1176:            
      +                           return stoa(fp, cp);
  4923  001402  C0CD  F060         	movff	vfpfcnvrt@fp,stoa@fp
  4924  001406  C0DC  F061         	movff	vfpfcnvrt@cp,stoa@s
  4925  00140A  C0DD  F062         	movff	vfpfcnvrt@cp+1,stoa@s+1
  4926  00140E  EC92  F011         	call	_stoa	;wreg free
  4927  001412  C060  F0CD         	movff	?_stoa,?_vfpfcnvrt
  4928  001416  C061  F0CE         	movff	?_stoa+1,?_vfpfcnvrt+1
  4929  00141A  0012               	return	
  4930  00141C                     l10233:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
  4934  00141C  D84A               	call	PL2	;call to abstracted procedure
  4935  00141E  0A75               	xorlw	117
  4936  001420  E12A               	bnz	l10241
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
  4940  001422  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  4941  001424  6ED9               	movwf	fsr2l,c
  4942                           
  4943                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
  4944  001426  D84F               	call	PL4	;call to abstracted procedure
  4945  001428  CFDE F0D2          	movff	postinc2,??_vfpfcnvrt+2
  4946  00142C  CFDD F0D3          	movff	postdec2,??_vfpfcnvrt+3
  4947  001430  C0D2  F0D4         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  4948  001434  C0D3  F0D5         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  4949  001438  6BD6               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  4950  00143A  6BD7               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  4951  00143C  6BD8               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  4952  00143E  6BD9               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  4953  001440  6BDA               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  4954  001442  6BDB               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
  4958  001444  C0CD  F070         	movff	vfpfcnvrt@fp,utoa@fp
  4959  001448  C0D4  F071         	movff	vfpfcnvrt@llu,utoa@d
  4960  00144C  C0D5  F072         	movff	vfpfcnvrt@llu+1,utoa@d+1
  4961  001450  C0D6  F073         	movff	vfpfcnvrt@llu+2,utoa@d+2
  4962  001454  C0D7  F074         	movff	vfpfcnvrt@llu+3,utoa@d+3
  4963  001458  C0D8  F075         	movff	vfpfcnvrt@llu+4,utoa@d+4
  4964  00145C  C0D9  F076         	movff	vfpfcnvrt@llu+5,utoa@d+5
  4965  001460  C0DA  F077         	movff	vfpfcnvrt@llu+6,utoa@d+6
  4966  001464  C0DB  F078         	movff	vfpfcnvrt@llu+7,utoa@d+7
  4967  001468  ECBE  F00E         	call	_utoa	;wreg free
  4968  00146C  C070  F0CD         	movff	?_utoa,?_vfpfcnvrt
  4969  001470  C071  F0CE         	movff	?_utoa+1,?_vfpfcnvrt+1
  4970  001474  0012               	return	
  4971  001476                     l10241:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  4975  001476  D81D               	call	PL2	;call to abstracted procedure
  4976  001478  0A25               	xorlw	37
  4977  00147A  E10D               	bnz	l10251
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  4981  00147C  D850               	call	PL8	;call to abstracted procedure
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  4985  00147E  6E1C               	movwf	(fputc@c+1)^0,c
  4986  001480  0E25               	movlw	37
  4987  001482  6E1B               	movwf	fputc@c^0,c
  4988  001484  C0CD  F01D         	movff	vfpfcnvrt@fp,fputc@fp
  4989  001488  ECDD  F016         	call	_fputc	;wreg free
  4990  00148C                     l10247:
  4991                           
  4992                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  4993  00148C  0100               	movlb	0	; () banked
  4994  00148E  6BCE               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  4995  001490  0E01               	movlw	1
  4996  001492  6FCD               	movwf	?_vfpfcnvrt& (0+255),b
  4997  001494  0C01               	retlw	1
  4998  001496                     l10251:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  5002  001496  D843               	call	PL8	;call to abstracted procedure
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  5006  001498  6BCD               	clrf	?_vfpfcnvrt& (0+255),b
  5007  00149A  6BCE               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  5008  00149C  0012               	return	
  5009  00149E                     l10257:
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  5013  00149E  D809               	call	PL2	;call to abstracted procedure
  5014  0014A0  6E1B               	movwf	fputc@c^0,c
  5015  0014A2  6A1C               	clrf	(fputc@c+1)^0,c
  5016  0014A4  C0CD  F01D         	movff	vfpfcnvrt@fp,fputc@fp
  5017  0014A8  ECDD  F016         	call	_fputc	;wreg free
  5018                           
  5019                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  5020  0014AC  0100               	movlb	0	; () banked
  5021  0014AE  D837               	call	PL8	;call to abstracted procedure
  5022  0014B0  D7ED               	goto	l10247
  5023  0014B2                     __end_of_vfpfcnvrt:
  5024                           	callstack 0
  5025  0014B2                     PL2:
  5026                           	callstack 20
  5027  0014B2  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5028  0014B4  6ED9               	movwf	fsr2l,c
  5029  0014B6  6ADA               	clrf	fsr2h,c
  5030  0014B8  CFDE FFF6          	movff	postinc2,tblptrl
  5031  0014BC  CFDD FFF7          	movff	postdec2,tblptrh
  5032  0014C0                     	if	0	;tblptru may be non-zero
  5033  0014C0                     	endif
  5034  0014C0                     	if	0	;tblptru may be non-zero
  5035  0014C0                     	endif
  5036  0014C0  0008               	tblrd		*
  5037  0014C2  50F5               	movf	tablat,w,c
  5038  0014C4  0012               	return	
  5039  0014C6                     __end_ofPL2:
  5040                           	callstack 0
  5041  0014C6                     PL4:
  5042                           	callstack 20
  5043  0014C6  6ADA               	clrf	fsr2h,c
  5044  0014C8  2ADE               	incf	postinc2,f,c
  5045  0014CA  0E00               	movlw	0
  5046  0014CC  22DD               	addwfc	postdec2,f,c
  5047  0014CE  51CF               	movf	vfpfcnvrt@ap& (0+255),w,b
  5048  0014D0  6ED9               	movwf	fsr2l,c
  5049  0014D2  6ADA               	clrf	fsr2h,c
  5050  0014D4  CFDF F0D0          	movff	indf2,??_vfpfcnvrt
  5051  0014D8  0E02               	movlw	2
  5052  0014DA  26DE               	addwf	postinc2,f,c
  5053  0014DC  CFDF F0D1          	movff	indf2,??_vfpfcnvrt+1
  5054  0014E0  0E00               	movlw	0
  5055  0014E2  22DD               	addwfc	postdec2,f,c
  5056  0014E4  C0D0  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5057  0014E8  C0D1  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5058  0014EC  0C00               	retlw	0
  5059  0014EE                     __end_ofPL4:
  5060                           	callstack 0
  5061  0014EE                     PL6:
  5062                           	callstack 20
  5063  0014EE  51CF               	movf	vfpfcnvrt@ap& (0+255),w,b
  5064  0014F0  6ED9               	movwf	fsr2l,c
  5065  0014F2  6ADA               	clrf	fsr2h,c
  5066  0014F4  CFDF F0D0          	movff	indf2,??_vfpfcnvrt
  5067  0014F8  0E04               	movlw	4
  5068  0014FA  26DE               	addwf	postinc2,f,c
  5069  0014FC  CFDF F0D1          	movff	indf2,??_vfpfcnvrt+1
  5070  001500  0E00               	movlw	0
  5071  001502  22DD               	addwfc	postdec2,f,c
  5072  001504  C0D0  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5073  001508  C0D1  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5074  00150C  CFDE F0E4          	movff	postinc2,vfpfcnvrt@f
  5075  001510  CFDE F0E5          	movff	postinc2,vfpfcnvrt@f+1
  5076  001514  CFDE F0E6          	movff	postinc2,vfpfcnvrt@f+2
  5077  001518  CFDE F0E7          	movff	postinc2,vfpfcnvrt@f+3
  5078  00151C  0C00               	retlw	0
  5079  00151E                     __end_ofPL6:
  5080                           	callstack 0
  5081  00151E                     PL8:
  5082                           	callstack 20
  5083  00151E  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5084  001520  6ED9               	movwf	fsr2l,c
  5085  001522  6ADA               	clrf	fsr2h,c
  5086  001524  2ADE               	incf	postinc2,f,c
  5087  001526  0E00               	movlw	0
  5088  001528  22DD               	addwfc	postdec2,f,c
  5089  00152A  0C00               	retlw	0
  5090  00152C                     __end_ofPL8:
  5091                           	callstack 0
  5092  00152C                     PL56:
  5093                           	callstack 20
  5094  00152C  0E00               	movlw	0
  5095  00152E  23D1               	addwfc	(??_vfpfcnvrt+1)& (0+255),f,b
  5096  001530  C0D0  FFF6         	movff	??_vfpfcnvrt,tblptrl
  5097  001534  C0D1  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  5098  001538                     	if	0	;tblptru may be non-zero
  5099  001538                     	endif
  5100  001538                     	if	0	;tblptru may be non-zero
  5101  001538                     	endif
  5102  001538  0008               	tblrd		*
  5103  00153A  0C00               	retlw	0
  5104  00153C                     __end_ofPL56:
  5105                           	callstack 0
  5106  00153C                     PL58:
  5107                           	callstack 20
  5108  00153C  51CE               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5109  00153E  6ED9               	movwf	fsr2l,c
  5110  001540  6ADA               	clrf	fsr2h,c
  5111  001542  CFDE F0D0          	movff	postinc2,??_vfpfcnvrt
  5112  001546  CFDD F0D1          	movff	postdec2,??_vfpfcnvrt+1
  5113  00154A  0012               	return	
  5114  00154C                     __end_ofPL58:
  5115                           	callstack 0
  5116  00154C                     PL112:
  5117                           	callstack 20
  5118  00154C  6FD2               	movwf	(??_vfpfcnvrt+2)& (0+255),b
  5119  00154E  6BD3               	clrf	(??_vfpfcnvrt+3)& (0+255),b
  5120  001550  51D0               	movf	??_vfpfcnvrt& (0+255),w,b
  5121  001552  27D2               	addwf	(??_vfpfcnvrt+2)& (0+255),f,b
  5122  001554  51D1               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  5123  001556  23D3               	addwfc	(??_vfpfcnvrt+3)& (0+255),f,b
  5124  001558  51D3               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
  5125  00155A  0012               	return	
  5126  00155C                     __end_ofPL112:
  5127                           	callstack 0
  5128  00155C                     PL182:
  5129                           	callstack 20
  5130  00155C  50F5               	movf	tablat,w,c
  5131  00155E  6E20               	movwf	tolower@c^0,c
  5132  001560  6A21               	clrf	(tolower@c+1)^0,c
  5133  001562  0012               	return	
  5134  001564                     __end_ofPL182:
  5135                           	callstack 0
  5136                           
  5137 ;; *************** function _utoa *****************
  5138 ;; Defined at:
  5139 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5142 ;;		 -> sprintf@f(6), 
  5143 ;;  d               8   17[BANK0 ] unsigned long long 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  n               8   37[BANK0 ] unsigned long long 
  5146 ;;  i               2   45[BANK0 ] int 
  5147 ;;  w               2   35[BANK0 ] int 
  5148 ;;  p               2   33[BANK0 ] int 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  2   16[BANK0 ] int 
  5151 ;; Registers used:
  5152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 3F/0
  5155 ;;		On exit  : 3F/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5158 ;;      Params:         0       9       0       0       0       0       0
  5159 ;;      Locals:         0      14       0       0       0       0       0
  5160 ;;      Temps:          0       8       0       0       0       0       0
  5161 ;;      Totals:         0      31       0       0       0       0       0
  5162 ;;Total ram usage:       31 bytes
  5163 ;; Hardware stack levels used: 1
  5164 ;; Hardware stack levels required when called: 7
  5165 ;; This function calls:
  5166 ;;		___lodiv
  5167 ;;		___lomod
  5168 ;;		_pad
  5169 ;; This function is called by:
  5170 ;;		_vfpfcnvrt
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text8
  5175  001D7C                     __ptext8:
  5176                           	callstack 0
  5177  001D7C                     _utoa:
  5178                           	callstack 20
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;incstack = 0
  5185  001D7C  AE32               	btfss	(_prec+1)^0,7,c
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  5189  001D7E  9233               	bcf	_flags^0,1,c
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  5193  001D80  BE32               	btfsc	(_prec+1)^0,7,c
  5194  001D82  D004               	goto	u13210
  5195  001D84  5032               	movf	(_prec+1)^0,w,c
  5196  001D86  E106               	bnz	l1409
  5197  001D88  0431               	decf	_prec^0,w,c
  5198  001D8A  E204               	bc	l1409
  5199  001D8C                     u13210:
  5200                           
  5201                           ; BSR set to: 0
  5202  001D8C  6B82               	clrf	(utoa@p+1)& (0+255),b
  5203  001D8E  0E01               	movlw	1
  5204  001D90  6F81               	movwf	utoa@p& (0+255),b
  5205  001D92  D004               	goto	l1411
  5206  001D94                     l1409:
  5207                           
  5208                           ; BSR set to: 0
  5209  001D94  C031  F081         	movff	_prec,utoa@p
  5210  001D98  C032  F082         	movff	_prec+1,utoa@p+1
  5211  001D9C                     l1411:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  5215  001D9C  C02F  F083         	movff	_width,utoa@w
  5216  001DA0  C030  F084         	movff	_width+1,utoa@w+1
  5217                           
  5218                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 628:     n = d;
  5219  001DA4  C071  F085         	movff	utoa@d,utoa@n
  5220  001DA8  C072  F086         	movff	utoa@d+1,utoa@n+1
  5221  001DAC  C073  F087         	movff	utoa@d+2,utoa@n+2
  5222  001DB0  C074  F088         	movff	utoa@d+3,utoa@n+3
  5223  001DB4  C075  F089         	movff	utoa@d+4,utoa@n+4
  5224  001DB8  C076  F08A         	movff	utoa@d+5,utoa@n+5
  5225  001DBC  C077  F08B         	movff	utoa@d+6,utoa@n+6
  5226  001DC0  C078  F08C         	movff	utoa@d+7,utoa@n+7
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  5230  001DC4  6B8E               	clrf	(utoa@i+1)& (0+255),b
  5231  001DC6  0E4F               	movlw	79
  5232  001DC8  6F8D               	movwf	utoa@i& (0+255),b
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  5236  001DCA  0101               	movlb	1	; () banked
  5237  001DCC  6B74               	clrf	(_dbuf+79)& (0+255),b
  5238                           
  5239                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5240  001DCE  D068               	goto	l10039
  5241  001DD0                     l10029:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 632:         --i;
  5245  001DD0  078D               	decf	utoa@i& (0+255),f,b
  5246  001DD2  A0D8               	btfss	status,0,c
  5247  001DD4  078E               	decf	(utoa@i+1)& (0+255),f,b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  5251  001DD6  0E25               	movlw	low _dbuf
  5252  001DD8  258D               	addwf	utoa@i& (0+255),w,b
  5253  001DDA  6ED9               	movwf	fsr2l,c
  5254  001DDC  0E01               	movlw	high _dbuf
  5255  001DDE  218E               	addwfc	(utoa@i+1)& (0+255),w,b
  5256  001DE0  6EDA               	movwf	fsr2h,c
  5257  001DE2  C085  F060         	movff	utoa@n,___lomod@dividend
  5258  001DE6  C086  F061         	movff	utoa@n+1,___lomod@dividend+1
  5259  001DEA  C087  F062         	movff	utoa@n+2,___lomod@dividend+2
  5260  001DEE  C088  F063         	movff	utoa@n+3,___lomod@dividend+3
  5261  001DF2  C089  F064         	movff	utoa@n+4,___lomod@dividend+4
  5262  001DF6  C08A  F065         	movff	utoa@n+5,___lomod@dividend+5
  5263  001DFA  C08B  F066         	movff	utoa@n+6,___lomod@dividend+6
  5264  001DFE  C08C  F067         	movff	utoa@n+7,___lomod@dividend+7
  5265  001E02  0E0A               	movlw	10
  5266  001E04  6F68               	movwf	___lomod@divisor& (0+255),b
  5267  001E06  6B69               	clrf	(___lomod@divisor+1)& (0+255),b
  5268  001E08  6B6A               	clrf	(___lomod@divisor+2)& (0+255),b
  5269  001E0A  6B6B               	clrf	(___lomod@divisor+3)& (0+255),b
  5270  001E0C  6B6C               	clrf	(___lomod@divisor+4)& (0+255),b
  5271  001E0E  6B6D               	clrf	(___lomod@divisor+5)& (0+255),b
  5272  001E10  6B6E               	clrf	(___lomod@divisor+6)& (0+255),b
  5273  001E12  6B6F               	clrf	(___lomod@divisor+7)& (0+255),b
  5274  001E14  EC68  F015         	call	___lomod	;wreg free
  5275  001E18  C060  F079         	movff	?___lomod,??_utoa
  5276  001E1C  C061  F07A         	movff	?___lomod+1,??_utoa+1
  5277  001E20  C062  F07B         	movff	?___lomod+2,??_utoa+2
  5278  001E24  C063  F07C         	movff	?___lomod+3,??_utoa+3
  5279  001E28  C064  F07D         	movff	?___lomod+4,??_utoa+4
  5280  001E2C  C065  F07E         	movff	?___lomod+5,??_utoa+5
  5281  001E30  C066  F07F         	movff	?___lomod+6,??_utoa+6
  5282  001E34  C067  F080         	movff	?___lomod+7,??_utoa+7
  5283  001E38  5179               	movf	??_utoa& (0+255),w,b
  5284  001E3A  0F30               	addlw	48
  5285  001E3C  6EDF               	movwf	indf2,c
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 634:         --p;
  5289  001E3E  0781               	decf	utoa@p& (0+255),f,b
  5290  001E40  A0D8               	btfss	status,0,c
  5291  001E42  0782               	decf	(utoa@p+1)& (0+255),f,b
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 635:         --w;
  5295  001E44  0783               	decf	utoa@w& (0+255),f,b
  5296  001E46  A0D8               	btfss	status,0,c
  5297  001E48  0784               	decf	(utoa@w+1)& (0+255),f,b
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  5301  001E4A  C085  F060         	movff	utoa@n,___lodiv@dividend
  5302  001E4E  C086  F061         	movff	utoa@n+1,___lodiv@dividend+1
  5303  001E52  C087  F062         	movff	utoa@n+2,___lodiv@dividend+2
  5304  001E56  C088  F063         	movff	utoa@n+3,___lodiv@dividend+3
  5305  001E5A  C089  F064         	movff	utoa@n+4,___lodiv@dividend+4
  5306  001E5E  C08A  F065         	movff	utoa@n+5,___lodiv@dividend+5
  5307  001E62  C08B  F066         	movff	utoa@n+6,___lodiv@dividend+6
  5308  001E66  C08C  F067         	movff	utoa@n+7,___lodiv@dividend+7
  5309  001E6A  0E0A               	movlw	10
  5310  001E6C  6F68               	movwf	___lodiv@divisor& (0+255),b
  5311  001E6E  6B69               	clrf	(___lodiv@divisor+1)& (0+255),b
  5312  001E70  6B6A               	clrf	(___lodiv@divisor+2)& (0+255),b
  5313  001E72  6B6B               	clrf	(___lodiv@divisor+3)& (0+255),b
  5314  001E74  6B6C               	clrf	(___lodiv@divisor+4)& (0+255),b
  5315  001E76  6B6D               	clrf	(___lodiv@divisor+5)& (0+255),b
  5316  001E78  6B6E               	clrf	(___lodiv@divisor+6)& (0+255),b
  5317  001E7A  6B6F               	clrf	(___lodiv@divisor+7)& (0+255),b
  5318  001E7C  ECA8  F014         	call	___lodiv	;wreg free
  5319  001E80  C060  F085         	movff	?___lodiv,utoa@n
  5320  001E84  C061  F086         	movff	?___lodiv+1,utoa@n+1
  5321  001E88  C062  F087         	movff	?___lodiv+2,utoa@n+2
  5322  001E8C  C063  F088         	movff	?___lodiv+3,utoa@n+3
  5323  001E90  C064  F089         	movff	?___lodiv+4,utoa@n+4
  5324  001E94  C065  F08A         	movff	?___lodiv+5,utoa@n+5
  5325  001E98  C066  F08B         	movff	?___lodiv+6,utoa@n+6
  5326  001E9C  C067  F08C         	movff	?___lodiv+7,utoa@n+7
  5327  001EA0                     l10039:
  5328                           
  5329                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  5330  001EA0  0100               	movlb	0	; () banked
  5331  001EA2  518D               	movf	utoa@i& (0+255),w,b
  5332  001EA4  118E               	iorwf	(utoa@i+1)& (0+255),w,b
  5333  001EA6  E017               	bz	u13260
  5334                           
  5335                           ; BSR set to: 0
  5336  001EA8  5185               	movf	utoa@n& (0+255),w,b
  5337  001EAA  1186               	iorwf	(utoa@n+1)& (0+255),w,b
  5338  001EAC  1187               	iorwf	(utoa@n+2)& (0+255),w,b
  5339  001EAE  1188               	iorwf	(utoa@n+3)& (0+255),w,b
  5340  001EB0  1189               	iorwf	(utoa@n+4)& (0+255),w,b
  5341  001EB2  118A               	iorwf	(utoa@n+5)& (0+255),w,b
  5342  001EB4  118B               	iorwf	(utoa@n+6)& (0+255),w,b
  5343  001EB6  118C               	iorwf	(utoa@n+7)& (0+255),w,b
  5344  001EB8  E18B               	bnz	l10029
  5345                           
  5346                           ; BSR set to: 0
  5347  001EBA  BF82               	btfsc	(utoa@p+1)& (0+255),7,b
  5348  001EBC  D004               	goto	u13240
  5349  001EBE  5182               	movf	(utoa@p+1)& (0+255),w,b
  5350  001EC0  E187               	bnz	l10029
  5351  001EC2  0581               	decf	utoa@p& (0+255),w,b
  5352  001EC4  E285               	bc	l10029
  5353  001EC6                     u13240:
  5354                           
  5355                           ; BSR set to: 0
  5356  001EC6  BF84               	btfsc	(utoa@w+1)& (0+255),7,b
  5357  001EC8  D006               	goto	u13260
  5358  001ECA  5184               	movf	(utoa@w+1)& (0+255),w,b
  5359  001ECC  E102               	bnz	u13250
  5360  001ECE  0583               	decf	utoa@w& (0+255),w,b
  5361  001ED0  E302               	bnc	u13260
  5362  001ED2                     u13250:
  5363                           
  5364                           ; BSR set to: 0
  5365  001ED2  B233               	btfsc	_flags^0,1,c
  5366  001ED4  D77D               	goto	l10029
  5367  001ED6                     u13260:
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  5371  001ED6  C070  F063         	movff	utoa@fp,pad@fp
  5372  001EDA  0E25               	movlw	low _dbuf
  5373  001EDC  258D               	addwf	utoa@i& (0+255),w,b
  5374  001EDE  6F64               	movwf	pad@buf& (0+255),b
  5375  001EE0  0E01               	movlw	high _dbuf
  5376  001EE2  218E               	addwfc	(utoa@i+1)& (0+255),w,b
  5377  001EE4  6F65               	movwf	(pad@buf+1)& (0+255),b
  5378  001EE6  C083  F066         	movff	utoa@w,pad@p
  5379  001EEA  C084  F067         	movff	utoa@w+1,pad@p+1
  5380  001EEE  EC1D  F017         	call	_pad	;wreg free
  5381  001EF2  C063  F070         	movff	?_pad,?_utoa
  5382  001EF6  C064  F071         	movff	?_pad+1,?_utoa+1
  5383                           
  5384                           ; BSR set to: 0
  5385  001EFA  0012               	return		;funcret
  5386  001EFC                     __end_of_utoa:
  5387                           	callstack 0
  5388                           
  5389 ;; *************** function ___lomod *****************
  5390 ;; Defined at:
  5391 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lomod.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  dividend        8    0[BANK0 ] unsigned long long 
  5394 ;;  divisor         8    8[BANK0 ] unsigned long long 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  counter         1   25[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  8    0[BANK0 ] unsigned long long 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0
  5401 ;; Tracked objects:
  5402 ;;		On entry : 3F/0
  5403 ;;		On exit  : 3F/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5406 ;;      Params:         0      16       0       0       0       0       0
  5407 ;;      Locals:         1       0       0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0
  5409 ;;      Totals:         1      16       0       0       0       0       0
  5410 ;;Total ram usage:       17 bytes
  5411 ;; Hardware stack levels used: 1
  5412 ;; Hardware stack levels required when called: 3
  5413 ;; This function calls:
  5414 ;;		Nothing
  5415 ;; This function is called by:
  5416 ;;		_utoa
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text9
  5421  002AD0                     __ptext9:
  5422                           	callstack 0
  5423  002AD0                     ___lomod:
  5424                           	callstack 23
  5425                           
  5426                           ; BSR set to: 0
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;incstack = 0
  5430  002AD0  5168               	movf	___lomod@divisor& (0+255),w,b
  5431  002AD2  1169               	iorwf	(___lomod@divisor+1)& (0+255),w,b
  5432  002AD4  116A               	iorwf	(___lomod@divisor+2)& (0+255),w,b
  5433  002AD6  116B               	iorwf	(___lomod@divisor+3)& (0+255),w,b
  5434  002AD8  116C               	iorwf	(___lomod@divisor+4)& (0+255),w,b
  5435  002ADA  116D               	iorwf	(___lomod@divisor+5)& (0+255),w,b
  5436  002ADC  116E               	iorwf	(___lomod@divisor+6)& (0+255),w,b
  5437  002ADE  116F               	iorwf	(___lomod@divisor+7)& (0+255),w,b
  5438  002AE0  E03B               	bz	l996
  5439                           
  5440                           ; BSR set to: 0
  5441  002AE2  0E01               	movlw	1
  5442  002AE4  6E1A               	movwf	___lomod@counter^0,c
  5443  002AE6  D00A               	goto	l9527
  5444  002AE8                     l9525:
  5445                           
  5446                           ; BSR set to: 0
  5447  002AE8  90D8               	bcf	status,0,c
  5448  002AEA  3768               	rlcf	___lomod@divisor& (0+255),f,b
  5449  002AEC  3769               	rlcf	(___lomod@divisor+1)& (0+255),f,b
  5450  002AEE  376A               	rlcf	(___lomod@divisor+2)& (0+255),f,b
  5451  002AF0  376B               	rlcf	(___lomod@divisor+3)& (0+255),f,b
  5452  002AF2  376C               	rlcf	(___lomod@divisor+4)& (0+255),f,b
  5453  002AF4  376D               	rlcf	(___lomod@divisor+5)& (0+255),f,b
  5454  002AF6  376E               	rlcf	(___lomod@divisor+6)& (0+255),f,b
  5455  002AF8  376F               	rlcf	(___lomod@divisor+7)& (0+255),f,b
  5456  002AFA  2A1A               	incf	___lomod@counter^0,f,c
  5457  002AFC                     l9527:
  5458                           
  5459                           ; BSR set to: 0
  5460  002AFC  AF6F               	btfss	(___lomod@divisor+7)& (0+255),7,b
  5461  002AFE  D7F4               	goto	l9525
  5462  002B00                     u12110:
  5463                           
  5464                           ; BSR set to: 0
  5465  002B00  5168               	movf	___lomod@divisor& (0+255),w,b
  5466  002B02  5D60               	subwf	___lomod@dividend& (0+255),w,b
  5467  002B04  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  5468  002B06  5961               	subwfb	(___lomod@dividend+1)& (0+255),w,b
  5469  002B08  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  5470  002B0A  5962               	subwfb	(___lomod@dividend+2)& (0+255),w,b
  5471  002B0C  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  5472  002B0E  5963               	subwfb	(___lomod@dividend+3)& (0+255),w,b
  5473  002B10  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  5474  002B12  5964               	subwfb	(___lomod@dividend+4)& (0+255),w,b
  5475  002B14  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  5476  002B16  5965               	subwfb	(___lomod@dividend+5)& (0+255),w,b
  5477  002B18  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  5478  002B1A  5966               	subwfb	(___lomod@dividend+6)& (0+255),w,b
  5479  002B1C  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  5480  002B1E  5967               	subwfb	(___lomod@dividend+7)& (0+255),w,b
  5481  002B20  E310               	bnc	l9533
  5482                           
  5483                           ; BSR set to: 0
  5484  002B22  5168               	movf	___lomod@divisor& (0+255),w,b
  5485  002B24  5F60               	subwf	___lomod@dividend& (0+255),f,b
  5486  002B26  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  5487  002B28  5B61               	subwfb	(___lomod@dividend+1)& (0+255),f,b
  5488  002B2A  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  5489  002B2C  5B62               	subwfb	(___lomod@dividend+2)& (0+255),f,b
  5490  002B2E  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  5491  002B30  5B63               	subwfb	(___lomod@dividend+3)& (0+255),f,b
  5492  002B32  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  5493  002B34  5B64               	subwfb	(___lomod@dividend+4)& (0+255),f,b
  5494  002B36  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  5495  002B38  5B65               	subwfb	(___lomod@dividend+5)& (0+255),f,b
  5496  002B3A  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  5497  002B3C  5B66               	subwfb	(___lomod@dividend+6)& (0+255),f,b
  5498  002B3E  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  5499  002B40  5B67               	subwfb	(___lomod@dividend+7)& (0+255),f,b
  5500  002B42                     l9533:
  5501                           
  5502                           ; BSR set to: 0
  5503  002B42  90D8               	bcf	status,0,c
  5504  002B44  336F               	rrcf	(___lomod@divisor+7)& (0+255),f,b
  5505  002B46  336E               	rrcf	(___lomod@divisor+6)& (0+255),f,b
  5506  002B48  336D               	rrcf	(___lomod@divisor+5)& (0+255),f,b
  5507  002B4A  336C               	rrcf	(___lomod@divisor+4)& (0+255),f,b
  5508  002B4C  336B               	rrcf	(___lomod@divisor+3)& (0+255),f,b
  5509  002B4E  336A               	rrcf	(___lomod@divisor+2)& (0+255),f,b
  5510  002B50  3369               	rrcf	(___lomod@divisor+1)& (0+255),f,b
  5511  002B52  3368               	rrcf	___lomod@divisor& (0+255),f,b
  5512                           
  5513                           ; BSR set to: 0
  5514  002B54  2E1A               	decfsz	___lomod@counter^0,f,c
  5515  002B56  D7D4               	goto	u12110
  5516  002B58                     l996:
  5517                           
  5518                           ; BSR set to: 0
  5519  002B58  C060  F060         	movff	___lomod@dividend,?___lomod
  5520  002B5C  C061  F061         	movff	___lomod@dividend+1,?___lomod+1
  5521  002B60  C062  F062         	movff	___lomod@dividend+2,?___lomod+2
  5522  002B64  C063  F063         	movff	___lomod@dividend+3,?___lomod+3
  5523  002B68  C064  F064         	movff	___lomod@dividend+4,?___lomod+4
  5524  002B6C  C065  F065         	movff	___lomod@dividend+5,?___lomod+5
  5525  002B70  C066  F066         	movff	___lomod@dividend+6,?___lomod+6
  5526  002B74  C067  F067         	movff	___lomod@dividend+7,?___lomod+7
  5527                           
  5528                           ; BSR set to: 0
  5529  002B78  0012               	return		;funcret
  5530  002B7A                     __end_of___lomod:
  5531                           	callstack 0
  5532                           
  5533 ;; *************** function ___lodiv *****************
  5534 ;; Defined at:
  5535 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lodiv.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  dividend        8    0[BANK0 ] unsigned long long 
  5538 ;;  divisor         8    8[BANK0 ] unsigned long long 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  quotient        8   25[COMRAM] unsigned long long 
  5541 ;;  counter         1   33[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  8    0[BANK0 ] unsigned long long 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0
  5546 ;; Tracked objects:
  5547 ;;		On entry : 3F/0
  5548 ;;		On exit  : 3F/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5551 ;;      Params:         0      16       0       0       0       0       0
  5552 ;;      Locals:         9       0       0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0
  5554 ;;      Totals:         9      16       0       0       0       0       0
  5555 ;;Total ram usage:       25 bytes
  5556 ;; Hardware stack levels used: 1
  5557 ;; Hardware stack levels required when called: 3
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_utoa
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text10
  5566  002950                     __ptext10:
  5567                           	callstack 0
  5568  002950                     ___lodiv:
  5569                           	callstack 23
  5570                           
  5571                           ; BSR set to: 0
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;incstack = 0
  5575  002950  6A1A               	clrf	___lodiv@quotient^0,c
  5576  002952  6A1B               	clrf	(___lodiv@quotient+1)^0,c
  5577  002954  6A1C               	clrf	(___lodiv@quotient+2)^0,c
  5578  002956  6A1D               	clrf	(___lodiv@quotient+3)^0,c
  5579  002958  6A1E               	clrf	(___lodiv@quotient+4)^0,c
  5580  00295A  6A1F               	clrf	(___lodiv@quotient+5)^0,c
  5581  00295C  6A20               	clrf	(___lodiv@quotient+6)^0,c
  5582  00295E  6A21               	clrf	(___lodiv@quotient+7)^0,c
  5583                           
  5584                           ; BSR set to: 0
  5585  002960  5168               	movf	___lodiv@divisor& (0+255),w,b
  5586  002962  1169               	iorwf	(___lodiv@divisor+1)& (0+255),w,b
  5587  002964  116A               	iorwf	(___lodiv@divisor+2)& (0+255),w,b
  5588  002966  116B               	iorwf	(___lodiv@divisor+3)& (0+255),w,b
  5589  002968  116C               	iorwf	(___lodiv@divisor+4)& (0+255),w,b
  5590  00296A  116D               	iorwf	(___lodiv@divisor+5)& (0+255),w,b
  5591  00296C  116E               	iorwf	(___lodiv@divisor+6)& (0+255),w,b
  5592  00296E  116F               	iorwf	(___lodiv@divisor+7)& (0+255),w,b
  5593  002970  E045               	bz	l986
  5594                           
  5595                           ; BSR set to: 0
  5596  002972  0E01               	movlw	1
  5597  002974  6E22               	movwf	___lodiv@counter^0,c
  5598  002976  D00A               	goto	l9507
  5599  002978                     l9505:
  5600                           
  5601                           ; BSR set to: 0
  5602  002978  90D8               	bcf	status,0,c
  5603  00297A  3768               	rlcf	___lodiv@divisor& (0+255),f,b
  5604  00297C  3769               	rlcf	(___lodiv@divisor+1)& (0+255),f,b
  5605  00297E  376A               	rlcf	(___lodiv@divisor+2)& (0+255),f,b
  5606  002980  376B               	rlcf	(___lodiv@divisor+3)& (0+255),f,b
  5607  002982  376C               	rlcf	(___lodiv@divisor+4)& (0+255),f,b
  5608  002984  376D               	rlcf	(___lodiv@divisor+5)& (0+255),f,b
  5609  002986  376E               	rlcf	(___lodiv@divisor+6)& (0+255),f,b
  5610  002988  376F               	rlcf	(___lodiv@divisor+7)& (0+255),f,b
  5611  00298A  2A22               	incf	___lodiv@counter^0,f,c
  5612  00298C                     l9507:
  5613                           
  5614                           ; BSR set to: 0
  5615  00298C  AF6F               	btfss	(___lodiv@divisor+7)& (0+255),7,b
  5616  00298E  D7F4               	goto	l9505
  5617  002990                     u12080:
  5618                           
  5619                           ; BSR set to: 0
  5620  002990  90D8               	bcf	status,0,c
  5621  002992  361A               	rlcf	___lodiv@quotient^0,f,c
  5622  002994  361B               	rlcf	(___lodiv@quotient+1)^0,f,c
  5623  002996  361C               	rlcf	(___lodiv@quotient+2)^0,f,c
  5624  002998  361D               	rlcf	(___lodiv@quotient+3)^0,f,c
  5625  00299A  361E               	rlcf	(___lodiv@quotient+4)^0,f,c
  5626  00299C  361F               	rlcf	(___lodiv@quotient+5)^0,f,c
  5627  00299E  3620               	rlcf	(___lodiv@quotient+6)^0,f,c
  5628  0029A0  3621               	rlcf	(___lodiv@quotient+7)^0,f,c
  5629                           
  5630                           ; BSR set to: 0
  5631  0029A2  5168               	movf	___lodiv@divisor& (0+255),w,b
  5632  0029A4  5D60               	subwf	___lodiv@dividend& (0+255),w,b
  5633  0029A6  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  5634  0029A8  5961               	subwfb	(___lodiv@dividend+1)& (0+255),w,b
  5635  0029AA  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  5636  0029AC  5962               	subwfb	(___lodiv@dividend+2)& (0+255),w,b
  5637  0029AE  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  5638  0029B0  5963               	subwfb	(___lodiv@dividend+3)& (0+255),w,b
  5639  0029B2  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  5640  0029B4  5964               	subwfb	(___lodiv@dividend+4)& (0+255),w,b
  5641  0029B6  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  5642  0029B8  5965               	subwfb	(___lodiv@dividend+5)& (0+255),w,b
  5643  0029BA  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  5644  0029BC  5966               	subwfb	(___lodiv@dividend+6)& (0+255),w,b
  5645  0029BE  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  5646  0029C0  5967               	subwfb	(___lodiv@dividend+7)& (0+255),w,b
  5647  0029C2  E311               	bnc	l9517
  5648                           
  5649                           ; BSR set to: 0
  5650  0029C4  5168               	movf	___lodiv@divisor& (0+255),w,b
  5651  0029C6  5F60               	subwf	___lodiv@dividend& (0+255),f,b
  5652  0029C8  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  5653  0029CA  5B61               	subwfb	(___lodiv@dividend+1)& (0+255),f,b
  5654  0029CC  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  5655  0029CE  5B62               	subwfb	(___lodiv@dividend+2)& (0+255),f,b
  5656  0029D0  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  5657  0029D2  5B63               	subwfb	(___lodiv@dividend+3)& (0+255),f,b
  5658  0029D4  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  5659  0029D6  5B64               	subwfb	(___lodiv@dividend+4)& (0+255),f,b
  5660  0029D8  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  5661  0029DA  5B65               	subwfb	(___lodiv@dividend+5)& (0+255),f,b
  5662  0029DC  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  5663  0029DE  5B66               	subwfb	(___lodiv@dividend+6)& (0+255),f,b
  5664  0029E0  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  5665  0029E2  5B67               	subwfb	(___lodiv@dividend+7)& (0+255),f,b
  5666                           
  5667                           ; BSR set to: 0
  5668  0029E4  801A               	bsf	___lodiv@quotient^0,0,c
  5669  0029E6                     l9517:
  5670                           
  5671                           ; BSR set to: 0
  5672  0029E6  90D8               	bcf	status,0,c
  5673  0029E8  336F               	rrcf	(___lodiv@divisor+7)& (0+255),f,b
  5674  0029EA  336E               	rrcf	(___lodiv@divisor+6)& (0+255),f,b
  5675  0029EC  336D               	rrcf	(___lodiv@divisor+5)& (0+255),f,b
  5676  0029EE  336C               	rrcf	(___lodiv@divisor+4)& (0+255),f,b
  5677  0029F0  336B               	rrcf	(___lodiv@divisor+3)& (0+255),f,b
  5678  0029F2  336A               	rrcf	(___lodiv@divisor+2)& (0+255),f,b
  5679  0029F4  3369               	rrcf	(___lodiv@divisor+1)& (0+255),f,b
  5680  0029F6  3368               	rrcf	___lodiv@divisor& (0+255),f,b
  5681                           
  5682                           ; BSR set to: 0
  5683  0029F8  2E22               	decfsz	___lodiv@counter^0,f,c
  5684  0029FA  D7CA               	goto	u12080
  5685  0029FC                     l986:
  5686                           
  5687                           ; BSR set to: 0
  5688  0029FC  C01A  F060         	movff	___lodiv@quotient,?___lodiv
  5689  002A00  C01B  F061         	movff	___lodiv@quotient+1,?___lodiv+1
  5690  002A04  C01C  F062         	movff	___lodiv@quotient+2,?___lodiv+2
  5691  002A08  C01D  F063         	movff	___lodiv@quotient+3,?___lodiv+3
  5692  002A0C  C01E  F064         	movff	___lodiv@quotient+4,?___lodiv+4
  5693  002A10  C01F  F065         	movff	___lodiv@quotient+5,?___lodiv+5
  5694  002A14  C020  F066         	movff	___lodiv@quotient+6,?___lodiv+6
  5695  002A18  C021  F067         	movff	___lodiv@quotient+7,?___lodiv+7
  5696                           
  5697                           ; BSR set to: 0
  5698  002A1C  0012               	return		;funcret
  5699  002A1E                     __end_of___lodiv:
  5700                           	callstack 0
  5701                           
  5702 ;; *************** function _strncmp *****************
  5703 ;; Defined at:
  5704 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strncmp.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  _l              1   25[COMRAM] PTR const unsigned char 
  5707 ;;		 -> vfpfcnvrt@ct(3), 
  5708 ;;  _r              2   26[COMRAM] PTR const unsigned char 
  5709 ;;		 -> STR_35(3), 
  5710 ;;  n               2   28[COMRAM] unsigned int 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  r               2   31[COMRAM] PTR const unsigned char 
  5713 ;;		 -> STR_35(3), 
  5714 ;;  l               1   33[COMRAM] PTR const unsigned char 
  5715 ;;		 -> vfpfcnvrt@ct(3), 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  2   25[COMRAM] int 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5720 ;; Tracked objects:
  5721 ;;		On entry : 3F/0
  5722 ;;		On exit  : 3F/0
  5723 ;;		Unchanged: 3F/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5725 ;;      Params:         5       0       0       0       0       0       0
  5726 ;;      Locals:         3       0       0       0       0       0       0
  5727 ;;      Temps:          1       0       0       0       0       0       0
  5728 ;;      Totals:         9       0       0       0       0       0       0
  5729 ;;Total ram usage:        9 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; Hardware stack levels required when called: 3
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_vfpfcnvrt
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text11
  5740  002EB4                     __ptext11:
  5741                           	callstack 0
  5742  002EB4                     _strncmp:
  5743                           	callstack 24
  5744                           
  5745                           ; BSR set to: 0
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;incstack = 0
  5749  002EB4  C01A  F022         	movff	strncmp@_l,strncmp@l
  5750  002EB8  C01B  F020         	movff	strncmp@_r,strncmp@r
  5751  002EBC  C01C  F021         	movff	strncmp@_r+1,strncmp@r+1
  5752  002EC0  061D               	decf	strncmp@n^0,f,c
  5753  002EC2  A0D8               	btfss	status,0,c
  5754  002EC4  061E               	decf	(strncmp@n+1)^0,f,c
  5755  002EC6  281D               	incf	strncmp@n^0,w,c
  5756  002EC8  E10B               	bnz	l10099
  5757  002ECA  281E               	incf	(strncmp@n+1)^0,w,c
  5758  002ECC  E109               	bnz	l10099
  5759                           
  5760                           ; BSR set to: 0
  5761  002ECE  6A1A               	clrf	?_strncmp^0,c
  5762  002ED0  6A1B               	clrf	(?_strncmp+1)^0,c
  5763  002ED2  0012               	return	
  5764  002ED4                     l10097:
  5765                           
  5766                           ; BSR set to: 0
  5767  002ED4  2A22               	incf	strncmp@l^0,f,c
  5768  002ED6  4A20               	infsnz	strncmp@r^0,f,c
  5769  002ED8  2A21               	incf	(strncmp@r+1)^0,f,c
  5770  002EDA  061D               	decf	strncmp@n^0,f,c
  5771  002EDC  A0D8               	btfss	status,0,c
  5772  002EDE  061E               	decf	(strncmp@n+1)^0,f,c
  5773  002EE0                     l10099:
  5774                           
  5775                           ; BSR set to: 0
  5776  002EE0  5022               	movf	strncmp@l^0,w,c
  5777  002EE2  6ED9               	movwf	fsr2l,c
  5778  002EE4  6ADA               	clrf	fsr2h,c
  5779  002EE6  50DF               	movf	indf2,w,c
  5780  002EE8  E00E               	bz	u13380
  5781                           
  5782                           ; BSR set to: 0
  5783  002EEA  C020  FFF6         	movff	strncmp@r,tblptrl
  5784  002EEE  C021  FFF7         	movff	strncmp@r+1,tblptrh
  5785  002EF2                     	if	0	;tblptru may be non-zero
  5786  002EF2                     	endif
  5787  002EF2                     	if	0	;tblptru may be non-zero
  5788  002EF2                     	endif
  5789  002EF2  0008               	tblrd		*
  5790  002EF4  50F5               	movf	tablat,w,c
  5791  002EF6  E007               	bz	u13380
  5792                           
  5793                           ; BSR set to: 0
  5794  002EF8  501D               	movf	strncmp@n^0,w,c
  5795  002EFA  101E               	iorwf	(strncmp@n+1)^0,w,c
  5796  002EFC  E004               	bz	u13380
  5797                           
  5798                           ; BSR set to: 0
  5799  002EFE  5022               	movf	strncmp@l^0,w,c
  5800  002F00  D80B               	call	PL70	;call to abstracted procedure
  5801  002F02  18F5               	xorwf	tablat,w,c
  5802  002F04  E0E7               	bz	l10097
  5803  002F06                     u13380:
  5804                           
  5805                           ; BSR set to: 0
  5806  002F06  5022               	movf	strncmp@l^0,w,c
  5807  002F08  D807               	call	PL70	;call to abstracted procedure
  5808  002F0A  50F5               	movf	tablat,w,c
  5809  002F0C  5C1F               	subwf	??_strncmp^0,w,c
  5810  002F0E  6E1A               	movwf	?_strncmp^0,c
  5811  002F10  6A1B               	clrf	(?_strncmp+1)^0,c
  5812  002F12  A0D8               	btfss	status,0,c
  5813  002F14  061B               	decf	(?_strncmp+1)^0,f,c
  5814                           
  5815                           ; BSR set to: 0
  5816  002F16  0012               	return		;funcret
  5817  002F18                     __end_of_strncmp:
  5818                           	callstack 0
  5819  002F18                     PL70:
  5820                           	callstack 24
  5821  002F18  6ED9               	movwf	fsr2l,c
  5822  002F1A  6ADA               	clrf	fsr2h,c
  5823  002F1C  50DF               	movf	indf2,w,c
  5824  002F1E  6E1F               	movwf	??_strncmp^0,c
  5825  002F20  C020  FFF6         	movff	strncmp@r,tblptrl
  5826  002F24  C021  FFF7         	movff	strncmp@r+1,tblptrh
  5827  002F28                     	if	0	;tblptru may be non-zero
  5828  002F28                     	endif
  5829  002F28                     	if	0	;tblptru may be non-zero
  5830  002F28                     	endif
  5831  002F28  0008               	tblrd		*
  5832  002F2A  0012               	return	
  5833  002F2C                     __end_ofPL70:
  5834                           	callstack 0
  5835                           
  5836 ;; *************** function _stoa *****************
  5837 ;; Defined at:
  5838 ;;		line 568 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5841 ;;		 -> sprintf@f(6), 
  5842 ;;  s               2    1[BANK0 ] PTR unsigned char 
  5843 ;;		 -> ?_sprintf(2), U_real(2), compile_time(9), compile_date(12), 
  5844 ;;		 -> STR_3(9), 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;  nuls            7    3[BANK0 ] unsigned char [7]
  5847 ;;  l               2   18[BANK0 ] int 
  5848 ;;  p               2   16[BANK0 ] int 
  5849 ;;  cp              2   14[BANK0 ] PTR unsigned char 
  5850 ;;		 -> stoa@nuls(7), ?_sprintf(2), U_real(2), compile_time(9), 
  5851 ;;		 -> compile_date(12), STR_3(9), 
  5852 ;;  w               2   12[BANK0 ] int 
  5853 ;;  i               2   10[BANK0 ] int 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2    0[BANK0 ] int 
  5856 ;; Registers used:
  5857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 3F/0
  5860 ;;		On exit  : 3F/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5863 ;;      Params:         0       3       0       0       0       0       0
  5864 ;;      Locals:         0      17       0       0       0       0       0
  5865 ;;      Temps:          1       0       0       0       0       0       0
  5866 ;;      Totals:         1      20       0       0       0       0       0
  5867 ;;Total ram usage:       21 bytes
  5868 ;; Hardware stack levels used: 1
  5869 ;; Hardware stack levels required when called: 5
  5870 ;; This function calls:
  5871 ;;		_fputc
  5872 ;;		_strlen
  5873 ;; This function is called by:
  5874 ;;		_vfpfcnvrt
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text12
  5879  002324                     __ptext12:
  5880                           	callstack 0
  5881  002324                     _stoa:
  5882                           	callstack 22
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 568: static int s
      +                          toa(FILE *fp, char *s);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 569: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 570:  
      +                             char *cp, nuls[] = "(null)";
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;incstack = 0
  5889  002324  EE21  F0D6         	lfsr	2,stoa@F1160
  5890  002328  EE10  F063         	lfsr	1,stoa@nuls
  5891  00232C  0E06               	movlw	6
  5892  00232E                     u13101:
  5893  00232E  CFDB FFE3          	movff	plusw2,plusw1
  5894  002332  06E8               	decf	wreg,f,c
  5895  002334  E2FC               	bc	u13101
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 571:     int i, l
      +                          , p, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 574:     c
      +                          p = s;
  5899  002336  C061  F06E         	movff	stoa@s,stoa@cp
  5900  00233A  C062  F06F         	movff	stoa@s+1,stoa@cp+1
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 575:     if (!cp)
      +                           {
  5904  00233E  516E               	movf	stoa@cp& (0+255),w,b
  5905  002340  116F               	iorwf	(stoa@cp+1)& (0+255),w,b
  5906  002342  E103               	bnz	l9985
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 576:         cp =
      +                           nuls;
  5910  002344  0E63               	movlw	low stoa@nuls
  5911  002346  6F6E               	movwf	stoa@cp& (0+255),b
  5912  002348  6B6F               	clrf	(stoa@cp+1)& (0+255),b
  5913  00234A                     l9985:
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 580:     l = (int
      +                          )strlen(cp);
  5917  00234A  C06E  F01A         	movff	stoa@cp,strlen@s
  5918  00234E  C06F  F01B         	movff	stoa@cp+1,strlen@s+1
  5919  002352  ECFB  F019         	call	_strlen	;wreg free
  5920  002356  C01A  F072         	movff	?_strlen,stoa@l
  5921  00235A  C01B  F073         	movff	?_strlen+1,stoa@l+1
  5922                           
  5923                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 581:     p = prec
      +                          ;
  5924  00235E  C031  F070         	movff	_prec,stoa@p
  5925  002362  C032  F071         	movff	_prec+1,stoa@p+1
  5926                           
  5927                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 582:     l = (!(p
      +                           < 0) && (p < l)) ? p : l;
  5928  002366  0100               	movlb	0	; () banked
  5929  002368  BF71               	btfsc	(stoa@p+1)& (0+255),7,b
  5930  00236A  D00D               	goto	l1390
  5931                           
  5932                           ; BSR set to: 0
  5933  00236C  5172               	movf	stoa@l& (0+255),w,b
  5934  00236E  5D70               	subwf	stoa@p& (0+255),w,b
  5935  002370  5171               	movf	(stoa@p+1)& (0+255),w,b
  5936  002372  0A80               	xorlw	128
  5937  002374  6E23               	movwf	??_stoa^0,c
  5938  002376  5173               	movf	(stoa@l+1)& (0+255),w,b
  5939  002378  0A80               	xorlw	128
  5940  00237A  5823               	subwfb	??_stoa^0,w,c
  5941  00237C  E204               	bc	l1390
  5942                           
  5943                           ; BSR set to: 0
  5944  00237E  C070  F072         	movff	stoa@p,stoa@l
  5945  002382  C071  F073         	movff	stoa@p+1,stoa@l+1
  5946  002386                     l1390:
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 583:     p = l;
  5950  002386  C072  F070         	movff	stoa@l,stoa@p
  5951  00238A  C073  F071         	movff	stoa@l+1,stoa@p+1
  5952                           
  5953                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 584:     w = widt
      +                          h;
  5954  00238E  C02F  F06C         	movff	_width,stoa@w
  5955  002392  C030  F06D         	movff	_width+1,stoa@w+1
  5956                           
  5957                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 587:     if (!(fl
      +                          ags & (1 << 0))) {
  5958  002396  B033               	btfsc	_flags^0,0,c
  5959  002398  D00B               	goto	u13150
  5960  00239A  D008               	goto	l9999
  5961  00239C                     l9995:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 589:             
      +                          fputc(' ', fp);
  5965  00239C  D848               	call	PL110	;call to abstracted procedure
  5966  00239E  C060  F01D         	movff	stoa@fp,fputc@fp
  5967  0023A2  ECDD  F016         	call	_fputc	;wreg free
  5968                           
  5969                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 590:             
      +                          ++l;
  5970  0023A6  0100               	movlb	0	; () banked
  5971  0023A8  4B72               	infsnz	stoa@l& (0+255),f,b
  5972  0023AA  2B73               	incf	(stoa@l+1)& (0+255),f,b
  5973  0023AC                     l9999:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 588:         whil
      +                          e (l < w) {
  5977  0023AC  D837               	call	PL102	;call to abstracted procedure
  5978  0023AE  E3F6               	bnc	l9995
  5979  0023B0                     u13150:
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 595:     i = 0;
  5983                           
  5984                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 592:     }
  5985  0023B0  6B6A               	clrf	stoa@i& (0+255),b
  5986  0023B2  6B6B               	clrf	(stoa@i+1)& (0+255),b
  5987                           
  5988                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  5989  0023B4  D018               	goto	l10007
  5990  0023B6                     l10001:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 597:         fput
      +                          c(*cp, fp);
  5994  0023B6  C06E  FFF6         	movff	stoa@cp,tblptrl
  5995  0023BA  C06F  FFF7         	movff	stoa@cp+1,tblptrh
  5996  0023BE  6AF8               	clrf	tblptru,c
  5997  0023C0  0E05               	movlw	(high __ramtop+-1)
  5998  0023C2  64F7               	cpfsgt	tblptrh,c
  5999  0023C4  D003               	bra	u13167
  6000  0023C6  0008               	tblrd		*
  6001  0023C8  50F5               	movf	tablat,w,c
  6002  0023CA  D002               	bra	u13160
  6003  0023CC                     u13167:
  6004  0023CC  EC21  F014         	call	PL20	;call to abstracted procedure
  6005  0023D0                     u13160:
  6006  0023D0  6E1B               	movwf	fputc@c^0,c
  6007  0023D2  6A1C               	clrf	(fputc@c+1)^0,c
  6008  0023D4  C060  F01D         	movff	stoa@fp,fputc@fp
  6009  0023D8  ECDD  F016         	call	_fputc	;wreg free
  6010                           
  6011                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 598:         ++cp
      +                          ;
  6012  0023DC  0100               	movlb	0	; () banked
  6013  0023DE  4B6E               	infsnz	stoa@cp& (0+255),f,b
  6014  0023E0  2B6F               	incf	(stoa@cp+1)& (0+255),f,b
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 599:         ++i;
  6018  0023E2  4B6A               	infsnz	stoa@i& (0+255),f,b
  6019  0023E4  2B6B               	incf	(stoa@i+1)& (0+255),f,b
  6020  0023E6                     l10007:
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  6024  0023E6  5170               	movf	stoa@p& (0+255),w,b
  6025  0023E8  5D6A               	subwf	stoa@i& (0+255),w,b
  6026  0023EA  516B               	movf	(stoa@i+1)& (0+255),w,b
  6027  0023EC  0A80               	xorlw	128
  6028  0023EE  6E23               	movwf	??_stoa^0,c
  6029  0023F0  5171               	movf	(stoa@p+1)& (0+255),w,b
  6030  0023F2  0A80               	xorlw	128
  6031  0023F4  5823               	subwfb	??_stoa^0,w,c
  6032  0023F6  E3DF               	bnc	l10001
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 603:     if (flag
      +                          s & (1 << 0)) {
  6036  0023F8  A033               	btfss	_flags^0,0,c
  6037  0023FA  D00B               	goto	u13190
  6038  0023FC  D008               	goto	l10015
  6039  0023FE                     l10011:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 605:             
      +                          fputc(' ', fp);
  6043  0023FE  D817               	call	PL110	;call to abstracted procedure
  6044  002400  C060  F01D         	movff	stoa@fp,fputc@fp
  6045  002404  ECDD  F016         	call	_fputc	;wreg free
  6046                           
  6047                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 606:             
      +                          ++l;
  6048  002408  0100               	movlb	0	; () banked
  6049  00240A  4B72               	infsnz	stoa@l& (0+255),f,b
  6050  00240C  2B73               	incf	(stoa@l+1)& (0+255),f,b
  6051  00240E                     l10015:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 604:         whil
      +                          e (l < w) {
  6055  00240E  D806               	call	PL102	;call to abstracted procedure
  6056  002410  E3F6               	bnc	l10011
  6057  002412                     u13190:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 610:     return l
      +                          ;
  6061                           
  6062                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 608:     }
  6063  002412  C072  F060         	movff	stoa@l,?_stoa
  6064  002416  C073  F061         	movff	stoa@l+1,?_stoa+1
  6065                           
  6066                           ; BSR set to: 0
  6067  00241A  0012               	return		;funcret
  6068  00241C                     __end_of_stoa:
  6069                           	callstack 0
  6070  00241C                     PL102:
  6071                           	callstack 22
  6072  00241C  516C               	movf	stoa@w& (0+255),w,b
  6073  00241E  5D72               	subwf	stoa@l& (0+255),w,b
  6074  002420  5173               	movf	(stoa@l+1)& (0+255),w,b
  6075  002422  0A80               	xorlw	128
  6076  002424  6E23               	movwf	??_stoa^0,c
  6077  002426  516D               	movf	(stoa@w+1)& (0+255),w,b
  6078  002428  0A80               	xorlw	128
  6079  00242A  5823               	subwfb	??_stoa^0,w,c
  6080  00242C  0012               	return	
  6081  00242E                     __end_ofPL102:
  6082                           	callstack 0
  6083  00242E                     PL110:
  6084                           	callstack 20
  6085  00242E  0E00               	movlw	0
  6086  002430  6E1C               	movwf	(fputc@c+1)^0,c
  6087  002432  0E20               	movlw	32
  6088  002434  6E1B               	movwf	fputc@c^0,c
  6089  002436  0C20               	retlw	32
  6090  002438                     __end_ofPL110:
  6091                           	callstack 0
  6092                           
  6093 ;; *************** function _efgtoa *****************
  6094 ;; Defined at:
  6095 ;;		line 332 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  fp              1   98[BANK0 ] PTR struct _IO_FILE
  6098 ;;		 -> sprintf@f(6), 
  6099 ;;  f               4   99[BANK0 ] PTR struct _IO_FILE
  6100 ;;  c               1  103[BANK0 ] unsigned char 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  u               4   52[BANK1 ] unsigned char 
  6103 ;;  g               4   42[BANK1 ] unsigned char 
  6104 ;;  l               4   38[BANK1 ] unsigned char 
  6105 ;;  h               4   34[BANK1 ] unsigned char 
  6106 ;;  ou              4   20[BANK1 ] unsigned char 
  6107 ;;  n               2   50[BANK1 ] int 
  6108 ;;  e               2   48[BANK1 ] int 
  6109 ;;  i               2   46[BANK1 ] int 
  6110 ;;  w               2   31[BANK1 ] int 
  6111 ;;  p               2   28[BANK1 ] int 
  6112 ;;  sign            2   26[BANK1 ] int 
  6113 ;;  d               2   24[BANK1 ] int 
  6114 ;;  m               2   18[BANK1 ] int 
  6115 ;;  ne              2   16[BANK1 ] int 
  6116 ;;  pp              2   14[BANK1 ] int 
  6117 ;;  t               2   12[BANK1 ] int 
  6118 ;;  mode            1   33[BANK1 ] unsigned char 
  6119 ;;  nmode           1   30[BANK1 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  2   98[BANK0 ] int 
  6122 ;; Registers used:
  6123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 3F/0
  6126 ;;		On exit  : 3F/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6129 ;;      Params:         0       6       0       0       0       0       0
  6130 ;;      Locals:         0       0      56       0       0       0       0
  6131 ;;      Temps:          0       5       0       0       0       0       0
  6132 ;;      Totals:         0      11      56       0       0       0       0
  6133 ;;Total ram usage:       67 bytes
  6134 ;; Hardware stack levels used: 1
  6135 ;; Hardware stack levels required when called: 7
  6136 ;; This function calls:
  6137 ;;		___awdiv
  6138 ;;		___awmod
  6139 ;;		___fladd
  6140 ;;		___fldiv
  6141 ;;		___fleq
  6142 ;;		___flge
  6143 ;;		___flmul
  6144 ;;		___flneg
  6145 ;;		___flsub
  6146 ;;		___fltol
  6147 ;;		___fpclassifyf
  6148 ;;		_floorf
  6149 ;;		_isupper
  6150 ;;		_pad
  6151 ;;		_strcpy
  6152 ;;		_tolower
  6153 ;; This function is called by:
  6154 ;;		_vfpfcnvrt
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	text13
  6159  00005A                     __ptext13:
  6160                           	callstack 0
  6161  00005A                     _efgtoa:
  6162                           	callstack 20
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 332: static int e
      +                          fgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.32\pic\sources\
      +                          c99\common\doprnt.c: 333: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\
      +                          doprnt.c: 334:     char mode, nmode;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c9
      +                          9\common\doprnt.c: 335:     int d, e, i, m, n, ne, p, pp, sign, t, w;;C:\Program Files\M
      +                          icrochip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 336:     long double g, h, l, ou, u;
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;incstack = 0
  6169  00005A  0101               	movlb	1	; () banked
  6170  00005C  6BA6               	clrf	efgtoa@sign& (0+255),b
  6171  00005E  6BA7               	clrf	(efgtoa@sign+1)& (0+255),b
  6172                           
  6173                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 340:     g = f;
  6174  000060  C0C3  F1B6         	movff	efgtoa@f,efgtoa@g
  6175  000064  C0C4  F1B7         	movff	efgtoa@f+1,efgtoa@g+1
  6176  000068  C0C5  F1B8         	movff	efgtoa@f+2,efgtoa@g+2
  6177  00006C  C0C6  F1B9         	movff	efgtoa@f+3,efgtoa@g+3
  6178                           
  6179                           ; BSR set to: 1
  6180                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 341:     if (g < 
      +                          0.0) {
  6181  000070  AFB9               	btfss	(efgtoa@g+3)& (0+255),7,b
  6182  000072  D015               	goto	l9677
  6183                           
  6184                           ; BSR set to: 1
  6185                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 342:         sign
      +                           = 1;
  6186  000074  6BA7               	clrf	(efgtoa@sign+1)& (0+255),b
  6187  000076  0E01               	movlw	1
  6188  000078  6FA6               	movwf	efgtoa@sign& (0+255),b
  6189                           
  6190                           ; BSR set to: 1
  6191                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 343:         g = 
      +                          -g;
  6192  00007A  C1B6  F01A         	movff	efgtoa@g,___flneg@f1
  6193  00007E  C1B7  F01B         	movff	efgtoa@g+1,___flneg@f1+1
  6194  000082  C1B8  F01C         	movff	efgtoa@g+2,___flneg@f1+2
  6195  000086  C1B9  F01D         	movff	efgtoa@g+3,___flneg@f1+3
  6196  00008A  EC17  F01B         	call	___flneg	;wreg free
  6197  00008E  C01A  F1B6         	movff	?___flneg,efgtoa@g
  6198  000092  C01B  F1B7         	movff	?___flneg+1,efgtoa@g+1
  6199  000096  C01C  F1B8         	movff	?___flneg+2,efgtoa@g+2
  6200  00009A  C01D  F1B9         	movff	?___flneg+3,efgtoa@g+3
  6201  00009E                     l9677:
  6202                           
  6203                           ; BSR set to: 1
  6204                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 347:     n = 0;
  6205  00009E  6BBE               	clrf	efgtoa@n& (0+255),b
  6206  0000A0  6BBF               	clrf	(efgtoa@n+1)& (0+255),b
  6207                           
  6208                           ; BSR set to: 1
  6209                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 348:     w = widt
      +                          h;
  6210  0000A2  C02F  F1AB         	movff	_width,efgtoa@w
  6211  0000A6  C030  F1AC         	movff	_width+1,efgtoa@w+1
  6212                           
  6213                           ; BSR set to: 1
  6214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 349:     if (sign
      +                           || (flags & (1 << 2))) {
  6215  0000AA  51A6               	movf	efgtoa@sign& (0+255),w,b
  6216  0000AC  11A7               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  6217  0000AE  E102               	bnz	u12580
  6218                           
  6219                           ; BSR set to: 1
  6220  0000B0  A433               	btfss	_flags^0,2,c
  6221  0000B2  D010               	goto	l9697
  6222  0000B4                     u12580:
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 350:         dbuf
      +                          [n] = sign ? '-' : '+';
  6226  0000B4  51A6               	movf	efgtoa@sign& (0+255),w,b
  6227  0000B6  11A7               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  6228  0000B8  E103               	bnz	l9689
  6229                           
  6230                           ; BSR set to: 1
  6231  0000BA  6B8D               	clrf	(_efgtoa$2020+1)& (0+255),b
  6232  0000BC  0E2B               	movlw	43
  6233  0000BE  D002               	goto	L5
  6234  0000C0                     l9689:
  6235                           
  6236                           ; BSR set to: 1
  6237  0000C0  6B8D               	clrf	(_efgtoa$2020+1)& (0+255),b
  6238  0000C2  0E2D               	movlw	45
  6239  0000C4                     L5:
  6240  0000C4  6F8C               	movwf	_efgtoa$2020& (0+255),b
  6241                           
  6242                           ; BSR set to: 1
  6243  0000C6  C18C  F125         	movff	_efgtoa$2020,_dbuf
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 351:         ++n;
  6247  0000CA  4BBE               	infsnz	efgtoa@n& (0+255),f,b
  6248  0000CC  2BBF               	incf	(efgtoa@n+1)& (0+255),f,b
  6249                           
  6250                           ; BSR set to: 1
  6251                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 352:         --w;
  6252  0000CE  07AB               	decf	efgtoa@w& (0+255),f,b
  6253  0000D0  A0D8               	btfss	status,0,c
  6254  0000D2  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  6255  0000D4                     l9697:
  6256                           
  6257                           ; BSR set to: 1
  6258                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 357:         if (
      +                          (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  6259  0000D4  DB3A               	call	PL76	;call to abstracted procedure
  6260  0000D6  EC0F  F015         	call	___fpclassifyf	;wreg free
  6261  0000DA  041A               	decf	?___fpclassifyf^0,w,c
  6262  0000DC  101B               	iorwf	(?___fpclassifyf+1)^0,w,c
  6263  0000DE  E135               	bnz	l9715
  6264                           
  6265                           ; BSR set to: 0
  6266  0000E0  0EBF               	movlw	191
  6267  0000E2  DAC2               	call	PL26	;call to abstracted procedure
  6268  0000E4  E105               	bnz	u12610
  6269  0000E6  0E1A               	movlw	26
  6270  0000E8  5DCA               	subwf	(??_efgtoa+2)& (0+255),w,b
  6271  0000EA  E202               	bc	u12610
  6272  0000EC  0E01               	movlw	1
  6273  0000EE  D001               	goto	u12620
  6274  0000F0                     u12610:
  6275  0000F0  0E00               	movlw	0
  6276  0000F2                     u12620:
  6277  0000F2  0101               	movlb	1	; () banked
  6278  0000F4  6F8E               	movwf	_efgtoa$2021& (0+255),b
  6279  0000F6  6B8F               	clrf	(_efgtoa$2021+1)& (0+255),b
  6280                           
  6281                           ; BSR set to: 1
  6282  0000F8  518E               	movf	_efgtoa$2021& (0+255),w,b
  6283  0000FA  118F               	iorwf	(_efgtoa$2021+1)& (0+255),w,b
  6284  0000FC  E008               	bz	l9707
  6285                           
  6286                           ; BSR set to: 1
  6287                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 358:             
      +                          strcpy(&dbuf[n], "INF");
  6288  0000FE  DABF               	call	PL32	;call to abstracted procedure
  6289  000100  0EEB               	movlw	low STR_25
  6290  000102  6E1C               	movwf	strcpy@src^0,c
  6291  000104  0E7F               	movlw	high STR_25
  6292  000106  6E1D               	movwf	(strcpy@src+1)^0,c
  6293  000108  ECE8  F018         	call	_strcpy	;wreg free
  6294                           
  6295                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 359:         } el
      +                          se {
  6296  00010C  D007               	goto	l9709
  6297  00010E                     l9707:
  6298                           
  6299                           ; BSR set to: 1
  6300                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 360:             
      +                          strcpy(&dbuf[n], "inf");
  6301  00010E  DAB7               	call	PL32	;call to abstracted procedure
  6302  000110  0EF3               	movlw	low STR_26
  6303  000112  6E1C               	movwf	strcpy@src^0,c
  6304  000114  0E7F               	movlw	high STR_26
  6305  000116  6E1D               	movwf	(strcpy@src+1)^0,c
  6306  000118  ECE8  F018         	call	_strcpy	;wreg free
  6307  00011C                     l9709:
  6308                           
  6309                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 362:         w -=
      +                           ((sizeof("inf")/sizeof("inf"[0]))-1);
  6310  00011C  0101               	movlb	1	; () banked
  6311  00011E  0EFD               	movlw	253
  6312  000120  27AB               	addwf	efgtoa@w& (0+255),f,b
  6313  000122  0EFF               	movlw	255
  6314  000124  23AC               	addwfc	(efgtoa@w+1)& (0+255),f,b
  6315  000126                     l9711:
  6316                           
  6317                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 363:         retu
      +                          rn pad(fp, &dbuf[0], w);
  6318  000126  C0C2  F063         	movff	efgtoa@fp,pad@fp
  6319  00012A  0E25               	movlw	low _dbuf
  6320  00012C  0100               	movlb	0	; () banked
  6321  00012E  6F64               	movwf	pad@buf& (0+255),b
  6322  000130  0E01               	movlw	high _dbuf
  6323  000132  6F65               	movwf	(pad@buf+1)& (0+255),b
  6324  000134  C1AB  F066         	movff	efgtoa@w,pad@p
  6325  000138  C1AC  F067         	movff	efgtoa@w+1,pad@p+1
  6326  00013C  EC1D  F017         	call	_pad	;wreg free
  6327  000140  C063  F0C2         	movff	?_pad,?_efgtoa
  6328  000144  C064  F0C3         	movff	?_pad+1,?_efgtoa+1
  6329  000148  0012               	return	
  6330  00014A                     l9715:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 366:         if (
      +                          (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  6334  00014A  DAFF               	call	PL76	;call to abstracted procedure
  6335  00014C  EC0F  F015         	call	___fpclassifyf	;wreg free
  6336  000150  501A               	movf	?___fpclassifyf^0,w,c
  6337  000152  101B               	iorwf	(?___fpclassifyf+1)^0,w,c
  6338  000154  E11F               	bnz	l9733
  6339                           
  6340                           ; BSR set to: 0
  6341  000156  0EBF               	movlw	191
  6342  000158  DA87               	call	PL26	;call to abstracted procedure
  6343  00015A  E105               	bnz	u12650
  6344  00015C  0E1A               	movlw	26
  6345  00015E  5DCA               	subwf	(??_efgtoa+2)& (0+255),w,b
  6346  000160  E202               	bc	u12650
  6347  000162  0E01               	movlw	1
  6348  000164  D001               	goto	u12660
  6349  000166                     u12650:
  6350  000166  0E00               	movlw	0
  6351  000168                     u12660:
  6352  000168  0101               	movlb	1	; () banked
  6353  00016A  6F90               	movwf	_efgtoa$2026& (0+255),b
  6354  00016C  6B91               	clrf	(_efgtoa$2026+1)& (0+255),b
  6355                           
  6356                           ; BSR set to: 1
  6357  00016E  5190               	movf	_efgtoa$2026& (0+255),w,b
  6358  000170  1191               	iorwf	(_efgtoa$2026+1)& (0+255),w,b
  6359  000172  E008               	bz	l9725
  6360                           
  6361                           ; BSR set to: 1
  6362                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 367:             
      +                          strcpy(&dbuf[n], "NAN");
  6363  000174  DA84               	call	PL32	;call to abstracted procedure
  6364  000176  0EEF               	movlw	low STR_29
  6365  000178  6E1C               	movwf	strcpy@src^0,c
  6366  00017A  0E7F               	movlw	high STR_29
  6367  00017C  6E1D               	movwf	(strcpy@src+1)^0,c
  6368  00017E  ECE8  F018         	call	_strcpy	;wreg free
  6369                           
  6370                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 368:         } el
      +                          se {
  6371  000182  D7CC               	goto	l9709
  6372  000184                     l9725:
  6373                           
  6374                           ; BSR set to: 1
  6375                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 369:             
      +                          strcpy(&dbuf[n], "nan");
  6376  000184  DA7C               	call	PL32	;call to abstracted procedure
  6377  000186  0EF7               	movlw	low STR_30
  6378  000188  6E1C               	movwf	strcpy@src^0,c
  6379  00018A  0E7F               	movlw	high STR_30
  6380  00018C  6E1D               	movwf	(strcpy@src+1)^0,c
  6381  00018E  ECE8  F018         	call	_strcpy	;wreg free
  6382  000192  D7C4               	goto	l9709
  6383  000194                     l9733:
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 376:     u = 1.0;
  6387  000194  0101               	movlb	1	; () banked
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 377:     e = 0;
  6391  000196  DB0F               	call	PL96	;call to abstracted procedure
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 378:     if (!(g 
      +                          == 0.0)) {
  6395  000198  C1B6  F01A         	movff	efgtoa@g,___fleq@ff1
  6396  00019C  C1B7  F01B         	movff	efgtoa@g+1,___fleq@ff1+1
  6397  0001A0  C1B8  F01C         	movff	efgtoa@g+2,___fleq@ff1+2
  6398  0001A4  C1B9  F01D         	movff	efgtoa@g+3,___fleq@ff1+3
  6399  0001A8  DB19               	call	PL174	;call to abstracted procedure
  6400  0001AA  EC41  F018         	call	___fleq	;wreg free
  6401  0001AE  E310               	bnc	l9745
  6402  0001B0  D02D               	goto	u12700
  6403  0001B2                     l9741:
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 380:             
      +                          u = u*10.0;
  6407  0001B2  DA9F               	call	PL44	;call to abstracted procedure
  6408  0001B4  DAAE               	call	PL50	;call to abstracted procedure
  6409  0001B6  ECE0  F00B         	call	___flmul	;wreg free
  6410  0001BA  C066  F1C0         	movff	?___flmul,efgtoa@u
  6411  0001BE  C067  F1C1         	movff	?___flmul+1,efgtoa@u+1
  6412  0001C2  C068  F1C2         	movff	?___flmul+2,efgtoa@u+2
  6413  0001C6  C069  F1C3         	movff	?___flmul+3,efgtoa@u+3
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 381:             
      +                          ++e;
  6417  0001CA  0101               	movlb	1	; () banked
  6418  0001CC  4BBC               	infsnz	efgtoa@e& (0+255),f,b
  6419  0001CE  2BBD               	incf	(efgtoa@e+1)& (0+255),f,b
  6420  0001D0                     l9745:
  6421                           
  6422                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 379:         whil
      +                          e (!(g < (u*10.0))) {
  6423  0001D0  DACE               	call	PL84	;call to abstracted procedure
  6424  0001D2  0100               	movlb	0	; () banked
  6425  0001D4  DA9E               	call	PL50	;call to abstracted procedure
  6426  0001D6  DA8D               	call	PL44	;call to abstracted procedure
  6427  0001D8  ECE0  F00B         	call	___flmul	;wreg free
  6428  0001DC  DABF               	call	PL80	;call to abstracted procedure
  6429  0001DE  EC56  F016         	call	___flge	;wreg free
  6430  0001E2  E308               	bnc	l9751
  6431  0001E4  D7E6               	goto	l9741
  6432  0001E6                     l9747:
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 384:             
      +                          u = u/10.0;
  6436  0001E6  DA0F               	call	PL10	;call to abstracted procedure
  6437  0001E8  ECDB  F00D         	call	___fldiv	;wreg free
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 385:             
      +                          --e;
  6441  0001EC  DA78               	call	PL42	;call to abstracted procedure
  6442  0001EE  07BC               	decf	efgtoa@e& (0+255),f,b
  6443  0001F0  A0D8               	btfss	status,0,c
  6444  0001F2  07BD               	decf	(efgtoa@e+1)& (0+255),f,b
  6445  0001F4                     l9751:
  6446                           
  6447                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 383:         whil
      +                          e (g < u) {
  6448  0001F4  DABC               	call	PL84	;call to abstracted procedure
  6449  0001F6  C1C0  F07F         	movff	efgtoa@u,___flge@ff2
  6450  0001FA  C1C1  F080         	movff	efgtoa@u+1,___flge@ff2+1
  6451  0001FE  C1C2  F081         	movff	efgtoa@u+2,___flge@ff2+2
  6452  000202  C1C3  F082         	movff	efgtoa@u+3,___flge@ff2+3
  6453  000206  EC56  F016         	call	___flge	;wreg free
  6454  00020A  E3ED               	bnc	l9747
  6455  00020C                     u12700:
  6456                           
  6457                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 390:     mode = (
      +                          char)tolower((int)c);
  6458  00020C  C0C7  F020         	movff	efgtoa@c,tolower@c
  6459  000210  6A21               	clrf	(tolower@c+1)^0,c
  6460  000212  EC56  F019         	call	_tolower	;wreg free
  6461  000216  5020               	movf	?_tolower^0,w,c
  6462  000218  0101               	movlb	1	; () banked
  6463  00021A  6FAD               	movwf	efgtoa@mode& (0+255),b
  6464                           
  6465                           ; BSR set to: 1
  6466                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 391:     nmode = 
      +                          mode;
  6467  00021C  C1AD  F1AA         	movff	efgtoa@mode,efgtoa@nmode
  6468                           
  6469                           ; BSR set to: 1
  6470                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 392:     if (mode
      +                           == 'g') {
  6471  000220  0E67               	movlw	103
  6472  000222  19AD               	xorwf	efgtoa@mode& (0+255),w,b
  6473  000224  E116               	bnz	l9767
  6474                           
  6475                           ; BSR set to: 1
  6476                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 393:   if (prec =
      +                          = 0) {
  6477  000226  5031               	movf	_prec^0,w,c
  6478  000228  1032               	iorwf	(_prec+1)^0,w,c
  6479  00022A  E104               	bnz	l9763
  6480                           
  6481                           ; BSR set to: 1
  6482                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 394:    prec = 1;
  6483  00022C  0E00               	movlw	0
  6484  00022E  6E32               	movwf	(_prec+1)^0,c
  6485  000230  0E01               	movlw	1
  6486  000232  6E31               	movwf	_prec^0,c
  6487  000234                     l9763:
  6488                           
  6489                           ; BSR set to: 1
  6490                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 396:         p = 
      +                          (0 < prec) ? prec : 6;
  6491  000234  BE32               	btfsc	(_prec+1)^0,7,c
  6492  000236  D004               	goto	u12730
  6493  000238  5032               	movf	(_prec+1)^0,w,c
  6494  00023A  E106               	bnz	l1324
  6495  00023C  0431               	decf	_prec^0,w,c
  6496  00023E  E204               	bc	l1324
  6497  000240                     u12730:
  6498                           
  6499                           ; BSR set to: 1
  6500  000240  6BA9               	clrf	(efgtoa@p+1)& (0+255),b
  6501  000242  0E06               	movlw	6
  6502  000244  6FA8               	movwf	efgtoa@p& (0+255),b
  6503  000246  D008               	goto	l9773
  6504  000248                     l1324:
  6505                           
  6506                           ; BSR set to: 1
  6507  000248  C031  F1A8         	movff	_prec,efgtoa@p
  6508  00024C  C032  F1A9         	movff	_prec+1,efgtoa@p+1
  6509  000250  D003               	goto	l9773
  6510  000252                     l9767:
  6511                           
  6512                           ; BSR set to: 1
  6513                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 398:         p = 
      +                          (prec < 0) ? 6 : prec;
  6514  000252  BE32               	btfsc	(_prec+1)^0,7,c
  6515  000254  D7F5               	goto	u12730
  6516  000256  D7F8               	goto	l1324
  6517  000258                     l9773:
  6518                           
  6519                           ; BSR set to: 1
  6520                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 402:     if (mode
      +                           == 'g') {
  6521  000258  0E67               	movlw	103
  6522  00025A  19AD               	xorwf	efgtoa@mode& (0+255),w,b
  6523  00025C  E124               	bnz	l9783
  6524                           
  6525                           ; BSR set to: 1
  6526                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 403:         if (
      +                          !(e < -4) && !((p - 1) < e)) {
  6527  00025E  AFBD               	btfss	(efgtoa@e+1)& (0+255),7,b
  6528  000260  D005               	goto	u12760
  6529  000262  0EFC               	movlw	252
  6530  000264  5DBC               	subwf	efgtoa@e& (0+255),w,b
  6531  000266  0EFF               	movlw	255
  6532  000268  59BD               	subwfb	(efgtoa@e+1)& (0+255),w,b
  6533  00026A  E31A               	bnc	l9781
  6534  00026C                     u12760:
  6535                           
  6536                           ; BSR set to: 1
  6537  00026C  0100               	movlb	0	; () banked
  6538  00026E  69C8               	setf	??_efgtoa& (0+255),b
  6539  000270  69C9               	setf	(??_efgtoa+1)& (0+255),b
  6540  000272  C1A8  F0CA         	movff	efgtoa@p,??_efgtoa+2
  6541  000276  C1A9  F0CB         	movff	efgtoa@p+1,??_efgtoa+3
  6542  00027A  51C8               	movf	??_efgtoa& (0+255),w,b
  6543  00027C  27CA               	addwf	(??_efgtoa+2)& (0+255),f,b
  6544  00027E  51C9               	movf	(??_efgtoa+1)& (0+255),w,b
  6545  000280  23CB               	addwfc	(??_efgtoa+3)& (0+255),f,b
  6546  000282  0101               	movlb	1	; () banked
  6547  000284  51BC               	movf	efgtoa@e& (0+255),w,b
  6548  000286  0100               	movlb	0	; () banked
  6549  000288  5DCA               	subwf	(??_efgtoa+2)& (0+255),w,b
  6550  00028A  51CB               	movf	(??_efgtoa+3)& (0+255),w,b
  6551  00028C  0A80               	xorlw	128
  6552  00028E  6FCC               	movwf	(??_efgtoa+4)& (0+255),b
  6553  000290  0101               	movlb	1	; () banked
  6554  000292  51BD               	movf	(efgtoa@e+1)& (0+255),w,b
  6555  000294  0A80               	xorlw	128
  6556  000296  0100               	movlb	0	; () banked
  6557  000298  59CC               	subwfb	(??_efgtoa+4)& (0+255),w,b
  6558  00029A  E302               	bnc	l9781
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 404:             
      +                          nmode = 'f';
  6562  00029C  0E66               	movlw	102
  6563  00029E  D001               	goto	L6
  6564  0002A0                     l9781:
  6565                           
  6566                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 406:             
      +                          nmode = 'e';
  6567  0002A0  0E65               	movlw	101
  6568  0002A2                     L6:
  6569  0002A2  0101               	movlb	1	; () banked
  6570  0002A4  6FAA               	movwf	efgtoa@nmode& (0+255),b
  6571  0002A6                     l9783:
  6572                           
  6573                           ; BSR set to: 1
  6574                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 411:     m = p;
  6575  0002A6  C1A8  F19E         	movff	efgtoa@p,efgtoa@m
  6576  0002AA  C1A9  F19F         	movff	efgtoa@p+1,efgtoa@m+1
  6577                           
  6578                           ; BSR set to: 1
  6579                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 412:     if (!(mo
      +                          de == 'g') || ((nmode == 'f') && (e < 0))) {
  6580  0002AE  0E67               	movlw	103
  6581  0002B0  19AD               	xorwf	efgtoa@mode& (0+255),w,b
  6582  0002B2  E105               	bnz	u12800
  6583                           
  6584                           ; BSR set to: 1
  6585  0002B4  0E66               	movlw	102
  6586  0002B6  19AA               	xorwf	efgtoa@nmode& (0+255),w,b
  6587  0002B8  E104               	bnz	l9793
  6588                           
  6589                           ; BSR set to: 1
  6590  0002BA  AFBD               	btfss	(efgtoa@e+1)& (0+255),7,b
  6591  0002BC  D002               	goto	l9793
  6592  0002BE                     u12800:
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 413:         ++m;
  6596  0002BE  4B9E               	infsnz	efgtoa@m& (0+255),f,b
  6597  0002C0  2B9F               	incf	(efgtoa@m+1)& (0+255),f,b
  6598  0002C2                     l9793:
  6599                           
  6600                           ; BSR set to: 1
  6601                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 417:     if (nmod
      +                          e == 'f') {
  6602  0002C2  0E66               	movlw	102
  6603  0002C4  19AA               	xorwf	efgtoa@nmode& (0+255),w,b
  6604  0002C6  E109               	bnz	l9805
  6605                           
  6606                           ; BSR set to: 1
  6607                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 418:         if (
      +                          e < 0) {
  6608  0002C8  BFBD               	btfsc	(efgtoa@e+1)& (0+255),7,b
  6609                           
  6610                           ; BSR set to: 1
  6611                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 419:             
      +                          u = 1.0;
  6612                           
  6613                           ; BSR set to: 1
  6614                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 420:             
      +                          e = 0;
  6615  0002CA  DA75               	call	PL96	;call to abstracted procedure
  6616  0002CC                     l9801:
  6617                           
  6618                           ; BSR set to: 1
  6619                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 422:         if (
      +                          !(mode == 'g')) {
  6620  0002CC  0E67               	movlw	103
  6621  0002CE  19AD               	xorwf	efgtoa@mode& (0+255),w,b
  6622  0002D0  E004               	bz	l9805
  6623                           
  6624                           ; BSR set to: 1
  6625                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 423:             
      +                          m += e;
  6626  0002D2  51BC               	movf	efgtoa@e& (0+255),w,b
  6627  0002D4  279E               	addwf	efgtoa@m& (0+255),f,b
  6628  0002D6  51BD               	movf	(efgtoa@e+1)& (0+255),w,b
  6629  0002D8  239F               	addwfc	(efgtoa@m+1)& (0+255),f,b
  6630  0002DA                     l9805:
  6631                           
  6632                           ; BSR set to: 1
  6633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 428:     i = 0;
  6634  0002DA  6BBA               	clrf	efgtoa@i& (0+255),b
  6635  0002DC  6BBB               	clrf	(efgtoa@i+1)& (0+255),b
  6636                           
  6637                           ; BSR set to: 1
  6638                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 429:     h = g;
  6639  0002DE  C1B6  F1AE         	movff	efgtoa@g,efgtoa@h
  6640  0002E2  C1B7  F1AF         	movff	efgtoa@g+1,efgtoa@h+1
  6641  0002E6  C1B8  F1B0         	movff	efgtoa@g+2,efgtoa@h+2
  6642  0002EA  C1B9  F1B1         	movff	efgtoa@g+3,efgtoa@h+3
  6643                           
  6644                           ; BSR set to: 1
  6645                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 430:     ou = u;
  6646  0002EE  C1C0  F1A0         	movff	efgtoa@u,efgtoa@ou
  6647  0002F2  C1C1  F1A1         	movff	efgtoa@u+1,efgtoa@ou+1
  6648  0002F6  C1C2  F1A2         	movff	efgtoa@u+2,efgtoa@ou+2
  6649  0002FA  C1C3  F1A3         	movff	efgtoa@u+3,efgtoa@ou+3
  6650                           
  6651                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  6652  0002FE  D017               	goto	l9819
  6653  000300                     l9811:
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 432:         l = 
      +                          floorf(h/u);
  6657  000300  D9CC               	call	PL36	;call to abstracted procedure
  6658  000302  ECDB  F00D         	call	___fldiv	;wreg free
  6659  000306  DA3C               	call	PL86	;call to abstracted procedure
  6660  000308  EC7E  F00F         	call	_floorf	;wreg free
  6661                           
  6662                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 433:         d = 
      +                          (int)l;
  6663  00030C  D9D7               	call	PL38	;call to abstracted procedure
  6664  00030E  ECBD  F015         	call	___fltol	;wreg free
  6665  000312  DA5F               	call	PL158	;call to abstracted procedure
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 434:         h -=
      +                           l*u;
  6669  000314  D987               	call	PL12	;call to abstracted procedure
  6670  000316  ECE0  F00B         	call	___flmul	;wreg free
  6671  00031A  DA3B               	call	PL90	;call to abstracted procedure
  6672  00031C  EC18  F01A         	call	___flsub	;wreg free
  6673  000320  D99A               	call	PL18	;call to abstracted procedure
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 435:         u = 
      +                          u/10.0;
  6677  000322  D971               	call	PL10	;call to abstracted procedure
  6678  000324  ECDB  F00D         	call	___fldiv	;wreg free
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 436:         ++i;
  6682  000328  D9DA               	call	PL42	;call to abstracted procedure
  6683  00032A  4BBA               	infsnz	efgtoa@i& (0+255),f,b
  6684  00032C  2BBB               	incf	(efgtoa@i+1)& (0+255),f,b
  6685  00032E                     l9819:
  6686                           
  6687                           ; BSR set to: 1
  6688                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  6689  00032E  D9F8               	call	PL60	;call to abstracted procedure
  6690  000330  E3E7               	bnc	l9811
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 440:     l = u*5.
      +                          0;
  6694  000332  D9DF               	call	PL44	;call to abstracted procedure
  6695  000334  6B6A               	clrf	___flmul@a& (0+255),b
  6696  000336  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  6697  000338  0EA0               	movlw	160
  6698  00033A  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  6699  00033C  0E40               	movlw	64
  6700  00033E  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  6701  000340  ECE0  F00B         	call	___flmul	;wreg free
  6702  000344  C066  F1B2         	movff	?___flmul,efgtoa@l
  6703  000348  C067  F1B3         	movff	?___flmul+1,efgtoa@l+1
  6704  00034C  C068  F1B4         	movff	?___flmul+2,efgtoa@l+2
  6705  000350  C069  F1B5         	movff	?___flmul+3,efgtoa@l+3
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 441:     if (h < 
      +                          l) {
  6709  000354  D9F1               	call	PL74	;call to abstracted procedure
  6710  000356  C1B2  F07F         	movff	efgtoa@l,___flge@ff2
  6711  00035A  C1B3  F080         	movff	efgtoa@l+1,___flge@ff2+1
  6712  00035E  C1B4  F081         	movff	efgtoa@l+2,___flge@ff2+2
  6713  000362  C1B5  F082         	movff	efgtoa@l+3,___flge@ff2+3
  6714  000366  EC56  F016         	call	___flge	;wreg free
  6715  00036A  E202               	bc	l9827
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 442:         l = 
      +                          0.0;
  6719  00036C  0101               	movlb	1	; () banked
  6720  00036E  D016               	goto	u12870
  6721  000370                     l9827:
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 445:         if (
      +                          (h == l) && !(d % 2)) {
  6725  000370  C1AE  F01A         	movff	efgtoa@h,___fleq@ff1
  6726  000374  C1AF  F01B         	movff	efgtoa@h+1,___fleq@ff1+1
  6727  000378  C1B0  F01C         	movff	efgtoa@h+2,___fleq@ff1+2
  6728  00037C  C1B1  F01D         	movff	efgtoa@h+3,___fleq@ff1+3
  6729  000380  C1B2  F01E         	movff	efgtoa@l,___fleq@ff2
  6730  000384  C1B3  F01F         	movff	efgtoa@l+1,___fleq@ff2+1
  6731  000388  C1B4  F020         	movff	efgtoa@l+2,___fleq@ff2+2
  6732  00038C  C1B5  F021         	movff	efgtoa@l+3,___fleq@ff2+3
  6733  000390  EC41  F018         	call	___fleq	;wreg free
  6734  000394  E307               	bnc	l9833
  6735  000396  0101               	movlb	1	; () banked
  6736  000398  B1A4               	btfsc	efgtoa@d& (0+255),0,b
  6737  00039A  D004               	goto	l9833
  6738  00039C                     u12870:
  6739                           
  6740                           ; BSR set to: 1
  6741                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 446:             
      +                          l = 0.0;
  6742  00039C  6BB2               	clrf	efgtoa@l& (0+255),b
  6743  00039E  6BB3               	clrf	(efgtoa@l+1)& (0+255),b
  6744  0003A0  6BB4               	clrf	(efgtoa@l+2)& (0+255),b
  6745  0003A2  6BB5               	clrf	(efgtoa@l+3)& (0+255),b
  6746  0003A4                     l9833:
  6747                           
  6748                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 451:     h = g + 
      +                          l;
  6749  0003A4  C1B6  F07B         	movff	efgtoa@g,___fladd@b
  6750  0003A8  C1B7  F07C         	movff	efgtoa@g+1,___fladd@b+1
  6751  0003AC  C1B8  F07D         	movff	efgtoa@g+2,___fladd@b+2
  6752  0003B0  C1B9  F07E         	movff	efgtoa@g+3,___fladd@b+3
  6753  0003B4  C1B2  F07F         	movff	efgtoa@l,___fladd@a
  6754  0003B8  C1B3  F080         	movff	efgtoa@l+1,___fladd@a+1
  6755  0003BC  C1B4  F081         	movff	efgtoa@l+2,___fladd@a+2
  6756  0003C0  C1B5  F082         	movff	efgtoa@l+3,___fladd@a+3
  6757  0003C4  ECB2  F00A         	call	___fladd	;wreg free
  6758  0003C8  C07B  F1AE         	movff	?___fladd,efgtoa@h
  6759  0003CC  C07C  F1AF         	movff	?___fladd+1,efgtoa@h+1
  6760  0003D0  C07D  F1B0         	movff	?___fladd+2,efgtoa@h+2
  6761  0003D4  C07E  F1B1         	movff	?___fladd+3,efgtoa@h+3
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 453:  if (h >= (o
      +                          u*10.0)) {
  6765  0003D8  D9AF               	call	PL74	;call to abstracted procedure
  6766  0003DA  D99B               	call	PL50	;call to abstracted procedure
  6767  0003DC  D9E3               	call	PL92	;call to abstracted procedure
  6768  0003DE  ECE0  F00B         	call	___flmul	;wreg free
  6769  0003E2  D9BC               	call	PL80	;call to abstracted procedure
  6770  0003E4  EC56  F016         	call	___flge	;wreg free
  6771  0003E8  E316               	bnc	l9845
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 454:   e++;
  6775  0003EA  0101               	movlb	1	; () banked
  6776  0003EC  4BBC               	infsnz	efgtoa@e& (0+255),f,b
  6777  0003EE  2BBD               	incf	(efgtoa@e+1)& (0+255),f,b
  6778                           
  6779                           ; BSR set to: 1
  6780                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 455:   ou *= 10.0
      +                          ;
  6781  0003F0  D9D9               	call	PL92	;call to abstracted procedure
  6782  0003F2  0100               	movlb	0	; () banked
  6783  0003F4  D98E               	call	PL50	;call to abstracted procedure
  6784  0003F6  ECE0  F00B         	call	___flmul	;wreg free
  6785  0003FA  C066  F1A0         	movff	?___flmul,efgtoa@ou
  6786  0003FE  C067  F1A1         	movff	?___flmul+1,efgtoa@ou+1
  6787  000402  C068  F1A2         	movff	?___flmul+2,efgtoa@ou+2
  6788  000406  C069  F1A3         	movff	?___flmul+3,efgtoa@ou+3
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 456:   if (nmode 
      +                          == 'f') {
  6792  00040A  0E66               	movlw	102
  6793  00040C  0101               	movlb	1	; () banked
  6794  00040E  19AA               	xorwf	efgtoa@nmode& (0+255),w,b
  6795  000410  E102               	bnz	l9845
  6796                           
  6797                           ; BSR set to: 1
  6798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 458:    m++;
  6799  000412  4B9E               	infsnz	efgtoa@m& (0+255),f,b
  6800  000414  2B9F               	incf	(efgtoa@m+1)& (0+255),f,b
  6801  000416                     l9845:
  6802                           
  6803                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 463:     u = ou;
  6804  000416  C1A0  F1C0         	movff	efgtoa@ou,efgtoa@u
  6805  00041A  C1A1  F1C1         	movff	efgtoa@ou+1,efgtoa@u+1
  6806  00041E  C1A2  F1C2         	movff	efgtoa@ou+2,efgtoa@u+2
  6807  000422  C1A3  F1C3         	movff	efgtoa@ou+3,efgtoa@u+3
  6808                           
  6809                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 464:     ne = (nm
      +                          ode == 'e') ? 0 : e;
  6810  000426  0E65               	movlw	101
  6811  000428  0101               	movlb	1	; () banked
  6812  00042A  19AA               	xorwf	efgtoa@nmode& (0+255),w,b
  6813  00042C  E005               	bz	l1350
  6814                           
  6815                           ; BSR set to: 1
  6816  00042E  C1BC  F19C         	movff	efgtoa@e,efgtoa@ne
  6817  000432  C1BD  F19D         	movff	efgtoa@e+1,efgtoa@ne+1
  6818  000436  D002               	goto	l1352
  6819  000438                     l1350:
  6820                           
  6821                           ; BSR set to: 1
  6822  000438  6B9C               	clrf	efgtoa@ne& (0+255),b
  6823  00043A  6B9D               	clrf	(efgtoa@ne+1)& (0+255),b
  6824  00043C                     l1352:
  6825                           
  6826                           ; BSR set to: 1
  6827                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 465:     pp = 0;
  6828  00043C  6B9A               	clrf	efgtoa@pp& (0+255),b
  6829  00043E  6B9B               	clrf	(efgtoa@pp+1)& (0+255),b
  6830                           
  6831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 466:     t = 0;
  6832  000440  6B98               	clrf	efgtoa@t& (0+255),b
  6833  000442  6B99               	clrf	(efgtoa@t+1)& (0+255),b
  6834                           
  6835                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 467:     i = 0;
  6836  000444  6BBA               	clrf	efgtoa@i& (0+255),b
  6837  000446  6BBB               	clrf	(efgtoa@i+1)& (0+255),b
  6838                           
  6839                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6840  000448  D048               	goto	l9899
  6841  00044A                     l9851:
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 469:         l = 
      +                          floorf(h/u);
  6845  00044A  D927               	call	PL36	;call to abstracted procedure
  6846  00044C  ECDB  F00D         	call	___fldiv	;wreg free
  6847  000450  D997               	call	PL86	;call to abstracted procedure
  6848  000452  EC7E  F00F         	call	_floorf	;wreg free
  6849                           
  6850                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 470:         d = 
      +                          (int)l;
  6851  000456  D932               	call	PL38	;call to abstracted procedure
  6852  000458  ECBD  F015         	call	___fltol	;wreg free
  6853  00045C  D9BA               	call	PL158	;call to abstracted procedure
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 471:         if (
      +                          !(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
  6857  00045E  B833               	btfsc	_flags^0,4,c
  6858  000460  D00C               	goto	l9863
  6859                           
  6860                           ; BSR set to: 0
  6861  000462  0101               	movlb	1	; () banked
  6862  000464  51A4               	movf	efgtoa@d& (0+255),w,b
  6863  000466  11A5               	iorwf	(efgtoa@d+1)& (0+255),w,b
  6864  000468  E108               	bnz	l9863
  6865                           
  6866                           ; BSR set to: 1
  6867  00046A  0E67               	movlw	103
  6868  00046C  19AD               	xorwf	efgtoa@mode& (0+255),w,b
  6869  00046E  E105               	bnz	l9863
  6870                           
  6871                           ; BSR set to: 1
  6872  000470  AF9D               	btfss	(efgtoa@ne+1)& (0+255),7,b
  6873  000472  D003               	goto	l9863
  6874                           
  6875                           ; BSR set to: 1
  6876                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 472:             
      +                          ++t;
  6877  000474  4B98               	infsnz	efgtoa@t& (0+255),f,b
  6878  000476  2B99               	incf	(efgtoa@t+1)& (0+255),f,b
  6879                           
  6880                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 473:         } el
      +                          se {
  6881  000478  D020               	goto	l9891
  6882  00047A                     l9863:
  6883                           
  6884                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 474:             
      +                          if (!pp && (ne < 0)) {
  6885  00047A  0101               	movlb	1	; () banked
  6886  00047C  519A               	movf	efgtoa@pp& (0+255),w,b
  6887  00047E  119B               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  6888  000480  E113               	bnz	l9883
  6889                           
  6890                           ; BSR set to: 1
  6891  000482  AF9D               	btfss	(efgtoa@ne+1)& (0+255),7,b
  6892  000484  D011               	goto	l9883
  6893                           
  6894                           ; BSR set to: 1
  6895                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 475:             
      +                              dbuf[n++] = '.';
  6896  000486  D902               	call	PL34	;call to abstracted procedure
  6897  000488  0E2E               	movlw	46
  6898                           
  6899                           ; BSR set to: 1
  6900                           
  6901                           ; BSR set to: 1
  6902                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 476:             
      +                              --w;
  6903  00048A  D99E               	call	PL132	;call to abstracted procedure
  6904  00048C  A0D8               	btfss	status,0,c
  6905  00048E  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  6906                           
  6907                           ; BSR set to: 1
  6908                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 477:             
      +                              pp = 1;
  6909  000490  6B9B               	clrf	(efgtoa@pp+1)& (0+255),b
  6910  000492  0E01               	movlw	1
  6911  000494  6F9A               	movwf	efgtoa@pp& (0+255),b
  6912  000496  D008               	goto	l9883
  6913  000498                     l9875:
  6914                           
  6915                           ; BSR set to: 1
  6916                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 480:             
      +                              dbuf[n++] = '0';
  6917  000498  D8F9               	call	PL34	;call to abstracted procedure
  6918  00049A  0E30               	movlw	48
  6919                           
  6920                           ; BSR set to: 1
  6921                           
  6922                           ; BSR set to: 1
  6923                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 481:             
      +                              --w;
  6924  00049C  D995               	call	PL132	;call to abstracted procedure
  6925  00049E  A0D8               	btfss	status,0,c
  6926  0004A0  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  6927                           
  6928                           ; BSR set to: 1
  6929                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 482:             
      +                              --t;
  6930  0004A2  0798               	decf	efgtoa@t& (0+255),f,b
  6931  0004A4  A0D8               	btfss	status,0,c
  6932  0004A6  0799               	decf	(efgtoa@t+1)& (0+255),f,b
  6933  0004A8                     l9883:
  6934                           
  6935                           ; BSR set to: 1
  6936                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 479:             
      +                          while (t) {
  6937  0004A8  5198               	movf	efgtoa@t& (0+255),w,b
  6938  0004AA  1199               	iorwf	(efgtoa@t+1)& (0+255),w,b
  6939  0004AC  E1F5               	bnz	l9875
  6940                           
  6941                           ; BSR set to: 1
  6942                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 484:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  6943  0004AE  D8EE               	call	PL34	;call to abstracted procedure
  6944  0004B0  51A4               	movf	efgtoa@d& (0+255),w,b
  6945  0004B2  0F30               	addlw	48
  6946                           
  6947                           ; BSR set to: 1
  6948                           
  6949                           ; BSR set to: 1
  6950                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 485:             
      +                          --w;
  6951  0004B4  D989               	call	PL132	;call to abstracted procedure
  6952  0004B6  A0D8               	btfss	status,0,c
  6953  0004B8  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  6954  0004BA                     l9891:
  6955                           
  6956                           ; BSR set to: 1
  6957                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 487:         h -=
      +                           l*u;
  6958  0004BA  D8B4               	call	PL12	;call to abstracted procedure
  6959  0004BC  ECE0  F00B         	call	___flmul	;wreg free
  6960  0004C0  D968               	call	PL90	;call to abstracted procedure
  6961  0004C2  EC18  F01A         	call	___flsub	;wreg free
  6962  0004C6  D8C7               	call	PL18	;call to abstracted procedure
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 488:         u = 
      +                          u/10.0;
  6966  0004C8  D89E               	call	PL10	;call to abstracted procedure
  6967  0004CA  ECDB  F00D         	call	___fldiv	;wreg free
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 489:         --ne
      +                          ;
  6971  0004CE  D907               	call	PL42	;call to abstracted procedure
  6972  0004D0  079C               	decf	efgtoa@ne& (0+255),f,b
  6973  0004D2  A0D8               	btfss	status,0,c
  6974  0004D4  079D               	decf	(efgtoa@ne+1)& (0+255),f,b
  6975                           
  6976                           ; BSR set to: 1
  6977                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 490:         ++i;
  6978  0004D6  4BBA               	infsnz	efgtoa@i& (0+255),f,b
  6979  0004D8  2BBB               	incf	(efgtoa@i+1)& (0+255),f,b
  6980  0004DA                     l9899:
  6981                           
  6982                           ; BSR set to: 1
  6983                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6984  0004DA  D922               	call	PL60	;call to abstracted procedure
  6985  0004DC  E208               	bc	u12990
  6986                           
  6987                           ; BSR set to: 0
  6988  0004DE  0101               	movlb	1	; () banked
  6989  0004E0  BFBF               	btfsc	(efgtoa@n+1)& (0+255),7,b
  6990  0004E2  D7B3               	goto	l9851
  6991  0004E4  51BF               	movf	(efgtoa@n+1)& (0+255),w,b
  6992  0004E6  E103               	bnz	u12990
  6993  0004E8  0E4B               	movlw	75
  6994  0004EA  5DBE               	subwf	efgtoa@n& (0+255),w,b
  6995  0004EC  E3AE               	bnc	l9851
  6996  0004EE                     u12990:
  6997                           
  6998                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 492:     if (!pp 
      +                          && (flags & (1 << 4))) {
  6999  0004EE  0101               	movlb	1	; () banked
  7000  0004F0  519A               	movf	efgtoa@pp& (0+255),w,b
  7001  0004F2  119B               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  7002  0004F4  E107               	bnz	l9911
  7003                           
  7004                           ; BSR set to: 1
  7005  0004F6  A833               	btfss	_flags^0,4,c
  7006  0004F8  D005               	goto	l9911
  7007                           
  7008                           ; BSR set to: 1
  7009                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 493:         dbuf
      +                          [n++] = '.';
  7010  0004FA  D8C8               	call	PL34	;call to abstracted procedure
  7011  0004FC  0E2E               	movlw	46
  7012  0004FE  6EDF               	movwf	indf2,c
  7013                           
  7014                           ; BSR set to: 1
  7015  000500  4BBE               	infsnz	efgtoa@n& (0+255),f,b
  7016  000502  2BBF               	incf	(efgtoa@n+1)& (0+255),f,b
  7017  000504                     l9911:
  7018                           
  7019                           ; BSR set to: 1
  7020                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 495:     dbuf[n] 
      +                          = '\0';
  7021  000504  D8C3               	call	PL34	;call to abstracted procedure
  7022  000506  6ADF               	clrf	indf2,c
  7023                           
  7024                           ; BSR set to: 1
  7025                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 498:     if (nmod
      +                          e == 'e') {
  7026  000508  0E65               	movlw	101
  7027  00050A  19AA               	xorwf	efgtoa@nmode& (0+255),w,b
  7028  00050C  E001 D60B          	bnz	l9711
  7029                           
  7030                           ; BSR set to: 1
  7031                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 499:         i = 
      +                          sizeof(dbuf) - 1;
  7032  000510  6BBB               	clrf	(efgtoa@i+1)& (0+255),b
  7033  000512  0E4F               	movlw	79
  7034  000514  6FBA               	movwf	efgtoa@i& (0+255),b
  7035                           
  7036                           ; BSR set to: 1
  7037                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 500:         dbuf
      +                          [i] = '\0';
  7038  000516  D8F6               	call	PL48	;call to abstracted procedure
  7039  000518  6ADF               	clrf	indf2,c
  7040                           
  7041                           ; BSR set to: 1
  7042                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 501:         sign
      +                           = 0;
  7043  00051A  6BA6               	clrf	efgtoa@sign& (0+255),b
  7044  00051C  6BA7               	clrf	(efgtoa@sign+1)& (0+255),b
  7045                           
  7046                           ; BSR set to: 1
  7047                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 502:         if (
      +                          e < 0) {
  7048  00051E  AFBD               	btfss	(efgtoa@e+1)& (0+255),7,b
  7049  000520  D007               	goto	l9927
  7050                           
  7051                           ; BSR set to: 1
  7052                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 503:             
      +                          sign = 1;
  7053  000522  6BA7               	clrf	(efgtoa@sign+1)& (0+255),b
  7054  000524  0E01               	movlw	1
  7055  000526  6FA6               	movwf	efgtoa@sign& (0+255),b
  7056                           
  7057                           ; BSR set to: 1
  7058                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 504:             
      +                          e = -e;
  7059  000528  6DBC               	negf	efgtoa@e& (0+255),b
  7060  00052A  1FBD               	comf	(efgtoa@e+1)& (0+255),f,b
  7061  00052C  B0D8               	btfsc	status,0,c
  7062  00052E  2BBD               	incf	(efgtoa@e+1)& (0+255),f,b
  7063  000530                     l9927:
  7064                           
  7065                           ; BSR set to: 1
  7066                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 506:         p = 
      +                          2;
  7067  000530  6BA9               	clrf	(efgtoa@p+1)& (0+255),b
  7068  000532  0E02               	movlw	2
  7069  000534  6FA8               	movwf	efgtoa@p& (0+255),b
  7070                           
  7071                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  7072  000536  D023               	goto	l9939
  7073  000538                     l9929:
  7074                           
  7075                           ; BSR set to: 1
  7076                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 508:             
      +                          --i;
  7077  000538  07BA               	decf	efgtoa@i& (0+255),f,b
  7078  00053A  A0D8               	btfss	status,0,c
  7079  00053C  07BB               	decf	(efgtoa@i+1)& (0+255),f,b
  7080                           
  7081                           ; BSR set to: 1
  7082                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 509:             
      +                          dbuf[i] = '0' + (e % 10);
  7083  00053E  D8E2               	call	PL48	;call to abstracted procedure
  7084  000540  C1BC  F01A         	movff	efgtoa@e,___awmod@dividend
  7085  000544  C1BD  F01B         	movff	efgtoa@e+1,___awmod@dividend+1
  7086  000548  6A1D               	clrf	(___awmod@divisor+1)^0,c
  7087  00054A  0E0A               	movlw	10
  7088  00054C  6E1C               	movwf	___awmod@divisor^0,c
  7089  00054E  EC0D  F018         	call	___awmod	;wreg free
  7090  000552  501A               	movf	?___awmod^0,w,c
  7091  000554  0F30               	addlw	48
  7092  000556  6EDF               	movwf	indf2,c
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 510:             
      +                          e = e / 10;
  7096  000558  C1BC  F01A         	movff	efgtoa@e,___awdiv@dividend
  7097  00055C  C1BD  F01B         	movff	efgtoa@e+1,___awdiv@dividend+1
  7098  000560  6A1D               	clrf	(___awdiv@divisor+1)^0,c
  7099  000562  0E0A               	movlw	10
  7100  000564  6E1C               	movwf	___awdiv@divisor^0,c
  7101  000566  EC96  F017         	call	___awdiv	;wreg free
  7102  00056A  C01A  F1BC         	movff	?___awdiv,efgtoa@e
  7103  00056E  C01B  F1BD         	movff	?___awdiv+1,efgtoa@e+1
  7104                           
  7105                           ; BSR set to: 1
  7106                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 511:             
      +                          --p;
  7107  000572  07A8               	decf	efgtoa@p& (0+255),f,b
  7108  000574  A0D8               	btfss	status,0,c
  7109  000576  07A9               	decf	(efgtoa@p+1)& (0+255),f,b
  7110                           
  7111                           ; BSR set to: 1
  7112                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 512:             
      +                          --w;
  7113  000578  07AB               	decf	efgtoa@w& (0+255),f,b
  7114  00057A  A0D8               	btfss	status,0,c
  7115  00057C  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  7116  00057E                     l9939:
  7117                           
  7118                           ; BSR set to: 1
  7119                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  7120  00057E  51BC               	movf	efgtoa@e& (0+255),w,b
  7121  000580  11BD               	iorwf	(efgtoa@e+1)& (0+255),w,b
  7122  000582  E1DA               	bnz	l9929
  7123                           
  7124                           ; BSR set to: 1
  7125  000584  BFA9               	btfsc	(efgtoa@p+1)& (0+255),7,b
  7126  000586  D004               	goto	u13050
  7127  000588  51A9               	movf	(efgtoa@p+1)& (0+255),w,b
  7128  00058A  E1D6               	bnz	l9929
  7129  00058C  05A8               	decf	efgtoa@p& (0+255),w,b
  7130  00058E  E2D4               	bc	l9929
  7131  000590                     u13050:
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 514:         --i;
  7135  000590  07BA               	decf	efgtoa@i& (0+255),f,b
  7136  000592  A0D8               	btfss	status,0,c
  7137  000594  07BB               	decf	(efgtoa@i+1)& (0+255),f,b
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 515:         dbuf
      +                          [i] = sign ? '-' : '+';
  7141  000596  51A6               	movf	efgtoa@sign& (0+255),w,b
  7142  000598  11A7               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  7143  00059A  E103               	bnz	l9949
  7144                           
  7145                           ; BSR set to: 1
  7146  00059C  6B93               	clrf	(_efgtoa$2030+1)& (0+255),b
  7147  00059E  0E2B               	movlw	43
  7148  0005A0  D002               	goto	L7
  7149  0005A2                     l9949:
  7150                           
  7151                           ; BSR set to: 1
  7152  0005A2  6B93               	clrf	(_efgtoa$2030+1)& (0+255),b
  7153  0005A4  0E2D               	movlw	45
  7154  0005A6                     L7:
  7155  0005A6  6F92               	movwf	_efgtoa$2030& (0+255),b
  7156                           
  7157                           ; BSR set to: 1
  7158  0005A8  D8AD               	call	PL48	;call to abstracted procedure
  7159  0005AA  C192  FFDF         	movff	_efgtoa$2030,indf2
  7160                           
  7161                           ; BSR set to: 1
  7162                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 516:         --w;
  7163  0005AE  07AB               	decf	efgtoa@w& (0+255),f,b
  7164  0005B0  A0D8               	btfss	status,0,c
  7165  0005B2  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  7166                           
  7167                           ; BSR set to: 1
  7168                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 518:         dbuf
      +                          [i] = (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  7169  0005B4  07BA               	decf	efgtoa@i& (0+255),f,b
  7170  0005B6  A0D8               	btfss	status,0,c
  7171  0005B8  07BB               	decf	(efgtoa@i+1)& (0+255),f,b
  7172                           
  7173                           ; BSR set to: 1
  7174  0005BA  0EBF               	movlw	191
  7175  0005BC  0100               	movlb	0	; () banked
  7176  0005BE  D854               	call	PL26	;call to abstracted procedure
  7177  0005C0  E105               	bnz	u13070
  7178  0005C2  0E1A               	movlw	26
  7179  0005C4  5DCA               	subwf	(??_efgtoa+2)& (0+255),w,b
  7180  0005C6  E202               	bc	u13070
  7181  0005C8  0E01               	movlw	1
  7182  0005CA  D001               	goto	u13080
  7183  0005CC                     u13070:
  7184  0005CC  0E00               	movlw	0
  7185  0005CE                     u13080:
  7186  0005CE  0101               	movlb	1	; () banked
  7187  0005D0  6F96               	movwf	_efgtoa$2032& (0+255),b
  7188  0005D2  6B97               	clrf	(_efgtoa$2032+1)& (0+255),b
  7189                           
  7190                           ; BSR set to: 1
  7191  0005D4  5196               	movf	_efgtoa$2032& (0+255),w,b
  7192  0005D6  1197               	iorwf	(_efgtoa$2032+1)& (0+255),w,b
  7193  0005D8  E103               	bnz	l9965
  7194                           
  7195                           ; BSR set to: 1
  7196  0005DA  6B95               	clrf	(_efgtoa$2031+1)& (0+255),b
  7197  0005DC  0E65               	movlw	101
  7198  0005DE  D002               	goto	L8
  7199  0005E0                     l9965:
  7200                           
  7201                           ; BSR set to: 1
  7202  0005E0  6B95               	clrf	(_efgtoa$2031+1)& (0+255),b
  7203  0005E2  0E45               	movlw	69
  7204  0005E4                     L8:
  7205  0005E4  6F94               	movwf	_efgtoa$2031& (0+255),b
  7206                           
  7207                           ; BSR set to: 1
  7208  0005E6  D88E               	call	PL48	;call to abstracted procedure
  7209  0005E8  C194  FFDF         	movff	_efgtoa$2031,indf2
  7210                           
  7211                           ; BSR set to: 1
  7212                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 519:         --w;
  7213  0005EC  07AB               	decf	efgtoa@w& (0+255),f,b
  7214  0005EE  A0D8               	btfss	status,0,c
  7215  0005F0  07AC               	decf	(efgtoa@w+1)& (0+255),f,b
  7216                           
  7217                           ; BSR set to: 1
  7218                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 520:         strc
      +                          py(&dbuf[n], &dbuf[i]);
  7219  0005F2  D845               	call	PL32	;call to abstracted procedure
  7220  0005F4  0E25               	movlw	low _dbuf
  7221  0005F6  25BA               	addwf	efgtoa@i& (0+255),w,b
  7222  0005F8  6E1C               	movwf	strcpy@src^0,c
  7223  0005FA  0E01               	movlw	high _dbuf
  7224  0005FC  21BB               	addwfc	(efgtoa@i+1)& (0+255),w,b
  7225  0005FE  6E1D               	movwf	(strcpy@src+1)^0,c
  7226  000600  ECE8  F018         	call	_strcpy	;wreg free
  7227  000604  D590               	goto	l9711
  7228  000606                     __end_of_efgtoa:
  7229                           	callstack 0
  7230  000606                     PL10:
  7231                           	callstack 20
  7232  000606  C1C0  F066         	movff	efgtoa@u,___fldiv@b
  7233  00060A  C1C1  F067         	movff	efgtoa@u+1,___fldiv@b+1
  7234  00060E  C1C2  F068         	movff	efgtoa@u+2,___fldiv@b+2
  7235  000612  C1C3  F069         	movff	efgtoa@u+3,___fldiv@b+3
  7236  000616  6B6A               	clrf	___fldiv@a& (0+255),b
  7237  000618  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
  7238  00061A  0E20               	movlw	32
  7239  00061C  6F6C               	movwf	(___fldiv@a+2)& (0+255),b
  7240  00061E  0E41               	movlw	65
  7241  000620  6F6D               	movwf	(___fldiv@a+3)& (0+255),b
  7242  000622  0C41               	retlw	65
  7243  000624                     __end_ofPL10:
  7244                           	callstack 0
  7245  000624                     PL12:
  7246                           	callstack 20
  7247  000624  C1AE  F08B         	movff	efgtoa@h,___flsub@b
  7248  000628  C1AF  F08C         	movff	efgtoa@h+1,___flsub@b+1
  7249  00062C  C1B0  F08D         	movff	efgtoa@h+2,___flsub@b+2
  7250  000630  C1B1  F08E         	movff	efgtoa@h+3,___flsub@b+3
  7251  000634  C1C0  F06A         	movff	efgtoa@u,___flmul@a
  7252  000638  C1C1  F06B         	movff	efgtoa@u+1,___flmul@a+1
  7253  00063C  C1C2  F06C         	movff	efgtoa@u+2,___flmul@a+2
  7254  000640  C1C3  F06D         	movff	efgtoa@u+3,___flmul@a+3
  7255  000644  C1B2  F066         	movff	efgtoa@l,___flmul@b
  7256  000648  C1B3  F067         	movff	efgtoa@l+1,___flmul@b+1
  7257  00064C  C1B4  F068         	movff	efgtoa@l+2,___flmul@b+2
  7258  000650  C1B5  F069         	movff	efgtoa@l+3,___flmul@b+3
  7259  000654  0012               	return	
  7260  000656                     __end_ofPL12:
  7261                           	callstack 0
  7262  000656                     PL18:
  7263                           	callstack 20
  7264  000656  C08B  F1AE         	movff	?___flsub,efgtoa@h
  7265  00065A  C08C  F1AF         	movff	?___flsub+1,efgtoa@h+1
  7266  00065E  C08D  F1B0         	movff	?___flsub+2,efgtoa@h+2
  7267  000662  C08E  F1B1         	movff	?___flsub+3,efgtoa@h+3
  7268  000666  0012               	return	
  7269  000668                     __end_ofPL18:
  7270                           	callstack 0
  7271  000668                     PL26:
  7272                           	callstack 20
  7273  000668  6FC8               	movwf	??_efgtoa& (0+255),b
  7274  00066A  69C9               	setf	(??_efgtoa+1)& (0+255),b
  7275  00066C  51C7               	movf	efgtoa@c& (0+255),w,b
  7276  00066E  6FCA               	movwf	(??_efgtoa+2)& (0+255),b
  7277  000670  6BCB               	clrf	(??_efgtoa+3)& (0+255),b
  7278  000672  51C8               	movf	??_efgtoa& (0+255),w,b
  7279  000674  27CA               	addwf	(??_efgtoa+2)& (0+255),f,b
  7280  000676  51C9               	movf	(??_efgtoa+1)& (0+255),w,b
  7281  000678  23CB               	addwfc	(??_efgtoa+3)& (0+255),f,b
  7282  00067A  51CB               	movf	(??_efgtoa+3)& (0+255),w,b
  7283  00067C  0012               	return	
  7284  00067E                     __end_ofPL26:
  7285                           	callstack 0
  7286  00067E                     PL32:
  7287                           	callstack 20
  7288  00067E  0E25               	movlw	low _dbuf
  7289  000680  25BE               	addwf	efgtoa@n& (0+255),w,b
  7290  000682  6E1A               	movwf	strcpy@dest^0,c
  7291  000684  0E01               	movlw	high _dbuf
  7292  000686  21BF               	addwfc	(efgtoa@n+1)& (0+255),w,b
  7293  000688  6E1B               	movwf	(strcpy@dest+1)^0,c
  7294  00068A  0012               	return	
  7295  00068C                     __end_ofPL32:
  7296                           	callstack 0
  7297  00068C                     PL34:
  7298                           	callstack 20
  7299  00068C  0E25               	movlw	low _dbuf
  7300  00068E  25BE               	addwf	efgtoa@n& (0+255),w,b
  7301  000690  6ED9               	movwf	fsr2l,c
  7302  000692  0E01               	movlw	high _dbuf
  7303  000694  21BF               	addwfc	(efgtoa@n+1)& (0+255),w,b
  7304  000696  6EDA               	movwf	fsr2h,c
  7305  000698  0012               	return	
  7306  00069A                     __end_ofPL34:
  7307                           	callstack 0
  7308  00069A                     PL36:
  7309                           	callstack 20
  7310  00069A  C1AE  F066         	movff	efgtoa@h,___fldiv@b
  7311  00069E  C1AF  F067         	movff	efgtoa@h+1,___fldiv@b+1
  7312  0006A2  C1B0  F068         	movff	efgtoa@h+2,___fldiv@b+2
  7313  0006A6  C1B1  F069         	movff	efgtoa@h+3,___fldiv@b+3
  7314  0006AA  C1C0  F06A         	movff	efgtoa@u,___fldiv@a
  7315  0006AE  C1C1  F06B         	movff	efgtoa@u+1,___fldiv@a+1
  7316  0006B2  C1C2  F06C         	movff	efgtoa@u+2,___fldiv@a+2
  7317  0006B6  C1C3  F06D         	movff	efgtoa@u+3,___fldiv@a+3
  7318  0006BA  0012               	return	
  7319  0006BC                     __end_ofPL36:
  7320                           	callstack 0
  7321  0006BC                     PL38:
  7322                           	callstack 20
  7323  0006BC  C07B  F1B2         	movff	?_floorf,efgtoa@l
  7324  0006C0  C07C  F1B3         	movff	?_floorf+1,efgtoa@l+1
  7325  0006C4  C07D  F1B4         	movff	?_floorf+2,efgtoa@l+2
  7326  0006C8  C07E  F1B5         	movff	?_floorf+3,efgtoa@l+3
  7327  0006CC  C1B2  F0B8         	movff	efgtoa@l,___fltol@f1
  7328  0006D0  C1B3  F0B9         	movff	efgtoa@l+1,___fltol@f1+1
  7329  0006D4  C1B4  F0BA         	movff	efgtoa@l+2,___fltol@f1+2
  7330  0006D8  C1B5  F0BB         	movff	efgtoa@l+3,___fltol@f1+3
  7331  0006DC  0012               	return	
  7332  0006DE                     __end_ofPL38:
  7333                           	callstack 0
  7334  0006DE                     PL42:
  7335                           	callstack 20
  7336  0006DE  C066  F1C0         	movff	?___fldiv,efgtoa@u
  7337  0006E2  C067  F1C1         	movff	?___fldiv+1,efgtoa@u+1
  7338  0006E6  C068  F1C2         	movff	?___fldiv+2,efgtoa@u+2
  7339  0006EA  C069  F1C3         	movff	?___fldiv+3,efgtoa@u+3
  7340  0006EE  0101               	movlb	1	; () banked
  7341  0006F0  0012               	return	
  7342  0006F2                     __end_ofPL42:
  7343                           	callstack 0
  7344  0006F2                     PL44:
  7345                           	callstack 20
  7346  0006F2  C1C0  F066         	movff	efgtoa@u,___flmul@b
  7347  0006F6  C1C1  F067         	movff	efgtoa@u+1,___flmul@b+1
  7348  0006FA  C1C2  F068         	movff	efgtoa@u+2,___flmul@b+2
  7349  0006FE  C1C3  F069         	movff	efgtoa@u+3,___flmul@b+3
  7350  000702  0012               	return	
  7351  000704                     __end_ofPL44:
  7352                           	callstack 0
  7353  000704                     PL48:
  7354                           	callstack 20
  7355  000704  0E25               	movlw	low _dbuf
  7356  000706  25BA               	addwf	efgtoa@i& (0+255),w,b
  7357  000708  6ED9               	movwf	fsr2l,c
  7358  00070A  0E01               	movlw	high _dbuf
  7359  00070C  21BB               	addwfc	(efgtoa@i+1)& (0+255),w,b
  7360  00070E  6EDA               	movwf	fsr2h,c
  7361  000710  0012               	return	
  7362  000712                     __end_ofPL48:
  7363                           	callstack 0
  7364  000712                     PL50:
  7365                           	callstack 20
  7366  000712  6B6A               	clrf	___flmul@a& (0+255),b
  7367  000714  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  7368  000716  0E20               	movlw	32
  7369  000718  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  7370  00071A  0E41               	movlw	65
  7371  00071C  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  7372  00071E  0C41               	retlw	65
  7373  000720                     __end_ofPL50:
  7374                           	callstack 0
  7375  000720                     PL60:
  7376                           	callstack 20
  7377  000720  519E               	movf	efgtoa@m& (0+255),w,b
  7378  000722  5DBA               	subwf	efgtoa@i& (0+255),w,b
  7379  000724  51BB               	movf	(efgtoa@i+1)& (0+255),w,b
  7380  000726  0A80               	xorlw	128
  7381  000728  0100               	movlb	0	; () banked
  7382  00072A  6FC8               	movwf	??_efgtoa& (0+255),b
  7383  00072C  0101               	movlb	1	; () banked
  7384  00072E  519F               	movf	(efgtoa@m+1)& (0+255),w,b
  7385  000730  0A80               	xorlw	128
  7386  000732  0100               	movlb	0	; () banked
  7387  000734  59C8               	subwfb	??_efgtoa& (0+255),w,b
  7388  000736  0012               	return	
  7389  000738                     __end_ofPL60:
  7390                           	callstack 0
  7391  000738                     PL74:
  7392                           	callstack 20
  7393  000738  C1AE  F07B         	movff	efgtoa@h,___flge@ff1
  7394  00073C  C1AF  F07C         	movff	efgtoa@h+1,___flge@ff1+1
  7395  000740  C1B0  F07D         	movff	efgtoa@h+2,___flge@ff1+2
  7396  000744  C1B1  F07E         	movff	efgtoa@h+3,___flge@ff1+3
  7397  000748  0012               	return	
  7398  00074A                     __end_ofPL74:
  7399                           	callstack 0
  7400  00074A                     PL76:
  7401                           	callstack 20
  7402  00074A  C1B6  F01A         	movff	efgtoa@g,___fpclassifyf@x
  7403  00074E  C1B7  F01B         	movff	efgtoa@g+1,___fpclassifyf@x+1
  7404  000752  C1B8  F01C         	movff	efgtoa@g+2,___fpclassifyf@x+2
  7405  000756  C1B9  F01D         	movff	efgtoa@g+3,___fpclassifyf@x+3
  7406  00075A  0012               	return	
  7407  00075C                     __end_ofPL76:
  7408                           	callstack 0
  7409  00075C                     PL80:
  7410                           	callstack 20
  7411  00075C  C066  F07F         	movff	?___flmul,___flge@ff2
  7412  000760  C067  F080         	movff	?___flmul+1,___flge@ff2+1
  7413  000764  C068  F081         	movff	?___flmul+2,___flge@ff2+2
  7414  000768  C069  F082         	movff	?___flmul+3,___flge@ff2+3
  7415  00076C  0012               	return	
  7416  00076E                     __end_ofPL80:
  7417                           	callstack 0
  7418  00076E                     PL84:
  7419                           	callstack 20
  7420  00076E  C1B6  F07B         	movff	efgtoa@g,___flge@ff1
  7421  000772  C1B7  F07C         	movff	efgtoa@g+1,___flge@ff1+1
  7422  000776  C1B8  F07D         	movff	efgtoa@g+2,___flge@ff1+2
  7423  00077A  C1B9  F07E         	movff	efgtoa@g+3,___flge@ff1+3
  7424  00077E  0012               	return	
  7425  000780                     __end_ofPL84:
  7426                           	callstack 0
  7427  000780                     PL86:
  7428                           	callstack 20
  7429  000780  C066  F07B         	movff	?___fldiv,floorf@x
  7430  000784  C067  F07C         	movff	?___fldiv+1,floorf@x+1
  7431  000788  C068  F07D         	movff	?___fldiv+2,floorf@x+2
  7432  00078C  C069  F07E         	movff	?___fldiv+3,floorf@x+3
  7433  000790  0012               	return	
  7434  000792                     __end_ofPL86:
  7435                           	callstack 0
  7436  000792                     PL90:
  7437                           	callstack 20
  7438  000792  C066  F08F         	movff	?___flmul,___flsub@a
  7439  000796  C067  F090         	movff	?___flmul+1,___flsub@a+1
  7440  00079A  C068  F091         	movff	?___flmul+2,___flsub@a+2
  7441  00079E  C069  F092         	movff	?___flmul+3,___flsub@a+3
  7442  0007A2  0012               	return	
  7443  0007A4                     __end_ofPL90:
  7444                           	callstack 0
  7445  0007A4                     PL92:
  7446                           	callstack 20
  7447  0007A4  C1A0  F066         	movff	efgtoa@ou,___flmul@b
  7448  0007A8  C1A1  F067         	movff	efgtoa@ou+1,___flmul@b+1
  7449  0007AC  C1A2  F068         	movff	efgtoa@ou+2,___flmul@b+2
  7450  0007B0  C1A3  F069         	movff	efgtoa@ou+3,___flmul@b+3
  7451  0007B4  0012               	return	
  7452  0007B6                     __end_ofPL92:
  7453                           	callstack 0
  7454  0007B6                     PL96:
  7455                           	callstack 20
  7456  0007B6  6BC0               	clrf	efgtoa@u& (0+255),b
  7457  0007B8  6BC1               	clrf	(efgtoa@u+1)& (0+255),b
  7458  0007BA  0E80               	movlw	128
  7459  0007BC  6FC2               	movwf	(efgtoa@u+2)& (0+255),b
  7460  0007BE  0E3F               	movlw	63
  7461  0007C0  6FC3               	movwf	(efgtoa@u+3)& (0+255),b
  7462  0007C2  6BBC               	clrf	efgtoa@e& (0+255),b
  7463  0007C4  6BBD               	clrf	(efgtoa@e+1)& (0+255),b
  7464  0007C6  0012               	return	
  7465  0007C8                     __end_ofPL96:
  7466                           	callstack 0
  7467  0007C8                     PL132:
  7468                           	callstack 20
  7469  0007C8  6EDF               	movwf	indf2,c
  7470  0007CA  4BBE               	infsnz	efgtoa@n& (0+255),f,b
  7471  0007CC  2BBF               	incf	(efgtoa@n+1)& (0+255),f,b
  7472  0007CE  07AB               	decf	efgtoa@w& (0+255),f,b
  7473  0007D0  0012               	return	
  7474  0007D2                     __end_ofPL132:
  7475                           	callstack 0
  7476  0007D2                     PL158:
  7477                           	callstack 20
  7478  0007D2  C0B8  F1A4         	movff	?___fltol,efgtoa@d
  7479  0007D6  C0B9  F1A5         	movff	?___fltol+1,efgtoa@d+1
  7480  0007DA  0012               	return	
  7481  0007DC                     __end_ofPL158:
  7482                           	callstack 0
  7483  0007DC                     PL174:
  7484                           	callstack 23
  7485  0007DC  6A1E               	clrf	___fleq@ff2^0,c
  7486  0007DE  6A1F               	clrf	(___fleq@ff2+1)^0,c
  7487  0007E0  6A20               	clrf	(___fleq@ff2+2)^0,c
  7488  0007E2  6A21               	clrf	(___fleq@ff2+3)^0,c
  7489  0007E4  0012               	return	
  7490  0007E6                     __end_ofPL174:
  7491                           	callstack 0
  7492                           
  7493 ;; *************** function _tolower *****************
  7494 ;; Defined at:
  7495 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\tolower.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  c               2   31[COMRAM] int 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  2   31[COMRAM] int 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0
  7504 ;; Tracked objects:
  7505 ;;		On entry : 3E/0
  7506 ;;		On exit  : 3F/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7509 ;;      Params:         2       0       0       0       0       0       0
  7510 ;;      Locals:         0       2       0       0       0       0       0
  7511 ;;      Temps:          4       0       0       0       0       0       0
  7512 ;;      Totals:         6       2       0       0       0       0       0
  7513 ;;Total ram usage:        8 bytes
  7514 ;; Hardware stack levels used: 1
  7515 ;; Hardware stack levels required when called: 4
  7516 ;; This function calls:
  7517 ;;		_isupper
  7518 ;; This function is called by:
  7519 ;;		_efgtoa
  7520 ;;		_vfpfcnvrt
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text14
  7525  0032AC                     __ptext14:
  7526                           	callstack 0
  7527  0032AC                     _tolower:
  7528                           	callstack 23
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;incstack = 0
  7532  0032AC  0EBF               	movlw	191
  7533  0032AE  6E22               	movwf	??_tolower^0,c
  7534  0032B0  6823               	setf	(??_tolower+1)^0,c
  7535  0032B2  C020  F024         	movff	tolower@c,??_tolower+2
  7536  0032B6  C021  F025         	movff	tolower@c+1,??_tolower+3
  7537  0032BA  5022               	movf	??_tolower^0,w,c
  7538  0032BC  2624               	addwf	(??_tolower+2)^0,f,c
  7539  0032BE  5023               	movf	(??_tolower+1)^0,w,c
  7540  0032C0  2225               	addwfc	(??_tolower+3)^0,f,c
  7541  0032C2  5025               	movf	(??_tolower+3)^0,w,c
  7542  0032C4  E105               	bnz	u12260
  7543  0032C6  0E1A               	movlw	26
  7544  0032C8  5C24               	subwf	(??_tolower+2)^0,w,c
  7545  0032CA  E202               	bc	u12260
  7546  0032CC  0E01               	movlw	1
  7547  0032CE  D001               	goto	u12270
  7548  0032D0                     u12260:
  7549  0032D0  0E00               	movlw	0
  7550  0032D2                     u12270:
  7551  0032D2  0100               	movlb	0	; () banked
  7552  0032D4  6F60               	movwf	_tolower$2230& (0+255),b
  7553  0032D6  6B61               	clrf	(_tolower$2230+1)& (0+255),b
  7554                           
  7555                           ; BSR set to: 0
  7556  0032D8  5160               	movf	_tolower$2230& (0+255),w,b
  7557  0032DA  1161               	iorwf	(_tolower$2230+1)& (0+255),w,b
  7558  0032DC  E006               	bz	l1621
  7559                           
  7560                           ; BSR set to: 0
  7561  0032DE  0E20               	movlw	32
  7562  0032E0  1020               	iorwf	tolower@c^0,w,c
  7563  0032E2  6E20               	movwf	?_tolower^0,c
  7564  0032E4  5021               	movf	(tolower@c+1)^0,w,c
  7565  0032E6  6E21               	movwf	(?_tolower+1)^0,c
  7566  0032E8  0012               	return	
  7567  0032EA                     l1621:
  7568                           
  7569                           ; BSR set to: 0
  7570  0032EA  C020  F020         	movff	tolower@c,?_tolower
  7571  0032EE  C021  F021         	movff	tolower@c+1,?_tolower+1
  7572                           
  7573                           ; BSR set to: 0
  7574  0032F2  0012               	return		;funcret
  7575  0032F4                     __end_of_tolower:
  7576                           	callstack 0
  7577                           
  7578 ;; *************** function _isupper *****************
  7579 ;; Defined at:
  7580 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isupper.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  c               2   25[COMRAM] int 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;		None
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  2   25[COMRAM] int 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7594 ;;      Params:         2       0       0       0       0       0       0
  7595 ;;      Locals:         0       0       0       0       0       0       0
  7596 ;;      Temps:          4       0       0       0       0       0       0
  7597 ;;      Totals:         6       0       0       0       0       0       0
  7598 ;;Total ram usage:        6 bytes
  7599 ;; Hardware stack levels used: 1
  7600 ;; Hardware stack levels required when called: 3
  7601 ;; This function calls:
  7602 ;;		Nothing
  7603 ;; This function is called by:
  7604 ;;		_efgtoa
  7605 ;;		_vfpfcnvrt
  7606 ;;		_tolower
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text15
  7611  003566                     __ptext15:
  7612                           	callstack 0
  7613  003566                     _isupper:
  7614                           	callstack 23
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;incstack = 0
  7618  003566  0EBF               	movlw	191
  7619  003568  6E1C               	movwf	??_isupper^0,c
  7620  00356A  681D               	setf	(??_isupper+1)^0,c
  7621  00356C  C01A  F01E         	movff	isupper@c,??_isupper+2
  7622  003570  C01B  F01F         	movff	isupper@c+1,??_isupper+3
  7623  003574  501C               	movf	??_isupper^0,w,c
  7624  003576  261E               	addwf	(??_isupper+2)^0,f,c
  7625  003578  501D               	movf	(??_isupper+1)^0,w,c
  7626  00357A  221F               	addwfc	(??_isupper+3)^0,f,c
  7627  00357C  501F               	movf	(??_isupper+3)^0,w,c
  7628  00357E  E105               	bnz	u11360
  7629  003580  0E1A               	movlw	26
  7630  003582  5C1E               	subwf	(??_isupper+2)^0,w,c
  7631  003584  E202               	bc	u11360
  7632  003586  0E01               	movlw	1
  7633  003588  D001               	goto	u11370
  7634  00358A                     u11360:
  7635  00358A  0E00               	movlw	0
  7636  00358C                     u11370:
  7637  00358C  6E1A               	movwf	?_isupper^0,c
  7638  00358E  6A1B               	clrf	(?_isupper+1)^0,c
  7639  003590  0012               	return		;funcret
  7640  003592                     __end_of_isupper:
  7641                           	callstack 0
  7642                           
  7643 ;; *************** function _strcpy *****************
  7644 ;; Defined at:
  7645 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strcpy.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  dest            2   25[COMRAM] PTR unsigned char 
  7648 ;;		 -> dbuf(80), 
  7649 ;;  src             2   27[COMRAM] PTR const unsigned char 
  7650 ;;		 -> STR_30(4), STR_29(4), STR_26(4), STR_25(4), 
  7651 ;;		 -> dbuf(80), 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  d               2   33[COMRAM] PTR unsigned char 
  7654 ;;		 -> dbuf(80), 
  7655 ;;  s               2   31[COMRAM] PTR const unsigned char 
  7656 ;;		 -> STR_30(4), STR_29(4), STR_26(4), STR_25(4), 
  7657 ;;		 -> dbuf(80), 
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  2   25[COMRAM] PTR unsigned char 
  7660 ;; Registers used:
  7661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7662 ;; Tracked objects:
  7663 ;;		On entry : 3F/1
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7667 ;;      Params:         4       0       0       0       0       0       0
  7668 ;;      Locals:         4       0       0       0       0       0       0
  7669 ;;      Temps:          2       0       0       0       0       0       0
  7670 ;;      Totals:        10       0       0       0       0       0       0
  7671 ;;Total ram usage:       10 bytes
  7672 ;; Hardware stack levels used: 1
  7673 ;; Hardware stack levels required when called: 3
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_efgtoa
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text16
  7682  0031D0                     __ptext16:
  7683                           	callstack 0
  7684  0031D0                     _strcpy:
  7685                           	callstack 23
  7686                           
  7687                           ; BSR set to: 1
  7688                           
  7689                           ;incstack = 0
  7690  0031D0  C01C  F020         	movff	strcpy@src,strcpy@s
  7691  0031D4  C01D  F021         	movff	strcpy@src+1,strcpy@s+1
  7692  0031D8  C01A  F022         	movff	strcpy@dest,strcpy@d
  7693  0031DC  C01B  F023         	movff	strcpy@dest+1,strcpy@d+1
  7694  0031E0                     l9581:
  7695  0031E0  5020               	movf	strcpy@s^0,w,c
  7696  0031E2  6E1E               	movwf	??_strcpy^0,c
  7697  0031E4  5021               	movf	(strcpy@s+1)^0,w,c
  7698  0031E6  6E1F               	movwf	(??_strcpy+1)^0,c
  7699  0031E8  4A20               	infsnz	strcpy@s^0,f,c
  7700  0031EA  2A21               	incf	(strcpy@s+1)^0,f,c
  7701  0031EC  C01E  FFF6         	movff	??_strcpy,tblptrl
  7702  0031F0  C01F  FFF7         	movff	??_strcpy+1,tblptrh
  7703  0031F4  6AF8               	clrf	tblptru,c
  7704  0031F6  C022  FFD9         	movff	strcpy@d,fsr2l
  7705  0031FA  C023  FFDA         	movff	strcpy@d+1,fsr2h
  7706  0031FE  4A22               	infsnz	strcpy@d^0,f,c
  7707  003200  2A23               	incf	(strcpy@d+1)^0,f,c
  7708  003202  0E05               	movlw	(high __ramtop+-1)
  7709  003204  64F7               	cpfsgt	tblptrh,c
  7710  003206  D003               	bra	u12247
  7711  003208  0008               	tblrd		*
  7712  00320A  50F5               	movf	tablat,w,c
  7713  00320C  D002               	bra	u12240
  7714  00320E                     u12247:
  7715  00320E  EC21  F014         	call	PL20	;call to abstracted procedure
  7716  003212                     u12240:
  7717  003212  6EDF               	movwf	indf2,c
  7718  003214  50DF               	movf	indf2,w,c
  7719  003216  E1E4               	bnz	l9581
  7720  003218  0012               	return		;funcret
  7721  00321A                     __end_of_strcpy:
  7722                           	callstack 0
  7723                           
  7724 ;; *************** function _pad *****************
  7725 ;; Defined at:
  7726 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  fp              1    3[BANK0 ] PTR struct _IO_FILE
  7729 ;;		 -> sprintf@f(6), 
  7730 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7731 ;;		 -> dbuf(80), 
  7732 ;;  p               2    6[BANK0 ] int 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  w               2   10[BANK0 ] int 
  7735 ;;  i               2    8[BANK0 ] int 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  2    3[BANK0 ] int 
  7738 ;; Registers used:
  7739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 3F/0
  7742 ;;		On exit  : 3F/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7745 ;;      Params:         0       5       0       0       0       0       0
  7746 ;;      Locals:         0       4       0       0       0       0       0
  7747 ;;      Temps:          1       0       0       0       0       0       0
  7748 ;;      Totals:         1       9       0       0       0       0       0
  7749 ;;Total ram usage:       10 bytes
  7750 ;; Hardware stack levels used: 1
  7751 ;; Hardware stack levels required when called: 6
  7752 ;; This function calls:
  7753 ;;		_fputc
  7754 ;;		_fputs
  7755 ;;		_strlen
  7756 ;; This function is called by:
  7757 ;;		_efgtoa
  7758 ;;		_utoa
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text17
  7763  002E3A                     __ptext17:
  7764                           	callstack 0
  7765  002E3A                     _pad:
  7766                           	callstack 20
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  7770                           
  7771                           ;incstack = 0
  7772  002E3A  A033               	btfss	_flags^0,0,c
  7773  002E3C  D003               	goto	l9541
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  7777  002E3E  D833               	call	PL116	;call to abstracted procedure
  7778  002E40  EC9B  F01A         	call	_fputs	;wreg free
  7779  002E44                     l9541:
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  7783  002E44  BF67               	btfsc	(pad@p+1)& (0+255),7,b
  7784  002E46  D005               	goto	l1265
  7785                           
  7786                           ; BSR set to: 0
  7787  002E48  C066  F06A         	movff	pad@p,pad@w
  7788  002E4C  C067  F06B         	movff	pad@p+1,pad@w+1
  7789  002E50  D002               	goto	l1267
  7790  002E52                     l1265:
  7791                           
  7792                           ; BSR set to: 0
  7793  002E52  6B6A               	clrf	pad@w& (0+255),b
  7794  002E54  6B6B               	clrf	(pad@w+1)& (0+255),b
  7795  002E56                     l1267:
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  7799  002E56  6B68               	clrf	pad@i& (0+255),b
  7800  002E58  6B69               	clrf	(pad@i+1)& (0+255),b
  7801                           
  7802                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  7803  002E5A  D009               	goto	l9549
  7804  002E5C                     l9545:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  7808  002E5C  EC17  F012         	call	PL110	;call to abstracted procedure
  7809  002E60  C063  F01D         	movff	pad@fp,fputc@fp
  7810  002E64  ECDD  F016         	call	_fputc	;wreg free
  7811                           
  7812                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  7813  002E68  0100               	movlb	0	; () banked
  7814  002E6A  4B68               	infsnz	pad@i& (0+255),f,b
  7815  002E6C  2B69               	incf	(pad@i+1)& (0+255),f,b
  7816  002E6E                     l9549:
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  7820  002E6E  516A               	movf	pad@w& (0+255),w,b
  7821  002E70  5D68               	subwf	pad@i& (0+255),w,b
  7822  002E72  5169               	movf	(pad@i+1)& (0+255),w,b
  7823  002E74  0A80               	xorlw	128
  7824  002E76  6E26               	movwf	??_pad^0,c
  7825  002E78  516B               	movf	(pad@w+1)& (0+255),w,b
  7826  002E7A  0A80               	xorlw	128
  7827  002E7C  5826               	subwfb	??_pad^0,w,c
  7828  002E7E  E3EE               	bnc	l9545
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  7832  002E80  B033               	btfsc	_flags^0,0,c
  7833  002E82  D003               	goto	l9553
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  7837  002E84  D810               	call	PL116	;call to abstracted procedure
  7838  002E86  EC9B  F01A         	call	_fputs	;wreg free
  7839  002E8A                     l9553:
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  7843  002E8A  C064  F01A         	movff	pad@buf,strlen@s
  7844  002E8E  C065  F01B         	movff	pad@buf+1,strlen@s+1
  7845  002E92  ECFB  F019         	call	_strlen	;wreg free
  7846  002E96  0100               	movlb	0	; () banked
  7847  002E98  516A               	movf	pad@w& (0+255),w,b
  7848  002E9A  241A               	addwf	?_strlen^0,w,c
  7849  002E9C  6F63               	movwf	?_pad& (0+255),b
  7850  002E9E  516B               	movf	(pad@w+1)& (0+255),w,b
  7851  002EA0  201B               	addwfc	(?_strlen+1)^0,w,c
  7852  002EA2  6F64               	movwf	(?_pad+1)& (0+255),b
  7853                           
  7854                           ; BSR set to: 0
  7855  002EA4  0012               	return		;funcret
  7856  002EA6                     __end_of_pad:
  7857                           	callstack 0
  7858  002EA6                     PL116:
  7859                           	callstack 20
  7860  002EA6  C064  F060         	movff	pad@buf,fputs@s
  7861  002EAA  C065  F061         	movff	pad@buf+1,fputs@s+1
  7862  002EAE  C063  F062         	movff	pad@fp,fputs@fp
  7863  002EB2  0012               	return	
  7864  002EB4                     __end_ofPL116:
  7865                           	callstack 0
  7866                           
  7867 ;; *************** function _strlen *****************
  7868 ;; Defined at:
  7869 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  s               2   25[COMRAM] PTR const unsigned char 
  7872 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), U_real(2), 
  7873 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;  a               2   27[COMRAM] PTR const unsigned char 
  7876 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), U_real(2), 
  7877 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  2   25[COMRAM] unsigned int 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  7882 ;; Tracked objects:
  7883 ;;		On entry : 3F/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         2       0       0       0       0       0       0
  7888 ;;      Locals:         2       0       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0
  7890 ;;      Totals:         4       0       0       0       0       0       0
  7891 ;;Total ram usage:        4 bytes
  7892 ;; Hardware stack levels used: 1
  7893 ;; Hardware stack levels required when called: 3
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_pad
  7898 ;;		_stoa
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text18
  7903  0033F6                     __ptext18:
  7904                           	callstack 0
  7905  0033F6                     _strlen:
  7906                           	callstack 22
  7907                           
  7908                           ; BSR set to: 0
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;incstack = 0
  7912  0033F6  C01A  F01C         	movff	strlen@s,strlen@a
  7913  0033FA  C01B  F01D         	movff	strlen@s+1,strlen@a+1
  7914  0033FE  D002               	goto	l9077
  7915  003400                     l9075:
  7916  003400  4A1A               	infsnz	strlen@s^0,f,c
  7917  003402  2A1B               	incf	(strlen@s+1)^0,f,c
  7918  003404                     l9077:
  7919  003404  C01A  FFF6         	movff	strlen@s,tblptrl
  7920  003408  C01B  FFF7         	movff	strlen@s+1,tblptrh
  7921  00340C  6AF8               	clrf	tblptru,c
  7922  00340E  0E05               	movlw	(high __ramtop+-1)
  7923  003410  64F7               	cpfsgt	tblptrh,c
  7924  003412  D003               	bra	u11347
  7925  003414  0008               	tblrd		*
  7926  003416  50F5               	movf	tablat,w,c
  7927  003418  D002               	bra	u11340
  7928  00341A                     u11347:
  7929  00341A  EC21  F014         	call	PL20	;call to abstracted procedure
  7930  00341E                     u11340:
  7931  00341E  0900               	iorlw	0
  7932  003420  E1EF               	bnz	l9075
  7933  003422  501C               	movf	strlen@a^0,w,c
  7934  003424  5C1A               	subwf	strlen@s^0,w,c
  7935  003426  6E1A               	movwf	?_strlen^0,c
  7936  003428  501D               	movf	(strlen@a+1)^0,w,c
  7937  00342A  581B               	subwfb	(strlen@s+1)^0,w,c
  7938  00342C  6E1B               	movwf	(?_strlen+1)^0,c
  7939  00342E  0012               	return		;funcret
  7940  003430                     __end_of_strlen:
  7941                           	callstack 0
  7942                           
  7943 ;; *************** function _fputs *****************
  7944 ;; Defined at:
  7945 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7948 ;;		 -> dbuf(80), 
  7949 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
  7950 ;;		 -> sprintf@f(6), 
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;  i               2   35[COMRAM] int 
  7953 ;;  c               1   34[COMRAM] unsigned char 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;                  2    0[BANK0 ] int 
  7956 ;; Registers used:
  7957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : 3F/0
  7960 ;;		On exit  : 3F/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7963 ;;      Params:         0       3       0       0       0       0       0
  7964 ;;      Locals:         3       0       0       0       0       0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0
  7966 ;;      Totals:         3       3       0       0       0       0       0
  7967 ;;Total ram usage:        6 bytes
  7968 ;; Hardware stack levels used: 1
  7969 ;; Hardware stack levels required when called: 5
  7970 ;; This function calls:
  7971 ;;		_fputc
  7972 ;; This function is called by:
  7973 ;;		_pad
  7974 ;; This function uses a non-reentrant model
  7975 ;;
  7976                           
  7977                           	psect	text19
  7978  003536                     __ptext19:
  7979                           	callstack 0
  7980  003536                     _fputs:
  7981                           	callstack 20
  7982                           
  7983                           ; BSR set to: 0
  7984                           
  7985                           ;incstack = 0
  7986  003536  6A24               	clrf	fputs@i^0,c
  7987  003538  6A25               	clrf	(fputs@i+1)^0,c
  7988  00353A  D009               	goto	l9071
  7989  00353C                     l9067:
  7990                           
  7991                           ; BSR set to: 0
  7992  00353C  C023  F01B         	movff	fputs@c,fputc@c
  7993  003540  6A1C               	clrf	(fputc@c+1)^0,c
  7994  003542  C062  F01D         	movff	fputs@fp,fputc@fp
  7995  003546  ECDD  F016         	call	_fputc	;wreg free
  7996  00354A  4A24               	infsnz	fputs@i^0,f,c
  7997  00354C  2A25               	incf	(fputs@i+1)^0,f,c
  7998  00354E                     l9071:
  7999  00354E  5024               	movf	fputs@i^0,w,c
  8000  003550  0100               	movlb	0	; () banked
  8001  003552  2560               	addwf	fputs@s& (0+255),w,b
  8002  003554  6ED9               	movwf	fsr2l,c
  8003  003556  5025               	movf	(fputs@i+1)^0,w,c
  8004  003558  2161               	addwfc	(fputs@s+1)& (0+255),w,b
  8005  00355A  6EDA               	movwf	fsr2h,c
  8006  00355C  50DF               	movf	indf2,w,c
  8007  00355E  6E23               	movwf	fputs@c^0,c
  8008  003560  5023               	movf	fputs@c^0,w,c
  8009  003562  E1EC               	bnz	l9067
  8010                           
  8011                           ; BSR set to: 0
  8012  003564  0012               	return		;funcret
  8013  003566                     __end_of_fputs:
  8014                           	callstack 0
  8015                           
  8016 ;; *************** function _floorf *****************
  8017 ;; Defined at:
  8018 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\floorf.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  x               4   27[BANK0 ] float 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  u               4   43[BANK0 ] struct .
  8023 ;;  m               4   37[BANK0 ] unsigned long 
  8024 ;;  e               2   41[BANK0 ] int 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  4   27[BANK0 ] float 
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0
  8029 ;; Tracked objects:
  8030 ;;		On entry : 3F/0
  8031 ;;		On exit  : 3F/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8034 ;;      Params:         0       4       0       0       0       0       0
  8035 ;;      Locals:         0      10       0       0       0       0       0
  8036 ;;      Temps:          0       6       0       0       0       0       0
  8037 ;;      Totals:         0      20       0       0       0       0       0
  8038 ;;Total ram usage:       20 bytes
  8039 ;; Hardware stack levels used: 1
  8040 ;; Hardware stack levels required when called: 3
  8041 ;; This function calls:
  8042 ;;		Nothing
  8043 ;; This function is called by:
  8044 ;;		_efgtoa
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           	psect	text20
  8049  001EFC                     __ptext20:
  8050                           	callstack 0
  8051  001EFC                     _floorf:
  8052                           	callstack 23
  8053                           
  8054                           ; BSR set to: 0
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;incstack = 0
  8058  001EFC  C100  F08B         	movff	floorf@F527,floorf@u
  8059  001F00  C101  F08C         	movff	floorf@F527+1,floorf@u+1
  8060  001F04  C102  F08D         	movff	floorf@F527+2,floorf@u+2
  8061  001F08  C103  F08E         	movff	floorf@F527+3,floorf@u+3
  8062  001F0C  C07B  F08B         	movff	floorf@x,floorf@u
  8063  001F10  C07C  F08C         	movff	floorf@x+1,floorf@u+1
  8064  001F14  C07D  F08D         	movff	floorf@x+2,floorf@u+2
  8065  001F18  C07E  F08E         	movff	floorf@x+3,floorf@u+3
  8066                           
  8067                           ; BSR set to: 0
  8068  001F1C  0E81               	movlw	129
  8069  001F1E  6F7F               	movwf	??_floorf& (0+255),b
  8070  001F20  6980               	setf	(??_floorf+1)& (0+255),b
  8071  001F22  C08B  F081         	movff	floorf@u,??_floorf+2
  8072  001F26  C08C  F082         	movff	floorf@u+1,??_floorf+3
  8073  001F2A  C08D  F083         	movff	floorf@u+2,??_floorf+4
  8074  001F2E  C08E  F084         	movff	floorf@u+3,??_floorf+5
  8075  001F32  0E18               	movlw	24
  8076  001F34  D005               	goto	u12290
  8077  001F36                     u12295:
  8078  001F36  90D8               	bcf	status,0,c
  8079  001F38  3384               	rrcf	(??_floorf+5)& (0+255),f,b
  8080  001F3A  3383               	rrcf	(??_floorf+4)& (0+255),f,b
  8081  001F3C  3382               	rrcf	(??_floorf+3)& (0+255),f,b
  8082  001F3E  3381               	rrcf	(??_floorf+2)& (0+255),f,b
  8083  001F40                     u12290:
  8084  001F40  2EE8               	decfsz	wreg,f,c
  8085  001F42  D7F9               	goto	u12295
  8086  001F44  5181               	movf	(??_floorf+2)& (0+255),w,b
  8087  001F46  257F               	addwf	??_floorf& (0+255),w,b
  8088  001F48  6F89               	movwf	floorf@e& (0+255),b
  8089  001F4A  0E00               	movlw	0
  8090  001F4C  2180               	addwfc	(??_floorf+1)& (0+255),w,b
  8091  001F4E  6F8A               	movwf	(floorf@e+1)& (0+255),b
  8092  001F50  BF8A               	btfsc	(floorf@e+1)& (0+255),7,b
  8093  001F52  D00E               	goto	l9599
  8094  001F54  518A               	movf	(floorf@e+1)& (0+255),w,b
  8095  001F56  E103               	bnz	u12300
  8096  001F58  0E17               	movlw	23
  8097  001F5A  5D89               	subwf	floorf@e& (0+255),w,b
  8098  001F5C  E309               	bnc	l9599
  8099  001F5E                     u12300:
  8100                           
  8101                           ; BSR set to: 0
  8102  001F5E  C07B  F07B         	movff	floorf@x,?_floorf
  8103  001F62  C07C  F07C         	movff	floorf@x+1,?_floorf+1
  8104  001F66  C07D  F07D         	movff	floorf@x+2,?_floorf+2
  8105  001F6A  C07E  F07E         	movff	floorf@x+3,?_floorf+3
  8106  001F6E  0012               	return	
  8107  001F70                     l9599:
  8108                           
  8109                           ; BSR set to: 0
  8110  001F70  BF8A               	btfsc	(floorf@e+1)& (0+255),7,b
  8111  001F72  D048               	goto	l9609
  8112                           
  8113                           ; BSR set to: 0
  8114  001F74  C089  F07F         	movff	floorf@e,??_floorf
  8115  001F78  6980               	setf	(??_floorf+1)& (0+255),b
  8116  001F7A  6981               	setf	(??_floorf+2)& (0+255),b
  8117  001F7C  0E7F               	movlw	127
  8118  001F7E  6F82               	movwf	(??_floorf+3)& (0+255),b
  8119  001F80  0E00               	movlw	0
  8120  001F82  6F83               	movwf	(??_floorf+4)& (0+255),b
  8121  001F84                     u12325:
  8122  001F84  677F               	tstfsz	??_floorf& (0+255),b
  8123  001F86  D001               	goto	u12326
  8124  001F88  D007               	goto	u12327
  8125  001F8A                     u12326:
  8126  001F8A  3583               	rlcf	(??_floorf+4)& (0+255),w,b
  8127  001F8C  3383               	rrcf	(??_floorf+4)& (0+255),f,b
  8128  001F8E  3382               	rrcf	(??_floorf+3)& (0+255),f,b
  8129  001F90  3381               	rrcf	(??_floorf+2)& (0+255),f,b
  8130  001F92  3380               	rrcf	(??_floorf+1)& (0+255),f,b
  8131  001F94  2F7F               	decfsz	??_floorf& (0+255),f,b
  8132  001F96  D7F6               	goto	u12325
  8133  001F98                     u12327:
  8134  001F98  C080  F085         	movff	??_floorf+1,floorf@m
  8135  001F9C  C081  F086         	movff	??_floorf+2,floorf@m+1
  8136  001FA0  C082  F087         	movff	??_floorf+3,floorf@m+2
  8137  001FA4  C083  F088         	movff	??_floorf+4,floorf@m+3
  8138  001FA8  0100               	movlb	0	; () banked
  8139  001FAA  5185               	movf	floorf@m& (0+255),w,b
  8140  001FAC  158B               	andwf	floorf@u& (0+255),w,b
  8141  001FAE  6F7F               	movwf	??_floorf& (0+255),b
  8142  001FB0  5186               	movf	(floorf@m+1)& (0+255),w,b
  8143  001FB2  158C               	andwf	(floorf@u+1)& (0+255),w,b
  8144  001FB4  6F80               	movwf	(??_floorf+1)& (0+255),b
  8145  001FB6  5187               	movf	(floorf@m+2)& (0+255),w,b
  8146  001FB8  158D               	andwf	(floorf@u+2)& (0+255),w,b
  8147  001FBA  6F81               	movwf	(??_floorf+2)& (0+255),b
  8148  001FBC  5188               	movf	(floorf@m+3)& (0+255),w,b
  8149  001FBE  158E               	andwf	(floorf@u+3)& (0+255),w,b
  8150  001FC0  D855               	call	PL144	;call to abstracted procedure
  8151  001FC2  E0CD               	bz	u12300
  8152                           
  8153                           ; BSR set to: 0
  8154  001FC4  D844               	call	PL66	;call to abstracted procedure
  8155  001FC6  D001               	goto	u12340
  8156  001FC8                     u12345:
  8157  001FC8  D84B               	call	PL142	;call to abstracted procedure
  8158  001FCA                     u12340:
  8159  001FCA  2EE8               	decfsz	wreg,f,c
  8160  001FCC  D7FD               	goto	u12345
  8161  001FCE  517F               	movf	??_floorf& (0+255),w,b
  8162  001FD0  E008               	bz	l1516
  8163                           
  8164                           ; BSR set to: 0
  8165  001FD2  5185               	movf	floorf@m& (0+255),w,b
  8166  001FD4  278B               	addwf	floorf@u& (0+255),f,b
  8167  001FD6  5186               	movf	(floorf@m+1)& (0+255),w,b
  8168  001FD8  238C               	addwfc	(floorf@u+1)& (0+255),f,b
  8169  001FDA  5187               	movf	(floorf@m+2)& (0+255),w,b
  8170  001FDC  238D               	addwfc	(floorf@u+2)& (0+255),f,b
  8171  001FDE  5188               	movf	(floorf@m+3)& (0+255),w,b
  8172  001FE0  238E               	addwfc	(floorf@u+3)& (0+255),f,b
  8173  001FE2                     l1516:
  8174                           
  8175                           ; BSR set to: 0
  8176  001FE2  1D85               	comf	floorf@m& (0+255),w,b
  8177  001FE4  6F7F               	movwf	??_floorf& (0+255),b
  8178  001FE6  1D86               	comf	(floorf@m+1)& (0+255),w,b
  8179  001FE8  6F80               	movwf	(??_floorf+1)& (0+255),b
  8180  001FEA  1D87               	comf	(floorf@m+2)& (0+255),w,b
  8181  001FEC  6F81               	movwf	(??_floorf+2)& (0+255),b
  8182  001FEE  1D88               	comf	(floorf@m+3)& (0+255),w,b
  8183  001FF0  6F82               	movwf	(??_floorf+3)& (0+255),b
  8184  001FF2  517F               	movf	??_floorf& (0+255),w,b
  8185  001FF4  178B               	andwf	floorf@u& (0+255),f,b
  8186  001FF6  5180               	movf	(??_floorf+1)& (0+255),w,b
  8187  001FF8  178C               	andwf	(floorf@u+1)& (0+255),f,b
  8188  001FFA  5181               	movf	(??_floorf+2)& (0+255),w,b
  8189  001FFC  178D               	andwf	(floorf@u+2)& (0+255),f,b
  8190  001FFE  5182               	movf	(??_floorf+3)& (0+255),w,b
  8191  002000  178E               	andwf	(floorf@u+3)& (0+255),f,b
  8192  002002  D01C               	goto	l9617
  8193  002004                     l9609:
  8194                           
  8195                           ; BSR set to: 0
  8196  002004  D824               	call	PL66	;call to abstracted procedure
  8197  002006  D001               	goto	u12360
  8198  002008                     u12365:
  8199  002008  D82B               	call	PL142	;call to abstracted procedure
  8200  00200A                     u12360:
  8201  00200A  2EE8               	decfsz	wreg,f,c
  8202  00200C  D7FD               	goto	u12365
  8203  00200E  677F               	tstfsz	??_floorf& (0+255),b
  8204  002010  D005               	goto	l9613
  8205                           
  8206                           ; BSR set to: 0
  8207  002012  6B8B               	clrf	floorf@u& (0+255),b
  8208  002014  6B8C               	clrf	(floorf@u+1)& (0+255),b
  8209  002016  6B8D               	clrf	(floorf@u+2)& (0+255),b
  8210  002018  6B8E               	clrf	(floorf@u+3)& (0+255),b
  8211  00201A  D010               	goto	l9617
  8212  00201C                     l9613:
  8213                           
  8214                           ; BSR set to: 0
  8215  00201C  90D8               	bcf	status,0,c
  8216  00201E  358B               	rlcf	floorf@u& (0+255),w,b
  8217  002020  6F7F               	movwf	??_floorf& (0+255),b
  8218  002022  358C               	rlcf	(floorf@u+1)& (0+255),w,b
  8219  002024  6F80               	movwf	(??_floorf+1)& (0+255),b
  8220  002026  358D               	rlcf	(floorf@u+2)& (0+255),w,b
  8221  002028  6F81               	movwf	(??_floorf+2)& (0+255),b
  8222  00202A  358E               	rlcf	(floorf@u+3)& (0+255),w,b
  8223  00202C  D81F               	call	PL144	;call to abstracted procedure
  8224  00202E  E006               	bz	l9617
  8225                           
  8226                           ; BSR set to: 0
  8227  002030  6B8B               	clrf	floorf@u& (0+255),b
  8228  002032  6B8C               	clrf	(floorf@u+1)& (0+255),b
  8229  002034  0E80               	movlw	128
  8230  002036  6F8D               	movwf	(floorf@u+2)& (0+255),b
  8231  002038  0EBF               	movlw	191
  8232  00203A  6F8E               	movwf	(floorf@u+3)& (0+255),b
  8233  00203C                     l9617:
  8234                           
  8235                           ; BSR set to: 0
  8236  00203C  C08B  F07B         	movff	floorf@u,?_floorf
  8237  002040  C08C  F07C         	movff	floorf@u+1,?_floorf+1
  8238  002044  C08D  F07D         	movff	floorf@u+2,?_floorf+2
  8239  002048  C08E  F07E         	movff	floorf@u+3,?_floorf+3
  8240                           
  8241                           ; BSR set to: 0
  8242  00204C  0012               	return		;funcret
  8243  00204E                     __end_of_floorf:
  8244                           	callstack 0
  8245  00204E                     PL66:
  8246                           	callstack 23
  8247  00204E  C08B  F07F         	movff	floorf@u,??_floorf
  8248  002052  C08C  F080         	movff	floorf@u+1,??_floorf+1
  8249  002056  C08D  F081         	movff	floorf@u+2,??_floorf+2
  8250  00205A  C08E  F082         	movff	floorf@u+3,??_floorf+3
  8251  00205E  0C20               	retlw	32
  8252  002060                     __end_ofPL66:
  8253                           	callstack 0
  8254  002060                     PL142:
  8255                           	callstack 23
  8256  002060  90D8               	bcf	status,0,c
  8257  002062  3382               	rrcf	(??_floorf+3)& (0+255),f,b
  8258  002064  3381               	rrcf	(??_floorf+2)& (0+255),f,b
  8259  002066  3380               	rrcf	(??_floorf+1)& (0+255),f,b
  8260  002068  337F               	rrcf	??_floorf& (0+255),f,b
  8261  00206A  0012               	return	
  8262  00206C                     __end_ofPL142:
  8263                           	callstack 0
  8264  00206C                     PL144:
  8265                           	callstack 23
  8266  00206C  6F82               	movwf	(??_floorf+3)& (0+255),b
  8267  00206E  517F               	movf	??_floorf& (0+255),w,b
  8268  002070  1180               	iorwf	(??_floorf+1)& (0+255),w,b
  8269  002072  1181               	iorwf	(??_floorf+2)& (0+255),w,b
  8270  002074  1182               	iorwf	(??_floorf+3)& (0+255),w,b
  8271  002076  0012               	return	
  8272  002078                     __end_ofPL144:
  8273                           	callstack 0
  8274                           
  8275 ;; *************** function ___fpclassifyf *****************
  8276 ;; Defined at:
  8277 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__fpclassifyf.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  x               4   25[COMRAM] float 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  u               4    2[BANK0 ] struct .
  8282 ;;  e               2    0[BANK0 ] int 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  2   25[COMRAM] int 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 3E/1
  8289 ;;		On exit  : 3F/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8292 ;;      Params:         4       0       0       0       0       0       0
  8293 ;;      Locals:         0       6       0       0       0       0       0
  8294 ;;      Temps:          4       0       0       0       0       0       0
  8295 ;;      Totals:         8       6       0       0       0       0       0
  8296 ;;Total ram usage:       14 bytes
  8297 ;; Hardware stack levels used: 1
  8298 ;; Hardware stack levels required when called: 3
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_efgtoa
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text21
  8307  002A1E                     __ptext21:
  8308                           	callstack 0
  8309  002A1E                     ___fpclassifyf:
  8310                           	callstack 23
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;incstack = 0
  8314  002A1E  C027  F062         	movff	___fpclassifyf@F465,___fpclassifyf@u
  8315  002A22  C028  F063         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  8316  002A26  C029  F064         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  8317  002A2A  C02A  F065         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  8318  002A2E  C01A  F062         	movff	___fpclassifyf@x,___fpclassifyf@u
  8319  002A32  C01B  F063         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  8320  002A36  C01C  F064         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  8321  002A3A  C01D  F065         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  8322  002A3E  D83A               	call	PL94	;call to abstracted procedure
  8323  002A40  0E18               	movlw	24
  8324  002A42  D005               	goto	u12170
  8325  002A44                     u12175:
  8326  002A44  90D8               	bcf	status,0,c
  8327  002A46  3221               	rrcf	(??___fpclassifyf+3)^0,f,c
  8328  002A48  3220               	rrcf	(??___fpclassifyf+2)^0,f,c
  8329  002A4A  321F               	rrcf	(??___fpclassifyf+1)^0,f,c
  8330  002A4C  321E               	rrcf	??___fpclassifyf^0,f,c
  8331  002A4E                     u12170:
  8332  002A4E  2EE8               	decfsz	wreg,f,c
  8333  002A50  D7F9               	goto	u12175
  8334  002A52  501E               	movf	??___fpclassifyf^0,w,c
  8335  002A54  0100               	movlb	0	; () banked
  8336  002A56  6F60               	movwf	___fpclassifyf@e& (0+255),b
  8337  002A58  6B61               	clrf	(___fpclassifyf@e+1)& (0+255),b
  8338  002A5A  5160               	movf	___fpclassifyf@e& (0+255),w,b
  8339  002A5C  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  8340  002A5E  E113               	bnz	l9569
  8341                           
  8342                           ; BSR set to: 0
  8343  002A60  90D8               	bcf	status,0,c
  8344  002A62  3562               	rlcf	___fpclassifyf@u& (0+255),w,b
  8345  002A64  6E1E               	movwf	??___fpclassifyf^0,c
  8346  002A66  3563               	rlcf	(___fpclassifyf@u+1)& (0+255),w,b
  8347  002A68  6E1F               	movwf	(??___fpclassifyf+1)^0,c
  8348  002A6A  3564               	rlcf	(___fpclassifyf@u+2)& (0+255),w,b
  8349  002A6C  6E20               	movwf	(??___fpclassifyf+2)^0,c
  8350  002A6E  3565               	rlcf	(___fpclassifyf@u+3)& (0+255),w,b
  8351  002A70  6E21               	movwf	(??___fpclassifyf+3)^0,c
  8352  002A72  D829               	call	PL178	;call to abstracted procedure
  8353  002A74  E104               	bnz	l9565
  8354                           
  8355                           ; BSR set to: 0
  8356  002A76  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  8357  002A78  0E02               	movlw	2
  8358  002A7A  6E1A               	movwf	?___fpclassifyf^0,c
  8359  002A7C  0C02               	retlw	2
  8360  002A7E                     l9565:
  8361                           
  8362                           ; BSR set to: 0
  8363  002A7E  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  8364  002A80  0E03               	movlw	3
  8365  002A82  6E1A               	movwf	?___fpclassifyf^0,c
  8366  002A84  0C03               	retlw	3
  8367  002A86                     l9569:
  8368                           
  8369                           ; BSR set to: 0
  8370  002A86  2960               	incf	___fpclassifyf@e& (0+255),w,b
  8371  002A88  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  8372  002A8A  E110               	bnz	l9575
  8373                           
  8374                           ; BSR set to: 0
  8375  002A8C  D813               	call	PL94	;call to abstracted procedure
  8376  002A8E  0E09               	movlw	9
  8377  002A90                     u12215:
  8378  002A90  90D8               	bcf	status,0,c
  8379  002A92  361E               	rlcf	??___fpclassifyf^0,f,c
  8380  002A94  361F               	rlcf	(??___fpclassifyf+1)^0,f,c
  8381  002A96  3620               	rlcf	(??___fpclassifyf+2)^0,f,c
  8382  002A98  3621               	rlcf	(??___fpclassifyf+3)^0,f,c
  8383  002A9A  2EE8               	decfsz	wreg,f,c
  8384  002A9C  D7F9               	goto	u12215
  8385  002A9E  D813               	call	PL178	;call to abstracted procedure
  8386  002AA0  0E01               	movlw	1
  8387  002AA2  A4D8               	btfss	status,2,c
  8388  002AA4  0E00               	movlw	0
  8389  002AA6  6E1A               	movwf	?___fpclassifyf^0,c
  8390  002AA8  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  8391  002AAA  0012               	return	
  8392  002AAC                     l9575:
  8393                           
  8394                           ; BSR set to: 0
  8395  002AAC  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  8396  002AAE  0E04               	movlw	4
  8397  002AB0  6E1A               	movwf	?___fpclassifyf^0,c
  8398                           
  8399                           ; BSR set to: 0
  8400  002AB2  0C04               	retlw	4	;funcret
  8401  002AB4                     __end_of___fpclassifyf:
  8402                           	callstack 0
  8403  002AB4                     PL94:
  8404                           	callstack 23
  8405  002AB4  C062  F01E         	movff	___fpclassifyf@u,??___fpclassifyf
  8406  002AB8  C063  F01F         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  8407  002ABC  C064  F020         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  8408  002AC0  C065  F021         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  8409  002AC4  0012               	return	
  8410  002AC6                     __end_ofPL94:
  8411                           	callstack 0
  8412  002AC6                     PL178:
  8413                           	callstack 23
  8414  002AC6  501E               	movf	??___fpclassifyf^0,w,c
  8415  002AC8  101F               	iorwf	(??___fpclassifyf+1)^0,w,c
  8416  002ACA  1020               	iorwf	(??___fpclassifyf+2)^0,w,c
  8417  002ACC  1021               	iorwf	(??___fpclassifyf+3)^0,w,c
  8418  002ACE  0012               	return	
  8419  002AD0                     __end_ofPL178:
  8420                           	callstack 0
  8421                           
  8422 ;; *************** function ___fltol *****************
  8423 ;; Defined at:
  8424 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  f1              4   88[BANK0 ] int 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  exp1            1   97[BANK0 ] unsigned char 
  8429 ;;  sign1           1   96[BANK0 ] unsigned char 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  4   88[BANK0 ] long 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2, status,0
  8434 ;; Tracked objects:
  8435 ;;		On entry : 3F/0
  8436 ;;		On exit  : 3F/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8439 ;;      Params:         0       4       0       0       0       0       0
  8440 ;;      Locals:         0       2       0       0       0       0       0
  8441 ;;      Temps:          0       4       0       0       0       0       0
  8442 ;;      Totals:         0      10       0       0       0       0       0
  8443 ;;Total ram usage:       10 bytes
  8444 ;; Hardware stack levels used: 1
  8445 ;; Hardware stack levels required when called: 3
  8446 ;; This function calls:
  8447 ;;		Nothing
  8448 ;; This function is called by:
  8449 ;;		_main
  8450 ;;		_efgtoa
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text22
  8455  002B7A                     __ptext22:
  8456                           	callstack 0
  8457  002B7A                     ___fltol:
  8458                           	callstack 23
  8459                           
  8460                           ; BSR set to: 0
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;incstack = 0
  8464  002B7A  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8465  002B7C  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8466  002B7E  6FC1               	movwf	___fltol@exp1& (0+255),b
  8467  002B80  51C1               	movf	___fltol@exp1& (0+255),w,b
  8468  002B82  E105               	bnz	l9465
  8469  002B84                     u12000:
  8470                           
  8471                           ; BSR set to: 0
  8472  002B84  6BB8               	clrf	?___fltol& (0+255),b
  8473  002B86  6BB9               	clrf	(?___fltol+1)& (0+255),b
  8474  002B88  6BBA               	clrf	(?___fltol+2)& (0+255),b
  8475  002B8A  6BBB               	clrf	(?___fltol+3)& (0+255),b
  8476  002B8C  0012               	return	
  8477  002B8E                     l9465:
  8478                           
  8479                           ; BSR set to: 0
  8480  002B8E  C0B8  F0BC         	movff	___fltol@f1,??___fltol
  8481  002B92  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
  8482  002B96  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
  8483  002B9A  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
  8484  002B9E  0E20               	movlw	32
  8485  002BA0  D005               	goto	u12010
  8486  002BA2                     u12015:
  8487  002BA2  90D8               	bcf	status,0,c
  8488  002BA4  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
  8489  002BA6  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
  8490  002BA8  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
  8491  002BAA  33BC               	rrcf	??___fltol& (0+255),f,b
  8492  002BAC                     u12010:
  8493  002BAC  2EE8               	decfsz	wreg,f,c
  8494  002BAE  D7F9               	goto	u12015
  8495  002BB0  51BC               	movf	??___fltol& (0+255),w,b
  8496  002BB2  6FC0               	movwf	___fltol@sign1& (0+255),b
  8497                           
  8498                           ; BSR set to: 0
  8499  002BB4  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
  8500                           
  8501                           ; BSR set to: 0
  8502  002BB6  6BBB               	clrf	(___fltol@f1+3)& (0+255),b
  8503                           
  8504                           ; BSR set to: 0
  8505  002BB8  0E96               	movlw	150
  8506  002BBA  5FC1               	subwf	___fltol@exp1& (0+255),f,b
  8507                           
  8508                           ; BSR set to: 0
  8509  002BBC  AFC1               	btfss	___fltol@exp1& (0+255),7,b
  8510  002BBE  D00C               	goto	l9483
  8511                           
  8512                           ; BSR set to: 0
  8513  002BC0  51C1               	movf	___fltol@exp1& (0+255),w,b
  8514  002BC2  0A80               	xorlw	128
  8515  002BC4  0F97               	addlw	151
  8516  002BC6  E3DE               	bnc	u12000
  8517  002BC8                     l9479:
  8518                           
  8519                           ; BSR set to: 0
  8520  002BC8  90D8               	bcf	status,0,c
  8521  002BCA  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8522  002BCC  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8523  002BCE  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8524  002BD0  33B8               	rrcf	___fltol@f1& (0+255),f,b
  8525                           
  8526                           ; BSR set to: 0
  8527  002BD2  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
  8528  002BD4  D7F9               	goto	l9479
  8529  002BD6  D00C               	goto	u12050
  8530  002BD8                     l9483:
  8531                           
  8532                           ; BSR set to: 0
  8533  002BD8  0E1F               	movlw	31
  8534  002BDA  65C1               	cpfsgt	___fltol@exp1& (0+255),b
  8535  002BDC  D007               	goto	l9489
  8536  002BDE  D7D2               	goto	u12000
  8537  002BE0                     l9487:
  8538                           
  8539                           ; BSR set to: 0
  8540  002BE0  90D8               	bcf	status,0,c
  8541  002BE2  37B8               	rlcf	___fltol@f1& (0+255),f,b
  8542  002BE4  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8543  002BE6  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8544  002BE8  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8545  002BEA  07C1               	decf	___fltol@exp1& (0+255),f,b
  8546  002BEC                     l9489:
  8547                           
  8548                           ; BSR set to: 0
  8549  002BEC  51C1               	movf	___fltol@exp1& (0+255),w,b
  8550  002BEE  E1F8               	bnz	l9487
  8551  002BF0                     u12050:
  8552                           
  8553                           ; BSR set to: 0
  8554  002BF0  51C0               	movf	___fltol@sign1& (0+255),w,b
  8555  002BF2  E008               	bz	l9495
  8556                           
  8557                           ; BSR set to: 0
  8558  002BF4  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
  8559  002BF6  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
  8560  002BF8  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
  8561  002BFA  6DB8               	negf	___fltol@f1& (0+255),b
  8562  002BFC  0E00               	movlw	0
  8563  002BFE  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8564  002C00  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8565  002C02  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8566  002C04                     l9495:
  8567                           
  8568                           ; BSR set to: 0
  8569  002C04  C0B8  F0B8         	movff	___fltol@f1,?___fltol
  8570  002C08  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
  8571  002C0C  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
  8572  002C10  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
  8573                           
  8574                           ; BSR set to: 0
  8575  002C14  0012               	return		;funcret
  8576  002C16                     __end_of___fltol:
  8577                           	callstack 0
  8578                           
  8579 ;; *************** function ___flsub *****************
  8580 ;; Defined at:
  8581 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  b               4   43[BANK0 ] long 
  8584 ;;  a               4   47[BANK0 ] long 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  4   43[BANK0 ] long 
  8589 ;; Registers used:
  8590 ;;		wreg, status,2, status,0, cstack
  8591 ;; Tracked objects:
  8592 ;;		On entry : 3F/0
  8593 ;;		On exit  : 3F/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8596 ;;      Params:         0       8       0       0       0       0       0
  8597 ;;      Locals:         0       0       0       0       0       0       0
  8598 ;;      Temps:          0       0       0       0       0       0       0
  8599 ;;      Totals:         0       8       0       0       0       0       0
  8600 ;;Total ram usage:        8 bytes
  8601 ;; Hardware stack levels used: 1
  8602 ;; Hardware stack levels required when called: 4
  8603 ;; This function calls:
  8604 ;;		___fladd
  8605 ;; This function is called by:
  8606 ;;		_efgtoa
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text23
  8611  003430                     __ptext23:
  8612                           	callstack 0
  8613  003430                     ___flsub:
  8614                           	callstack 22
  8615                           
  8616                           ; BSR set to: 0
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;incstack = 0
  8620  003430  0E80               	movlw	128
  8621  003432  1B92               	xorwf	(___flsub@a+3)& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624  003434  C08B  F07B         	movff	___flsub@b,___fladd@b
  8625  003438  C08C  F07C         	movff	___flsub@b+1,___fladd@b+1
  8626  00343C  C08D  F07D         	movff	___flsub@b+2,___fladd@b+2
  8627  003440  C08E  F07E         	movff	___flsub@b+3,___fladd@b+3
  8628  003444  C08F  F07F         	movff	___flsub@a,___fladd@a
  8629  003448  C090  F080         	movff	___flsub@a+1,___fladd@a+1
  8630  00344C  C091  F081         	movff	___flsub@a+2,___fladd@a+2
  8631  003450  C092  F082         	movff	___flsub@a+3,___fladd@a+3
  8632  003454  ECB2  F00A         	call	___fladd	;wreg free
  8633  003458  C07B  F08B         	movff	?___fladd,?___flsub
  8634  00345C  C07C  F08C         	movff	?___fladd+1,?___flsub+1
  8635  003460  C07D  F08D         	movff	?___fladd+2,?___flsub+2
  8636  003464  C07E  F08E         	movff	?___fladd+3,?___flsub+3
  8637                           
  8638                           ; BSR set to: 0
  8639  003468  0012               	return		;funcret
  8640  00346A                     __end_of___flsub:
  8641                           	callstack 0
  8642                           
  8643 ;; *************** function ___fladd *****************
  8644 ;; Defined at:
  8645 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcadd.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  b               4   27[BANK0 ] long 
  8648 ;;  a               4   31[BANK0 ] long 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  grs             1   42[BANK0 ] unsigned char 
  8651 ;;  bexp            1   41[BANK0 ] unsigned char 
  8652 ;;  aexp            1   40[BANK0 ] unsigned char 
  8653 ;;  signs           1   39[BANK0 ] unsigned char 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  4   27[BANK0 ] unsigned char 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 3E/0
  8660 ;;		On exit  : 3F/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8663 ;;      Params:         0       8       0       0       0       0       0
  8664 ;;      Locals:         0       4       0       0       0       0       0
  8665 ;;      Temps:          0       4       0       0       0       0       0
  8666 ;;      Totals:         0      16       0       0       0       0       0
  8667 ;;Total ram usage:       16 bytes
  8668 ;; Hardware stack levels used: 1
  8669 ;; Hardware stack levels required when called: 3
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_main
  8674 ;;		___flsub
  8675 ;;		_efgtoa
  8676 ;;		_sqrtf
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           	psect	text24
  8681  001564                     __ptext24:
  8682                           	callstack 0
  8683  001564                     ___fladd:
  8684                           	callstack 26
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;incstack = 0
  8688  001564  0100               	movlb	0	; () banked
  8689  001566  517E               	movf	(___fladd@b+3)& (0+255),w,b
  8690  001568  0B80               	andlw	128
  8691  00156A  6F87               	movwf	___fladd@signs& (0+255),b
  8692  00156C  517E               	movf	(___fladd@b+3)& (0+255),w,b
  8693  00156E  257E               	addwf	(___fladd@b+3)& (0+255),w,b
  8694  001570  6F89               	movwf	___fladd@bexp& (0+255),b
  8695                           
  8696                           ; BSR set to: 0
  8697  001572  BF7D               	btfsc	(___fladd@b+2)& (0+255),7,b
  8698                           
  8699                           ; BSR set to: 0
  8700  001574  8189               	bsf	___fladd@bexp& (0+255),0,b
  8701                           
  8702                           ; BSR set to: 0
  8703  001576  5189               	movf	___fladd@bexp& (0+255),w,b
  8704  001578  E005               	bz	l1065
  8705                           
  8706                           ; BSR set to: 0
  8707  00157A  2989               	incf	___fladd@bexp& (0+255),w,b
  8708  00157C  E101               	bnz	l8893
  8709                           
  8710                           ; BSR set to: 0
  8711  00157E  D906               	call	PL128	;call to abstracted procedure
  8712  001580                     l8893:
  8713                           
  8714                           ; BSR set to: 0
  8715  001580  8F7D               	bsf	(___fladd@b+2)& (0+255),7,b
  8716  001582  D003               	goto	L9
  8717  001584                     l1065:
  8718                           
  8719                           ; BSR set to: 0
  8720  001584  6B7B               	clrf	___fladd@b& (0+255),b
  8721  001586  6B7C               	clrf	(___fladd@b+1)& (0+255),b
  8722  001588  6B7D               	clrf	(___fladd@b+2)& (0+255),b
  8723  00158A                     L9:
  8724  00158A  6B7E               	clrf	(___fladd@b+3)& (0+255),b
  8725                           
  8726                           ; BSR set to: 0
  8727  00158C  5182               	movf	(___fladd@a+3)& (0+255),w,b
  8728  00158E  0B80               	andlw	128
  8729  001590  6F88               	movwf	___fladd@aexp& (0+255),b
  8730  001592  1987               	xorwf	___fladd@signs& (0+255),w,b
  8731  001594  E001               	bz	l8901
  8732                           
  8733                           ; BSR set to: 0
  8734  001596  8D87               	bsf	___fladd@signs& (0+255),6,b
  8735  001598                     l8901:
  8736                           
  8737                           ; BSR set to: 0
  8738  001598  5182               	movf	(___fladd@a+3)& (0+255),w,b
  8739  00159A  2582               	addwf	(___fladd@a+3)& (0+255),w,b
  8740  00159C  6F88               	movwf	___fladd@aexp& (0+255),b
  8741                           
  8742                           ; BSR set to: 0
  8743  00159E  BF81               	btfsc	(___fladd@a+2)& (0+255),7,b
  8744                           
  8745                           ; BSR set to: 0
  8746  0015A0  8188               	bsf	___fladd@aexp& (0+255),0,b
  8747                           
  8748                           ; BSR set to: 0
  8749  0015A2  5188               	movf	___fladd@aexp& (0+255),w,b
  8750  0015A4  E008               	bz	l1070
  8751                           
  8752                           ; BSR set to: 0
  8753  0015A6  2988               	incf	___fladd@aexp& (0+255),w,b
  8754  0015A8  E104               	bnz	l8913
  8755                           
  8756                           ; BSR set to: 0
  8757  0015AA  6B7F               	clrf	___fladd@a& (0+255),b
  8758  0015AC  6B80               	clrf	(___fladd@a+1)& (0+255),b
  8759  0015AE  6B81               	clrf	(___fladd@a+2)& (0+255),b
  8760  0015B0  6B82               	clrf	(___fladd@a+3)& (0+255),b
  8761  0015B2                     l8913:
  8762                           
  8763                           ; BSR set to: 0
  8764  0015B2  8F81               	bsf	(___fladd@a+2)& (0+255),7,b
  8765  0015B4  D003               	goto	L10
  8766  0015B6                     l1070:
  8767                           
  8768                           ; BSR set to: 0
  8769  0015B6  6B7F               	clrf	___fladd@a& (0+255),b
  8770  0015B8  6B80               	clrf	(___fladd@a+1)& (0+255),b
  8771  0015BA  6B81               	clrf	(___fladd@a+2)& (0+255),b
  8772  0015BC                     L10:
  8773  0015BC  6B82               	clrf	(___fladd@a+3)& (0+255),b
  8774                           
  8775                           ; BSR set to: 0
  8776  0015BE  5189               	movf	___fladd@bexp& (0+255),w,b
  8777  0015C0  5D88               	subwf	___fladd@aexp& (0+255),w,b
  8778  0015C2  E222               	bc	l8953
  8779                           
  8780                           ; BSR set to: 0
  8781  0015C4  AD87               	btfss	___fladd@signs& (0+255),6,b
  8782  0015C6  D002               	goto	l8923
  8783                           
  8784                           ; BSR set to: 0
  8785  0015C8  0E80               	movlw	128
  8786  0015CA  1B87               	xorwf	___fladd@signs& (0+255),f,b
  8787  0015CC                     l8923:
  8788                           
  8789                           ; BSR set to: 0
  8790  0015CC  C089  F08A         	movff	___fladd@bexp,___fladd@grs
  8791                           
  8792                           ; BSR set to: 0
  8793  0015D0  C088  F089         	movff	___fladd@aexp,___fladd@bexp
  8794                           
  8795                           ; BSR set to: 0
  8796  0015D4  C08A  F088         	movff	___fladd@grs,___fladd@aexp
  8797                           
  8798                           ; BSR set to: 0
  8799  0015D8  C07B  F08A         	movff	___fladd@b,___fladd@grs
  8800                           
  8801                           ; BSR set to: 0
  8802  0015DC  C07F  F07B         	movff	___fladd@a,___fladd@b
  8803                           
  8804                           ; BSR set to: 0
  8805  0015E0  C08A  F07F         	movff	___fladd@grs,___fladd@a
  8806                           
  8807                           ; BSR set to: 0
  8808  0015E4  C07C  F08A         	movff	___fladd@b+1,___fladd@grs
  8809                           
  8810                           ; BSR set to: 0
  8811  0015E8  C080  F07C         	movff	___fladd@a+1,___fladd@b+1
  8812                           
  8813                           ; BSR set to: 0
  8814  0015EC  C08A  F080         	movff	___fladd@grs,___fladd@a+1
  8815                           
  8816                           ; BSR set to: 0
  8817  0015F0  C07D  F08A         	movff	___fladd@b+2,___fladd@grs
  8818                           
  8819                           ; BSR set to: 0
  8820  0015F4  C081  F07D         	movff	___fladd@a+2,___fladd@b+2
  8821                           
  8822                           ; BSR set to: 0
  8823  0015F8  C08A  F081         	movff	___fladd@grs,___fladd@a+2
  8824                           
  8825                           ; BSR set to: 0
  8826  0015FC  C07E  F08A         	movff	___fladd@b+3,___fladd@grs
  8827                           
  8828                           ; BSR set to: 0
  8829  001600  C082  F07E         	movff	___fladd@a+3,___fladd@b+3
  8830                           
  8831                           ; BSR set to: 0
  8832  001604  C08A  F082         	movff	___fladd@grs,___fladd@a+3
  8833  001608                     l8953:
  8834                           
  8835                           ; BSR set to: 0
  8836  001608  6B8A               	clrf	___fladd@grs& (0+255),b
  8837  00160A  5189               	movf	___fladd@bexp& (0+255),w,b
  8838  00160C  C088  F083         	movff	___fladd@aexp,??___fladd
  8839  001610  6B84               	clrf	(??___fladd+1)& (0+255),b
  8840  001612  5F83               	subwf	??___fladd& (0+255),f,b
  8841  001614  0E00               	movlw	0
  8842  001616  5B84               	subwfb	(??___fladd+1)& (0+255),f,b
  8843  001618  BF84               	btfsc	(??___fladd+1)& (0+255),7,b
  8844  00161A  D015               	goto	l1077
  8845  00161C  5184               	movf	(??___fladd+1)& (0+255),w,b
  8846  00161E  E103               	bnz	u11030
  8847  001620  0E1A               	movlw	26
  8848  001622  5D83               	subwf	??___fladd& (0+255),w,b
  8849  001624  E310               	bnc	l1077
  8850  001626                     u11030:
  8851                           
  8852                           ; BSR set to: 0
  8853  001626  D8C7               	call	PL166	;call to abstracted procedure
  8854  001628  0E01               	movlw	1
  8855  00162A  B4D8               	btfsc	status,2,c
  8856  00162C  0E00               	movlw	0
  8857  00162E  6F8A               	movwf	___fladd@grs& (0+255),b
  8858                           
  8859                           ; BSR set to: 0
  8860  001630  D8AD               	call	PL128	;call to abstracted procedure
  8861                           
  8862                           ; BSR set to: 0
  8863  001632  C088  F089         	movff	___fladd@aexp,___fladd@bexp
  8864  001636  D00A               	goto	u11080
  8865  001638                     l1078:
  8866                           
  8867                           ; BSR set to: 0
  8868  001638  A18A               	btfss	___fladd@grs& (0+255),0,b
  8869  00163A  D002               	goto	l8963
  8870                           
  8871                           ; BSR set to: 0
  8872  00163C  D8B7               	call	PL162	;call to abstracted procedure
  8873  00163E  D002               	goto	l8965
  8874  001640                     l8963:
  8875                           
  8876                           ; BSR set to: 0
  8877  001640  90D8               	bcf	status,0,c
  8878  001642  338A               	rrcf	___fladd@grs& (0+255),f,b
  8879  001644                     l8965:
  8880                           
  8881                           ; BSR set to: 0
  8882                           
  8883                           ; BSR set to: 0
  8884                           
  8885                           ; BSR set to: 0
  8886                           
  8887                           ; BSR set to: 0
  8888  001644  D89A               	call	PL100	;call to abstracted procedure
  8889  001646                     l1077:
  8890                           
  8891                           ; BSR set to: 0
  8892  001646  5188               	movf	___fladd@aexp& (0+255),w,b
  8893  001648  5D89               	subwf	___fladd@bexp& (0+255),w,b
  8894  00164A  E3F6               	bnc	l1078
  8895  00164C                     u11080:
  8896                           
  8897                           ; BSR set to: 0
  8898  00164C  BD87               	btfsc	___fladd@signs& (0+255),6,b
  8899  00164E  D015               	goto	l8995
  8900                           
  8901                           ; BSR set to: 0
  8902  001650  5189               	movf	___fladd@bexp& (0+255),w,b
  8903  001652  E101               	bnz	l8977
  8904                           
  8905                           ; BSR set to: 0
  8906  001654  D0A6               	goto	PL150	;call to abstracted procedure
  8907  001656                     l8977:
  8908                           
  8909                           ; BSR set to: 0
  8910  001656  517F               	movf	___fladd@a& (0+255),w,b
  8911  001658  277B               	addwf	___fladd@b& (0+255),f,b
  8912  00165A  5180               	movf	(___fladd@a+1)& (0+255),w,b
  8913  00165C  237C               	addwfc	(___fladd@b+1)& (0+255),f,b
  8914  00165E  5181               	movf	(___fladd@a+2)& (0+255),w,b
  8915  001660  237D               	addwfc	(___fladd@b+2)& (0+255),f,b
  8916  001662  5182               	movf	(___fladd@a+3)& (0+255),w,b
  8917  001664  237E               	addwfc	(___fladd@b+3)& (0+255),f,b
  8918                           
  8919                           ; BSR set to: 0
  8920  001666  A17E               	btfss	(___fladd@b+3)& (0+255),0,b
  8921  001668  D053               	goto	u11210
  8922                           
  8923                           ; BSR set to: 0
  8924  00166A  A18A               	btfss	___fladd@grs& (0+255),0,b
  8925  00166C  D002               	goto	l8985
  8926                           
  8927                           ; BSR set to: 0
  8928  00166E  D89E               	call	PL162	;call to abstracted procedure
  8929  001670  D002               	goto	l8987
  8930  001672                     l8985:
  8931                           
  8932                           ; BSR set to: 0
  8933  001672  90D8               	bcf	status,0,c
  8934  001674  338A               	rrcf	___fladd@grs& (0+255),f,b
  8935  001676                     l8987:
  8936                           
  8937                           ; BSR set to: 0
  8938                           
  8939                           ; BSR set to: 0
  8940                           
  8941                           ; BSR set to: 0
  8942                           
  8943                           ; BSR set to: 0
  8944  001676  D881               	call	PL100	;call to abstracted procedure
  8945  001678  D04B               	goto	u11210
  8946  00167A                     l8995:
  8947                           
  8948                           ; BSR set to: 0
  8949  00167A  517F               	movf	___fladd@a& (0+255),w,b
  8950  00167C  5D7B               	subwf	___fladd@b& (0+255),w,b
  8951  00167E  5180               	movf	(___fladd@a+1)& (0+255),w,b
  8952  001680  597C               	subwfb	(___fladd@b+1)& (0+255),w,b
  8953  001682  5181               	movf	(___fladd@a+2)& (0+255),w,b
  8954  001684  597D               	subwfb	(___fladd@b+2)& (0+255),w,b
  8955  001686  517E               	movf	(___fladd@b+3)& (0+255),w,b
  8956  001688  0A80               	xorlw	128
  8957  00168A  6F83               	movwf	??___fladd& (0+255),b
  8958  00168C  5182               	movf	(___fladd@a+3)& (0+255),w,b
  8959  00168E  0A80               	xorlw	128
  8960  001690  5983               	subwfb	??___fladd& (0+255),w,b
  8961  001692  E21F               	bc	l9005
  8962                           
  8963                           ; BSR set to: 0
  8964  001694  517B               	movf	___fladd@b& (0+255),w,b
  8965  001696  5D7F               	subwf	___fladd@a& (0+255),w,b
  8966  001698  6F83               	movwf	??___fladd& (0+255),b
  8967  00169A  517C               	movf	(___fladd@b+1)& (0+255),w,b
  8968  00169C  5980               	subwfb	(___fladd@a+1)& (0+255),w,b
  8969  00169E  6F84               	movwf	(??___fladd+1)& (0+255),b
  8970  0016A0  517D               	movf	(___fladd@b+2)& (0+255),w,b
  8971  0016A2  5981               	subwfb	(___fladd@a+2)& (0+255),w,b
  8972  0016A4  6F85               	movwf	(??___fladd+2)& (0+255),b
  8973  0016A6  517E               	movf	(___fladd@b+3)& (0+255),w,b
  8974  0016A8  5982               	subwfb	(___fladd@a+3)& (0+255),w,b
  8975  0016AA  6F86               	movwf	(??___fladd+3)& (0+255),b
  8976  0016AC  0EFF               	movlw	255
  8977  0016AE  2583               	addwf	??___fladd& (0+255),w,b
  8978  0016B0  6F7B               	movwf	___fladd@b& (0+255),b
  8979  0016B2  0EFF               	movlw	255
  8980  0016B4  2184               	addwfc	(??___fladd+1)& (0+255),w,b
  8981  0016B6  6F7C               	movwf	(___fladd@b+1)& (0+255),b
  8982  0016B8  0EFF               	movlw	255
  8983  0016BA  2185               	addwfc	(??___fladd+2)& (0+255),w,b
  8984  0016BC  6F7D               	movwf	(___fladd@b+2)& (0+255),b
  8985  0016BE  0EFF               	movlw	255
  8986  0016C0  2186               	addwfc	(??___fladd+3)& (0+255),w,b
  8987  0016C2  6F7E               	movwf	(___fladd@b+3)& (0+255),b
  8988  0016C4  0E80               	movlw	128
  8989  0016C6  1B87               	xorwf	___fladd@signs& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  0016C8  6D8A               	negf	___fladd@grs& (0+255),b
  8993                           
  8994                           ; BSR set to: 0
  8995  0016CA  518A               	movf	___fladd@grs& (0+255),w,b
  8996  0016CC  E10A               	bnz	l1093
  8997                           
  8998                           ; BSR set to: 0
  8999  0016CE  D863               	call	PL146	;call to abstracted procedure
  9000  0016D0  D008               	goto	l1093
  9001  0016D2                     l9005:
  9002                           
  9003                           ; BSR set to: 0
  9004  0016D2  517F               	movf	___fladd@a& (0+255),w,b
  9005  0016D4  5F7B               	subwf	___fladd@b& (0+255),f,b
  9006  0016D6  5180               	movf	(___fladd@a+1)& (0+255),w,b
  9007  0016D8  5B7C               	subwfb	(___fladd@b+1)& (0+255),f,b
  9008  0016DA  5181               	movf	(___fladd@a+2)& (0+255),w,b
  9009  0016DC  5B7D               	subwfb	(___fladd@b+2)& (0+255),f,b
  9010  0016DE  5182               	movf	(___fladd@a+3)& (0+255),w,b
  9011  0016E0  5B7E               	subwfb	(___fladd@b+3)& (0+255),f,b
  9012  0016E2                     l1093:
  9013                           
  9014                           ; BSR set to: 0
  9015  0016E2  D869               	call	PL166	;call to abstracted procedure
  9016  0016E4  E113               	bnz	l9027
  9017                           
  9018                           ; BSR set to: 0
  9019  0016E6  518A               	movf	___fladd@grs& (0+255),w,b
  9020  0016E8  E111               	bnz	l9027
  9021                           
  9022                           ; BSR set to: 0
  9023  0016EA  D05B               	goto	PL150	;call to abstracted procedure
  9024  0016EC                     l9011:
  9025                           
  9026                           ; BSR set to: 0
  9027  0016EC  90D8               	bcf	status,0,c
  9028  0016EE  377B               	rlcf	___fladd@b& (0+255),f,b
  9029  0016F0  377C               	rlcf	(___fladd@b+1)& (0+255),f,b
  9030  0016F2  377D               	rlcf	(___fladd@b+2)& (0+255),f,b
  9031  0016F4  377E               	rlcf	(___fladd@b+3)& (0+255),f,b
  9032                           
  9033                           ; BSR set to: 0
  9034  0016F6  BF8A               	btfsc	___fladd@grs& (0+255),7,b
  9035                           
  9036                           ; BSR set to: 0
  9037  0016F8  817B               	bsf	___fladd@b& (0+255),0,b
  9038                           
  9039                           ; BSR set to: 0
  9040  0016FA  A18A               	btfss	___fladd@grs& (0+255),0,b
  9041  0016FC  D002               	goto	l9021
  9042                           
  9043                           ; BSR set to: 0
  9044  0016FE  80D8               	bsf	status,0,c
  9045  001700  D001               	goto	L11
  9046  001702                     l9021:
  9047                           
  9048                           ; BSR set to: 0
  9049  001702  90D8               	bcf	status,0,c
  9050  001704                     L11:
  9051  001704  378A               	rlcf	___fladd@grs& (0+255),f,b
  9052                           
  9053                           ; BSR set to: 0
  9054  001706  5189               	movf	___fladd@bexp& (0+255),w,b
  9055  001708  E001               	bz	l9027
  9056                           
  9057                           ; BSR set to: 0
  9058  00170A  0789               	decf	___fladd@bexp& (0+255),f,b
  9059  00170C                     l9027:
  9060                           
  9061                           ; BSR set to: 0
  9062  00170C  AF7D               	btfss	(___fladd@b+2)& (0+255),7,b
  9063  00170E  D7EE               	goto	l9011
  9064  001710                     u11210:
  9065                           
  9066                           ; BSR set to: 0
  9067  001710  6B88               	clrf	___fladd@aexp& (0+255),b
  9068  001712  AF8A               	btfss	___fladd@grs& (0+255),7,b
  9069  001714  D00A               	goto	l1102
  9070                           
  9071                           ; BSR set to: 0
  9072  001716  C08A  F083         	movff	___fladd@grs,??___fladd
  9073  00171A  0E7F               	movlw	127
  9074  00171C  1783               	andwf	??___fladd& (0+255),f,b
  9075  00171E  E003               	bz	l1103
  9076  001720                     u11230:
  9077                           
  9078                           ; BSR set to: 0
  9079  001720  0E01               	movlw	1
  9080  001722  6F88               	movwf	___fladd@aexp& (0+255),b
  9081  001724  D002               	goto	l1102
  9082  001726                     l1103:
  9083                           
  9084                           ; BSR set to: 0
  9085  001726  B17B               	btfsc	___fladd@b& (0+255),0,b
  9086  001728  D7FB               	goto	u11230
  9087  00172A                     l1102:
  9088                           
  9089                           ; BSR set to: 0
  9090  00172A  5188               	movf	___fladd@aexp& (0+255),w,b
  9091  00172C  E00B               	bz	l9043
  9092                           
  9093                           ; BSR set to: 0
  9094  00172E  D833               	call	PL146	;call to abstracted procedure
  9095                           
  9096                           ; BSR set to: 0
  9097  001730  A17E               	btfss	(___fladd@b+3)& (0+255),0,b
  9098  001732  D008               	goto	l9043
  9099                           
  9100                           ; BSR set to: 0
  9101  001734  357E               	rlcf	(___fladd@b+3)& (0+255),w,b
  9102  001736  337E               	rrcf	(___fladd@b+3)& (0+255),f,b
  9103  001738  337D               	rrcf	(___fladd@b+2)& (0+255),f,b
  9104  00173A  337C               	rrcf	(___fladd@b+1)& (0+255),f,b
  9105  00173C  337B               	rrcf	___fladd@b& (0+255),f,b
  9106  00173E  2989               	incf	___fladd@bexp& (0+255),w,b
  9107  001740  E001               	bz	l9043
  9108                           
  9109                           ; BSR set to: 0
  9110  001742  2B89               	incf	___fladd@bexp& (0+255),f,b
  9111  001744                     l9043:
  9112                           
  9113                           ; BSR set to: 0
  9114  001744  2989               	incf	___fladd@bexp& (0+255),w,b
  9115  001746  E002               	bz	u11290
  9116                           
  9117                           ; BSR set to: 0
  9118  001748  5189               	movf	___fladd@bexp& (0+255),w,b
  9119  00174A  E104               	bnz	l1109
  9120  00174C                     u11290:
  9121                           
  9122                           ; BSR set to: 0
  9123  00174C  D81F               	call	PL128	;call to abstracted procedure
  9124                           
  9125                           ; BSR set to: 0
  9126  00174E  5189               	movf	___fladd@bexp& (0+255),w,b
  9127  001750  E101               	bnz	l1109
  9128                           
  9129                           ; BSR set to: 0
  9130  001752  6B87               	clrf	___fladd@signs& (0+255),b
  9131  001754                     l1109:
  9132                           
  9133                           ; BSR set to: 0
  9134  001754  A189               	btfss	___fladd@bexp& (0+255),0,b
  9135  001756  D002               	goto	l9053
  9136                           
  9137                           ; BSR set to: 0
  9138  001758  8F7D               	bsf	(___fladd@b+2)& (0+255),7,b
  9139  00175A  D001               	goto	l9055
  9140  00175C                     l9053:
  9141                           
  9142                           ; BSR set to: 0
  9143  00175C  9F7D               	bcf	(___fladd@b+2)& (0+255),7,b
  9144  00175E                     l9055:
  9145                           
  9146                           ; BSR set to: 0
  9147  00175E  90D8               	bcf	status,0,c
  9148  001760  3189               	rrcf	___fladd@bexp& (0+255),w,b
  9149  001762  6F7E               	movwf	(___fladd@b+3)& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152  001764  BF87               	btfsc	___fladd@signs& (0+255),7,b
  9153                           
  9154                           ; BSR set to: 0
  9155  001766  8F7E               	bsf	(___fladd@b+3)& (0+255),7,b
  9156                           
  9157                           ; BSR set to: 0
  9158  001768  C07B  F07B         	movff	___fladd@b,?___fladd
  9159  00176C  C07C  F07C         	movff	___fladd@b+1,?___fladd+1
  9160  001770  C07D  F07D         	movff	___fladd@b+2,?___fladd+2
  9161  001774  C07E  F07E         	movff	___fladd@b+3,?___fladd+3
  9162                           
  9163                           ; BSR set to: 0
  9164  001778  0012               	return		;funcret
  9165  00177A                     __end_of___fladd:
  9166                           	callstack 0
  9167  00177A                     PL100:
  9168                           	callstack 26
  9169  00177A  B17B               	btfsc	___fladd@b& (0+255),0,b
  9170  00177C  8F8A               	bsf	___fladd@grs& (0+255),7,b
  9171  00177E  357E               	rlcf	(___fladd@b+3)& (0+255),w,b
  9172  001780  337E               	rrcf	(___fladd@b+3)& (0+255),f,b
  9173  001782  337D               	rrcf	(___fladd@b+2)& (0+255),f,b
  9174  001784  337C               	rrcf	(___fladd@b+1)& (0+255),f,b
  9175  001786  337B               	rrcf	___fladd@b& (0+255),f,b
  9176  001788  2B89               	incf	___fladd@bexp& (0+255),f,b
  9177  00178A  0012               	return	
  9178  00178C                     __end_ofPL100:
  9179                           	callstack 0
  9180  00178C                     PL128:
  9181                           	callstack 26
  9182  00178C  6B7B               	clrf	___fladd@b& (0+255),b
  9183  00178E  6B7C               	clrf	(___fladd@b+1)& (0+255),b
  9184  001790  6B7D               	clrf	(___fladd@b+2)& (0+255),b
  9185  001792  6B7E               	clrf	(___fladd@b+3)& (0+255),b
  9186  001794  0012               	return	
  9187  001796                     __end_ofPL128:
  9188                           	callstack 0
  9189  001796                     PL146:
  9190                           	callstack 26
  9191  001796  2B7B               	incf	___fladd@b& (0+255),f,b
  9192  001798  0E00               	movlw	0
  9193  00179A  237C               	addwfc	(___fladd@b+1)& (0+255),f,b
  9194  00179C  237D               	addwfc	(___fladd@b+2)& (0+255),f,b
  9195  00179E  237E               	addwfc	(___fladd@b+3)& (0+255),f,b
  9196  0017A0  0C00               	retlw	0
  9197  0017A2                     __end_ofPL146:
  9198                           	callstack 0
  9199  0017A2                     PL150:
  9200                           	callstack 26
  9201  0017A2  6B7B               	clrf	?___fladd& (0+255),b
  9202  0017A4  6B7C               	clrf	(?___fladd+1)& (0+255),b
  9203  0017A6  6B7D               	clrf	(?___fladd+2)& (0+255),b
  9204  0017A8  6B7E               	clrf	(?___fladd+3)& (0+255),b
  9205  0017AA  0012               	return	
  9206  0017AC                     __end_ofPL150:
  9207                           	callstack 0
  9208  0017AC                     PL162:
  9209                           	callstack 26
  9210  0017AC  90D8               	bcf	status,0,c
  9211  0017AE  318A               	rrcf	___fladd@grs& (0+255),w,b
  9212  0017B0  0901               	iorlw	1
  9213  0017B2  6F8A               	movwf	___fladd@grs& (0+255),b
  9214  0017B4  0012               	return	
  9215  0017B6                     __end_ofPL162:
  9216                           	callstack 0
  9217  0017B6                     PL166:
  9218                           	callstack 26
  9219  0017B6  517B               	movf	___fladd@b& (0+255),w,b
  9220  0017B8  117C               	iorwf	(___fladd@b+1)& (0+255),w,b
  9221  0017BA  117D               	iorwf	(___fladd@b+2)& (0+255),w,b
  9222  0017BC  117E               	iorwf	(___fladd@b+3)& (0+255),w,b
  9223  0017BE  0012               	return	
  9224  0017C0                     __end_ofPL166:
  9225                           	callstack 0
  9226                           
  9227 ;; *************** function ___flneg *****************
  9228 ;; Defined at:
  9229 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flneg.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  f1              4   25[COMRAM] unsigned char 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  4   25[COMRAM] unsigned char 
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, status,0
  9238 ;; Tracked objects:
  9239 ;;		On entry : 3F/1
  9240 ;;		On exit  : 3F/1
  9241 ;;		Unchanged: 3F/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9243 ;;      Params:         4       0       0       0       0       0       0
  9244 ;;      Locals:         0       0       0       0       0       0       0
  9245 ;;      Temps:          0       0       0       0       0       0       0
  9246 ;;      Totals:         4       0       0       0       0       0       0
  9247 ;;Total ram usage:        4 bytes
  9248 ;; Hardware stack levels used: 1
  9249 ;; Hardware stack levels required when called: 3
  9250 ;; This function calls:
  9251 ;;		Nothing
  9252 ;; This function is called by:
  9253 ;;		_efgtoa
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           	psect	text25
  9258  00362E                     __ptext25:
  9259                           	callstack 0
  9260  00362E                     ___flneg:
  9261                           	callstack 23
  9262                           
  9263                           ; BSR set to: 1
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;incstack = 0
  9267  00362E  501A               	movf	___flneg@f1^0,w,c
  9268  003630  101B               	iorwf	(___flneg@f1+1)^0,w,c
  9269  003632  101C               	iorwf	(___flneg@f1+2)^0,w,c
  9270  003634  101D               	iorwf	(___flneg@f1+3)^0,w,c
  9271  003636  E002               	bz	l9457
  9272                           
  9273                           ; BSR set to: 1
  9274  003638  0E80               	movlw	128
  9275  00363A  1A1D               	xorwf	(___flneg@f1+3)^0,f,c
  9276  00363C                     l9457:
  9277                           
  9278                           ; BSR set to: 1
  9279  00363C  C01A  F01A         	movff	___flneg@f1,?___flneg
  9280  003640  C01B  F01B         	movff	___flneg@f1+1,?___flneg+1
  9281  003644  C01C  F01C         	movff	___flneg@f1+2,?___flneg+2
  9282  003648  C01D  F01D         	movff	___flneg@f1+3,?___flneg+3
  9283                           
  9284                           ; BSR set to: 1
  9285  00364C  0012               	return		;funcret
  9286  00364E                     __end_of___flneg:
  9287                           	callstack 0
  9288                           
  9289 ;; *************** function ___flmul *****************
  9290 ;; Defined at:
  9291 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcmul.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  b               4    6[BANK0 ] unsigned char 
  9294 ;;  a               4   10[BANK0 ] unsigned char 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  prod            4   21[BANK0 ] struct .
  9297 ;;  grs             4   17[BANK0 ] unsigned long 
  9298 ;;  temp            2   25[BANK0 ] struct .
  9299 ;;  bexp            1   16[BANK0 ] unsigned char 
  9300 ;;  aexp            1   15[BANK0 ] unsigned char 
  9301 ;;  sign            1   14[BANK0 ] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  4    6[BANK0 ] unsigned char 
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0, prodl, prodh
  9306 ;; Tracked objects:
  9307 ;;		On entry : 3E/0
  9308 ;;		On exit  : 3F/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9311 ;;      Params:         0       8       0       0       0       0       0
  9312 ;;      Locals:         0      13       0       0       0       0       0
  9313 ;;      Temps:          4       0       0       0       0       0       0
  9314 ;;      Totals:         4      21       0       0       0       0       0
  9315 ;;Total ram usage:       25 bytes
  9316 ;; Hardware stack levels used: 1
  9317 ;; Hardware stack levels required when called: 3
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_main
  9322 ;;		_efgtoa
  9323 ;;		_sqrtf
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text26
  9328  0017C0                     __ptext26:
  9329                           	callstack 0
  9330  0017C0                     ___flmul:
  9331                           	callstack 26
  9332                           
  9333                           ; BSR set to: 1
  9334                           ;incstack = 0
  9335  0017C0  0100               	movlb	0	; () banked
  9336  0017C2  5169               	movf	(___flmul@b+3)& (0+255),w,b
  9337  0017C4  0B80               	andlw	128
  9338  0017C6  6F6E               	movwf	___flmul@sign& (0+255),b
  9339  0017C8  5169               	movf	(___flmul@b+3)& (0+255),w,b
  9340  0017CA  2569               	addwf	(___flmul@b+3)& (0+255),w,b
  9341  0017CC  6F70               	movwf	___flmul@bexp& (0+255),b
  9342                           
  9343                           ; BSR set to: 0
  9344  0017CE  BF68               	btfsc	(___flmul@b+2)& (0+255),7,b
  9345                           
  9346                           ; BSR set to: 0
  9347  0017D0  8170               	bsf	___flmul@bexp& (0+255),0,b
  9348                           
  9349                           ; BSR set to: 0
  9350  0017D2  5170               	movf	___flmul@bexp& (0+255),w,b
  9351  0017D4  E005               	bz	l1156
  9352                           
  9353                           ; BSR set to: 0
  9354  0017D6  2970               	incf	___flmul@bexp& (0+255),w,b
  9355  0017D8  E101               	bnz	l9225
  9356                           
  9357                           ; BSR set to: 0
  9358  0017DA  D902               	call	PL170	;call to abstracted procedure
  9359  0017DC                     l9225:
  9360                           
  9361                           ; BSR set to: 0
  9362  0017DC  8F68               	bsf	(___flmul@b+2)& (0+255),7,b
  9363  0017DE  D001               	goto	l9227
  9364  0017E0                     l1156:
  9365                           
  9366                           ; BSR set to: 0
  9367  0017E0  D8FF               	call	PL170	;call to abstracted procedure
  9368  0017E2                     l9227:
  9369                           
  9370                           ; BSR set to: 0
  9371  0017E2  516D               	movf	(___flmul@a+3)& (0+255),w,b
  9372  0017E4  0B80               	andlw	128
  9373  0017E6  1B6E               	xorwf	___flmul@sign& (0+255),f,b
  9374  0017E8  516D               	movf	(___flmul@a+3)& (0+255),w,b
  9375  0017EA  256D               	addwf	(___flmul@a+3)& (0+255),w,b
  9376  0017EC  6F6F               	movwf	___flmul@aexp& (0+255),b
  9377                           
  9378                           ; BSR set to: 0
  9379  0017EE  BF6C               	btfsc	(___flmul@a+2)& (0+255),7,b
  9380                           
  9381                           ; BSR set to: 0
  9382  0017F0  816F               	bsf	___flmul@aexp& (0+255),0,b
  9383                           
  9384                           ; BSR set to: 0
  9385  0017F2  516F               	movf	___flmul@aexp& (0+255),w,b
  9386  0017F4  E005               	bz	l1160
  9387                           
  9388                           ; BSR set to: 0
  9389  0017F6  296F               	incf	___flmul@aexp& (0+255),w,b
  9390  0017F8  E101               	bnz	l9239
  9391                           
  9392                           ; BSR set to: 0
  9393  0017FA  D8ED               	call	PL164	;call to abstracted procedure
  9394  0017FC                     l9239:
  9395                           
  9396                           ; BSR set to: 0
  9397  0017FC  8F6C               	bsf	(___flmul@a+2)& (0+255),7,b
  9398  0017FE  D001               	goto	l9241
  9399  001800                     l1160:
  9400                           
  9401                           ; BSR set to: 0
  9402  001800  D8EA               	call	PL164	;call to abstracted procedure
  9403  001802                     l9241:
  9404                           
  9405                           ; BSR set to: 0
  9406  001802  516F               	movf	___flmul@aexp& (0+255),w,b
  9407  001804  E002               	bz	u11680
  9408                           
  9409                           ; BSR set to: 0
  9410  001806  5170               	movf	___flmul@bexp& (0+255),w,b
  9411  001808  E105               	bnz	l9245
  9412  00180A                     u11680:
  9413                           
  9414                           ; BSR set to: 0
  9415  00180A  6B66               	clrf	?___flmul& (0+255),b
  9416  00180C  6B67               	clrf	(?___flmul+1)& (0+255),b
  9417  00180E  6B68               	clrf	(?___flmul+2)& (0+255),b
  9418  001810  6B69               	clrf	(?___flmul+3)& (0+255),b
  9419  001812  0012               	return	
  9420  001814                     l9245:
  9421                           
  9422                           ; BSR set to: 0
  9423  001814  516C               	movf	(___flmul@a+2)& (0+255),w,b
  9424  001816  0366               	mulwf	___flmul@b& (0+255),b
  9425                           
  9426                           ; BSR set to: 0
  9427  001818  D8B1               	call	PL16	;call to abstracted procedure
  9428  00181A  6F71               	movwf	___flmul@grs& (0+255),b
  9429  00181C  6B72               	clrf	(___flmul@grs+1)& (0+255),b
  9430  00181E  6B73               	clrf	(___flmul@grs+2)& (0+255),b
  9431  001820  6B74               	clrf	(___flmul@grs+3)& (0+255),b
  9432                           
  9433                           ; BSR set to: 0
  9434  001822  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9435  001824  6F75               	movwf	___flmul@prod& (0+255),b
  9436  001826  6B76               	clrf	(___flmul@prod+1)& (0+255),b
  9437  001828  6B77               	clrf	(___flmul@prod+2)& (0+255),b
  9438  00182A  6B78               	clrf	(___flmul@prod+3)& (0+255),b
  9439  00182C  516B               	movf	(___flmul@a+1)& (0+255),w,b
  9440  00182E  0367               	mulwf	(___flmul@b+1)& (0+255),b
  9441                           
  9442                           ; BSR set to: 0
  9443  001830  D8A5               	call	PL16	;call to abstracted procedure
  9444                           
  9445                           ; BSR set to: 0
  9446  001832  D8B2               	call	PL62	;call to abstracted procedure
  9447  001834  516A               	movf	___flmul@a& (0+255),w,b
  9448  001836  0368               	mulwf	(___flmul@b+2)& (0+255),b
  9449                           
  9450                           ; BSR set to: 0
  9451  001838  D8A1               	call	PL16	;call to abstracted procedure
  9452                           
  9453                           ; BSR set to: 0
  9454  00183A  D8AE               	call	PL62	;call to abstracted procedure
  9455                           
  9456                           ; BSR set to: 0
  9457  00183C  D8A5               	call	PL54	;call to abstracted procedure
  9458                           
  9459                           ; BSR set to: 0
  9460  00183E  516A               	movf	___flmul@a& (0+255),w,b
  9461  001840  0367               	mulwf	(___flmul@b+1)& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464  001842  D89C               	call	PL16	;call to abstracted procedure
  9465  001844  D8B5               	call	PL64	;call to abstracted procedure
  9466                           
  9467                           ; BSR set to: 0
  9468  001846  516B               	movf	(___flmul@a+1)& (0+255),w,b
  9469  001848  0366               	mulwf	___flmul@b& (0+255),b
  9470                           
  9471                           ; BSR set to: 0
  9472  00184A  D898               	call	PL16	;call to abstracted procedure
  9473  00184C  D8B1               	call	PL64	;call to abstracted procedure
  9474                           
  9475                           ; BSR set to: 0
  9476  00184E  D89C               	call	PL54	;call to abstracted procedure
  9477  001850  516A               	movf	___flmul@a& (0+255),w,b
  9478  001852  0366               	mulwf	___flmul@b& (0+255),b
  9479                           
  9480                           ; BSR set to: 0
  9481  001854  D893               	call	PL16	;call to abstracted procedure
  9482  001856  D8AC               	call	PL64	;call to abstracted procedure
  9483                           
  9484                           ; BSR set to: 0
  9485  001858  516C               	movf	(___flmul@a+2)& (0+255),w,b
  9486  00185A  0367               	mulwf	(___flmul@b+1)& (0+255),b
  9487  00185C  D88F               	call	PL16	;call to abstracted procedure
  9488  00185E  D8B4               	call	PL124	;call to abstracted procedure
  9489                           
  9490                           ; BSR set to: 0
  9491  001860  516B               	movf	(___flmul@a+1)& (0+255),w,b
  9492  001862  0368               	mulwf	(___flmul@b+2)& (0+255),b
  9493                           
  9494                           ; BSR set to: 0
  9495  001864  D88B               	call	PL16	;call to abstracted procedure
  9496  001866  D8B0               	call	PL124	;call to abstracted procedure
  9497  001868  516C               	movf	(___flmul@a+2)& (0+255),w,b
  9498  00186A  0368               	mulwf	(___flmul@b+2)& (0+255),b
  9499                           
  9500                           ; BSR set to: 0
  9501  00186C  D887               	call	PL16	;call to abstracted procedure
  9502  00186E  6E22               	movwf	??___flmul^0,c
  9503  001870  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9504  001872  6E23               	movwf	(??___flmul+1)^0,c
  9505  001874  6A24               	clrf	(??___flmul+2)^0,c
  9506  001876  6A25               	clrf	(??___flmul+3)^0,c
  9507  001878  C024  F025         	movff	??___flmul+2,??___flmul+3
  9508  00187C  C023  F024         	movff	??___flmul+1,??___flmul+2
  9509  001880  C022  F023         	movff	??___flmul,??___flmul+1
  9510  001884  6A22               	clrf	??___flmul^0,c
  9511  001886  5022               	movf	??___flmul^0,w,c
  9512  001888  2775               	addwf	___flmul@prod& (0+255),f,b
  9513  00188A  5023               	movf	(??___flmul+1)^0,w,c
  9514  00188C  2376               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9515  00188E  5024               	movf	(??___flmul+2)^0,w,c
  9516  001890  2377               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9517  001892  5025               	movf	(??___flmul+3)^0,w,c
  9518  001894  2378               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9519                           
  9520                           ; BSR set to: 0
  9521  001896  5174               	movf	(___flmul@grs+3)& (0+255),w,b
  9522  001898  2775               	addwf	___flmul@prod& (0+255),f,b
  9523  00189A  D891               	call	PL108	;call to abstracted procedure
  9524                           
  9525                           ; BSR set to: 0
  9526  00189C  D875               	call	PL54	;call to abstracted procedure
  9527                           
  9528                           ; BSR set to: 0
  9529  00189E  516F               	movf	___flmul@aexp& (0+255),w,b
  9530  0018A0  C070  F022         	movff	___flmul@bexp,??___flmul
  9531  0018A4  6A23               	clrf	(??___flmul+1)^0,c
  9532  0018A6  2622               	addwf	??___flmul^0,f,c
  9533  0018A8  0E00               	movlw	0
  9534  0018AA  2223               	addwfc	(??___flmul+1)^0,f,c
  9535  0018AC  0E82               	movlw	130
  9536  0018AE  2422               	addwf	??___flmul^0,w,c
  9537  0018B0  6F79               	movwf	___flmul@temp& (0+255),b
  9538  0018B2  0EFF               	movlw	255
  9539  0018B4  2023               	addwfc	(??___flmul+1)^0,w,c
  9540  0018B6  6F7A               	movwf	(___flmul@temp+1)& (0+255),b
  9541  0018B8  D00F               	goto	l9293
  9542  0018BA                     l9287:
  9543                           
  9544                           ; BSR set to: 0
  9545  0018BA  90D8               	bcf	status,0,c
  9546  0018BC  3775               	rlcf	___flmul@prod& (0+255),f,b
  9547  0018BE  3776               	rlcf	(___flmul@prod+1)& (0+255),f,b
  9548  0018C0  3777               	rlcf	(___flmul@prod+2)& (0+255),f,b
  9549  0018C2  3778               	rlcf	(___flmul@prod+3)& (0+255),f,b
  9550                           
  9551                           ; BSR set to: 0
  9552  0018C4  BF74               	btfsc	(___flmul@grs+3)& (0+255),7,b
  9553                           
  9554                           ; BSR set to: 0
  9555  0018C6  8175               	bsf	___flmul@prod& (0+255),0,b
  9556                           
  9557                           ; BSR set to: 0
  9558  0018C8  90D8               	bcf	status,0,c
  9559  0018CA  3771               	rlcf	___flmul@grs& (0+255),f,b
  9560  0018CC  3772               	rlcf	(___flmul@grs+1)& (0+255),f,b
  9561  0018CE  3773               	rlcf	(___flmul@grs+2)& (0+255),f,b
  9562  0018D0  3774               	rlcf	(___flmul@grs+3)& (0+255),f,b
  9563  0018D2  0779               	decf	___flmul@temp& (0+255),f,b
  9564  0018D4  A0D8               	btfss	status,0,c
  9565  0018D6  077A               	decf	(___flmul@temp+1)& (0+255),f,b
  9566  0018D8                     l9293:
  9567                           
  9568                           ; BSR set to: 0
  9569  0018D8  AF77               	btfss	(___flmul@prod+2)& (0+255),7,b
  9570  0018DA  D7EF               	goto	l9287
  9571                           
  9572                           ; BSR set to: 0
  9573  0018DC  6B6F               	clrf	___flmul@aexp& (0+255),b
  9574  0018DE  AF74               	btfss	(___flmul@grs+3)& (0+255),7,b
  9575  0018E0  D013               	goto	l1171
  9576                           
  9577                           ; BSR set to: 0
  9578  0018E2  5171               	movf	___flmul@grs& (0+255),w,b
  9579  0018E4  6E22               	movwf	??___flmul^0,c
  9580  0018E6  5172               	movf	(___flmul@grs+1)& (0+255),w,b
  9581  0018E8  6E23               	movwf	(??___flmul+1)^0,c
  9582  0018EA  5173               	movf	(___flmul@grs+2)& (0+255),w,b
  9583  0018EC  6E24               	movwf	(??___flmul+2)^0,c
  9584  0018EE  0E7F               	movlw	127
  9585  0018F0  1574               	andwf	(___flmul@grs+3)& (0+255),w,b
  9586  0018F2  6E25               	movwf	(??___flmul+3)^0,c
  9587  0018F4  5022               	movf	??___flmul^0,w,c
  9588  0018F6  1023               	iorwf	(??___flmul+1)^0,w,c
  9589  0018F8  1024               	iorwf	(??___flmul+2)^0,w,c
  9590  0018FA  1025               	iorwf	(??___flmul+3)^0,w,c
  9591  0018FC  E003               	bz	l1172
  9592  0018FE                     u11720:
  9593                           
  9594                           ; BSR set to: 0
  9595  0018FE  0E01               	movlw	1
  9596  001900  6F6F               	movwf	___flmul@aexp& (0+255),b
  9597  001902  D002               	goto	l1171
  9598  001904                     l1172:
  9599                           
  9600                           ; BSR set to: 0
  9601  001904  B175               	btfsc	___flmul@prod& (0+255),0,b
  9602  001906  D7FB               	goto	u11720
  9603  001908                     l1171:
  9604                           
  9605                           ; BSR set to: 0
  9606  001908  516F               	movf	___flmul@aexp& (0+255),w,b
  9607  00190A  E00B               	bz	l9309
  9608                           
  9609                           ; BSR set to: 0
  9610  00190C  2B75               	incf	___flmul@prod& (0+255),f,b
  9611  00190E  D857               	call	PL108	;call to abstracted procedure
  9612                           
  9613                           ; BSR set to: 0
  9614  001910  A178               	btfss	(___flmul@prod+3)& (0+255),0,b
  9615  001912  D007               	goto	l9309
  9616                           
  9617                           ; BSR set to: 0
  9618  001914  3578               	rlcf	(___flmul@prod+3)& (0+255),w,b
  9619  001916  3378               	rrcf	(___flmul@prod+3)& (0+255),f,b
  9620  001918  3377               	rrcf	(___flmul@prod+2)& (0+255),f,b
  9621  00191A  3376               	rrcf	(___flmul@prod+1)& (0+255),f,b
  9622  00191C  3375               	rrcf	___flmul@prod& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  00191E  4B79               	infsnz	___flmul@temp& (0+255),f,b
  9626  001920  2B7A               	incf	(___flmul@temp+1)& (0+255),f,b
  9627  001922                     l9309:
  9628                           
  9629                           ; BSR set to: 0
  9630  001922  BF7A               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9631  001924  D00A               	goto	l9313
  9632  001926  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9633  001928  E102               	bnz	u11760
  9634  00192A  2979               	incf	___flmul@temp& (0+255),w,b
  9635  00192C  E306               	bnc	l9313
  9636  00192E                     u11760:
  9637                           
  9638                           ; BSR set to: 0
  9639  00192E  6B75               	clrf	___flmul@prod& (0+255),b
  9640  001930  6B76               	clrf	(___flmul@prod+1)& (0+255),b
  9641  001932  0E80               	movlw	128
  9642  001934  6F77               	movwf	(___flmul@prod+2)& (0+255),b
  9643  001936  0E7F               	movlw	127
  9644  001938  D015               	goto	L12
  9645  00193A                     l9313:
  9646                           
  9647                           ; BSR set to: 0
  9648  00193A  BF7A               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9649  00193C  D004               	goto	u11770
  9650  00193E  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9651  001940  E108               	bnz	l1179
  9652  001942  0579               	decf	___flmul@temp& (0+255),w,b
  9653  001944  E206               	bc	l1179
  9654  001946                     u11770:
  9655                           
  9656                           ; BSR set to: 0
  9657  001946  6B75               	clrf	___flmul@prod& (0+255),b
  9658  001948  6B76               	clrf	(___flmul@prod+1)& (0+255),b
  9659  00194A  6B77               	clrf	(___flmul@prod+2)& (0+255),b
  9660  00194C  6B78               	clrf	(___flmul@prod+3)& (0+255),b
  9661  00194E  6B6E               	clrf	___flmul@sign& (0+255),b
  9662  001950  D00A               	goto	l9325
  9663  001952                     l1179:
  9664                           
  9665                           ; BSR set to: 0
  9666  001952  C079  F070         	movff	___flmul@temp,___flmul@bexp
  9667                           
  9668                           ; BSR set to: 0
  9669  001956  0E7F               	movlw	127
  9670  001958  1777               	andwf	(___flmul@prod+2)& (0+255),f,b
  9671  00195A  6B78               	clrf	(___flmul@prod+3)& (0+255),b
  9672                           
  9673                           ; BSR set to: 0
  9674  00195C  B170               	btfsc	___flmul@bexp& (0+255),0,b
  9675                           
  9676                           ; BSR set to: 0
  9677  00195E  8F77               	bsf	(___flmul@prod+2)& (0+255),7,b
  9678                           
  9679                           ; BSR set to: 0
  9680  001960  90D8               	bcf	status,0,c
  9681  001962  3170               	rrcf	___flmul@bexp& (0+255),w,b
  9682  001964                     L12:
  9683  001964  6F78               	movwf	(___flmul@prod+3)& (0+255),b
  9684  001966                     l9325:
  9685                           
  9686                           ; BSR set to: 0
  9687  001966  516E               	movf	___flmul@sign& (0+255),w,b
  9688  001968  1378               	iorwf	(___flmul@prod+3)& (0+255),f,b
  9689                           
  9690                           ; BSR set to: 0
  9691  00196A  C075  F066         	movff	___flmul@prod,?___flmul
  9692  00196E  C076  F067         	movff	___flmul@prod+1,?___flmul+1
  9693  001972  C077  F068         	movff	___flmul@prod+2,?___flmul+2
  9694  001976  C078  F069         	movff	___flmul@prod+3,?___flmul+3
  9695                           
  9696                           ; BSR set to: 0
  9697  00197A  0012               	return		;funcret
  9698  00197C                     __end_of___flmul:
  9699                           	callstack 0
  9700  00197C                     PL16:
  9701                           	callstack 26
  9702  00197C  CFF3 F079          	movff	prodl,___flmul@temp
  9703  001980  CFF4 F07A          	movff	prodh,___flmul@temp+1
  9704  001984  5179               	movf	___flmul@temp& (0+255),w,b
  9705  001986  0012               	return	
  9706  001988                     __end_ofPL16:
  9707                           	callstack 0
  9708  001988                     PL54:
  9709                           	callstack 26
  9710  001988  C073  F074         	movff	___flmul@grs+2,___flmul@grs+3
  9711  00198C  C072  F073         	movff	___flmul@grs+1,___flmul@grs+2
  9712  001990  C071  F072         	movff	___flmul@grs,___flmul@grs+1
  9713  001994  6B71               	clrf	___flmul@grs& (0+255),b
  9714  001996  0012               	return	
  9715  001998                     __end_ofPL54:
  9716                           	callstack 0
  9717  001998                     PL62:
  9718                           	callstack 26
  9719  001998  2771               	addwf	___flmul@grs& (0+255),f,b
  9720  00199A  0E00               	movlw	0
  9721  00199C  2372               	addwfc	(___flmul@grs+1)& (0+255),f,b
  9722  00199E  2373               	addwfc	(___flmul@grs+2)& (0+255),f,b
  9723  0019A0  2374               	addwfc	(___flmul@grs+3)& (0+255),f,b
  9724  0019A2  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9725  0019A4  2775               	addwf	___flmul@prod& (0+255),f,b
  9726  0019A6  0E00               	movlw	0
  9727  0019A8  2376               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9728  0019AA  2377               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9729  0019AC  2378               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9730  0019AE  0C00               	retlw	0
  9731  0019B0                     __end_ofPL62:
  9732                           	callstack 0
  9733  0019B0                     PL64:
  9734                           	callstack 26
  9735  0019B0  2771               	addwf	___flmul@grs& (0+255),f,b
  9736  0019B2  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9737  0019B4  2372               	addwfc	(___flmul@grs+1)& (0+255),f,b
  9738  0019B6  0E00               	movlw	0
  9739  0019B8  2373               	addwfc	(___flmul@grs+2)& (0+255),f,b
  9740  0019BA  2374               	addwfc	(___flmul@grs+3)& (0+255),f,b
  9741  0019BC  0C00               	retlw	0
  9742  0019BE                     __end_ofPL64:
  9743                           	callstack 0
  9744  0019BE                     PL108:
  9745                           	callstack 26
  9746  0019BE  0E00               	movlw	0
  9747  0019C0  2376               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9748  0019C2  2377               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9749  0019C4  2378               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9750  0019C6  0C00               	retlw	0
  9751  0019C8                     __end_ofPL108:
  9752                           	callstack 0
  9753  0019C8                     PL124:
  9754                           	callstack 26
  9755  0019C8  2775               	addwf	___flmul@prod& (0+255),f,b
  9756  0019CA  517A               	movf	(___flmul@temp+1)& (0+255),w,b
  9757  0019CC  2376               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9758  0019CE  0E00               	movlw	0
  9759  0019D0  2377               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9760  0019D2  2378               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9761  0019D4  0C00               	retlw	0
  9762  0019D6                     __end_ofPL124:
  9763                           	callstack 0
  9764  0019D6                     PL164:
  9765                           	callstack 26
  9766  0019D6  6B6A               	clrf	___flmul@a& (0+255),b
  9767  0019D8  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  9768  0019DA  6B6C               	clrf	(___flmul@a+2)& (0+255),b
  9769  0019DC  6B6D               	clrf	(___flmul@a+3)& (0+255),b
  9770  0019DE  0012               	return	
  9771  0019E0                     __end_ofPL164:
  9772                           	callstack 0
  9773  0019E0                     PL170:
  9774                           	callstack 26
  9775  0019E0  6B66               	clrf	___flmul@b& (0+255),b
  9776  0019E2  6B67               	clrf	(___flmul@b+1)& (0+255),b
  9777  0019E4  6B68               	clrf	(___flmul@b+2)& (0+255),b
  9778  0019E6  6B69               	clrf	(___flmul@b+3)& (0+255),b
  9779  0019E8  0012               	return	
  9780  0019EA                     __end_ofPL170:
  9781                           	callstack 0
  9782                           
  9783 ;; *************** function ___flge *****************
  9784 ;; Defined at:
  9785 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\flge.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;  ff1             4   27[BANK0 ] unsigned char 
  9788 ;;  ff2             4   31[BANK0 ] unsigned char 
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;		None               void
  9793 ;; Registers used:
  9794 ;;		wreg, status,2, status,0
  9795 ;; Tracked objects:
  9796 ;;		On entry : 3E/0
  9797 ;;		On exit  : 3F/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9800 ;;      Params:         0       8       0       0       0       0       0
  9801 ;;      Locals:         0       0       0       0       0       0       0
  9802 ;;      Temps:          0       4       0       0       0       0       0
  9803 ;;      Totals:         0      12       0       0       0       0       0
  9804 ;;Total ram usage:       12 bytes
  9805 ;; Hardware stack levels used: 1
  9806 ;; Hardware stack levels required when called: 3
  9807 ;; This function calls:
  9808 ;;		Nothing
  9809 ;; This function is called by:
  9810 ;;		_efgtoa
  9811 ;;		_sqrtf
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           	psect	text27
  9816  002CAC                     __ptext27:
  9817                           	callstack 0
  9818  002CAC                     ___flge:
  9819                           	callstack 26
  9820                           
  9821                           ; BSR set to: 0
  9822                           ;incstack = 0
  9823  002CAC  0100               	movlb	0	; () banked
  9824  002CAE  6B83               	clrf	??___flge& (0+255),b
  9825  002CB0  6B84               	clrf	(??___flge+1)& (0+255),b
  9826  002CB2  0E80               	movlw	128
  9827  002CB4  157D               	andwf	(___flge@ff1+2)& (0+255),w,b
  9828  002CB6  6F85               	movwf	(??___flge+2)& (0+255),b
  9829  002CB8  0E7F               	movlw	127
  9830  002CBA  157E               	andwf	(___flge@ff1+3)& (0+255),w,b
  9831  002CBC  D838               	call	PL154	;call to abstracted procedure
  9832  002CBE  E104               	bnz	l9437
  9833                           
  9834                           ; BSR set to: 0
  9835  002CC0  6B7B               	clrf	___flge@ff1& (0+255),b
  9836  002CC2  6B7C               	clrf	(___flge@ff1+1)& (0+255),b
  9837  002CC4  6B7D               	clrf	(___flge@ff1+2)& (0+255),b
  9838  002CC6  6B7E               	clrf	(___flge@ff1+3)& (0+255),b
  9839  002CC8                     l9437:
  9840                           
  9841                           ; BSR set to: 0
  9842  002CC8  6B83               	clrf	??___flge& (0+255),b
  9843  002CCA  6B84               	clrf	(??___flge+1)& (0+255),b
  9844  002CCC  0E80               	movlw	128
  9845  002CCE  1581               	andwf	(___flge@ff2+2)& (0+255),w,b
  9846  002CD0  6F85               	movwf	(??___flge+2)& (0+255),b
  9847  002CD2  0E7F               	movlw	127
  9848  002CD4  1582               	andwf	(___flge@ff2+3)& (0+255),w,b
  9849  002CD6  D82B               	call	PL154	;call to abstracted procedure
  9850  002CD8  E104               	bnz	l811
  9851                           
  9852                           ; BSR set to: 0
  9853  002CDA  6B7F               	clrf	___flge@ff2& (0+255),b
  9854  002CDC  6B80               	clrf	(___flge@ff2+1)& (0+255),b
  9855  002CDE  6B81               	clrf	(___flge@ff2+2)& (0+255),b
  9856  002CE0  6B82               	clrf	(___flge@ff2+3)& (0+255),b
  9857  002CE2                     l811:
  9858                           
  9859                           ; BSR set to: 0
  9860  002CE2  AF7E               	btfss	(___flge@ff1+3)& (0+255),7,b
  9861  002CE4  D009               	goto	l9443
  9862                           
  9863                           ; BSR set to: 0
  9864  002CE6  6D7B               	negf	___flge@ff1& (0+255),b
  9865  002CE8  1F7C               	comf	(___flge@ff1+1)& (0+255),f,b
  9866  002CEA  B0D8               	btfsc	status,0,c
  9867  002CEC  2B7C               	incf	(___flge@ff1+1)& (0+255),f,b
  9868  002CEE  1F7D               	comf	(___flge@ff1+2)& (0+255),f,b
  9869  002CF0  B0D8               	btfsc	status,0,c
  9870  002CF2  2B7D               	incf	(___flge@ff1+2)& (0+255),f,b
  9871  002CF4  0E80               	movlw	128
  9872  002CF6  577E               	subfwb	(___flge@ff1+3)& (0+255),f,b
  9873  002CF8                     l9443:
  9874                           
  9875                           ; BSR set to: 0
  9876  002CF8  AF82               	btfss	(___flge@ff2+3)& (0+255),7,b
  9877  002CFA  D009               	goto	l813
  9878                           
  9879                           ; BSR set to: 0
  9880  002CFC  6D7F               	negf	___flge@ff2& (0+255),b
  9881  002CFE  1F80               	comf	(___flge@ff2+1)& (0+255),f,b
  9882  002D00  B0D8               	btfsc	status,0,c
  9883  002D02  2B80               	incf	(___flge@ff2+1)& (0+255),f,b
  9884  002D04  1F81               	comf	(___flge@ff2+2)& (0+255),f,b
  9885  002D06  B0D8               	btfsc	status,0,c
  9886  002D08  2B81               	incf	(___flge@ff2+2)& (0+255),f,b
  9887  002D0A  0E80               	movlw	128
  9888  002D0C  5782               	subfwb	(___flge@ff2+3)& (0+255),f,b
  9889  002D0E                     l813:
  9890                           
  9891                           ; BSR set to: 0
  9892  002D0E  0E80               	movlw	128
  9893  002D10  1B7E               	xorwf	(___flge@ff1+3)& (0+255),f,b
  9894  002D12  1B82               	xorwf	(___flge@ff2+3)& (0+255),f,b
  9895  002D14  517F               	movf	___flge@ff2& (0+255),w,b
  9896  002D16  5D7B               	subwf	___flge@ff1& (0+255),w,b
  9897  002D18  5180               	movf	(___flge@ff2+1)& (0+255),w,b
  9898  002D1A  597C               	subwfb	(___flge@ff1+1)& (0+255),w,b
  9899  002D1C  5181               	movf	(___flge@ff2+2)& (0+255),w,b
  9900  002D1E  597D               	subwfb	(___flge@ff1+2)& (0+255),w,b
  9901  002D20  5182               	movf	(___flge@ff2+3)& (0+255),w,b
  9902  002D22  597E               	subwfb	(___flge@ff1+3)& (0+255),w,b
  9903  002D24  E202               	bc	l9449
  9904                           
  9905                           ; BSR set to: 0
  9906  002D26  90D8               	bcf	status,0,c
  9907  002D28  0012               	return	
  9908  002D2A                     l9449:
  9909                           
  9910                           ; BSR set to: 0
  9911  002D2A  80D8               	bsf	status,0,c
  9912                           
  9913                           ; BSR set to: 0
  9914  002D2C  0012               	return		;funcret
  9915  002D2E                     __end_of___flge:
  9916                           	callstack 0
  9917  002D2E                     PL154:
  9918                           	callstack 26
  9919  002D2E  6F86               	movwf	(??___flge+3)& (0+255),b
  9920  002D30  5183               	movf	??___flge& (0+255),w,b
  9921  002D32  1184               	iorwf	(??___flge+1)& (0+255),w,b
  9922  002D34  1185               	iorwf	(??___flge+2)& (0+255),w,b
  9923  002D36  1186               	iorwf	(??___flge+3)& (0+255),w,b
  9924  002D38  0012               	return	
  9925  002D3A                     __end_ofPL154:
  9926                           	callstack 0
  9927                           
  9928 ;; *************** function ___fleq *****************
  9929 ;; Defined at:
  9930 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fleq.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  ff1             4   25[COMRAM] unsigned char 
  9933 ;;  ff2             4   29[COMRAM] unsigned char 
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;		None               void
  9938 ;; Registers used:
  9939 ;;		wreg, status,2, status,0
  9940 ;; Tracked objects:
  9941 ;;		On entry : 3E/1
  9942 ;;		On exit  : 3E/0
  9943 ;;		Unchanged: 3E/0
  9944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9945 ;;      Params:         8       0       0       0       0       0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0
  9947 ;;      Temps:          4       0       0       0       0       0       0
  9948 ;;      Totals:        12       0       0       0       0       0       0
  9949 ;;Total ram usage:       12 bytes
  9950 ;; Hardware stack levels used: 1
  9951 ;; Hardware stack levels required when called: 3
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_efgtoa
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           	psect	text28
  9960  003082                     __ptext28:
  9961                           	callstack 0
  9962  003082                     ___fleq:
  9963                           	callstack 23
  9964                           
  9965                           ; BSR set to: 0
  9966                           ;incstack = 0
  9967  003082  6A22               	clrf	??___fleq^0,c
  9968  003084  6A23               	clrf	(??___fleq+1)^0,c
  9969  003086  0E80               	movlw	128
  9970  003088  141C               	andwf	(___fleq@ff1+2)^0,w,c
  9971  00308A  6E24               	movwf	(??___fleq+2)^0,c
  9972  00308C  0E7F               	movlw	127
  9973  00308E  141D               	andwf	(___fleq@ff1+3)^0,w,c
  9974  003090  D820               	call	PL156	;call to abstracted procedure
  9975  003092  E104               	bnz	l9421
  9976  003094  6A1A               	clrf	___fleq@ff1^0,c
  9977  003096  6A1B               	clrf	(___fleq@ff1+1)^0,c
  9978  003098  6A1C               	clrf	(___fleq@ff1+2)^0,c
  9979  00309A  6A1D               	clrf	(___fleq@ff1+3)^0,c
  9980  00309C                     l9421:
  9981  00309C  6A22               	clrf	??___fleq^0,c
  9982  00309E  6A23               	clrf	(??___fleq+1)^0,c
  9983  0030A0  0E80               	movlw	128
  9984  0030A2  1420               	andwf	(___fleq@ff2+2)^0,w,c
  9985  0030A4  6E24               	movwf	(??___fleq+2)^0,c
  9986  0030A6  0E7F               	movlw	127
  9987  0030A8  1421               	andwf	(___fleq@ff2+3)^0,w,c
  9988  0030AA  D813               	call	PL156	;call to abstracted procedure
  9989  0030AC  E102               	bnz	l9425
  9990  0030AE  ECEE  F003         	call	PL174	;call to abstracted procedure
  9991  0030B2                     l9425:
  9992  0030B2  501E               	movf	___fleq@ff2^0,w,c
  9993  0030B4  181A               	xorwf	___fleq@ff1^0,w,c
  9994  0030B6  E109               	bnz	u11930
  9995  0030B8  501F               	movf	(___fleq@ff2+1)^0,w,c
  9996  0030BA  181B               	xorwf	(___fleq@ff1+1)^0,w,c
  9997  0030BC  E106               	bnz	u11930
  9998  0030BE  5020               	movf	(___fleq@ff2+2)^0,w,c
  9999  0030C0  181C               	xorwf	(___fleq@ff1+2)^0,w,c
 10000  0030C2  E103               	bnz	u11930
 10001  0030C4  5021               	movf	(___fleq@ff2+3)^0,w,c
 10002  0030C6  181D               	xorwf	(___fleq@ff1+3)^0,w,c
 10003  0030C8  E002               	bz	l9429
 10004  0030CA                     u11930:
 10005  0030CA  90D8               	bcf	status,0,c
 10006  0030CC  0012               	return	
 10007  0030CE                     l9429:
 10008  0030CE  80D8               	bsf	status,0,c
 10009  0030D0  0012               	return		;funcret
 10010  0030D2                     __end_of___fleq:
 10011                           	callstack 0
 10012  0030D2                     PL156:
 10013                           	callstack 23
 10014  0030D2  6E25               	movwf	(??___fleq+3)^0,c
 10015  0030D4  5022               	movf	??___fleq^0,w,c
 10016  0030D6  1023               	iorwf	(??___fleq+1)^0,w,c
 10017  0030D8  1024               	iorwf	(??___fleq+2)^0,w,c
 10018  0030DA  1025               	iorwf	(??___fleq+3)^0,w,c
 10019  0030DC  0012               	return	
 10020  0030DE                     __end_ofPL156:
 10021                           	callstack 0
 10022                           
 10023 ;; *************** function ___fldiv *****************
 10024 ;; Defined at:
 10025 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  b               4    6[BANK0 ] unsigned char 
 10028 ;;  a               4   10[BANK0 ] unsigned char 
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;  grs             4   21[BANK0 ] unsigned long 
 10031 ;;  rem             4   14[BANK0 ] unsigned long 
 10032 ;;  new_exp         2   19[BANK0 ] short 
 10033 ;;  aexp            1   26[BANK0 ] unsigned char 
 10034 ;;  bexp            1   25[BANK0 ] unsigned char 
 10035 ;;  sign            1   18[BANK0 ] unsigned char 
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  4    6[BANK0 ] unsigned char 
 10038 ;; Registers used:
 10039 ;;		wreg, status,2, status,0
 10040 ;; Tracked objects:
 10041 ;;		On entry : 3E/0
 10042 ;;		On exit  : 3F/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10045 ;;      Params:         0       8       0       0       0       0       0
 10046 ;;      Locals:         0      13       0       0       0       0       0
 10047 ;;      Temps:          4       0       0       0       0       0       0
 10048 ;;      Totals:         4      21       0       0       0       0       0
 10049 ;;Total ram usage:       25 bytes
 10050 ;; Hardware stack levels used: 1
 10051 ;; Hardware stack levels required when called: 3
 10052 ;; This function calls:
 10053 ;;		Nothing
 10054 ;; This function is called by:
 10055 ;;		_main
 10056 ;;		_efgtoa
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text29
 10061  001BB6                     __ptext29:
 10062                           	callstack 0
 10063  001BB6                     ___fldiv:
 10064                           	callstack 23
 10065                           
 10066                           ;incstack = 0
 10067  001BB6  0100               	movlb	0	; () banked
 10068  001BB8  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 10069  001BBA  0B80               	andlw	128
 10070  001BBC  6F72               	movwf	___fldiv@sign& (0+255),b
 10071  001BBE  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 10072  001BC0  2569               	addwf	(___fldiv@b+3)& (0+255),w,b
 10073  001BC2  6F79               	movwf	___fldiv@bexp& (0+255),b
 10074                           
 10075                           ; BSR set to: 0
 10076  001BC4  BF68               	btfsc	(___fldiv@b+2)& (0+255),7,b
 10077                           
 10078                           ; BSR set to: 0
 10079  001BC6  8179               	bsf	___fldiv@bexp& (0+255),0,b
 10080                           
 10081                           ; BSR set to: 0
 10082  001BC8  5179               	movf	___fldiv@bexp& (0+255),w,b
 10083  001BCA  E005               	bz	l1122
 10084                           
 10085                           ; BSR set to: 0
 10086  001BCC  2979               	incf	___fldiv@bexp& (0+255),w,b
 10087  001BCE  E101               	bnz	l9105
 10088                           
 10089                           ; BSR set to: 0
 10090  001BD0  D8D0               	call	PL72	;call to abstracted procedure
 10091  001BD2                     l9105:
 10092                           
 10093                           ; BSR set to: 0
 10094  001BD2  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 10095  001BD4  D003               	goto	L13
 10096  001BD6                     l1122:
 10097                           
 10098                           ; BSR set to: 0
 10099  001BD6  6B66               	clrf	___fldiv@b& (0+255),b
 10100  001BD8  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 10101  001BDA  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 10102  001BDC                     L13:
 10103  001BDC  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 10104                           
 10105                           ; BSR set to: 0
 10106  001BDE  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 10107  001BE0  0B80               	andlw	128
 10108  001BE2  1B72               	xorwf	___fldiv@sign& (0+255),f,b
 10109  001BE4  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 10110  001BE6  256D               	addwf	(___fldiv@a+3)& (0+255),w,b
 10111  001BE8  6F7A               	movwf	___fldiv@aexp& (0+255),b
 10112                           
 10113                           ; BSR set to: 0
 10114  001BEA  BF6C               	btfsc	(___fldiv@a+2)& (0+255),7,b
 10115                           
 10116                           ; BSR set to: 0
 10117  001BEC  817A               	bsf	___fldiv@aexp& (0+255),0,b
 10118                           
 10119                           ; BSR set to: 0
 10120  001BEE  517A               	movf	___fldiv@aexp& (0+255),w,b
 10121  001BF0  E008               	bz	l1126
 10122                           
 10123                           ; BSR set to: 0
 10124  001BF2  297A               	incf	___fldiv@aexp& (0+255),w,b
 10125  001BF4  E104               	bnz	l9121
 10126                           
 10127                           ; BSR set to: 0
 10128  001BF6  6B6A               	clrf	___fldiv@a& (0+255),b
 10129  001BF8  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 10130  001BFA  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 10131  001BFC  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 10132  001BFE                     l9121:
 10133                           
 10134                           ; BSR set to: 0
 10135  001BFE  8F6C               	bsf	(___fldiv@a+2)& (0+255),7,b
 10136  001C00  D003               	goto	L14
 10137  001C02                     l1126:
 10138                           
 10139                           ; BSR set to: 0
 10140  001C02  6B6A               	clrf	___fldiv@a& (0+255),b
 10141  001C04  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 10142  001C06  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 10143  001C08                     L14:
 10144  001C08  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 10145                           
 10146                           ; BSR set to: 0
 10147  001C0A  516A               	movf	___fldiv@a& (0+255),w,b
 10148  001C0C  116B               	iorwf	(___fldiv@a+1)& (0+255),w,b
 10149  001C0E  116C               	iorwf	(___fldiv@a+2)& (0+255),w,b
 10150  001C10  116D               	iorwf	(___fldiv@a+3)& (0+255),w,b
 10151  001C12  E110               	bnz	l9135
 10152                           
 10153                           ; BSR set to: 0
 10154  001C14  D8AE               	call	PL72	;call to abstracted procedure
 10155                           
 10156                           ; BSR set to: 0
 10157  001C16  0E80               	movlw	128
 10158  001C18  1368               	iorwf	(___fldiv@b+2)& (0+255),f,b
 10159  001C1A  0E7F               	movlw	127
 10160  001C1C  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 10161  001C1E  5172               	movf	___fldiv@sign& (0+255),w,b
 10162  001C20  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 10163                           
 10164                           ; BSR set to: 0
 10165  001C22  C066  F066         	movff	___fldiv@b,?___fldiv
 10166  001C26  C067  F067         	movff	___fldiv@b+1,?___fldiv+1
 10167  001C2A  C068  F068         	movff	___fldiv@b+2,?___fldiv+2
 10168  001C2E  C069  F069         	movff	___fldiv@b+3,?___fldiv+3
 10169  001C32  0012               	return	
 10170  001C34                     l9135:
 10171                           
 10172                           ; BSR set to: 0
 10173  001C34  5179               	movf	___fldiv@bexp& (0+255),w,b
 10174  001C36  E105               	bnz	l9139
 10175                           
 10176                           ; BSR set to: 0
 10177  001C38  6B66               	clrf	?___fldiv& (0+255),b
 10178  001C3A  6B67               	clrf	(?___fldiv+1)& (0+255),b
 10179  001C3C  6B68               	clrf	(?___fldiv+2)& (0+255),b
 10180  001C3E  6B69               	clrf	(?___fldiv+3)& (0+255),b
 10181  001C40  0012               	return	
 10182  001C42                     l9139:
 10183                           
 10184                           ; BSR set to: 0
 10185  001C42  517A               	movf	___fldiv@aexp& (0+255),w,b
 10186  001C44  C079  F022         	movff	___fldiv@bexp,??___fldiv
 10187  001C48  6A23               	clrf	(??___fldiv+1)^0,c
 10188  001C4A  5E22               	subwf	??___fldiv^0,f,c
 10189  001C4C  0E00               	movlw	0
 10190  001C4E  5A23               	subwfb	(??___fldiv+1)^0,f,c
 10191  001C50  0E7F               	movlw	127
 10192  001C52  2422               	addwf	??___fldiv^0,w,c
 10193  001C54  6F73               	movwf	___fldiv@new_exp& (0+255),b
 10194  001C56  0E00               	movlw	0
 10195  001C58  2023               	addwfc	(??___fldiv+1)^0,w,c
 10196  001C5A  6F74               	movwf	(___fldiv@new_exp+1)& (0+255),b
 10197                           
 10198                           ; BSR set to: 0
 10199  001C5C  C066  F06E         	movff	___fldiv@b,___fldiv@rem
 10200  001C60  C067  F06F         	movff	___fldiv@b+1,___fldiv@rem+1
 10201  001C64  C068  F070         	movff	___fldiv@b+2,___fldiv@rem+2
 10202  001C68  C069  F071         	movff	___fldiv@b+3,___fldiv@rem+3
 10203                           
 10204                           ; BSR set to: 0
 10205  001C6C  D882               	call	PL72	;call to abstracted procedure
 10206                           
 10207                           ; BSR set to: 0
 10208  001C6E  6B75               	clrf	___fldiv@grs& (0+255),b
 10209  001C70  6B76               	clrf	(___fldiv@grs+1)& (0+255),b
 10210  001C72  6B77               	clrf	(___fldiv@grs+2)& (0+255),b
 10211  001C74  6B78               	clrf	(___fldiv@grs+3)& (0+255),b
 10212                           
 10213                           ; BSR set to: 0
 10214  001C76  6B7A               	clrf	___fldiv@aexp& (0+255),b
 10215  001C78  D01B               	goto	l1132
 10216  001C7A                     l9149:
 10217                           
 10218                           ; BSR set to: 0
 10219  001C7A  517A               	movf	___fldiv@aexp& (0+255),w,b
 10220  001C7C  E006               	bz	l9157
 10221                           
 10222                           ; BSR set to: 0
 10223  001C7E  90D8               	bcf	status,0,c
 10224  001C80  376E               	rlcf	___fldiv@rem& (0+255),f,b
 10225  001C82  376F               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 10226  001C84  3770               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 10227  001C86  3771               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 10228                           
 10229                           ; BSR set to: 0
 10230                           
 10231                           ; BSR set to: 0
 10232                           
 10233                           ; BSR set to: 0
 10234  001C88  D867               	call	PL52	;call to abstracted procedure
 10235  001C8A                     l9157:
 10236                           
 10237                           ; BSR set to: 0
 10238  001C8A  516A               	movf	___fldiv@a& (0+255),w,b
 10239  001C8C  5D6E               	subwf	___fldiv@rem& (0+255),w,b
 10240  001C8E  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 10241  001C90  596F               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 10242  001C92  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 10243  001C94  5970               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 10244  001C96  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 10245  001C98  5971               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 10246  001C9A  E309               	bnc	l9163
 10247                           
 10248                           ; BSR set to: 0
 10249  001C9C  8D78               	bsf	(___fldiv@grs+3)& (0+255),6,b
 10250                           
 10251                           ; BSR set to: 0
 10252  001C9E  516A               	movf	___fldiv@a& (0+255),w,b
 10253  001CA0  5F6E               	subwf	___fldiv@rem& (0+255),f,b
 10254  001CA2  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 10255  001CA4  5B6F               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 10256  001CA6  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 10257  001CA8  5B70               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 10258  001CAA  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 10259  001CAC  5B71               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 10260  001CAE                     l9163:
 10261                           
 10262                           ; BSR set to: 0
 10263  001CAE  2B7A               	incf	___fldiv@aexp& (0+255),f,b
 10264  001CB0                     l1132:
 10265                           
 10266                           ; BSR set to: 0
 10267  001CB0  0E19               	movlw	25
 10268  001CB2  657A               	cpfsgt	___fldiv@aexp& (0+255),b
 10269  001CB4  D7E2               	goto	l9149
 10270                           
 10271                           ; BSR set to: 0
 10272  001CB6  516E               	movf	___fldiv@rem& (0+255),w,b
 10273  001CB8  116F               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 10274  001CBA  1170               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 10275  001CBC  1171               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 10276  001CBE  E006               	bz	l9175
 10277                           
 10278                           ; BSR set to: 0
 10279  001CC0  8175               	bsf	___fldiv@grs& (0+255),0,b
 10280  001CC2  D004               	goto	l9175
 10281  001CC4                     l9169:
 10282                           
 10283                           ; BSR set to: 0
 10284                           
 10285                           ; BSR set to: 0
 10286                           
 10287                           ; BSR set to: 0
 10288                           
 10289                           ; BSR set to: 0
 10290  001CC4  D849               	call	PL52	;call to abstracted procedure
 10291  001CC6  0773               	decf	___fldiv@new_exp& (0+255),f,b
 10292  001CC8  A0D8               	btfss	status,0,c
 10293  001CCA  0774               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 10294  001CCC                     l9175:
 10295                           
 10296                           ; BSR set to: 0
 10297  001CCC  AF68               	btfss	(___fldiv@b+2)& (0+255),7,b
 10298  001CCE  D7FA               	goto	l9169
 10299                           
 10300                           ; BSR set to: 0
 10301  001CD0  6B7A               	clrf	___fldiv@aexp& (0+255),b
 10302  001CD2  AF78               	btfss	(___fldiv@grs+3)& (0+255),7,b
 10303  001CD4  D013               	goto	l1143
 10304                           
 10305                           ; BSR set to: 0
 10306  001CD6  5175               	movf	___fldiv@grs& (0+255),w,b
 10307  001CD8  6E22               	movwf	??___fldiv^0,c
 10308  001CDA  5176               	movf	(___fldiv@grs+1)& (0+255),w,b
 10309  001CDC  6E23               	movwf	(??___fldiv+1)^0,c
 10310  001CDE  5177               	movf	(___fldiv@grs+2)& (0+255),w,b
 10311  001CE0  6E24               	movwf	(??___fldiv+2)^0,c
 10312  001CE2  0E7F               	movlw	127
 10313  001CE4  1578               	andwf	(___fldiv@grs+3)& (0+255),w,b
 10314  001CE6  6E25               	movwf	(??___fldiv+3)^0,c
 10315  001CE8  5022               	movf	??___fldiv^0,w,c
 10316  001CEA  1023               	iorwf	(??___fldiv+1)^0,w,c
 10317  001CEC  1024               	iorwf	(??___fldiv+2)^0,w,c
 10318  001CEE  1025               	iorwf	(??___fldiv+3)^0,w,c
 10319  001CF0  E003               	bz	l1144
 10320  001CF2                     u11540:
 10321                           
 10322                           ; BSR set to: 0
 10323  001CF2  0E01               	movlw	1
 10324  001CF4  6F7A               	movwf	___fldiv@aexp& (0+255),b
 10325  001CF6  D002               	goto	l1143
 10326  001CF8                     l1144:
 10327                           
 10328                           ; BSR set to: 0
 10329  001CF8  B166               	btfsc	___fldiv@b& (0+255),0,b
 10330  001CFA  D7FB               	goto	u11540
 10331  001CFC                     l1143:
 10332                           
 10333                           ; BSR set to: 0
 10334  001CFC  517A               	movf	___fldiv@aexp& (0+255),w,b
 10335  001CFE  E00E               	bz	l9191
 10336                           
 10337                           ; BSR set to: 0
 10338  001D00  2B66               	incf	___fldiv@b& (0+255),f,b
 10339  001D02  0E00               	movlw	0
 10340  001D04  2367               	addwfc	(___fldiv@b+1)& (0+255),f,b
 10341  001D06  2368               	addwfc	(___fldiv@b+2)& (0+255),f,b
 10342  001D08  2369               	addwfc	(___fldiv@b+3)& (0+255),f,b
 10343                           
 10344                           ; BSR set to: 0
 10345  001D0A  A169               	btfss	(___fldiv@b+3)& (0+255),0,b
 10346  001D0C  D007               	goto	l9191
 10347                           
 10348                           ; BSR set to: 0
 10349  001D0E  3569               	rlcf	(___fldiv@b+3)& (0+255),w,b
 10350  001D10  3369               	rrcf	(___fldiv@b+3)& (0+255),f,b
 10351  001D12  3368               	rrcf	(___fldiv@b+2)& (0+255),f,b
 10352  001D14  3367               	rrcf	(___fldiv@b+1)& (0+255),f,b
 10353  001D16  3366               	rrcf	___fldiv@b& (0+255),f,b
 10354                           
 10355                           ; BSR set to: 0
 10356  001D18  4B73               	infsnz	___fldiv@new_exp& (0+255),f,b
 10357  001D1A  2B74               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 10358  001D1C                     l9191:
 10359                           
 10360                           ; BSR set to: 0
 10361  001D1C  BF74               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 10362  001D1E  D007               	goto	l9197
 10363  001D20  5174               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 10364  001D22  E102               	bnz	u11580
 10365  001D24  2973               	incf	___fldiv@new_exp& (0+255),w,b
 10366  001D26  E303               	bnc	l9197
 10367  001D28                     u11580:
 10368                           
 10369                           ; BSR set to: 0
 10370  001D28  6B74               	clrf	(___fldiv@new_exp+1)& (0+255),b
 10371  001D2A  6973               	setf	___fldiv@new_exp& (0+255),b
 10372                           
 10373                           ; BSR set to: 0
 10374  001D2C  D822               	call	PL72	;call to abstracted procedure
 10375  001D2E                     l9197:
 10376                           
 10377                           ; BSR set to: 0
 10378  001D2E  BF74               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 10379  001D30  D004               	goto	u11590
 10380  001D32  5174               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 10381  001D34  E106               	bnz	l1150
 10382  001D36  0573               	decf	___fldiv@new_exp& (0+255),w,b
 10383  001D38  E204               	bc	l1150
 10384  001D3A                     u11590:
 10385                           
 10386                           ; BSR set to: 0
 10387  001D3A  6B73               	clrf	___fldiv@new_exp& (0+255),b
 10388  001D3C  6B74               	clrf	(___fldiv@new_exp+1)& (0+255),b
 10389  001D3E  D819               	call	PL72	;call to abstracted procedure
 10390  001D40  6B72               	clrf	___fldiv@sign& (0+255),b
 10391  001D42                     l1150:
 10392                           
 10393                           ; BSR set to: 0
 10394  001D42  C073  F079         	movff	___fldiv@new_exp,___fldiv@bexp
 10395  001D46  A179               	btfss	___fldiv@bexp& (0+255),0,b
 10396  001D48  D002               	goto	l9203
 10397                           
 10398                           ; BSR set to: 0
 10399  001D4A  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 10400  001D4C  D001               	goto	l9205
 10401  001D4E                     l9203:
 10402                           
 10403                           ; BSR set to: 0
 10404  001D4E  9F68               	bcf	(___fldiv@b+2)& (0+255),7,b
 10405  001D50                     l9205:
 10406                           
 10407                           ; BSR set to: 0
 10408  001D50  90D8               	bcf	status,0,c
 10409  001D52  3179               	rrcf	___fldiv@bexp& (0+255),w,b
 10410  001D54  6F69               	movwf	(___fldiv@b+3)& (0+255),b
 10411  001D56  D763               	goto	L15
 10412  001D58                     __end_of___fldiv:
 10413                           	callstack 0
 10414  001D58                     PL52:
 10415                           	callstack 23
 10416  001D58  90D8               	bcf	status,0,c
 10417  001D5A  3766               	rlcf	___fldiv@b& (0+255),f,b
 10418  001D5C  3767               	rlcf	(___fldiv@b+1)& (0+255),f,b
 10419  001D5E  3768               	rlcf	(___fldiv@b+2)& (0+255),f,b
 10420  001D60  3769               	rlcf	(___fldiv@b+3)& (0+255),f,b
 10421  001D62  BF78               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 10422  001D64  8166               	bsf	___fldiv@b& (0+255),0,b
 10423  001D66  90D8               	bcf	status,0,c
 10424  001D68  3775               	rlcf	___fldiv@grs& (0+255),f,b
 10425  001D6A  3776               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 10426  001D6C  3777               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 10427  001D6E  3778               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 10428  001D70  0012               	return	
 10429  001D72                     __end_ofPL52:
 10430                           	callstack 0
 10431  001D72                     PL72:
 10432                           	callstack 23
 10433  001D72  6B66               	clrf	___fldiv@b& (0+255),b
 10434  001D74  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 10435  001D76  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 10436  001D78  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 10437  001D7A  0012               	return	
 10438  001D7C                     __end_ofPL72:
 10439                           	callstack 0
 10440                           
 10441 ;; *************** function ___awmod *****************
 10442 ;; Defined at:
 10443 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;  dividend        2   25[COMRAM] int 
 10446 ;;  divisor         2   27[COMRAM] int 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  sign            1   30[COMRAM] unsigned char 
 10449 ;;  counter         1   29[COMRAM] unsigned char 
 10450 ;; Return value:  Size  Location     Type
 10451 ;;                  2   25[COMRAM] int 
 10452 ;; Registers used:
 10453 ;;		wreg, status,2, status,0
 10454 ;; Tracked objects:
 10455 ;;		On entry : 3F/1
 10456 ;;		On exit  : 3F/1
 10457 ;;		Unchanged: 3F/0
 10458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10459 ;;      Params:         4       0       0       0       0       0       0
 10460 ;;      Locals:         2       0       0       0       0       0       0
 10461 ;;      Temps:          0       0       0       0       0       0       0
 10462 ;;      Totals:         6       0       0       0       0       0       0
 10463 ;;Total ram usage:        6 bytes
 10464 ;; Hardware stack levels used: 1
 10465 ;; Hardware stack levels required when called: 3
 10466 ;; This function calls:
 10467 ;;		Nothing
 10468 ;; This function is called by:
 10469 ;;		_efgtoa
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           	psect	text30
 10474  00301A                     __ptext30:
 10475                           	callstack 0
 10476  00301A                     ___awmod:
 10477                           	callstack 23
 10478                           
 10479                           ; BSR set to: 1
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;incstack = 0
 10483  00301A  6A1F               	clrf	___awmod@sign^0,c
 10484                           
 10485                           ; BSR set to: 1
 10486  00301C  AE1B               	btfss	(___awmod@dividend+1)^0,7,c
 10487  00301E  D006               	goto	l9389
 10488                           
 10489                           ; BSR set to: 1
 10490  003020  6C1A               	negf	___awmod@dividend^0,c
 10491  003022  1E1B               	comf	(___awmod@dividend+1)^0,f,c
 10492  003024  B0D8               	btfsc	status,0,c
 10493  003026  2A1B               	incf	(___awmod@dividend+1)^0,f,c
 10494                           
 10495                           ; BSR set to: 1
 10496  003028  0E01               	movlw	1
 10497  00302A  6E1F               	movwf	___awmod@sign^0,c
 10498  00302C                     l9389:
 10499                           
 10500                           ; BSR set to: 1
 10501  00302C  AE1D               	btfss	(___awmod@divisor+1)^0,7,c
 10502  00302E  D004               	goto	l9393
 10503                           
 10504                           ; BSR set to: 1
 10505  003030  6C1C               	negf	___awmod@divisor^0,c
 10506  003032  1E1D               	comf	(___awmod@divisor+1)^0,f,c
 10507  003034  B0D8               	btfsc	status,0,c
 10508  003036  2A1D               	incf	(___awmod@divisor+1)^0,f,c
 10509  003038                     l9393:
 10510                           
 10511                           ; BSR set to: 1
 10512  003038  501C               	movf	___awmod@divisor^0,w,c
 10513  00303A  101D               	iorwf	(___awmod@divisor+1)^0,w,c
 10514  00303C  E017               	bz	l9409
 10515                           
 10516                           ; BSR set to: 1
 10517  00303E  0E01               	movlw	1
 10518  003040  6E1E               	movwf	___awmod@counter^0,c
 10519  003042  D004               	goto	l9399
 10520  003044                     l9397:
 10521                           
 10522                           ; BSR set to: 1
 10523  003044  90D8               	bcf	status,0,c
 10524  003046  361C               	rlcf	___awmod@divisor^0,f,c
 10525  003048  361D               	rlcf	(___awmod@divisor+1)^0,f,c
 10526  00304A  2A1E               	incf	___awmod@counter^0,f,c
 10527  00304C                     l9399:
 10528                           
 10529                           ; BSR set to: 1
 10530  00304C  AE1D               	btfss	(___awmod@divisor+1)^0,7,c
 10531  00304E  D7FA               	goto	l9397
 10532  003050                     u11880:
 10533                           
 10534                           ; BSR set to: 1
 10535  003050  501C               	movf	___awmod@divisor^0,w,c
 10536  003052  5C1A               	subwf	___awmod@dividend^0,w,c
 10537  003054  501D               	movf	(___awmod@divisor+1)^0,w,c
 10538  003056  581B               	subwfb	(___awmod@dividend+1)^0,w,c
 10539  003058  E304               	bnc	l9405
 10540                           
 10541                           ; BSR set to: 1
 10542  00305A  501C               	movf	___awmod@divisor^0,w,c
 10543  00305C  5E1A               	subwf	___awmod@dividend^0,f,c
 10544  00305E  501D               	movf	(___awmod@divisor+1)^0,w,c
 10545  003060  5A1B               	subwfb	(___awmod@dividend+1)^0,f,c
 10546  003062                     l9405:
 10547                           
 10548                           ; BSR set to: 1
 10549  003062  90D8               	bcf	status,0,c
 10550  003064  321D               	rrcf	(___awmod@divisor+1)^0,f,c
 10551  003066  321C               	rrcf	___awmod@divisor^0,f,c
 10552                           
 10553                           ; BSR set to: 1
 10554  003068  2E1E               	decfsz	___awmod@counter^0,f,c
 10555  00306A  D7F2               	goto	u11880
 10556  00306C                     l9409:
 10557                           
 10558                           ; BSR set to: 1
 10559  00306C  501F               	movf	___awmod@sign^0,w,c
 10560  00306E  E004               	bz	l9413
 10561                           
 10562                           ; BSR set to: 1
 10563  003070  6C1A               	negf	___awmod@dividend^0,c
 10564  003072  1E1B               	comf	(___awmod@dividend+1)^0,f,c
 10565  003074  B0D8               	btfsc	status,0,c
 10566  003076  2A1B               	incf	(___awmod@dividend+1)^0,f,c
 10567  003078                     l9413:
 10568                           
 10569                           ; BSR set to: 1
 10570  003078  C01A  F01A         	movff	___awmod@dividend,?___awmod
 10571  00307C  C01B  F01B         	movff	___awmod@dividend+1,?___awmod+1
 10572                           
 10573                           ; BSR set to: 1
 10574  003080  0012               	return		;funcret
 10575  003082                     __end_of___awmod:
 10576                           	callstack 0
 10577                           
 10578 ;; *************** function ___awdiv *****************
 10579 ;; Defined at:
 10580 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  dividend        2   25[COMRAM] int 
 10583 ;;  divisor         2   27[COMRAM] int 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  quotient        2   31[COMRAM] int 
 10586 ;;  sign            1   30[COMRAM] unsigned char 
 10587 ;;  counter         1   29[COMRAM] unsigned char 
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  2   25[COMRAM] int 
 10590 ;; Registers used:
 10591 ;;		wreg, status,2, status,0
 10592 ;; Tracked objects:
 10593 ;;		On entry : 3F/1
 10594 ;;		On exit  : 3F/1
 10595 ;;		Unchanged: 3F/0
 10596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10597 ;;      Params:         4       0       0       0       0       0       0
 10598 ;;      Locals:         4       0       0       0       0       0       0
 10599 ;;      Temps:          0       0       0       0       0       0       0
 10600 ;;      Totals:         8       0       0       0       0       0       0
 10601 ;;Total ram usage:        8 bytes
 10602 ;; Hardware stack levels used: 1
 10603 ;; Hardware stack levels required when called: 3
 10604 ;; This function calls:
 10605 ;;		Nothing
 10606 ;; This function is called by:
 10607 ;;		_efgtoa
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611                           	psect	text31
 10612  002F2C                     __ptext31:
 10613                           	callstack 0
 10614  002F2C                     ___awdiv:
 10615                           	callstack 23
 10616                           
 10617                           ; BSR set to: 1
 10618                           
 10619                           ; BSR set to: 1
 10620                           ;incstack = 0
 10621  002F2C  6A1F               	clrf	___awdiv@sign^0,c
 10622                           
 10623                           ; BSR set to: 1
 10624  002F2E  AE1D               	btfss	(___awdiv@divisor+1)^0,7,c
 10625  002F30  D006               	goto	l9345
 10626                           
 10627                           ; BSR set to: 1
 10628  002F32  6C1C               	negf	___awdiv@divisor^0,c
 10629  002F34  1E1D               	comf	(___awdiv@divisor+1)^0,f,c
 10630  002F36  B0D8               	btfsc	status,0,c
 10631  002F38  2A1D               	incf	(___awdiv@divisor+1)^0,f,c
 10632                           
 10633                           ; BSR set to: 1
 10634  002F3A  0E01               	movlw	1
 10635  002F3C  6E1F               	movwf	___awdiv@sign^0,c
 10636  002F3E                     l9345:
 10637                           
 10638                           ; BSR set to: 1
 10639  002F3E  AE1B               	btfss	(___awdiv@dividend+1)^0,7,c
 10640  002F40  D006               	goto	l9351
 10641                           
 10642                           ; BSR set to: 1
 10643  002F42  6C1A               	negf	___awdiv@dividend^0,c
 10644  002F44  1E1B               	comf	(___awdiv@dividend+1)^0,f,c
 10645  002F46  B0D8               	btfsc	status,0,c
 10646  002F48  2A1B               	incf	(___awdiv@dividend+1)^0,f,c
 10647                           
 10648                           ; BSR set to: 1
 10649  002F4A  0E01               	movlw	1
 10650  002F4C  1A1F               	xorwf	___awdiv@sign^0,f,c
 10651  002F4E                     l9351:
 10652                           
 10653                           ; BSR set to: 1
 10654  002F4E  6A20               	clrf	___awdiv@quotient^0,c
 10655  002F50  6A21               	clrf	(___awdiv@quotient+1)^0,c
 10656                           
 10657                           ; BSR set to: 1
 10658  002F52  501C               	movf	___awdiv@divisor^0,w,c
 10659  002F54  101D               	iorwf	(___awdiv@divisor+1)^0,w,c
 10660  002F56  E01B               	bz	l9373
 10661                           
 10662                           ; BSR set to: 1
 10663  002F58  0E01               	movlw	1
 10664  002F5A  6E1E               	movwf	___awdiv@counter^0,c
 10665  002F5C  D004               	goto	l9359
 10666  002F5E                     l9357:
 10667                           
 10668                           ; BSR set to: 1
 10669  002F5E  90D8               	bcf	status,0,c
 10670  002F60  361C               	rlcf	___awdiv@divisor^0,f,c
 10671  002F62  361D               	rlcf	(___awdiv@divisor+1)^0,f,c
 10672  002F64  2A1E               	incf	___awdiv@counter^0,f,c
 10673  002F66                     l9359:
 10674                           
 10675                           ; BSR set to: 1
 10676  002F66  AE1D               	btfss	(___awdiv@divisor+1)^0,7,c
 10677  002F68  D7FA               	goto	l9357
 10678  002F6A                     u11820:
 10679                           
 10680                           ; BSR set to: 1
 10681  002F6A  90D8               	bcf	status,0,c
 10682  002F6C  3620               	rlcf	___awdiv@quotient^0,f,c
 10683  002F6E  3621               	rlcf	(___awdiv@quotient+1)^0,f,c
 10684                           
 10685                           ; BSR set to: 1
 10686  002F70  501C               	movf	___awdiv@divisor^0,w,c
 10687  002F72  5C1A               	subwf	___awdiv@dividend^0,w,c
 10688  002F74  501D               	movf	(___awdiv@divisor+1)^0,w,c
 10689  002F76  581B               	subwfb	(___awdiv@dividend+1)^0,w,c
 10690  002F78  E305               	bnc	l9369
 10691                           
 10692                           ; BSR set to: 1
 10693  002F7A  501C               	movf	___awdiv@divisor^0,w,c
 10694  002F7C  5E1A               	subwf	___awdiv@dividend^0,f,c
 10695  002F7E  501D               	movf	(___awdiv@divisor+1)^0,w,c
 10696  002F80  5A1B               	subwfb	(___awdiv@dividend+1)^0,f,c
 10697                           
 10698                           ; BSR set to: 1
 10699  002F82  8020               	bsf	___awdiv@quotient^0,0,c
 10700  002F84                     l9369:
 10701                           
 10702                           ; BSR set to: 1
 10703  002F84  90D8               	bcf	status,0,c
 10704  002F86  321D               	rrcf	(___awdiv@divisor+1)^0,f,c
 10705  002F88  321C               	rrcf	___awdiv@divisor^0,f,c
 10706                           
 10707                           ; BSR set to: 1
 10708  002F8A  2E1E               	decfsz	___awdiv@counter^0,f,c
 10709  002F8C  D7EE               	goto	u11820
 10710  002F8E                     l9373:
 10711                           
 10712                           ; BSR set to: 1
 10713  002F8E  501F               	movf	___awdiv@sign^0,w,c
 10714  002F90  E004               	bz	l9377
 10715                           
 10716                           ; BSR set to: 1
 10717  002F92  6C20               	negf	___awdiv@quotient^0,c
 10718  002F94  1E21               	comf	(___awdiv@quotient+1)^0,f,c
 10719  002F96  B0D8               	btfsc	status,0,c
 10720  002F98  2A21               	incf	(___awdiv@quotient+1)^0,f,c
 10721  002F9A                     l9377:
 10722                           
 10723                           ; BSR set to: 1
 10724  002F9A  C020  F01A         	movff	___awdiv@quotient,?___awdiv
 10725  002F9E  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
 10726                           
 10727                           ; BSR set to: 1
 10728  002FA2  0012               	return		;funcret
 10729  002FA4                     __end_of___awdiv:
 10730                           	callstack 0
 10731                           
 10732 ;; *************** function _ctoa *****************
 10733 ;; Defined at:
 10734 ;;		line 259 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
 10737 ;;		 -> sprintf@f(6), 
 10738 ;;  c               1   35[COMRAM] unsigned char 
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  w               2    2[BANK0 ] int 
 10741 ;;  l               2    0[BANK0 ] int 
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  2   34[COMRAM] int 
 10744 ;; Registers used:
 10745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 3F/0
 10748 ;;		On exit  : 3F/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10751 ;;      Params:         2       0       0       0       0       0       0
 10752 ;;      Locals:         0       4       0       0       0       0       0
 10753 ;;      Temps:          1       0       0       0       0       0       0
 10754 ;;      Totals:         3       4       0       0       0       0       0
 10755 ;;Total ram usage:        7 bytes
 10756 ;; Hardware stack levels used: 1
 10757 ;; Hardware stack levels required when called: 5
 10758 ;; This function calls:
 10759 ;;		_fputc
 10760 ;; This function is called by:
 10761 ;;		_vfpfcnvrt
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           	psect	text32
 10766  002D3A                     __ptext32:
 10767                           	callstack 0
 10768  002D3A                     _ctoa:
 10769                           	callstack 22
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 259: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt
      +                          .c: 260: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 261:   
      +                            int l, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 264:  
      +                             w = width ? width - 1 : width;
 10773                           
 10774                           ; BSR set to: 1
 10775                           ;incstack = 0
 10776  002D3A  502F               	movf	_width^0,w,c
 10777  002D3C  1030               	iorwf	(_width+1)^0,w,c
 10778  002D3E  E105               	bnz	l9647
 10779                           
 10780                           ; BSR set to: 0
 10781  002D40  C02F  F062         	movff	_width,ctoa@w
 10782  002D44  C030  F063         	movff	_width+1,ctoa@w+1
 10783  002D48  D006               	goto	l9649
 10784  002D4A                     l9647:
 10785                           
 10786                           ; BSR set to: 0
 10787  002D4A  0EFF               	movlw	255
 10788  002D4C  242F               	addwf	_width^0,w,c
 10789  002D4E  6F62               	movwf	ctoa@w& (0+255),b
 10790  002D50  0EFF               	movlw	255
 10791  002D52  2030               	addwfc	(_width+1)^0,w,c
 10792  002D54  6F63               	movwf	(ctoa@w+1)& (0+255),b
 10793  002D56                     l9649:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 267:     if (flag
      +                          s & (1 << 0)) {
 10797  002D56  A033               	btfss	_flags^0,0,c
 10798  002D58  D003               	goto	l9653
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 268:         fput
      +                          c(c, fp);
 10802  002D5A  D829               	call	PL134	;call to abstracted procedure
 10803  002D5C  ECDD  F016         	call	_fputc	;wreg free
 10804  002D60                     l9653:
 10805                           
 10806                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 271:     w = (w <
      +                           0) ? 0 : w;
 10807  002D60  0100               	movlb	0	; () banked
 10808  002D62  AF63               	btfss	(ctoa@w+1)& (0+255),7,b
 10809  002D64  D002               	goto	l1283
 10810                           
 10811                           ; BSR set to: 0
 10812  002D66  6B62               	clrf	ctoa@w& (0+255),b
 10813  002D68  6B63               	clrf	(ctoa@w+1)& (0+255),b
 10814  002D6A                     l1283:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 272:     l = 0;
 10818  002D6A  6B60               	clrf	ctoa@l& (0+255),b
 10819  002D6C  6B61               	clrf	(ctoa@l+1)& (0+255),b
 10820                           
 10821                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 10822  002D6E  D009               	goto	l9661
 10823  002D70                     l9657:
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 274:         fput
      +                          c(' ', fp);
 10827  002D70  EC17  F012         	call	PL110	;call to abstracted procedure
 10828  002D74  C023  F01D         	movff	ctoa@fp,fputc@fp
 10829  002D78  ECDD  F016         	call	_fputc	;wreg free
 10830                           
 10831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 275:         ++l;
 10832  002D7C  0100               	movlb	0	; () banked
 10833  002D7E  4B60               	infsnz	ctoa@l& (0+255),f,b
 10834  002D80  2B61               	incf	(ctoa@l+1)& (0+255),f,b
 10835  002D82                     l9661:
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 10839  002D82  5162               	movf	ctoa@w& (0+255),w,b
 10840  002D84  5D60               	subwf	ctoa@l& (0+255),w,b
 10841  002D86  5161               	movf	(ctoa@l+1)& (0+255),w,b
 10842  002D88  0A80               	xorlw	128
 10843  002D8A  6E25               	movwf	??_ctoa^0,c
 10844  002D8C  5163               	movf	(ctoa@w+1)& (0+255),w,b
 10845  002D8E  0A80               	xorlw	128
 10846  002D90  5825               	subwfb	??_ctoa^0,w,c
 10847  002D92  E3EE               	bnc	l9657
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 278:     if (!(fl
      +                          ags & (1 << 0))) {
 10851  002D94  B033               	btfsc	_flags^0,0,c
 10852  002D96  D003               	goto	l9665
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 279:         fput
      +                          c(c, fp);
 10856  002D98  D80A               	call	PL134	;call to abstracted procedure
 10857  002D9A  ECDD  F016         	call	_fputc	;wreg free
 10858  002D9E                     l9665:
 10859                           
 10860                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 282:     return l
      +                          +1;
 10861  002D9E  0E01               	movlw	1
 10862  002DA0  0100               	movlb	0	; () banked
 10863  002DA2  2560               	addwf	ctoa@l& (0+255),w,b
 10864  002DA4  6E23               	movwf	?_ctoa^0,c
 10865  002DA6  0E00               	movlw	0
 10866  002DA8  2161               	addwfc	(ctoa@l+1)& (0+255),w,b
 10867  002DAA  6E24               	movwf	(?_ctoa+1)^0,c
 10868                           
 10869                           ; BSR set to: 0
 10870  002DAC  0012               	return		;funcret
 10871  002DAE                     __end_of_ctoa:
 10872                           	callstack 0
 10873  002DAE                     PL134:
 10874                           	callstack 22
 10875  002DAE  C024  F01B         	movff	ctoa@c,fputc@c
 10876  002DB2  6A1C               	clrf	(fputc@c+1)^0,c
 10877  002DB4  C023  F01D         	movff	ctoa@fp,fputc@fp
 10878  002DB8  0012               	return	
 10879  002DBA                     __end_ofPL134:
 10880                           	callstack 0
 10881                           
 10882 ;; *************** function _fputc *****************
 10883 ;; Defined at:
 10884 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  c               2   26[COMRAM] int 
 10887 ;;  fp              1   28[COMRAM] PTR struct _IO_FILE
 10888 ;;		 -> sprintf@f(6), 
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  2   26[COMRAM] int 
 10893 ;; Registers used:
 10894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10900 ;;      Params:         3       0       0       0       0       0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0
 10902 ;;      Temps:          5       0       0       0       0       0       0
 10903 ;;      Totals:         8       0       0       0       0       0       0
 10904 ;;Total ram usage:        8 bytes
 10905 ;; Hardware stack levels used: 1
 10906 ;; Hardware stack levels required when called: 4
 10907 ;; This function calls:
 10908 ;;		_putch
 10909 ;; This function is called by:
 10910 ;;		_pad
 10911 ;;		_ctoa
 10912 ;;		_stoa
 10913 ;;		_vfpfcnvrt
 10914 ;;		_fputs
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text33
 10919  002DBA                     __ptext33:
 10920                           	callstack 0
 10921  002DBA                     _fputc:
 10922                           	callstack 20
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;incstack = 0
 10926  002DBA  501D               	movf	fputc@fp^0,w,c
 10927  002DBC  E002               	bz	u10910
 10928  002DBE  501D               	movf	fputc@fp^0,w,c
 10929  002DC0  E103               	bnz	l8873
 10930  002DC2                     u10910:
 10931  002DC2  501B               	movf	fputc@c^0,w,c
 10932  002DC4  EF4A  F01B         	goto	_putch
 10933  002DC8                     l8873:
 10934  002DC8  D832               	call	PL148	;call to abstracted procedure
 10935  002DCA  50DE               	movf	postinc2,w,c
 10936  002DCC  10DE               	iorwf	postinc2,w,c
 10937  002DCE  E010               	bz	u10930
 10938  002DD0  D82E               	call	PL148	;call to abstracted procedure
 10939  002DD2  501D               	movf	fputc@fp^0,w,c
 10940  002DD4  6EE1               	movwf	fsr1l,c
 10941  002DD6  6AE2               	clrf	fsr1h,c
 10942  002DD8  0E02               	movlw	2
 10943  002DDA  26E1               	addwf	fsr1l,f,c
 10944  002DDC  50DE               	movf	postinc2,w,c
 10945  002DDE  5CE6               	subwf	postinc1,w,c
 10946  002DE0  50E6               	movf	postinc1,w,c
 10947  002DE2  0A80               	xorlw	128
 10948  002DE4  6E22               	movwf	(??_fputc+4)^0,c
 10949  002DE6  50DE               	movf	postinc2,w,c
 10950  002DE8  0A80               	xorlw	128
 10951  002DEA  5822               	subwfb	(??_fputc+4)^0,w,c
 10952  002DEC  B0D8               	btfsc	status,0,c
 10953  002DEE  0012               	return	
 10954  002DF0                     u10930:
 10955  002DF0  D818               	call	PL138	;call to abstracted procedure
 10956  002DF2  CFDE F01E          	movff	postinc2,??_fputc
 10957  002DF6  CFDD F01F          	movff	postdec2,??_fputc+1
 10958  002DFA  501D               	movf	fputc@fp^0,w,c
 10959  002DFC  6ED9               	movwf	fsr2l,c
 10960  002DFE  6ADA               	clrf	fsr2h,c
 10961  002E00  CFDE F020          	movff	postinc2,??_fputc+2
 10962  002E04  CFDD F021          	movff	postdec2,??_fputc+3
 10963  002E08  501E               	movf	??_fputc^0,w,c
 10964  002E0A  2420               	addwf	(??_fputc+2)^0,w,c
 10965  002E0C  6ED9               	movwf	fsr2l,c
 10966  002E0E  501F               	movf	(??_fputc+1)^0,w,c
 10967  002E10  2021               	addwfc	(??_fputc+3)^0,w,c
 10968  002E12  6EDA               	movwf	fsr2h,c
 10969  002E14  C01B  FFDF         	movff	fputc@c,indf2
 10970  002E18  D804               	call	PL138	;call to abstracted procedure
 10971  002E1A  2ADE               	incf	postinc2,f,c
 10972  002E1C  0E00               	movlw	0
 10973  002E1E  22DD               	addwfc	postdec2,f,c
 10974  002E20  0C00               	retlw	0	;funcret
 10975  002E22                     __end_of_fputc:
 10976                           	callstack 0
 10977  002E22                     PL138:
 10978                           	callstack 20
 10979  002E22  501D               	movf	fputc@fp^0,w,c
 10980  002E24  6ED9               	movwf	fsr2l,c
 10981  002E26  6ADA               	clrf	fsr2h,c
 10982  002E28  0E02               	movlw	2
 10983  002E2A  26D9               	addwf	fsr2l,f,c
 10984  002E2C  0C02               	retlw	2
 10985  002E2E                     __end_ofPL138:
 10986                           	callstack 0
 10987  002E2E                     PL148:
 10988                           	callstack 20
 10989  002E2E  501D               	movf	fputc@fp^0,w,c
 10990  002E30  6ED9               	movwf	fsr2l,c
 10991  002E32  6ADA               	clrf	fsr2h,c
 10992  002E34  0E04               	movlw	4
 10993  002E36  26D9               	addwf	fsr2l,f,c
 10994  002E38  0C04               	retlw	4
 10995  002E3A                     __end_ofPL148:
 10996                           	callstack 0
 10997                           
 10998 ;; *************** function _putch *****************
 10999 ;; Defined at:
 11000 ;;		line 20 in file "eusart.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  data            1    wreg     unsigned char 
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;  data            1   25[COMRAM] unsigned char 
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      void 
 11007 ;; Registers used:
 11008 ;;		wreg
 11009 ;; Tracked objects:
 11010 ;;		On entry : 0/0
 11011 ;;		On exit  : 0/0
 11012 ;;		Unchanged: 0/0
 11013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11014 ;;      Params:         0       0       0       0       0       0       0
 11015 ;;      Locals:         1       0       0       0       0       0       0
 11016 ;;      Temps:          0       0       0       0       0       0       0
 11017 ;;      Totals:         1       0       0       0       0       0       0
 11018 ;;Total ram usage:        1 bytes
 11019 ;; Hardware stack levels used: 1
 11020 ;; Hardware stack levels required when called: 3
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_fputc
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           	psect	text34
 11029  003694                     __ptext34:
 11030                           	callstack 0
 11031  003694                     _putch:
 11032                           	callstack 20
 11033                           
 11034                           ;incstack = 0
 11035                           ;putch@data stored from wreg
 11036  003694  6E1A               	movwf	putch@data^0,c
 11037  003696                     
 11038                           ;eusart.c: 22:  while( ! TXIF)
 11039                           
 11040                           ;eusart.c: 20: void putch(char data);eusart.c: 21: {;eusart.c: 22:  while( ! TXIF)
 11041  003696  A89E               	btfss	3998,4,c	;volatile
 11042  003698  D7FE               	goto	l8863
 11043                           
 11044                           ;eusart.c: 24:  TXREG = data;
 11045  00369A  C01A  FFAD         	movff	putch@data,4013	;volatile
 11046  00369E  0012               	return		;funcret
 11047  0036A0                     __end_of_putch:
 11048                           	callstack 0
 11049                           
 11050 ;; *************** function _atoi *****************
 11051 ;; Defined at:
 11052 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atoi.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  s               2   36[COMRAM] PTR const unsigned char 
 11055 ;;		 -> STR_24(10), STR_23(22), STR_22(11), STR_21(10), 
 11056 ;;		 -> STR_20(22), STR_19(11), STR_18(10), STR_15(10), 
 11057 ;;		 -> STR_12(20), STR_4(6), STR_2(15), 
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;  n               2   11[BANK0 ] int 
 11060 ;;  neg             2    4[BANK0 ] int 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  2   36[COMRAM] int 
 11063 ;; Registers used:
 11064 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11065 ;; Tracked objects:
 11066 ;;		On entry : 3F/0
 11067 ;;		On exit  : 3F/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11070 ;;      Params:         2       0       0       0       0       0       0
 11071 ;;      Locals:         0       9       0       0       0       0       0
 11072 ;;      Temps:          0       4       0       0       0       0       0
 11073 ;;      Totals:         2      13       0       0       0       0       0
 11074 ;;Total ram usage:       15 bytes
 11075 ;; Hardware stack levels used: 1
 11076 ;; Hardware stack levels required when called: 4
 11077 ;; This function calls:
 11078 ;;		___wmul
 11079 ;;		_isdigit
 11080 ;;		_isspace
 11081 ;; This function is called by:
 11082 ;;		_vfpfcnvrt
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text35
 11087  002862                     __ptext35:
 11088                           	callstack 0
 11089  002862                     _atoi:
 11090                           	callstack 23
 11091                           
 11092                           ; BSR set to: 0
 11093                           
 11094                           ;incstack = 0
 11095  002862  6B6B               	clrf	atoi@n& (0+255),b
 11096  002864  6B6C               	clrf	(atoi@n+1)& (0+255),b
 11097  002866  6B64               	clrf	atoi@neg& (0+255),b
 11098  002868  6B65               	clrf	(atoi@neg+1)& (0+255),b
 11099  00286A  D002               	goto	l10057
 11100  00286C                     l10055:
 11101                           
 11102                           ; BSR set to: 0
 11103  00286C  4A25               	infsnz	atoi@s^0,f,c
 11104  00286E  2A26               	incf	(atoi@s+1)^0,f,c
 11105  002870                     l10057:
 11106                           
 11107                           ; BSR set to: 0
 11108  002870  0E01               	movlw	1
 11109  002872  6F6A               	movwf	_atoi$2106& (0+255),b
 11110                           
 11111                           ; BSR set to: 0
 11112  002874  D85E               	call	PL28	;call to abstracted procedure
 11113  002876  0A20               	xorlw	32
 11114  002878  E00A               	bz	l1490
 11115                           
 11116                           ; BSR set to: 0
 11117  00287A  0EF7               	movlw	247
 11118  00287C  6F60               	movwf	??_atoi& (0+255),b
 11119  00287E  6961               	setf	(??_atoi+1)& (0+255),b
 11120  002880  D858               	call	PL28	;call to abstracted procedure
 11121  002882  D85E               	call	PL114	;call to abstracted procedure
 11122  002884  E103               	bnz	u13280
 11123  002886  0E05               	movlw	5
 11124  002888  5D62               	subwf	(??_atoi+2)& (0+255),w,b
 11125  00288A  E301               	bnc	l1490
 11126  00288C                     u13280:
 11127                           
 11128                           ; BSR set to: 0
 11129  00288C  6B6A               	clrf	_atoi$2106& (0+255),b
 11130  00288E                     l1490:
 11131                           
 11132                           ; BSR set to: 0
 11133  00288E  C06A  F066         	movff	_atoi$2106,_atoi$2105
 11134  002892  6B67               	clrf	(_atoi$2105+1)& (0+255),b
 11135                           
 11136                           ; BSR set to: 0
 11137  002894  5166               	movf	_atoi$2105& (0+255),w,b
 11138  002896  1167               	iorwf	(_atoi$2105+1)& (0+255),w,b
 11139  002898  E007               	bz	l10073
 11140  00289A  D7E8               	goto	l10055
 11141  00289C                     l10069:
 11142                           
 11143                           ; BSR set to: 0
 11144  00289C  6B65               	clrf	(atoi@neg+1)& (0+255),b
 11145  00289E  0E01               	movlw	1
 11146  0028A0  6F64               	movwf	atoi@neg& (0+255),b
 11147  0028A2                     l10071:
 11148                           
 11149                           ; BSR set to: 0
 11150  0028A2  4A25               	infsnz	atoi@s^0,f,c
 11151  0028A4  2A26               	incf	(atoi@s+1)^0,f,c
 11152  0028A6  D01F               	goto	l10079
 11153  0028A8                     l10073:
 11154                           
 11155                           ; BSR set to: 0
 11156  0028A8  D844               	call	PL28	;call to abstracted procedure
 11157  0028AA  6F60               	movwf	??_atoi& (0+255),b
 11158  0028AC  6B61               	clrf	(??_atoi+1)& (0+255),b
 11159                           
 11160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11161                           ; Switch size 1, requested type "space"
 11162                           ; Number of cases is 1, Range of values is 0 to 0
 11163                           ; switch strategies available:
 11164                           ; Name         Instructions Cycles
 11165                           ; simple_byte            4     3 (average)
 11166                           ;	Chosen strategy is simple_byte
 11167  0028AE  5161               	movf	(??_atoi+1)& (0+255),w,b
 11168  0028B0  E11A               	bnz	l10079
 11169                           
 11170                           ; BSR set to: 0
 11171                           ; Switch size 1, requested type "space"
 11172                           ; Number of cases is 2, Range of values is 43 to 45
 11173                           ; switch strategies available:
 11174                           ; Name         Instructions Cycles
 11175                           ; simple_byte            7     4 (average)
 11176                           ;	Chosen strategy is simple_byte
 11177  0028B2  5160               	movf	??_atoi& (0+255),w,b
 11178  0028B4  0A2B               	xorlw	43	; case 43
 11179  0028B6  E0F5               	bz	l10071
 11180  0028B8  0A06               	xorlw	6	; case 45
 11181  0028BA  E0F0               	bz	l10069
 11182  0028BC  D014               	goto	l10079
 11183  0028BE                     l10075:
 11184                           
 11185                           ; BSR set to: 0
 11186  0028BE  C06B  F01F         	movff	atoi@n,___wmul@multiplier
 11187  0028C2  C06C  F020         	movff	atoi@n+1,___wmul@multiplier+1
 11188  0028C6  6A22               	clrf	(___wmul@multiplicand+1)^0,c
 11189  0028C8  0E0A               	movlw	10
 11190  0028CA  6E21               	movwf	___wmul@multiplicand^0,c
 11191  0028CC  ECDF  F01A         	call	___wmul	;wreg free
 11192  0028D0  D830               	call	PL28	;call to abstracted procedure
 11193  0028D2  5E1F               	subwf	?___wmul^0,f,c
 11194  0028D4  0E00               	movlw	0
 11195  0028D6  5A20               	subwfb	(?___wmul+1)^0,f,c
 11196  0028D8  0E30               	movlw	48
 11197  0028DA  241F               	addwf	?___wmul^0,w,c
 11198  0028DC  6F6B               	movwf	atoi@n& (0+255),b
 11199  0028DE  0E00               	movlw	0
 11200  0028E0  2020               	addwfc	(?___wmul+1)^0,w,c
 11201  0028E2  6F6C               	movwf	(atoi@n+1)& (0+255),b
 11202  0028E4  D7DE               	goto	l10071
 11203  0028E6                     l10079:
 11204                           
 11205                           ; BSR set to: 0
 11206  0028E6  0ED0               	movlw	208
 11207  0028E8  6F60               	movwf	??_atoi& (0+255),b
 11208  0028EA  6961               	setf	(??_atoi+1)& (0+255),b
 11209  0028EC  D822               	call	PL28	;call to abstracted procedure
 11210  0028EE  D828               	call	PL114	;call to abstracted procedure
 11211  0028F0  E105               	bnz	u13300
 11212  0028F2  0E0A               	movlw	10
 11213  0028F4  5D62               	subwf	(??_atoi+2)& (0+255),w,b
 11214  0028F6  E202               	bc	u13300
 11215  0028F8  0E01               	movlw	1
 11216  0028FA  D001               	goto	u13310
 11217  0028FC                     u13300:
 11218  0028FC  0E00               	movlw	0
 11219  0028FE                     u13310:
 11220  0028FE  6F68               	movwf	_atoi$2107& (0+255),b
 11221  002900  6B69               	clrf	(_atoi$2107+1)& (0+255),b
 11222                           
 11223                           ; BSR set to: 0
 11224  002902  5168               	movf	_atoi$2107& (0+255),w,b
 11225  002904  1169               	iorwf	(_atoi$2107+1)& (0+255),w,b
 11226  002906  E1DB               	bnz	l10075
 11227                           
 11228                           ; BSR set to: 0
 11229  002908  5164               	movf	atoi@neg& (0+255),w,b
 11230  00290A  1165               	iorwf	(atoi@neg+1)& (0+255),w,b
 11231  00290C  E10D               	bnz	l1504
 11232                           
 11233                           ; BSR set to: 0
 11234  00290E  C06B  F060         	movff	atoi@n,??_atoi
 11235  002912  C06C  F061         	movff	atoi@n+1,??_atoi+1
 11236  002916  1F60               	comf	??_atoi& (0+255),f,b
 11237  002918  1F61               	comf	(??_atoi+1)& (0+255),f,b
 11238  00291A  4B60               	infsnz	??_atoi& (0+255),f,b
 11239  00291C  2B61               	incf	(??_atoi+1)& (0+255),f,b
 11240  00291E  C060  F025         	movff	??_atoi,?_atoi
 11241  002922  C061  F026         	movff	??_atoi+1,?_atoi+1
 11242  002926  0012               	return	
 11243  002928                     l1504:
 11244                           
 11245                           ; BSR set to: 0
 11246  002928  C06B  F025         	movff	atoi@n,?_atoi
 11247  00292C  C06C  F026         	movff	atoi@n+1,?_atoi+1
 11248                           
 11249                           ; BSR set to: 0
 11250  002930  0012               	return		;funcret
 11251  002932                     __end_of_atoi:
 11252                           	callstack 0
 11253  002932                     PL28:
 11254                           	callstack 23
 11255  002932  C025  FFF6         	movff	atoi@s,tblptrl
 11256  002936  C026  FFF7         	movff	atoi@s+1,tblptrh
 11257  00293A                     	if	0	;tblptru may be non-zero
 11258  00293A                     	endif
 11259  00293A                     	if	0	;tblptru may be non-zero
 11260  00293A                     	endif
 11261  00293A  0008               	tblrd		*
 11262  00293C  50F5               	movf	tablat,w,c
 11263  00293E  0012               	return	
 11264  002940                     __end_ofPL28:
 11265                           	callstack 0
 11266  002940                     PL114:
 11267                           	callstack 23
 11268  002940  6F62               	movwf	(??_atoi+2)& (0+255),b
 11269  002942  6B63               	clrf	(??_atoi+3)& (0+255),b
 11270  002944  5160               	movf	??_atoi& (0+255),w,b
 11271  002946  2762               	addwf	(??_atoi+2)& (0+255),f,b
 11272  002948  5161               	movf	(??_atoi+1)& (0+255),w,b
 11273  00294A  2363               	addwfc	(??_atoi+3)& (0+255),f,b
 11274  00294C  5163               	movf	(??_atoi+3)& (0+255),w,b
 11275  00294E  0012               	return	
 11276  002950                     __end_ofPL114:
 11277                           	callstack 0
 11278                           
 11279 ;; *************** function _isspace *****************
 11280 ;; Defined at:
 11281 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isspace.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  c               2   25[COMRAM] int 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2   25[COMRAM] int 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11295 ;;      Params:         2       0       0       0       0       0       0
 11296 ;;      Locals:         1       0       0       0       0       0       0
 11297 ;;      Temps:          4       0       0       0       0       0       0
 11298 ;;      Totals:         7       0       0       0       0       0       0
 11299 ;;Total ram usage:        7 bytes
 11300 ;; Hardware stack levels used: 1
 11301 ;; Hardware stack levels required when called: 3
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_atoi
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text36
 11310  00346A                     __ptext36:
 11311                           	callstack 0
 11312  00346A                     _isspace:
 11313                           	callstack 23
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;incstack = 0
 11317  00346A  0E01               	movlw	1
 11318  00346C  6E20               	movwf	_isspace$2136^0,c
 11319  00346E  0E20               	movlw	32
 11320  003470  181A               	xorwf	isspace@c^0,w,c
 11321  003472  101B               	iorwf	(isspace@c+1)^0,w,c
 11322  003474  E011               	bz	l1530
 11323  003476  0EF7               	movlw	247
 11324  003478  6E1C               	movwf	??_isspace^0,c
 11325  00347A  681D               	setf	(??_isspace+1)^0,c
 11326  00347C  C01A  F01E         	movff	isspace@c,??_isspace+2
 11327  003480  C01B  F01F         	movff	isspace@c+1,??_isspace+3
 11328  003484  501C               	movf	??_isspace^0,w,c
 11329  003486  261E               	addwf	(??_isspace+2)^0,f,c
 11330  003488  501D               	movf	(??_isspace+1)^0,w,c
 11331  00348A  221F               	addwfc	(??_isspace+3)^0,f,c
 11332  00348C  501F               	movf	(??_isspace+3)^0,w,c
 11333  00348E  E103               	bnz	u12420
 11334  003490  0E05               	movlw	5
 11335  003492  5C1E               	subwf	(??_isspace+2)^0,w,c
 11336  003494  E301               	bnc	l1530
 11337  003496                     u12420:
 11338  003496  6A20               	clrf	_isspace$2136^0,c
 11339  003498                     l1530:
 11340  003498  C020  F01A         	movff	_isspace$2136,?_isspace
 11341  00349C  6A1B               	clrf	(?_isspace+1)^0,c
 11342  00349E  0012               	return		;funcret
 11343  0034A0                     __end_of_isspace:
 11344                           	callstack 0
 11345                           
 11346 ;; *************** function _isdigit *****************
 11347 ;; Defined at:
 11348 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isdigit.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;  c               2   25[COMRAM] int 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;		None
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  2   25[COMRAM] int 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2, status,0
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11362 ;;      Params:         2       0       0       0       0       0       0
 11363 ;;      Locals:         0       0       0       0       0       0       0
 11364 ;;      Temps:          4       0       0       0       0       0       0
 11365 ;;      Totals:         6       0       0       0       0       0       0
 11366 ;;Total ram usage:        6 bytes
 11367 ;; Hardware stack levels used: 1
 11368 ;; Hardware stack levels required when called: 3
 11369 ;; This function calls:
 11370 ;;		Nothing
 11371 ;; This function is called by:
 11372 ;;		_vfpfcnvrt
 11373 ;;		_atoi
 11374 ;; This function uses a non-reentrant model
 11375 ;;
 11376                           
 11377                           	psect	text37
 11378  003592                     __ptext37:
 11379                           	callstack 0
 11380  003592                     _isdigit:
 11381                           	callstack 24
 11382                           
 11383                           ;incstack = 0
 11384  003592  0ED0               	movlw	208
 11385  003594  6E1C               	movwf	??_isdigit^0,c
 11386  003596  681D               	setf	(??_isdigit+1)^0,c
 11387  003598  C01A  F01E         	movff	isdigit@c,??_isdigit+2
 11388  00359C  C01B  F01F         	movff	isdigit@c+1,??_isdigit+3
 11389  0035A0  501C               	movf	??_isdigit^0,w,c
 11390  0035A2  261E               	addwf	(??_isdigit+2)^0,f,c
 11391  0035A4  501D               	movf	(??_isdigit+1)^0,w,c
 11392  0035A6  221F               	addwfc	(??_isdigit+3)^0,f,c
 11393  0035A8  501F               	movf	(??_isdigit+3)^0,w,c
 11394  0035AA  E105               	bnz	u12390
 11395  0035AC  0E0A               	movlw	10
 11396  0035AE  5C1E               	subwf	(??_isdigit+2)^0,w,c
 11397  0035B0  E202               	bc	u12390
 11398  0035B2  0E01               	movlw	1
 11399  0035B4  D001               	goto	u12400
 11400  0035B6                     u12390:
 11401  0035B6  0E00               	movlw	0
 11402  0035B8                     u12400:
 11403  0035B8  6E1A               	movwf	?_isdigit^0,c
 11404  0035BA  6A1B               	clrf	(?_isdigit+1)^0,c
 11405  0035BC  0012               	return		;funcret
 11406  0035BE                     __end_of_isdigit:
 11407                           	callstack 0
 11408                           
 11409 ;; *************** function _lcdPrint *****************
 11410 ;; Defined at:
 11411 ;;		line 118 in file "hd44780.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;  t               2   34[COMRAM] PTR const unsigned char 
 11414 ;;		 -> STR_17(11), STR_16(11), STR_14(19), STR_13(19), 
 11415 ;;		 -> STR_11(15), STR_10(20), STR_9(19), STR_8(22), 
 11416 ;;		 -> STR_7(21), STR_6(21), STR_5(21), TxtBuf(21), 
 11417 ;;		 -> STR_1(21), 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/1
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11429 ;;      Params:         2       0       0       0       0       0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0
 11431 ;;      Temps:          0       4       0       0       0       0       0
 11432 ;;      Totals:         2       4       0       0       0       0       0
 11433 ;;Total ram usage:        6 bytes
 11434 ;; Hardware stack levels used: 1
 11435 ;; Hardware stack levels required when called: 6
 11436 ;; This function calls:
 11437 ;;		_lcdWrite
 11438 ;;		_lcd_gotoxy
 11439 ;; This function is called by:
 11440 ;;		_main
 11441 ;;		_show_lcd_main
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text38
 11446  002762                     __ptext38:
 11447                           	callstack 0
 11448  002762                     _lcdPrint:
 11449                           	callstack 23
 11450                           
 11451                           ;hd44780.c: 119:     while(*t != '\0'){
 11452                           
 11453                           ;incstack = 0
 11454  002762  D065               	goto	l10421
 11455  002764                     l10401:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;hd44780.c: 122:             lcdWrite(1, COMMAND);
 11459  002764  D87B               	call	PL184	;call to abstracted procedure
 11460  002766  EC69  F01A         	call	_lcdWrite
 11461                           
 11462                           ;hd44780.c: 123:             _delay((unsigned long)((2)*(64000000/4000.0)));
 11463  00276A  0E2A               	movlw	42
 11464  00276C  0100               	movlb	0	; () banked
 11465  00276E  6F60               	movwf	??_lcdPrint& (0+255),b
 11466  002770  0E8D               	movlw	141
 11467  002772                     u14337:
 11468  002772  2EE8               	decfsz	wreg,f,c
 11469  002774  D7FE               	bra	u14337
 11470  002776  2F60               	decfsz	??_lcdPrint& (0+255),f,b
 11471  002778  D7FC               	bra	u14337
 11472  00277A  F000 F000          	nop2	
 11473                           
 11474                           ;hd44780.c: 124:             break;
 11475  00277E  D055               	goto	l10419
 11476  002780                     l10405:
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;hd44780.c: 127:             lcd_gotoxy(1, 2);
 11480  002780  EC4B  F007         	call	PL126	;call to abstracted procedure
 11481  002784  EC9D  F019         	call	_lcd_gotoxy
 11482                           
 11483                           ;hd44780.c: 128:             break;
 11484  002788  D050               	goto	l10419
 11485  00278A                     l10407:
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;hd44780.c: 131:             lcdWrite(0x10, COMMAND);
 11489  00278A  0E00               	movlw	0
 11490  00278C  6E1C               	movwf	lcdWrite@type^0,c
 11491  00278E  0E10               	movlw	16
 11492  002790  EC69  F01A         	call	_lcdWrite
 11493                           
 11494                           ;hd44780.c: 132:             break;
 11495  002794  D04A               	goto	l10419
 11496  002796                     l10409:
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;hd44780.c: 135:                 if (*t < 0xC0) {
 11500  002796  D85B               	call	PL30	;call to abstracted procedure
 11501  002798  64F7               	cpfsgt	tblptrh,c
 11502  00279A  D003               	bra	u13717
 11503  00279C  0008               	tblrd		*
 11504  00279E  50F5               	movf	tablat,w,c
 11505  0027A0  D001               	bra	u13710
 11506  0027A2                     u13717:
 11507  0027A2  D84F               	call	PL20	;call to abstracted procedure
 11508  0027A4                     u13710:
 11509  0027A4  0100               	movlb	0	; () banked
 11510  0027A6  6F60               	movwf	??_lcdPrint& (0+255),b
 11511  0027A8  0EC0               	movlw	192
 11512  0027AA  6160               	cpfslt	??_lcdPrint& (0+255),b
 11513  0027AC  D00C               	goto	l10413
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;hd44780.c: 136:                     lcdWrite(*t, DATA);
 11517  0027AE  0E01               	movlw	1
 11518  0027B0  6E1C               	movwf	lcdWrite@type^0,c
 11519  0027B2  D84D               	call	PL30	;call to abstracted procedure
 11520  0027B4  64F7               	cpfsgt	tblptrh,c
 11521  0027B6  D003               	bra	u13737
 11522  0027B8  0008               	tblrd		*
 11523  0027BA  50F5               	movf	tablat,w,c
 11524  0027BC  D001               	bra	u13730
 11525  0027BE                     u13737:
 11526  0027BE  D841               	call	PL20	;call to abstracted procedure
 11527  0027C0                     u13730:
 11528  0027C0  EC69  F01A         	call	_lcdWrite
 11529                           
 11530                           ;hd44780.c: 137:                 } else {
 11531  0027C4  D032               	goto	l10419
 11532  0027C6                     l10413:
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;hd44780.c: 138:                     lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], 
      +                          DATA);
 11536  0027C6  0E01               	movlw	1
 11537  0027C8  6E1C               	movwf	lcdWrite@type^0,c
 11538  0027CA  0E40               	movlw	64
 11539  0027CC  6F60               	movwf	??_lcdPrint& (0+255),b
 11540  0027CE  6961               	setf	(??_lcdPrint+1)& (0+255),b
 11541  0027D0  D83E               	call	PL30	;call to abstracted procedure
 11542  0027D2  64F7               	cpfsgt	tblptrh,c
 11543  0027D4  D003               	bra	u13747
 11544  0027D6  0008               	tblrd		*
 11545  0027D8  50F5               	movf	tablat,w,c
 11546  0027DA  D001               	bra	u13740
 11547  0027DC                     u13747:
 11548  0027DC  D832               	call	PL20	;call to abstracted procedure
 11549  0027DE                     u13740:
 11550  0027DE  0100               	movlb	0	; () banked
 11551  0027E0  6F62               	movwf	(??_lcdPrint+2)& (0+255),b
 11552  0027E2  6B63               	clrf	(??_lcdPrint+3)& (0+255),b
 11553  0027E4  5160               	movf	??_lcdPrint& (0+255),w,b
 11554  0027E6  2762               	addwf	(??_lcdPrint+2)& (0+255),f,b
 11555  0027E8  5161               	movf	(??_lcdPrint+1)& (0+255),w,b
 11556  0027EA  2363               	addwfc	(??_lcdPrint+3)& (0+255),f,b
 11557  0027EC  0EFB               	movlw	low _HD44780_CYR
 11558  0027EE  2562               	addwf	(??_lcdPrint+2)& (0+255),w,b
 11559  0027F0  6EF6               	movwf	tblptrl,c
 11560  0027F2  0E7D               	movlw	high _HD44780_CYR
 11561  0027F4  2163               	addwfc	(??_lcdPrint+3)& (0+255),w,b
 11562  0027F6  6EF7               	movwf	tblptrh,c
 11563  0027F8                     	if	0	;There are less than 3 active tblptr bytes
 11564  0027F8                     	endif
 11565  0027F8  0008               	tblrd		*
 11566  0027FA  50F5               	movf	tablat,w,c
 11567  0027FC  EC69  F01A         	call	_lcdWrite
 11568  002800  D014               	goto	l10419
 11569  002802                     l10417:
 11570  002802  D825               	call	PL30	;call to abstracted procedure
 11571  002804  64F7               	cpfsgt	tblptrh,c
 11572  002806  D003               	bra	u13757
 11573  002808  0008               	tblrd		*
 11574  00280A  50F5               	movf	tablat,w,c
 11575  00280C  D001               	bra	u13750
 11576  00280E                     u13757:
 11577  00280E  D819               	call	PL20	;call to abstracted procedure
 11578  002810                     u13750:
 11579  002810  0100               	movlb	0	; () banked
 11580  002812  6F60               	movwf	??_lcdPrint& (0+255),b
 11581  002814  6B61               	clrf	(??_lcdPrint+1)& (0+255),b
 11582                           
 11583                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11584                           ; Switch size 1, requested type "space"
 11585                           ; Number of cases is 1, Range of values is 0 to 0
 11586                           ; switch strategies available:
 11587                           ; Name         Instructions Cycles
 11588                           ; simple_byte            4     3 (average)
 11589                           ;	Chosen strategy is simple_byte
 11590  002816  5161               	movf	(??_lcdPrint+1)& (0+255),w,b
 11591  002818  E1BE               	bnz	l10409
 11592                           
 11593                           ; BSR set to: 0
 11594                           ; Switch size 1, requested type "space"
 11595                           ; Number of cases is 3, Range of values is 8 to 12
 11596                           ; switch strategies available:
 11597                           ; Name         Instructions Cycles
 11598                           ; simple_byte           10     6 (average)
 11599                           ;	Chosen strategy is simple_byte
 11600  00281A  5160               	movf	??_lcdPrint& (0+255),w,b
 11601  00281C  0A08               	xorlw	8	; case 8
 11602  00281E  E0B5               	bz	l10407
 11603  002820  0A02               	xorlw	2	; case 10
 11604  002822  E0AE               	bz	l10405
 11605  002824  0A06               	xorlw	6	; case 12
 11606  002826  E09E               	bz	l10401
 11607  002828  D7B6               	goto	l10409
 11608  00282A                     l10419:
 11609                           
 11610                           ;hd44780.c: 143:         *t++;
 11611  00282A  4A23               	infsnz	lcdPrint@t^0,f,c
 11612  00282C  2A24               	incf	(lcdPrint@t+1)^0,f,c
 11613  00282E                     l10421:
 11614                           
 11615                           ;hd44780.c: 119:     while(*t != '\0'){
 11616  00282E  D80F               	call	PL30	;call to abstracted procedure
 11617  002830  64F7               	cpfsgt	tblptrh,c
 11618  002832  D003               	bra	u13767
 11619  002834  0008               	tblrd		*
 11620  002836  50F5               	movf	tablat,w,c
 11621  002838  D001               	bra	u13760
 11622  00283A                     u13767:
 11623  00283A  D803               	call	PL20	;call to abstracted procedure
 11624  00283C                     u13760:
 11625  00283C  0900               	iorlw	0
 11626  00283E  E1E1               	bnz	l10417
 11627  002840  0012               	return		;funcret
 11628  002842                     __end_of_lcdPrint:
 11629                           	callstack 0
 11630  002842                     PL20:
 11631                           	callstack 23
 11632  002842  CFF6 FFE1          	movff	tblptrl,fsr1l
 11633  002846  CFF7 FFE2          	movff	tblptrh,fsr1h
 11634  00284A  50E7               	movf	indf1,w,c
 11635  00284C  0012               	return	
 11636  00284E                     __end_ofPL20:
 11637                           	callstack 0
 11638  00284E                     PL30:
 11639                           	callstack 23
 11640  00284E  C023  FFF6         	movff	lcdPrint@t,tblptrl
 11641  002852  C024  FFF7         	movff	lcdPrint@t+1,tblptrh
 11642  002856  6AF8               	clrf	tblptru,c
 11643  002858  0E05               	movlw	(high __ramtop+-1)
 11644  00285A  0012               	return	
 11645  00285C                     __end_ofPL30:
 11646                           	callstack 0
 11647  00285C                     PL184:
 11648                           	callstack 23
 11649  00285C  0E00               	movlw	0
 11650  00285E  6E1C               	movwf	lcdWrite@type^0,c
 11651  002860  0C01               	retlw	1
 11652  002862                     __end_ofPL184:
 11653                           	callstack 0
 11654                           
 11655 ;; *************** function _lcd_gotoxy *****************
 11656 ;; Defined at:
 11657 ;;		line 76 in file "hd44780.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;  x               1    wreg     unsigned char 
 11660 ;;  y               1   29[COMRAM] unsigned char 
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;  x               1   32[COMRAM] unsigned char 
 11663 ;;  address         1   33[COMRAM] unsigned char 
 11664 ;; Return value:  Size  Location     Type
 11665 ;;                  1    wreg      void 
 11666 ;; Registers used:
 11667 ;;		wreg, status,2, status,0, cstack
 11668 ;; Tracked objects:
 11669 ;;		On entry : 0/1
 11670 ;;		On exit  : 0/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11673 ;;      Params:         1       0       0       0       0       0       0
 11674 ;;      Locals:         2       0       0       0       0       0       0
 11675 ;;      Temps:          2       0       0       0       0       0       0
 11676 ;;      Totals:         5       0       0       0       0       0       0
 11677 ;;Total ram usage:        5 bytes
 11678 ;; Hardware stack levels used: 1
 11679 ;; Hardware stack levels required when called: 5
 11680 ;; This function calls:
 11681 ;;		_lcdWrite
 11682 ;; This function is called by:
 11683 ;;		_lcdPrint
 11684 ;;		_main
 11685 ;;		_show_lcd_main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text39
 11690  00333A                     __ptext39:
 11691                           	callstack 0
 11692  00333A                     _lcd_gotoxy:
 11693                           	callstack 24
 11694                           
 11695                           ;incstack = 0
 11696                           ;lcd_gotoxy@x stored from wreg
 11697  00333A  6E21               	movwf	lcd_gotoxy@x^0,c
 11698                           
 11699                           ;hd44780.c: 77:     uint8_t address;;hd44780.c: 82: switch(y)
 11700  00333C  D009               	goto	l10283
 11701  00333E                     l123:
 11702                           
 11703                           ;hd44780.c: 85:      address = 0x00;
 11704  00333E  6A22               	clrf	lcd_gotoxy@address^0,c
 11705                           
 11706                           ;hd44780.c: 86:      break;
 11707  003340  D016               	goto	l10285
 11708  003342                     l10275:
 11709                           
 11710                           ;hd44780.c: 89:      address = 0x40;
 11711  003342  0E40               	movlw	64
 11712  003344  D003               	goto	L17
 11713  003346                     l10277:
 11714                           
 11715                           ;hd44780.c: 93:      address = 0x14;
 11716  003346  0E14               	movlw	20
 11717  003348  D001               	goto	L17
 11718  00334A                     l10279:
 11719                           
 11720                           ;hd44780.c: 97:      address = 0x54;
 11721  00334A  0E54               	movlw	84
 11722  00334C                     L17:
 11723  00334C  6E22               	movwf	lcd_gotoxy@address^0,c
 11724                           
 11725                           ;hd44780.c: 98:      break;
 11726  00334E  D00F               	goto	l10285
 11727  003350                     l10283:
 11728  003350  501E               	movf	lcd_gotoxy@y^0,w,c
 11729  003352  6E1F               	movwf	??_lcd_gotoxy^0,c
 11730  003354  6A20               	clrf	(??_lcd_gotoxy+1)^0,c
 11731                           
 11732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11733                           ; Switch size 1, requested type "space"
 11734                           ; Number of cases is 1, Range of values is 0 to 0
 11735                           ; switch strategies available:
 11736                           ; Name         Instructions Cycles
 11737                           ; simple_byte            4     3 (average)
 11738                           ;	Chosen strategy is simple_byte
 11739  003356  5020               	movf	(??_lcd_gotoxy+1)^0,w,c
 11740  003358  E1F2               	bnz	l123
 11741                           
 11742                           ; Switch size 1, requested type "space"
 11743                           ; Number of cases is 4, Range of values is 1 to 4
 11744                           ; switch strategies available:
 11745                           ; Name         Instructions Cycles
 11746                           ; simple_byte           13     7 (average)
 11747                           ;	Chosen strategy is simple_byte
 11748  00335A  501F               	movf	??_lcd_gotoxy^0,w,c
 11749  00335C  0A01               	xorlw	1	; case 1
 11750  00335E  E0EF               	bz	l123
 11751  003360  0A03               	xorlw	3	; case 2
 11752  003362  E0EF               	bz	l10275
 11753  003364  0A01               	xorlw	1	; case 3
 11754  003366  E0EF               	bz	l10277
 11755  003368  0A07               	xorlw	7	; case 4
 11756  00336A  E0EF               	bz	l10279
 11757  00336C  D7E8               	goto	l123
 11758  00336E                     l10285:
 11759                           
 11760                           ;hd44780.c: 106:     address += x - 1;
 11761  00336E  0421               	decf	lcd_gotoxy@x^0,w,c
 11762  003370  2622               	addwf	lcd_gotoxy@address^0,f,c
 11763                           
 11764                           ;hd44780.c: 107:     lcdWrite(0x80 | address, COMMAND);
 11765  003372  6A1C               	clrf	lcdWrite@type^0,c
 11766  003374  5022               	movf	lcd_gotoxy@address^0,w,c
 11767  003376  0980               	iorlw	128
 11768  003378  EF69  F01A         	goto	_lcdWrite
 11769  00337C                     __end_of_lcd_gotoxy:
 11770                           	callstack 0
 11771                           
 11772 ;; *************** function _calc_power *****************
 11773 ;; Defined at:
 11774 ;;		line 541 in file "main.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  pwr             1    wreg     unsigned char 
 11777 ;;  res             4    7[BANK0 ] unsigned long 
 11778 ;;  u_rl            2   11[BANK0 ] unsigned short 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  pwr             1   25[BANK0 ] unsigned char 
 11781 ;;  tt              4   15[BANK0 ] unsigned long 
 11782 ;;  p_w             2   26[BANK0 ] unsigned short 
 11783 ;; Return value:  Size  Location     Type
 11784 ;;                  2    7[BANK0 ] unsigned short 
 11785 ;; Registers used:
 11786 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11787 ;; Tracked objects:
 11788 ;;		On entry : 3E/0
 11789 ;;		On exit  : 3F/0
 11790 ;;		Unchanged: 0/0
 11791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11792 ;;      Params:         0       6       0       0       0       0       0
 11793 ;;      Locals:         0      13       0       0       0       0       0
 11794 ;;      Temps:          0       2       0       0       0       0       0
 11795 ;;      Totals:         0      21       0       0       0       0       0
 11796 ;;Total ram usage:       21 bytes
 11797 ;; Hardware stack levels used: 1
 11798 ;; Hardware stack levels required when called: 4
 11799 ;; This function calls:
 11800 ;;		___lldiv
 11801 ;;		___lmul
 11802 ;;		___lwdiv
 11803 ;;		___lwmod
 11804 ;;		___wmul
 11805 ;; This function is called by:
 11806 ;;		_main
 11807 ;;		_show_lcd_main
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           	psect	text40
 11812  0021DA                     __ptext40:
 11813                           	callstack 0
 11814  0021DA                     _calc_power:
 11815                           	callstack 25
 11816                           
 11817                           ;incstack = 0
 11818                           ;calc_power@pwr stored from wreg
 11819  0021DA  0100               	movlb	0	; () banked
 11820  0021DC  6F79               	movwf	calc_power@pwr& (0+255),b
 11821                           
 11822                           ;main.c: 542:     uint32_t tt;;main.c: 543:     uint16_t p_w;;main.c: 545:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 11823  0021DE  C06B  F01A         	movff	calc_power@u_rl,___lmul@multiplier
 11824  0021E2  C06C  F01B         	movff	calc_power@u_rl+1,___lmul@multiplier+1
 11825  0021E6  6A1C               	clrf	(___lmul@multiplier+2)^0,c
 11826  0021E8  6A1D               	clrf	(___lmul@multiplier+3)^0,c
 11827  0021EA  C06B  F01E         	movff	calc_power@u_rl,___lmul@multiplicand
 11828  0021EE  C06C  F01F         	movff	calc_power@u_rl+1,___lmul@multiplicand+1
 11829  0021F2  6A20               	clrf	(___lmul@multiplicand+2)^0,c
 11830  0021F4  6A21               	clrf	(___lmul@multiplicand+3)^0,c
 11831  0021F6  EC9C  F018         	call	___lmul	;wreg free
 11832  0021FA  C01A  F073         	movff	?___lmul,_calc_power$2468
 11833  0021FE  C01B  F074         	movff	?___lmul+1,_calc_power$2468+1
 11834  002202  C01C  F075         	movff	?___lmul+2,_calc_power$2468+2
 11835  002206  C01D  F076         	movff	?___lmul+3,_calc_power$2468+3
 11836                           
 11837                           ;main.c: 542:     uint32_t tt;;main.c: 543:     uint16_t p_w;;main.c: 545:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 11838  00220A  C073  F01A         	movff	_calc_power$2468,___lmul@multiplier
 11839  00220E  C074  F01B         	movff	_calc_power$2468+1,___lmul@multiplier+1
 11840  002212  C075  F01C         	movff	_calc_power$2468+2,___lmul@multiplier+2
 11841  002216  C076  F01D         	movff	_calc_power$2468+3,___lmul@multiplier+3
 11842  00221A  0EE8               	movlw	232
 11843  00221C  6E1E               	movwf	___lmul@multiplicand^0,c
 11844  00221E  0E03               	movlw	3
 11845  002220  6E1F               	movwf	(___lmul@multiplicand+1)^0,c
 11846  002222  6A20               	clrf	(___lmul@multiplicand+2)^0,c
 11847  002224  6A21               	clrf	(___lmul@multiplicand+3)^0,c
 11848  002226  EC9C  F018         	call	___lmul	;wreg free
 11849  00222A  C01A  F06F         	movff	?___lmul,calc_power@tt
 11850  00222E  C01B  F070         	movff	?___lmul+1,calc_power@tt+1
 11851  002232  C01C  F071         	movff	?___lmul+2,calc_power@tt+2
 11852  002236  C01D  F072         	movff	?___lmul+3,calc_power@tt+3
 11853                           
 11854                           ;main.c: 546:     p_w = tt / res;
 11855  00223A  C06F  F01A         	movff	calc_power@tt,___lldiv@dividend
 11856  00223E  C070  F01B         	movff	calc_power@tt+1,___lldiv@dividend+1
 11857  002242  C071  F01C         	movff	calc_power@tt+2,___lldiv@dividend+2
 11858  002246  C072  F01D         	movff	calc_power@tt+3,___lldiv@dividend+3
 11859  00224A  C067  F01E         	movff	calc_power@res,___lldiv@divisor
 11860  00224E  C068  F01F         	movff	calc_power@res+1,___lldiv@divisor+1
 11861  002252  C069  F020         	movff	calc_power@res+2,___lldiv@divisor+2
 11862  002256  C06A  F021         	movff	calc_power@res+3,___lldiv@divisor+3
 11863  00225A  ECD2  F017         	call	___lldiv	;wreg free
 11864  00225E  C01A  F07A         	movff	?___lldiv,calc_power@p_w
 11865  002262  C01B  F07B         	movff	?___lldiv+1,calc_power@p_w+1
 11866                           
 11867                           ;main.c: 548:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 11868  002266  0100               	movlb	0	; () banked
 11869  002268  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
 11870  00226A  0E0A               	movlw	10
 11871  00226C  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11872  00226E  6A1D               	clrf	(___lwmod@divisor+1)^0,c
 11873  002270  0E64               	movlw	100
 11874  002272  D852               	call	PL136	;call to abstracted procedure
 11875  002274  ECBE  F019         	call	___lwmod	;wreg free
 11876  002278  C01A  F060         	movff	?___lwmod,___lwdiv@dividend
 11877  00227C  C01B  F061         	movff	?___lwmod+1,___lwdiv@dividend+1
 11878  002280  EC0D  F019         	call	___lwdiv	;wreg free
 11879  002284  D841               	call	PL104	;call to abstracted procedure
 11880  002286  ECDF  F01A         	call	___wmul	;wreg free
 11881  00228A  C01F  F077         	movff	?___wmul,_calc_power$2469
 11882  00228E  C020  F078         	movff	?___wmul+1,_calc_power$2469+1
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;main.c: 548:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 11886  002292  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
 11887  002294  0E64               	movlw	100
 11888  002296  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11889  002298  C07A  F060         	movff	calc_power@p_w,___lwdiv@dividend
 11890  00229C  C07B  F061         	movff	calc_power@p_w+1,___lwdiv@dividend+1
 11891  0022A0  EC0D  F019         	call	___lwdiv	;wreg free
 11892  0022A4  D831               	call	PL104	;call to abstracted procedure
 11893  0022A6  ECDF  F01A         	call	___wmul	;wreg free
 11894  0022AA  C01F  F06D         	movff	?___wmul,??_calc_power
 11895  0022AE  C020  F06E         	movff	?___wmul+1,??_calc_power+1
 11896  0022B2  C077  F060         	movff	_calc_power$2469,___lwdiv@dividend
 11897  0022B6  C078  F061         	movff	_calc_power$2469+1,___lwdiv@dividend+1
 11898  0022BA  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
 11899  0022BC  0E0A               	movlw	10
 11900  0022BE  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11901  0022C0  EC0D  F019         	call	___lwdiv	;wreg free
 11902  0022C4  5160               	movf	?___lwdiv& (0+255),w,b
 11903  0022C6  276D               	addwf	??_calc_power& (0+255),f,b
 11904  0022C8  5161               	movf	(?___lwdiv+1)& (0+255),w,b
 11905  0022CA  236E               	addwfc	(??_calc_power+1)& (0+255),f,b
 11906  0022CC  6A1D               	clrf	(___lwmod@divisor+1)^0,c
 11907  0022CE  0E0A               	movlw	10
 11908  0022D0  D823               	call	PL136	;call to abstracted procedure
 11909  0022D2  ECBE  F019         	call	___lwmod	;wreg free
 11910  0022D6  C01A  F01F         	movff	?___lwmod,___wmul@multiplier
 11911  0022DA  C01B  F020         	movff	?___lwmod+1,___wmul@multiplier+1
 11912  0022DE  C079  F021         	movff	calc_power@pwr,___wmul@multiplicand
 11913  0022E2  6A22               	clrf	(___wmul@multiplicand+1)^0,c
 11914  0022E4  ECDF  F01A         	call	___wmul	;wreg free
 11915  0022E8  C01F  F060         	movff	?___wmul,___lwdiv@dividend
 11916  0022EC  C020  F061         	movff	?___wmul+1,___lwdiv@dividend+1
 11917  0022F0  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
 11918  0022F2  0E64               	movlw	100
 11919  0022F4  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11920  0022F6  EC0D  F019         	call	___lwdiv	;wreg free
 11921  0022FA  5160               	movf	?___lwdiv& (0+255),w,b
 11922  0022FC  256D               	addwf	??_calc_power& (0+255),w,b
 11923  0022FE  6F67               	movwf	?_calc_power& (0+255),b
 11924  002300  5161               	movf	(?___lwdiv+1)& (0+255),w,b
 11925  002302  216E               	addwfc	(??_calc_power+1)& (0+255),w,b
 11926  002304  6F68               	movwf	(?_calc_power+1)& (0+255),b
 11927                           
 11928                           ; BSR set to: 0
 11929  002306  0012               	return		;funcret
 11930  002308                     __end_of_calc_power:
 11931                           	callstack 0
 11932  002308                     PL104:
 11933                           	callstack 25
 11934  002308  C060  F01F         	movff	?___lwdiv,___wmul@multiplier
 11935  00230C  C061  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
 11936  002310  C079  F021         	movff	calc_power@pwr,___wmul@multiplicand
 11937  002314  6A22               	clrf	(___wmul@multiplicand+1)^0,c
 11938  002316  0012               	return	
 11939  002318                     __end_ofPL104:
 11940                           	callstack 0
 11941  002318                     PL136:
 11942                           	callstack 25
 11943  002318  6E1C               	movwf	___lwmod@divisor^0,c
 11944  00231A  C07A  F01A         	movff	calc_power@p_w,___lwmod@dividend
 11945  00231E  C07B  F01B         	movff	calc_power@p_w+1,___lwmod@dividend+1
 11946  002322  0012               	return	
 11947  002324                     __end_ofPL136:
 11948                           	callstack 0
 11949                           
 11950 ;; *************** function ___wmul *****************
 11951 ;; Defined at:
 11952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  multiplier      2   30[COMRAM] unsigned int 
 11955 ;;  multiplicand    2   32[COMRAM] unsigned int 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  product         2   34[COMRAM] unsigned int 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  2   30[COMRAM] unsigned int 
 11960 ;; Registers used:
 11961 ;;		wreg, status,2, status,0, prodl, prodh
 11962 ;; Tracked objects:
 11963 ;;		On entry : 3F/0
 11964 ;;		On exit  : 3F/0
 11965 ;;		Unchanged: 3F/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11967 ;;      Params:         4       0       0       0       0       0       0
 11968 ;;      Locals:         2       0       0       0       0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0
 11970 ;;      Totals:         6       0       0       0       0       0       0
 11971 ;;Total ram usage:        6 bytes
 11972 ;; Hardware stack levels used: 1
 11973 ;; Hardware stack levels required when called: 3
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_calc_power
 11978 ;;		_atoi
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           	psect	text41
 11983  0035BE                     __ptext41:
 11984                           	callstack 0
 11985  0035BE                     ___wmul:
 11986                           	callstack 23
 11987                           
 11988                           ; BSR set to: 0
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;incstack = 0
 11992  0035BE  501F               	movf	___wmul@multiplier^0,w,c
 11993  0035C0  0221               	mulwf	___wmul@multiplicand^0,c
 11994  0035C2  CFF3 F023          	movff	prodl,___wmul@product
 11995  0035C6  CFF4 F024          	movff	prodh,___wmul@product+1
 11996  0035CA  501F               	movf	___wmul@multiplier^0,w,c
 11997  0035CC  0222               	mulwf	(___wmul@multiplicand+1)^0,c
 11998  0035CE  50F3               	movf	243,w,c
 11999  0035D0  2624               	addwf	(___wmul@product+1)^0,f,c
 12000  0035D2  5020               	movf	(___wmul@multiplier+1)^0,w,c
 12001  0035D4  0221               	mulwf	___wmul@multiplicand^0,c
 12002  0035D6  50F3               	movf	243,w,c
 12003  0035D8  2624               	addwf	(___wmul@product+1)^0,f,c
 12004                           
 12005                           ; BSR set to: 0
 12006  0035DA  C023  F01F         	movff	___wmul@product,?___wmul
 12007  0035DE  C024  F020         	movff	___wmul@product+1,?___wmul+1
 12008                           
 12009                           ; BSR set to: 0
 12010  0035E2  0012               	return		;funcret
 12011  0035E4                     __end_of___wmul:
 12012                           	callstack 0
 12013                           
 12014 ;; *************** function ___lwmod *****************
 12015 ;; Defined at:
 12016 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;  dividend        2   25[COMRAM] unsigned int 
 12019 ;;  divisor         2   27[COMRAM] unsigned int 
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;  counter         1   29[COMRAM] unsigned char 
 12022 ;; Return value:  Size  Location     Type
 12023 ;;                  2   25[COMRAM] unsigned int 
 12024 ;; Registers used:
 12025 ;;		wreg, status,2, status,0
 12026 ;; Tracked objects:
 12027 ;;		On entry : 3F/0
 12028 ;;		On exit  : 3F/0
 12029 ;;		Unchanged: 3F/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12031 ;;      Params:         4       0       0       0       0       0       0
 12032 ;;      Locals:         1       0       0       0       0       0       0
 12033 ;;      Temps:          0       0       0       0       0       0       0
 12034 ;;      Totals:         5       0       0       0       0       0       0
 12035 ;;Total ram usage:        5 bytes
 12036 ;; Hardware stack levels used: 1
 12037 ;; Hardware stack levels required when called: 3
 12038 ;; This function calls:
 12039 ;;		Nothing
 12040 ;; This function is called by:
 12041 ;;		_calc_power
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           	psect	text42
 12046  00337C                     __ptext42:
 12047                           	callstack 0
 12048  00337C                     ___lwmod:
 12049                           	callstack 25
 12050                           
 12051                           ; BSR set to: 0
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;incstack = 0
 12055  00337C  501C               	movf	___lwmod@divisor^0,w,c
 12056  00337E  101D               	iorwf	(___lwmod@divisor+1)^0,w,c
 12057  003380  E017               	bz	l1049
 12058                           
 12059                           ; BSR set to: 0
 12060  003382  0E01               	movlw	1
 12061  003384  6E1E               	movwf	___lwmod@counter^0,c
 12062  003386  D004               	goto	l10351
 12063  003388                     l10349:
 12064                           
 12065                           ; BSR set to: 0
 12066  003388  90D8               	bcf	status,0,c
 12067  00338A  361C               	rlcf	___lwmod@divisor^0,f,c
 12068  00338C  361D               	rlcf	(___lwmod@divisor+1)^0,f,c
 12069  00338E  2A1E               	incf	___lwmod@counter^0,f,c
 12070  003390                     l10351:
 12071                           
 12072                           ; BSR set to: 0
 12073  003390  AE1D               	btfss	(___lwmod@divisor+1)^0,7,c
 12074  003392  D7FA               	goto	l10349
 12075  003394                     u13680:
 12076                           
 12077                           ; BSR set to: 0
 12078  003394  501C               	movf	___lwmod@divisor^0,w,c
 12079  003396  5C1A               	subwf	___lwmod@dividend^0,w,c
 12080  003398  501D               	movf	(___lwmod@divisor+1)^0,w,c
 12081  00339A  581B               	subwfb	(___lwmod@dividend+1)^0,w,c
 12082  00339C  E304               	bnc	l10357
 12083                           
 12084                           ; BSR set to: 0
 12085  00339E  501C               	movf	___lwmod@divisor^0,w,c
 12086  0033A0  5E1A               	subwf	___lwmod@dividend^0,f,c
 12087  0033A2  501D               	movf	(___lwmod@divisor+1)^0,w,c
 12088  0033A4  5A1B               	subwfb	(___lwmod@dividend+1)^0,f,c
 12089  0033A6                     l10357:
 12090                           
 12091                           ; BSR set to: 0
 12092  0033A6  90D8               	bcf	status,0,c
 12093  0033A8  321D               	rrcf	(___lwmod@divisor+1)^0,f,c
 12094  0033AA  321C               	rrcf	___lwmod@divisor^0,f,c
 12095                           
 12096                           ; BSR set to: 0
 12097  0033AC  2E1E               	decfsz	___lwmod@counter^0,f,c
 12098  0033AE  D7F2               	goto	u13680
 12099  0033B0                     l1049:
 12100                           
 12101                           ; BSR set to: 0
 12102  0033B0  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 12103  0033B4  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 12104                           
 12105                           ; BSR set to: 0
 12106  0033B8  0012               	return		;funcret
 12107  0033BA                     __end_of___lwmod:
 12108                           	callstack 0
 12109                           
 12110 ;; *************** function ___lwdiv *****************
 12111 ;; Defined at:
 12112 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;  dividend        2    0[BANK0 ] unsigned int 
 12115 ;;  divisor         2    2[BANK0 ] unsigned int 
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;  quotient        2    5[BANK0 ] unsigned int 
 12118 ;;  counter         1    4[BANK0 ] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  2    0[BANK0 ] unsigned int 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2, status,0
 12123 ;; Tracked objects:
 12124 ;;		On entry : 3F/0
 12125 ;;		On exit  : 3F/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12128 ;;      Params:         0       4       0       0       0       0       0
 12129 ;;      Locals:         0       3       0       0       0       0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0
 12131 ;;      Totals:         0       7       0       0       0       0       0
 12132 ;;Total ram usage:        7 bytes
 12133 ;; Hardware stack levels used: 1
 12134 ;; Hardware stack levels required when called: 3
 12135 ;; This function calls:
 12136 ;;		Nothing
 12137 ;; This function is called by:
 12138 ;;		_calc_power
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           	psect	text43
 12143  00321A                     __ptext43:
 12144                           	callstack 0
 12145  00321A                     ___lwdiv:
 12146                           	callstack 25
 12147                           
 12148                           ; BSR set to: 0
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;incstack = 0
 12152  00321A  6B65               	clrf	___lwdiv@quotient& (0+255),b
 12153  00321C  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156  00321E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12157  003220  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12158  003222  E01B               	bz	l1039
 12159                           
 12160                           ; BSR set to: 0
 12161  003224  0E01               	movlw	1
 12162  003226  6F64               	movwf	___lwdiv@counter& (0+255),b
 12163  003228  D004               	goto	l10331
 12164  00322A                     l10329:
 12165                           
 12166                           ; BSR set to: 0
 12167  00322A  90D8               	bcf	status,0,c
 12168  00322C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 12169  00322E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12170  003230  2B64               	incf	___lwdiv@counter& (0+255),f,b
 12171  003232                     l10331:
 12172                           
 12173                           ; BSR set to: 0
 12174  003232  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12175  003234  D7FA               	goto	l10329
 12176  003236                     u13650:
 12177                           
 12178                           ; BSR set to: 0
 12179  003236  90D8               	bcf	status,0,c
 12180  003238  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 12181  00323A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12182                           
 12183                           ; BSR set to: 0
 12184  00323C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12185  00323E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 12186  003240  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12187  003242  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12188  003244  E305               	bnc	l10341
 12189                           
 12190                           ; BSR set to: 0
 12191  003246  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12192  003248  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 12193  00324A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12194  00324C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12195                           
 12196                           ; BSR set to: 0
 12197  00324E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 12198  003250                     l10341:
 12199                           
 12200                           ; BSR set to: 0
 12201  003250  90D8               	bcf	status,0,c
 12202  003252  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12203  003254  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 12204                           
 12205                           ; BSR set to: 0
 12206  003256  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 12207  003258  D7EE               	goto	u13650
 12208  00325A                     l1039:
 12209                           
 12210                           ; BSR set to: 0
 12211  00325A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 12212  00325E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12213                           
 12214                           ; BSR set to: 0
 12215  003262  0012               	return		;funcret
 12216  003264                     __end_of___lwdiv:
 12217                           	callstack 0
 12218                           
 12219 ;; *************** function ___lmul *****************
 12220 ;; Defined at:
 12221 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  multiplier      4   25[COMRAM] unsigned long 
 12224 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  product         4   33[COMRAM] unsigned long 
 12227 ;; Return value:  Size  Location     Type
 12228 ;;                  4   25[COMRAM] unsigned long 
 12229 ;; Registers used:
 12230 ;;		wreg, status,2, status,0
 12231 ;; Tracked objects:
 12232 ;;		On entry : 0/1
 12233 ;;		On exit  : 0/0
 12234 ;;		Unchanged: 0/0
 12235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12236 ;;      Params:         8       0       0       0       0       0       0
 12237 ;;      Locals:         4       0       0       0       0       0       0
 12238 ;;      Temps:          0       0       0       0       0       0       0
 12239 ;;      Totals:        12       0       0       0       0       0       0
 12240 ;;Total ram usage:       12 bytes
 12241 ;; Hardware stack levels used: 1
 12242 ;; Hardware stack levels required when called: 3
 12243 ;; This function calls:
 12244 ;;		Nothing
 12245 ;; This function is called by:
 12246 ;;		_main
 12247 ;;		_calc_power
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           	psect	text44
 12252  003138                     __ptext44:
 12253                           	callstack 0
 12254  003138                     ___lmul:
 12255                           	callstack 25
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;incstack = 0
 12259  003138  6A22               	clrf	___lmul@product^0,c
 12260  00313A  6A23               	clrf	(___lmul@product+1)^0,c
 12261  00313C  6A24               	clrf	(___lmul@product+2)^0,c
 12262  00313E  6A25               	clrf	(___lmul@product+3)^0,c
 12263  003140                     l557:
 12264  003140  A01A               	btfss	___lmul@multiplier^0,0,c
 12265  003142  D008               	goto	l10297
 12266  003144  501E               	movf	___lmul@multiplicand^0,w,c
 12267  003146  2622               	addwf	___lmul@product^0,f,c
 12268  003148  501F               	movf	(___lmul@multiplicand+1)^0,w,c
 12269  00314A  2223               	addwfc	(___lmul@product+1)^0,f,c
 12270  00314C  5020               	movf	(___lmul@multiplicand+2)^0,w,c
 12271  00314E  2224               	addwfc	(___lmul@product+2)^0,f,c
 12272  003150  5021               	movf	(___lmul@multiplicand+3)^0,w,c
 12273  003152  2225               	addwfc	(___lmul@product+3)^0,f,c
 12274  003154                     l10297:
 12275  003154  90D8               	bcf	status,0,c
 12276  003156  361E               	rlcf	___lmul@multiplicand^0,f,c
 12277  003158  361F               	rlcf	(___lmul@multiplicand+1)^0,f,c
 12278  00315A  3620               	rlcf	(___lmul@multiplicand+2)^0,f,c
 12279  00315C  3621               	rlcf	(___lmul@multiplicand+3)^0,f,c
 12280  00315E  90D8               	bcf	status,0,c
 12281  003160  321D               	rrcf	(___lmul@multiplier+3)^0,f,c
 12282  003162  321C               	rrcf	(___lmul@multiplier+2)^0,f,c
 12283  003164  321B               	rrcf	(___lmul@multiplier+1)^0,f,c
 12284  003166  321A               	rrcf	___lmul@multiplier^0,f,c
 12285  003168  501A               	movf	___lmul@multiplier^0,w,c
 12286  00316A  101B               	iorwf	(___lmul@multiplier+1)^0,w,c
 12287  00316C  101C               	iorwf	(___lmul@multiplier+2)^0,w,c
 12288  00316E  101D               	iorwf	(___lmul@multiplier+3)^0,w,c
 12289  003170  E1E7               	bnz	l557
 12290  003172  C022  F01A         	movff	___lmul@product,?___lmul
 12291  003176  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 12292  00317A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 12293  00317E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 12294  003182  0012               	return		;funcret
 12295  003184                     __end_of___lmul:
 12296                           	callstack 0
 12297                           
 12298 ;; *************** function ___lldiv *****************
 12299 ;; Defined at:
 12300 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  dividend        4   25[COMRAM] unsigned long 
 12303 ;;  divisor         4   29[COMRAM] unsigned long 
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;  quotient        4   33[COMRAM] unsigned long 
 12306 ;;  counter         1   37[COMRAM] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  4   25[COMRAM] unsigned long 
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/1
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12316 ;;      Params:         8       0       0       0       0       0       0
 12317 ;;      Locals:         5       0       0       0       0       0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0
 12319 ;;      Totals:        13       0       0       0       0       0       0
 12320 ;;Total ram usage:       13 bytes
 12321 ;; Hardware stack levels used: 1
 12322 ;; Hardware stack levels required when called: 3
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_main
 12327 ;;		_calc_power
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           	psect	text45
 12332  002FA4                     __ptext45:
 12333                           	callstack 0
 12334  002FA4                     ___lldiv:
 12335                           	callstack 25
 12336                           
 12337                           ;incstack = 0
 12338  002FA4  6A22               	clrf	___lldiv@quotient^0,c
 12339  002FA6  6A23               	clrf	(___lldiv@quotient+1)^0,c
 12340  002FA8  6A24               	clrf	(___lldiv@quotient+2)^0,c
 12341  002FAA  6A25               	clrf	(___lldiv@quotient+3)^0,c
 12342  002FAC  501E               	movf	___lldiv@divisor^0,w,c
 12343  002FAE  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
 12344  002FB0  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
 12345  002FB2  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
 12346  002FB4  E029               	bz	l575
 12347  002FB6  0E01               	movlw	1
 12348  002FB8  6E26               	movwf	___lldiv@counter^0,c
 12349  002FBA  D006               	goto	l10309
 12350  002FBC                     l10307:
 12351  002FBC  90D8               	bcf	status,0,c
 12352  002FBE  361E               	rlcf	___lldiv@divisor^0,f,c
 12353  002FC0  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
 12354  002FC2  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
 12355  002FC4  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
 12356  002FC6  2A26               	incf	___lldiv@counter^0,f,c
 12357  002FC8                     l10309:
 12358  002FC8  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
 12359  002FCA  D7F8               	goto	l10307
 12360  002FCC                     u13620:
 12361  002FCC  90D8               	bcf	status,0,c
 12362  002FCE  3622               	rlcf	___lldiv@quotient^0,f,c
 12363  002FD0  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
 12364  002FD2  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
 12365  002FD4  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
 12366  002FD6  501E               	movf	___lldiv@divisor^0,w,c
 12367  002FD8  5C1A               	subwf	___lldiv@dividend^0,w,c
 12368  002FDA  501F               	movf	(___lldiv@divisor+1)^0,w,c
 12369  002FDC  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
 12370  002FDE  5020               	movf	(___lldiv@divisor+2)^0,w,c
 12371  002FE0  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
 12372  002FE2  5021               	movf	(___lldiv@divisor+3)^0,w,c
 12373  002FE4  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
 12374  002FE6  E309               	bnc	l10319
 12375  002FE8  501E               	movf	___lldiv@divisor^0,w,c
 12376  002FEA  5E1A               	subwf	___lldiv@dividend^0,f,c
 12377  002FEC  501F               	movf	(___lldiv@divisor+1)^0,w,c
 12378  002FEE  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
 12379  002FF0  5020               	movf	(___lldiv@divisor+2)^0,w,c
 12380  002FF2  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
 12381  002FF4  5021               	movf	(___lldiv@divisor+3)^0,w,c
 12382  002FF6  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
 12383  002FF8  8022               	bsf	___lldiv@quotient^0,0,c
 12384  002FFA                     l10319:
 12385  002FFA  90D8               	bcf	status,0,c
 12386  002FFC  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
 12387  002FFE  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
 12388  003000  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
 12389  003002  321E               	rrcf	___lldiv@divisor^0,f,c
 12390  003004  2E26               	decfsz	___lldiv@counter^0,f,c
 12391  003006  D7E2               	goto	u13620
 12392  003008                     l575:
 12393  003008  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 12394  00300C  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 12395  003010  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 12396  003014  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 12397  003018  0012               	return		;funcret
 12398  00301A                     __end_of___lldiv:
 12399                           	callstack 0
 12400                           
 12401 ;; *************** function _read_eep *****************
 12402 ;; Defined at:
 12403 ;;		line 25 in file "eeprom.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;  address         2   25[COMRAM] unsigned short 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;		None
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      unsigned char 
 12410 ;; Registers used:
 12411 ;;		wreg, status,2
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/1
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12417 ;;      Params:         2       0       0       0       0       0       0
 12418 ;;      Locals:         0       0       0       0       0       0       0
 12419 ;;      Temps:          0       0       0       0       0       0       0
 12420 ;;      Totals:         2       0       0       0       0       0       0
 12421 ;;Total ram usage:        2 bytes
 12422 ;; Hardware stack levels used: 1
 12423 ;; Hardware stack levels required when called: 3
 12424 ;; This function calls:
 12425 ;;		Nothing
 12426 ;; This function is called by:
 12427 ;;		_main
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text46
 12432  003682                     __ptext46:
 12433                           	callstack 0
 12434  003682                     _read_eep:
 12435                           	callstack 27
 12436                           
 12437                           ;eeprom.c: 27:     while( EECON1bits.WR )
 12438                           
 12439                           ;eeprom.c: 28:     {}
 12440                           
 12441                           ;incstack = 0
 12442  003682  B2A6               	btfsc	166,1,c	;volsfr
 12443  003684  D7FE               	goto	_read_eep
 12444                           
 12445                           ;eeprom.c: 30:     EEADR = address;
 12446  003686  C01A  FFA9         	movff	read_eep@address,4009	;volatile
 12447                           
 12448                           ;eeprom.c: 31:     EECON1bits.EEPGD = 0;
 12449  00368A  9EA6               	bcf	166,7,c	;volsfr
 12450                           
 12451                           ;eeprom.c: 32:     EECON1bits.CFGS = 0;
 12452  00368C  9CA6               	bcf	166,6,c	;volsfr
 12453                           
 12454                           ;eeprom.c: 33:     EECON1bits.RD = 1;
 12455  00368E  80A6               	bsf	166,0,c	;volsfr
 12456                           
 12457                           ;eeprom.c: 34:     return( EEDATA );
 12458  003690  50A8               	movf	168,w,c	;volatile
 12459  003692  0012               	return		;funcret
 12460  003694                     __end_of_read_eep:
 12461                           	callstack 0
 12462                           
 12463 ;; *************** function _lcd_putc *****************
 12464 ;; Defined at:
 12465 ;;		line 112 in file "hd44780.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  c               1    wreg     unsigned char 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  c               1   29[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  1    wreg      void 
 12472 ;; Registers used:
 12473 ;;		wreg, status,2, status,0, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/1
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12479 ;;      Params:         0       0       0       0       0       0       0
 12480 ;;      Locals:         1       0       0       0       0       0       0
 12481 ;;      Temps:          0       0       0       0       0       0       0
 12482 ;;      Totals:         1       0       0       0       0       0       0
 12483 ;;Total ram usage:        1 bytes
 12484 ;; Hardware stack levels used: 1
 12485 ;; Hardware stack levels required when called: 5
 12486 ;; This function calls:
 12487 ;;		_lcdWrite
 12488 ;; This function is called by:
 12489 ;;		_main
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text47
 12494  0036A0                     __ptext47:
 12495                           	callstack 0
 12496  0036A0                     _lcd_putc:
 12497                           	callstack 25
 12498                           
 12499                           ;incstack = 0
 12500                           ;lcd_putc@c stored from wreg
 12501  0036A0  6E1E               	movwf	lcd_putc@c^0,c
 12502                           
 12503                           ;hd44780.c: 114:             lcdWrite(c, DATA);
 12504  0036A2  0E01               	movlw	1
 12505  0036A4  6E1C               	movwf	lcdWrite@type^0,c
 12506  0036A6  501E               	movf	lcd_putc@c^0,w,c
 12507  0036A8  EF69  F01A         	goto	_lcdWrite
 12508  0036AC                     __end_of_lcd_putc:
 12509                           	callstack 0
 12510                           
 12511 ;; *************** function _key_press *****************
 12512 ;; Defined at:
 12513 ;;		line 5 in file "key.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;		None
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  key             1   25[COMRAM] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2, status,0
 12522 ;; Tracked objects:
 12523 ;;		On entry : 3F/1
 12524 ;;		On exit  : 3F/1
 12525 ;;		Unchanged: 3F/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12527 ;;      Params:         0       0       0       0       0       0       0
 12528 ;;      Locals:         1       0       0       0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0
 12530 ;;      Totals:         1       0       0       0       0       0       0
 12531 ;;Total ram usage:        1 bytes
 12532 ;; Hardware stack levels used: 1
 12533 ;; Hardware stack levels required when called: 3
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		_main
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text48
 12542  0033BA                     __ptext48:
 12543                           	callstack 0
 12544  0033BA                     _key_press:
 12545                           	callstack 27
 12546                           
 12547                           ; BSR set to: 1
 12548                           ;key.c: 7:     static uint16_t count = 0;;key.c: 8:     uint8_t key;;key.c: 10:     if (
      +                          (PORTB & (1 << 3)) == 0)
 12549                           
 12550                           ;incstack = 0
 12551  0033BA  B681               	btfsc	129,3,c	;volatile
 12552  0033BC  D003               	goto	l535
 12553                           
 12554                           ; BSR set to: 1
 12555                           ;key.c: 11:         key = 1;
 12556  0033BE  0E01               	movlw	1
 12557  0033C0  6E1A               	movwf	key_press@key^0,c
 12558  0033C2  D001               	goto	l5927
 12559  0033C4                     l535:
 12560                           
 12561                           ; BSR set to: 1
 12562                           ;key.c: 13:         key = 0;
 12563  0033C4  6A1A               	clrf	key_press@key^0,c
 12564  0033C6                     l5927:
 12565                           
 12566                           ; BSR set to: 1
 12567                           ;key.c: 16:     if (key) {
 12568  0033C6  501A               	movf	key_press@key^0,w,c
 12569  0033C8  E013               	bz	l537
 12570                           
 12571                           ; BSR set to: 1
 12572                           ;key.c: 17:         if (count == 50) {
 12573  0033CA  0E32               	movlw	50
 12574  0033CC  1835               	xorwf	key_press@count^0,w,c
 12575  0033CE  1036               	iorwf	(key_press@count+1)^0,w,c
 12576  0033D0  E106               	bnz	l5937
 12577                           
 12578                           ; BSR set to: 1
 12579                           ;key.c: 18:             count = 50 + 10;
 12580  0033D2  6A36               	clrf	(key_press@count+1)^0,c
 12581  0033D4  0E3C               	movlw	60
 12582  0033D6  6E35               	movwf	key_press@count^0,c
 12583                           
 12584                           ;key.c: 19:             key_pressed = 2;
 12585  0033D8  0E02               	movlw	2
 12586  0033DA  6E3D               	movwf	_key_pressed^0,c	;volatile
 12587  0033DC  0C02               	retlw	2
 12588  0033DE                     l5937:
 12589                           
 12590                           ; BSR set to: 1
 12591  0033DE  4A35               	infsnz	key_press@count^0,f,c
 12592  0033E0  2A36               	incf	(key_press@count+1)^0,f,c
 12593                           
 12594                           ; BSR set to: 1
 12595                           ;key.c: 23:         if (count == 7) {
 12596  0033E2  0E07               	movlw	7
 12597  0033E4  1835               	xorwf	key_press@count^0,w,c
 12598  0033E6  1036               	iorwf	(key_press@count+1)^0,w,c
 12599  0033E8  B4D8               	btfsc	status,2,c
 12600                           
 12601                           ; BSR set to: 1
 12602                           ;key.c: 24:             key_pressed = key;
 12603  0033EA  C01A  F03D         	movff	key_press@key,_key_pressed	;volatile
 12604                           
 12605                           ;key.c: 25:             return;
 12606  0033EE  0012               	return	
 12607  0033F0                     l537:
 12608                           
 12609                           ; BSR set to: 1
 12610                           ;key.c: 28:         count = 0;
 12611  0033F0  6A35               	clrf	key_press@count^0,c
 12612  0033F2  6A36               	clrf	(key_press@count+1)^0,c
 12613                           
 12614                           ; BSR set to: 1
 12615  0033F4  0012               	return		;funcret
 12616  0033F6                     __end_of_key_press:
 12617                           	callstack 0
 12618                           
 12619 ;; *************** function _key_GetKey *****************
 12620 ;; Defined at:
 12621 ;;		line 46 in file "key.c"
 12622 ;; Parameters:    Size  Location     Type
 12623 ;;		None
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  key             1   25[COMRAM] unsigned char 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;                  1    wreg      unsigned char 
 12628 ;; Registers used:
 12629 ;;		wreg, status,2
 12630 ;; Tracked objects:
 12631 ;;		On entry : 3F/1
 12632 ;;		On exit  : 3F/1
 12633 ;;		Unchanged: 3F/0
 12634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12635 ;;      Params:         0       0       0       0       0       0       0
 12636 ;;      Locals:         1       0       0       0       0       0       0
 12637 ;;      Temps:          0       0       0       0       0       0       0
 12638 ;;      Totals:         1       0       0       0       0       0       0
 12639 ;;Total ram usage:        1 bytes
 12640 ;; Hardware stack levels used: 1
 12641 ;; Hardware stack levels required when called: 3
 12642 ;; This function calls:
 12643 ;;		Nothing
 12644 ;; This function is called by:
 12645 ;;		_main
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           	psect	text49
 12650  0036AC                     __ptext49:
 12651                           	callstack 0
 12652  0036AC                     _key_GetKey:
 12653                           	callstack 27
 12654                           
 12655                           ; BSR set to: 1
 12656                           ;key.c: 48:   uint8_t key = key_pressed;
 12657                           
 12658                           ; BSR set to: 1
 12659                           ;incstack = 0
 12660  0036AC  C03D  F01A         	movff	_key_pressed,key_GetKey@key	;volatile
 12661                           
 12662                           ;key.c: 50:   key_pressed = 0;
 12663  0036B0  6A3D               	clrf	_key_pressed^0,c	;volatile
 12664                           
 12665                           ; BSR set to: 1
 12666                           ;key.c: 51:   return key;
 12667  0036B2  501A               	movf	key_GetKey@key^0,w,c
 12668                           
 12669                           ; BSR set to: 1
 12670  0036B4  0012               	return		;funcret
 12671  0036B6                     __end_of_key_GetKey:
 12672                           	callstack 0
 12673                           
 12674 ;; *************** function _init_cpu *****************
 12675 ;; Defined at:
 12676 ;;		line 339 in file "main.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;		None
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12690 ;;      Params:         0       0       0       0       0       0       0
 12691 ;;      Locals:         0       0       0       0       0       0       0
 12692 ;;      Temps:          2       0       0       0       0       0       0
 12693 ;;      Totals:         2       0       0       0       0       0       0
 12694 ;;Total ram usage:        2 bytes
 12695 ;; Hardware stack levels used: 1
 12696 ;; Hardware stack levels required when called: 7
 12697 ;; This function calls:
 12698 ;;		_cgrom_char
 12699 ;;		_initLCD
 12700 ;; This function is called by:
 12701 ;;		_main
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           	psect	text50
 12706  002438                     __ptext50:
 12707                           	callstack 0
 12708  002438                     _init_cpu:
 12709                           	callstack 23
 12710                           
 12711                           ;main.c: 340:     OSCCONbits.SCS = 0b00;
 12712                           
 12713                           ; BSR set to: 1
 12714                           ;incstack = 0
 12715  002438  0EFC               	movlw	-4
 12716  00243A  16D3               	andwf	211,f,c	;volatile
 12717                           
 12718                           ;main.c: 341:     OSCCONbits.IRCF = 0b111;
 12719  00243C  0E70               	movlw	112
 12720  00243E  12D3               	iorwf	211,f,c	;volatile
 12721                           
 12722                           ;main.c: 342:     OSCTUNEbits.PLLEN = 1;
 12723  002440  8C9B               	bsf	155,6,c	;volatile
 12724                           
 12725                           ;main.c: 343:     TRISA = 0b00010111;
 12726  002442  0E17               	movlw	23
 12727  002444  6E92               	movwf	146,c	;volatile
 12728                           
 12729                           ;main.c: 344:     PORTA = 0;
 12730  002446  6A80               	clrf	128,c	;volatile
 12731                           
 12732                           ;main.c: 345:     LATA = 0;
 12733  002448  6A89               	clrf	137,c	;volatile
 12734                           
 12735                           ;main.c: 347:     PORTC = 0;
 12736  00244A  6A82               	clrf	130,c	;volatile
 12737                           
 12738                           ;main.c: 348:     LATC = 0;
 12739  00244C  6A8B               	clrf	139,c	;volatile
 12740                           
 12741                           ;main.c: 349:     TRISC = 0b00000000;
 12742  00244E  6A94               	clrf	148,c	;volatile
 12743                           
 12744                           ;main.c: 350:     LATCbits.LATC4 = 0;
 12745  002450  988B               	bcf	139,4,c	;volatile
 12746                           
 12747                           ;main.c: 351:     LATCbits.LATC5 = 0;
 12748  002452  9A8B               	bcf	139,5,c	;volatile
 12749                           
 12750                           ;main.c: 353:     RBPU = 0;
 12751  002454  9EF1               	bcf	4081,7,c	;volatile
 12752                           
 12753                           ;main.c: 356:     WPUB = 0b00111000;
 12754  002456  0E38               	movlw	56
 12755  002458  6E7C               	movwf	124,c	;volatile
 12756                           
 12757                           ;main.c: 361:     PORTB = 0;
 12758  00245A  6A81               	clrf	129,c	;volatile
 12759                           
 12760                           ;main.c: 362:     LATB = 0;
 12761  00245C  6A8A               	clrf	138,c	;volatile
 12762                           
 12763                           ;main.c: 363:     TRISB = 0b00111111;
 12764  00245E  0E3F               	movlw	63
 12765  002460  6E93               	movwf	147,c	;volatile
 12766                           
 12767                           ;main.c: 366:     T0CONbits.T0PS = 0b011;
 12768  002462  50D5               	movf	213,w,c	;volatile
 12769  002464  0BF8               	andlw	-8
 12770  002466  0903               	iorlw	3
 12771  002468  6ED5               	movwf	213,c	;volatile
 12772                           
 12773                           ;main.c: 367:     T0CONbits.PSA = 0;
 12774  00246A  96D5               	bcf	213,3,c	;volatile
 12775                           
 12776                           ;main.c: 369:     T0CONbits.T0CS = 0;
 12777  00246C  9AD5               	bcf	213,5,c	;volatile
 12778                           
 12779                           ;main.c: 370:     T0CONbits.T08BIT = 1;
 12780  00246E  8CD5               	bsf	213,6,c	;volatile
 12781                           
 12782                           ;main.c: 371:     T0CONbits.TMR0ON = 1;
 12783  002470  8ED5               	bsf	213,7,c	;volatile
 12784                           
 12785                           ;main.c: 372:     INTCON2bits.TMR0IP = 0;
 12786  002472  94F1               	bcf	241,2,c	;volatile
 12787                           
 12788                           ;main.c: 373:     TMR0L = 57;
 12789  002474  0E39               	movlw	57
 12790  002476  6ED6               	movwf	214,c	;volatile
 12791                           
 12792                           ;main.c: 376:     ADCON2bits.ADCS = 0b110;
 12793  002478  50C0               	movf	192,w,c	;volatile
 12794  00247A  0BF8               	andlw	-8
 12795  00247C  0906               	iorlw	6
 12796  00247E  6EC0               	movwf	192,c	;volatile
 12797                           
 12798                           ;main.c: 377:     ADCON2bits.ACQT = 0;
 12799  002480  0EC7               	movlw	-57
 12800  002482  16C0               	andwf	192,f,c	;volatile
 12801                           
 12802                           ;main.c: 378:     ADCON2bits.ADFM = 1;
 12803  002484  8EC0               	bsf	192,7,c	;volatile
 12804                           
 12805                           ;main.c: 380:     ADCON1 = 0;
 12806  002486  6AC1               	clrf	193,c	;volatile
 12807                           
 12808                           ;main.c: 382:     ADCON0bits.ADON = 1;
 12809  002488  80C2               	bsf	194,0,c	;volatile
 12810                           
 12811                           ;main.c: 383:     ADCON0bits.CHS = 0b0000;
 12812  00248A  0EC3               	movlw	-61
 12813  00248C  16C2               	andwf	194,f,c	;volatile
 12814                           
 12815                           ;main.c: 384:     ANSELbits.ANS0 = 1;
 12816  00248E  807E               	bsf	126,0,c	;volatile
 12817                           
 12818                           ;main.c: 385:     IPR1bits.ADIP = 1;
 12819  002490  8C9F               	bsf	159,6,c	;volatile
 12820                           
 12821                           ;main.c: 386:     PIE1bits.ADIE = 1;
 12822  002492  8C9D               	bsf	157,6,c	;volatile
 12823                           
 12824                           ;main.c: 389:     TMR1CS = 0;
 12825  002494  92CD               	bcf	4045,1,c	;volatile
 12826                           
 12827                           ;main.c: 390:     T1OSCEN = 0;
 12828  002496  96CD               	bcf	4045,3,c	;volatile
 12829                           
 12830                           ;main.c: 391:     T1CONbits.T1CKPS = 0b11;
 12831  002498  0E30               	movlw	48
 12832  00249A  12CD               	iorwf	205,f,c	;volatile
 12833                           
 12834                           ;main.c: 392:     T1CONbits.RD16 = 1;
 12835  00249C  8ECD               	bsf	205,7,c	;volatile
 12836                           
 12837                           ;main.c: 393:     TMR1IE = 1;
 12838  00249E  809D               	bsf	3997,0,c	;volatile
 12839                           
 12840                           ;main.c: 394:     TMR1IP = 0;
 12841  0024A0  909F               	bcf	3999,0,c	;volatile
 12842                           
 12843                           ;main.c: 395:     TMR1ON = 1;
 12844  0024A2  80CD               	bsf	4045,0,c	;volatile
 12845                           
 12846                           ;main.c: 398:     T3CONbits.RD16 = 1;
 12847  0024A4  8EB1               	bsf	177,7,c	;volatile
 12848                           
 12849                           ;main.c: 400:     T3CONbits.T3CCP2 = 1;
 12850  0024A6  8CB1               	bsf	177,6,c	;volatile
 12851                           
 12852                           ;main.c: 404:     T3CONbits.TMR3CS = 0;
 12853  0024A8  92B1               	bcf	177,1,c	;volatile
 12854                           
 12855                           ;main.c: 407:     T3CONbits.T3CKPS = 0b000;
 12856  0024AA  0ECF               	movlw	-49
 12857  0024AC  16B1               	andwf	177,f,c	;volatile
 12858                           
 12859                           ;main.c: 411:     TMR3IP = 1;
 12860  0024AE  82A2               	bsf	4002,1,c	;volatile
 12861                           
 12862                           ;main.c: 412:     TMR3IE = 1;
 12863  0024B0  82A0               	bsf	4000,1,c	;volatile
 12864                           
 12865                           ;main.c: 416:     INT0IE = 1;
 12866  0024B2  88F2               	bsf	4082,4,c	;volatile
 12867                           
 12868                           ;main.c: 417:     INTCON2bits.INTEDG0 = 0;
 12869  0024B4  9CF1               	bcf	241,6,c	;volatile
 12870                           
 12871                           ;main.c: 418:     INT0IF = 0;
 12872  0024B6  92F2               	bcf	4082,1,c	;volatile
 12873                           
 12874                           ;main.c: 421:     RCONbits.IPEN = 1;
 12875  0024B8  8ED0               	bsf	208,7,c	;volatile
 12876                           
 12877                           ;main.c: 422:     INTCONbits.TMR0IE = 1;
 12878  0024BA  8AF2               	bsf	242,5,c	;volatile
 12879                           
 12880                           ;main.c: 423:     INTCONbits.GIEL = 1;
 12881  0024BC  8CF2               	bsf	242,6,c	;volatile
 12882                           
 12883                           ;main.c: 425:     (INTCONbits.GIE = 1);
 12884  0024BE  8EF2               	bsf	242,7,c	;volatile
 12885                           
 12886                           ;main.c: 426:     _delay((unsigned long)((50)*(64000000/4000.0)));
 12887  0024C0  0E05               	movlw	5
 12888  0024C2  6E23               	movwf	(??_init_cpu+1)^0,c
 12889  0024C4  0E0F               	movlw	15
 12890  0024C6  6E22               	movwf	??_init_cpu^0,c
 12891  0024C8  0EF1               	movlw	241
 12892  0024CA                     u14347:
 12893  0024CA  2EE8               	decfsz	wreg,f,c
 12894  0024CC  D7FE               	bra	u14347
 12895  0024CE  2E22               	decfsz	??_init_cpu^0,f,c
 12896  0024D0  D7FC               	bra	u14347
 12897  0024D2  2E23               	decfsz	(??_init_cpu+1)^0,f,c
 12898  0024D4  D7FA               	bra	u14347
 12899  0024D6  F000               	nop	
 12900                           
 12901                           ;main.c: 428:     initLCD();
 12902  0024D8  ECA3  F012         	call	_initLCD	;wreg free
 12903                           
 12904                           ;main.c: 429:     is_power = 1;
 12905  0024DC  8844               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
 12906                           
 12907                           ;main.c: 430:     power_100 = 0;
 12908  0024DE  9444               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
 12909                           
 12910                           ;main.c: 431:     cgrom_char(symbol_1, 1);
 12911  0024E0  0E88               	movlw	low _symbol_1
 12912  0024E2  6E1E               	movwf	cgrom_char@symbol^0,c
 12913  0024E4  0E7E               	movlw	high _symbol_1
 12914  0024E6  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12915  0024E8  0E01               	movlw	1
 12916  0024EA  6E20               	movwf	cgrom_char@address^0,c
 12917  0024EC  EC50  F01A         	call	_cgrom_char	;wreg free
 12918                           
 12919                           ;main.c: 432:     cgrom_char(symbol_2, 2);
 12920  0024F0  0E80               	movlw	low _symbol_2
 12921  0024F2  6E1E               	movwf	cgrom_char@symbol^0,c
 12922  0024F4  0E7E               	movlw	high _symbol_2
 12923  0024F6  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12924  0024F8  0E02               	movlw	2
 12925  0024FA  6E20               	movwf	cgrom_char@address^0,c
 12926  0024FC  EC50  F01A         	call	_cgrom_char	;wreg free
 12927                           
 12928                           ;main.c: 433:     cgrom_char(symbol_3, 3);
 12929  002500  0E78               	movlw	low _symbol_3
 12930  002502  6E1E               	movwf	cgrom_char@symbol^0,c
 12931  002504  0E7E               	movlw	high _symbol_3
 12932  002506  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12933  002508  0E03               	movlw	3
 12934  00250A  6E20               	movwf	cgrom_char@address^0,c
 12935  00250C  EC50  F01A         	call	_cgrom_char	;wreg free
 12936                           
 12937                           ;main.c: 434:     cgrom_char(symbol_4, 4);
 12938  002510  0E70               	movlw	low _symbol_4
 12939  002512  6E1E               	movwf	cgrom_char@symbol^0,c
 12940  002514  0E7E               	movlw	high _symbol_4
 12941  002516  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12942  002518  0E04               	movlw	4
 12943  00251A  6E20               	movwf	cgrom_char@address^0,c
 12944  00251C  EC50  F01A         	call	_cgrom_char	;wreg free
 12945                           
 12946                           ;main.c: 435:     cgrom_char(symbol_5, 5);
 12947  002520  0E68               	movlw	low _symbol_5
 12948  002522  6E1E               	movwf	cgrom_char@symbol^0,c
 12949  002524  0E7E               	movlw	high _symbol_5
 12950  002526  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12951  002528  0E05               	movlw	5
 12952  00252A  6E20               	movwf	cgrom_char@address^0,c
 12953  00252C  EC50  F01A         	call	_cgrom_char	;wreg free
 12954                           
 12955                           ;main.c: 436:     cgrom_char(symbol_6, 6);
 12956  002530  0E60               	movlw	low _symbol_6
 12957  002532  6E1E               	movwf	cgrom_char@symbol^0,c
 12958  002534  0E7E               	movlw	high _symbol_6
 12959  002536  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 12960  002538  0E06               	movlw	6
 12961  00253A  6E20               	movwf	cgrom_char@address^0,c
 12962  00253C  EC50  F01A         	call	_cgrom_char	;wreg free
 12963                           
 12964                           ;main.c: 437:     getU = 1;
 12965  002540  0E01               	movlw	1
 12966  002542  6E40               	movwf	_getU^0,c
 12967  002544  0C01               	retlw	1	;funcret
 12968  002546                     __end_of_init_cpu:
 12969                           	callstack 0
 12970                           
 12971 ;; *************** function _initLCD *****************
 12972 ;; Defined at:
 12973 ;;		line 10 in file "hd44780.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;		None
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;		None
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      void 
 12980 ;; Registers used:
 12981 ;;		wreg, status,2, status,0, cstack
 12982 ;; Tracked objects:
 12983 ;;		On entry : 0/0
 12984 ;;		On exit  : 0/0
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12987 ;;      Params:         0       0       0       0       0       0       0
 12988 ;;      Locals:         0       0       0       0       0       0       0
 12989 ;;      Temps:          1       0       0       0       0       0       0
 12990 ;;      Totals:         1       0       0       0       0       0       0
 12991 ;;Total ram usage:        1 bytes
 12992 ;; Hardware stack levels used: 1
 12993 ;; Hardware stack levels required when called: 6
 12994 ;; This function calls:
 12995 ;;		_clearLCD
 12996 ;;		_lcdNibble
 12997 ;;		_lcdWrite
 12998 ;; This function is called by:
 12999 ;;		_init_cpu
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           	psect	text51
 13004  002546                     __ptext51:
 13005                           	callstack 0
 13006  002546                     _initLCD:
 13007                           	callstack 23
 13008                           
 13009                           ;hd44780.c: 11:     LATAbits.LA7 = 0;
 13010                           
 13011                           ;incstack = 0
 13012  002546  9E89               	bcf	137,7,c	;volatile
 13013                           
 13014                           ;hd44780.c: 12:     LATAbits.LA6 = 0;
 13015  002548  9C89               	bcf	137,6,c	;volatile
 13016                           
 13017                           ;hd44780.c: 14:     _delay((unsigned long)((10)*(64000000/4000.0)));
 13018  00254A  0ED0               	movlw	208
 13019  00254C  6E1F               	movwf	??_initLCD^0,c
 13020  00254E  0ECA               	movlw	202
 13021  002550                     u14357:
 13022  002550  2EE8               	decfsz	wreg,f,c
 13023  002552  D7FE               	bra	u14357
 13024  002554  2E1F               	decfsz	??_initLCD^0,f,c
 13025  002556  D7FC               	bra	u14357
 13026                           
 13027                           ;hd44780.c: 15:     _delay((unsigned long)((10)*(64000000/4000.0)));
 13028  002558  0ED0               	movlw	208
 13029  00255A  6E1F               	movwf	??_initLCD^0,c
 13030  00255C  0ECA               	movlw	202
 13031  00255E                     u14367:
 13032  00255E  2EE8               	decfsz	wreg,f,c
 13033  002560  D7FE               	bra	u14367
 13034  002562  2E1F               	decfsz	??_initLCD^0,f,c
 13035  002564  D7FC               	bra	u14367
 13036                           
 13037                           ;hd44780.c: 16:     _delay((unsigned long)((10)*(64000000/4000.0)));
 13038  002566  0ED0               	movlw	208
 13039  002568  6E1F               	movwf	??_initLCD^0,c
 13040  00256A  0ECA               	movlw	202
 13041  00256C                     u14377:
 13042  00256C  2EE8               	decfsz	wreg,f,c
 13043  00256E  D7FE               	bra	u14377
 13044  002570  2E1F               	decfsz	??_initLCD^0,f,c
 13045  002572  D7FC               	bra	u14377
 13046                           
 13047                           ;hd44780.c: 17:     _delay((unsigned long)((10)*(64000000/4000.0)));
 13048  002574  0ED0               	movlw	208
 13049  002576  6E1F               	movwf	??_initLCD^0,c
 13050  002578  0ECA               	movlw	202
 13051  00257A                     u14387:
 13052  00257A  2EE8               	decfsz	wreg,f,c
 13053  00257C  D7FE               	bra	u14387
 13054  00257E  2E1F               	decfsz	??_initLCD^0,f,c
 13055  002580  D7FC               	bra	u14387
 13056                           
 13057                           ;hd44780.c: 21:     lcdNibble(0b0011);
 13058  002582  0E03               	movlw	3
 13059  002584  EC0B  F016         	call	_lcdNibble
 13060                           
 13061                           ;hd44780.c: 22:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13062  002588  0E68               	movlw	104
 13063  00258A  6E1F               	movwf	??_initLCD^0,c
 13064  00258C  0EE4               	movlw	228
 13065  00258E                     u14397:
 13066  00258E  2EE8               	decfsz	wreg,f,c
 13067  002590  D7FE               	bra	u14397
 13068  002592  2E1F               	decfsz	??_initLCD^0,f,c
 13069  002594  D7FC               	bra	u14397
 13070  002596  F000 F000          	nop2	
 13071                           
 13072                           ;hd44780.c: 23:     lcdNibble(0b0011);
 13073  00259A  0E03               	movlw	3
 13074  00259C  EC0B  F016         	call	_lcdNibble
 13075                           
 13076                           ;hd44780.c: 24:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13077  0025A0  0E68               	movlw	104
 13078  0025A2  6E1F               	movwf	??_initLCD^0,c
 13079  0025A4  0EE4               	movlw	228
 13080  0025A6                     u14407:
 13081  0025A6  2EE8               	decfsz	wreg,f,c
 13082  0025A8  D7FE               	bra	u14407
 13083  0025AA  2E1F               	decfsz	??_initLCD^0,f,c
 13084  0025AC  D7FC               	bra	u14407
 13085  0025AE  F000 F000          	nop2	
 13086                           
 13087                           ;hd44780.c: 25:     lcdNibble(0b0011);
 13088  0025B2  0E03               	movlw	3
 13089  0025B4  EC0B  F016         	call	_lcdNibble
 13090                           
 13091                           ;hd44780.c: 26:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13092  0025B8  0E68               	movlw	104
 13093  0025BA  6E1F               	movwf	??_initLCD^0,c
 13094  0025BC  0EE4               	movlw	228
 13095  0025BE                     u14417:
 13096  0025BE  2EE8               	decfsz	wreg,f,c
 13097  0025C0  D7FE               	bra	u14417
 13098  0025C2  2E1F               	decfsz	??_initLCD^0,f,c
 13099  0025C4  D7FC               	bra	u14417
 13100  0025C6  F000 F000          	nop2	
 13101                           
 13102                           ;hd44780.c: 27:     lcdNibble(0b0010);
 13103  0025CA  0E02               	movlw	2
 13104  0025CC  EC0B  F016         	call	_lcdNibble
 13105                           
 13106                           ;hd44780.c: 28:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13107  0025D0  0E68               	movlw	104
 13108  0025D2  6E1F               	movwf	??_initLCD^0,c
 13109  0025D4  0EE4               	movlw	228
 13110  0025D6                     u14427:
 13111  0025D6  2EE8               	decfsz	wreg,f,c
 13112  0025D8  D7FE               	bra	u14427
 13113  0025DA  2E1F               	decfsz	??_initLCD^0,f,c
 13114  0025DC  D7FC               	bra	u14427
 13115  0025DE  F000 F000          	nop2	
 13116                           
 13117                           ;hd44780.c: 31:     lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
 13118  0025E2  0E00               	movlw	0
 13119  0025E4  6E1C               	movwf	lcdWrite@type^0,c
 13120  0025E6  0E28               	movlw	40
 13121  0025E8  EC69  F01A         	call	_lcdWrite
 13122                           
 13123                           ;hd44780.c: 32:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13124  0025EC  0E68               	movlw	104
 13125  0025EE  6E1F               	movwf	??_initLCD^0,c
 13126  0025F0  0EE4               	movlw	228
 13127  0025F2                     u14437:
 13128  0025F2  2EE8               	decfsz	wreg,f,c
 13129  0025F4  D7FE               	bra	u14437
 13130  0025F6  2E1F               	decfsz	??_initLCD^0,f,c
 13131  0025F8  D7FC               	bra	u14437
 13132  0025FA  F000 F000          	nop2	
 13133                           
 13134                           ;hd44780.c: 33:     lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
 13135  0025FE  0E00               	movlw	0
 13136  002600  6E1C               	movwf	lcdWrite@type^0,c
 13137  002602  0E0C               	movlw	12
 13138  002604  EC69  F01A         	call	_lcdWrite
 13139                           
 13140                           ;hd44780.c: 34:     _delay((unsigned long)((8)*(64000000/4000.0)));
 13141  002608  0EA7               	movlw	167
 13142  00260A  6E1F               	movwf	??_initLCD^0,c
 13143  00260C  0E3A               	movlw	58
 13144  00260E                     u14447:
 13145  00260E  2EE8               	decfsz	wreg,f,c
 13146  002610  D7FE               	bra	u14447
 13147  002612  2E1F               	decfsz	??_initLCD^0,f,c
 13148  002614  D7FC               	bra	u14447
 13149  002616  F000 F000          	nop2	
 13150                           
 13151                           ;hd44780.c: 35:     clearLCD();
 13152  00261A  EC35  F01B         	call	_clearLCD	;wreg free
 13153                           
 13154                           ;hd44780.c: 36:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13155  00261E  0E68               	movlw	104
 13156  002620  6E1F               	movwf	??_initLCD^0,c
 13157  002622  0EE4               	movlw	228
 13158  002624                     u14457:
 13159  002624  2EE8               	decfsz	wreg,f,c
 13160  002626  D7FE               	bra	u14457
 13161  002628  2E1F               	decfsz	??_initLCD^0,f,c
 13162  00262A  D7FC               	bra	u14457
 13163  00262C  F000 F000          	nop2	
 13164                           
 13165                           ;hd44780.c: 37:     lcdWrite(0x06, COMMAND);
 13166  002630  0E00               	movlw	0
 13167  002632  6E1C               	movwf	lcdWrite@type^0,c
 13168  002634  0E06               	movlw	6
 13169  002636  EC69  F01A         	call	_lcdWrite
 13170                           
 13171                           ;hd44780.c: 38:     _delay((unsigned long)((5)*(64000000/4000.0)));
 13172  00263A  0E68               	movlw	104
 13173  00263C  6E1F               	movwf	??_initLCD^0,c
 13174  00263E  0EE4               	movlw	228
 13175  002640                     u14467:
 13176  002640  2EE8               	decfsz	wreg,f,c
 13177  002642  D7FE               	bra	u14467
 13178  002644  2E1F               	decfsz	??_initLCD^0,f,c
 13179  002646  D7FC               	bra	u14467
 13180  002648  F000 F000          	nop2	
 13181                           
 13182                           ;hd44780.c: 39:     clearLCD();
 13183  00264C  EC35  F01B         	call	_clearLCD	;wreg free
 13184                           
 13185                           ;hd44780.c: 41:     LATAbits.LA7 = 1;
 13186  002650  8E89               	bsf	137,7,c	;volatile
 13187  002652  0012               	return		;funcret
 13188  002654                     __end_of_initLCD:
 13189                           	callstack 0
 13190                           
 13191 ;; *************** function _clearLCD *****************
 13192 ;; Defined at:
 13193 ;;		line 45 in file "hd44780.c"
 13194 ;; Parameters:    Size  Location     Type
 13195 ;;		None
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;		None
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      void 
 13200 ;; Registers used:
 13201 ;;		wreg, status,2, status,0, cstack
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/1
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13207 ;;      Params:         0       0       0       0       0       0       0
 13208 ;;      Locals:         0       0       0       0       0       0       0
 13209 ;;      Temps:          1       0       0       0       0       0       0
 13210 ;;      Totals:         1       0       0       0       0       0       0
 13211 ;;Total ram usage:        1 bytes
 13212 ;; Hardware stack levels used: 1
 13213 ;; Hardware stack levels required when called: 5
 13214 ;; This function calls:
 13215 ;;		_lcdWrite
 13216 ;; This function is called by:
 13217 ;;		_initLCD
 13218 ;;		_main
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           	psect	text52
 13223  00366A                     __ptext52:
 13224                           	callstack 0
 13225  00366A                     _clearLCD:
 13226                           	callstack 0
 13227                           
 13228                           ;hd44780.c: 46:     lcdWrite(0x01, COMMAND);
 13229                           
 13230                           ;incstack = 0
 13231  00366A  EC2E  F014         	call	PL184	;call to abstracted procedure
 13232  00366E  EC69  F01A         	call	_lcdWrite
 13233                           
 13234                           ;hd44780.c: 47:     _delay((unsigned long)((2)*(64000000/4000.0)));
 13235  003672  0E2A               	movlw	42
 13236  003674  6E1E               	movwf	??_clearLCD^0,c
 13237  003676  0E8E               	movlw	142
 13238  003678                     u14477:
 13239  003678  2EE8               	decfsz	wreg,f,c
 13240  00367A  D7FE               	bra	u14477
 13241  00367C  2E1E               	decfsz	??_clearLCD^0,f,c
 13242  00367E  D7FC               	bra	u14477
 13243  003680  0012               	return		;funcret
 13244  003682                     __end_of_clearLCD:
 13245                           	callstack 0
 13246                           
 13247 ;; *************** function _cgrom_char *****************
 13248 ;; Defined at:
 13249 ;;		line 149 in file "hd44780.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  symbol          2   29[COMRAM] PTR unsigned char 
 13252 ;;		 -> symbol_6(8), symbol_5(8), symbol_4(8), symbol_3(8), 
 13253 ;;		 -> symbol_2(8), symbol_1(8), 
 13254 ;;  address         1   31[COMRAM] unsigned char 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  i               1   32[COMRAM] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13266 ;;      Params:         3       0       0       0       0       0       0
 13267 ;;      Locals:         1       0       0       0       0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0
 13269 ;;      Totals:         4       0       0       0       0       0       0
 13270 ;;Total ram usage:        4 bytes
 13271 ;; Hardware stack levels used: 1
 13272 ;; Hardware stack levels required when called: 5
 13273 ;; This function calls:
 13274 ;;		_lcdWrite
 13275 ;; This function is called by:
 13276 ;;		_init_cpu
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           	psect	text53
 13281  0034A0                     __ptext53:
 13282                           	callstack 0
 13283  0034A0                     _cgrom_char:
 13284                           	callstack 24
 13285                           
 13286                           ;hd44780.c: 150:     uint8_t i;;hd44780.c: 151:     lcdWrite(0x40 | (address * 8), COMMA
      +                          ND);
 13287                           
 13288                           ;incstack = 0
 13289  0034A0  6A1C               	clrf	lcdWrite@type^0,c
 13290  0034A2  5020               	movf	cgrom_char@address^0,w,c
 13291  0034A4  0D08               	mullw	8
 13292  0034A6  50F3               	movf	243,w,c
 13293  0034A8  0940               	iorlw	64
 13294  0034AA  EC69  F01A         	call	_lcdWrite
 13295                           
 13296                           ;hd44780.c: 152:     for (i = 0; i < 8; i++)
 13297  0034AE  6A21               	clrf	cgrom_char@i^0,c
 13298  0034B0                     l10437:
 13299                           
 13300                           ;hd44780.c: 153:         lcdWrite(*symbol++, DATA);
 13301  0034B0  0E01               	movlw	1
 13302  0034B2  6E1C               	movwf	lcdWrite@type^0,c
 13303  0034B4  C01E  FFF6         	movff	cgrom_char@symbol,tblptrl
 13304  0034B8  C01F  FFF7         	movff	cgrom_char@symbol+1,tblptrh
 13305  0034BC                     	if	0	;tblptru may be non-zero
 13306  0034BC                     	endif
 13307  0034BC                     	if	0	;tblptru may be non-zero
 13308  0034BC                     	endif
 13309  0034BC  0008               	tblrd		*
 13310  0034BE  50F5               	movf	tablat,w,c
 13311  0034C0  EC69  F01A         	call	_lcdWrite
 13312  0034C4  4A1E               	infsnz	cgrom_char@symbol^0,f,c
 13313  0034C6  2A1F               	incf	(cgrom_char@symbol+1)^0,f,c
 13314  0034C8  2A21               	incf	cgrom_char@i^0,f,c
 13315  0034CA  0E07               	movlw	7
 13316  0034CC  6421               	cpfsgt	cgrom_char@i^0,c
 13317  0034CE  D7F0               	goto	l10437
 13318  0034D0  0C07               	retlw	7
 13319  0034D2                     __end_of_cgrom_char:
 13320                           	callstack 0
 13321                           
 13322 ;; *************** function _lcdWrite *****************
 13323 ;; Defined at:
 13324 ;;		line 50 in file "hd44780.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;  byte            1    wreg     unsigned char 
 13327 ;;  type            1   27[COMRAM] enum E3223
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;  byte            1   28[COMRAM] unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      void 
 13332 ;; Registers used:
 13333 ;;		wreg, status,2, status,0, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13339 ;;      Params:         1       0       0       0       0       0       0
 13340 ;;      Locals:         1       0       0       0       0       0       0
 13341 ;;      Temps:          0       0       0       0       0       0       0
 13342 ;;      Totals:         2       0       0       0       0       0       0
 13343 ;;Total ram usage:        2 bytes
 13344 ;; Hardware stack levels used: 1
 13345 ;; Hardware stack levels required when called: 4
 13346 ;; This function calls:
 13347 ;;		_lcdNibble
 13348 ;; This function is called by:
 13349 ;;		_initLCD
 13350 ;;		_clearLCD
 13351 ;;		_lcd_gotoxy
 13352 ;;		_lcd_putc
 13353 ;;		_lcdPrint
 13354 ;;		_cgrom_char
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           	psect	text54
 13359  0034D2                     __ptext54:
 13360                           	callstack 0
 13361  0034D2                     _lcdWrite:
 13362                           	callstack 24
 13363                           
 13364                           ;incstack = 0
 13365                           ;lcdWrite@byte stored from wreg
 13366  0034D2  6E1D               	movwf	lcdWrite@byte^0,c
 13367                           
 13368                           ;hd44780.c: 51:     if (type == COMMAND)
 13369  0034D4  501C               	movf	lcdWrite@type^0,w,c
 13370  0034D6  E102               	bnz	l114
 13371                           
 13372                           ;hd44780.c: 52:         LATAbits.LA7 = 0;
 13373  0034D8  9E89               	bcf	137,7,c	;volatile
 13374  0034DA  D001               	goto	l10115
 13375  0034DC                     l114:
 13376                           
 13377                           ;hd44780.c: 54:         LATAbits.LA7 = 1;
 13378  0034DC  8E89               	bsf	137,7,c	;volatile
 13379  0034DE                     l10115:
 13380                           
 13381                           ;hd44780.c: 56:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 13382  0034DE  0EE4               	movlw	228
 13383  0034E0                     u14487:
 13384  0034E0  F000 F000          	nop2	
 13385  0034E4  F000 F000          	nop2	
 13386  0034E8  2EE8               	decfsz	wreg,f,c
 13387  0034EA  D7FA               	bra	u14487
 13388  0034EC  F000 F000          	nop2	
 13389  0034F0  F000 F000          	nop2	
 13390                           
 13391                           ;hd44780.c: 58:     lcdNibble(byte >> 4);
 13392  0034F4  381D               	swapf	lcdWrite@byte^0,w,c
 13393  0034F6  0B0F               	andlw	15
 13394  0034F8  EC0B  F016         	call	_lcdNibble
 13395                           
 13396                           ;hd44780.c: 59:     lcdNibble(byte & 0x0F);
 13397  0034FC  501D               	movf	lcdWrite@byte^0,w,c
 13398  0034FE  0B0F               	andlw	15
 13399  003500  EF0B  F016         	goto	_lcdNibble
 13400  003504                     __end_of_lcdWrite:
 13401                           	callstack 0
 13402                           
 13403 ;; *************** function _lcdNibble *****************
 13404 ;; Defined at:
 13405 ;;		line 63 in file "hd44780.c"
 13406 ;; Parameters:    Size  Location     Type
 13407 ;;  nibble          1    wreg     unsigned char 
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;  nibble          1   26[COMRAM] unsigned char 
 13410 ;; Return value:  Size  Location     Type
 13411 ;;                  1    wreg      void 
 13412 ;; Registers used:
 13413 ;;		wreg, status,2, status,0
 13414 ;; Tracked objects:
 13415 ;;		On entry : 0/0
 13416 ;;		On exit  : 0/0
 13417 ;;		Unchanged: 0/0
 13418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13419 ;;      Params:         0       0       0       0       0       0       0
 13420 ;;      Locals:         1       0       0       0       0       0       0
 13421 ;;      Temps:          1       0       0       0       0       0       0
 13422 ;;      Totals:         2       0       0       0       0       0       0
 13423 ;;Total ram usage:        2 bytes
 13424 ;; Hardware stack levels used: 1
 13425 ;; Hardware stack levels required when called: 3
 13426 ;; This function calls:
 13427 ;;		Nothing
 13428 ;; This function is called by:
 13429 ;;		_initLCD
 13430 ;;		_lcdWrite
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434                           	psect	text55
 13435  002C16                     __ptext55:
 13436                           	callstack 0
 13437  002C16                     _lcdNibble:
 13438                           	callstack 24
 13439                           
 13440                           ;incstack = 0
 13441                           ;lcdNibble@nibble stored from wreg
 13442  002C16  6E1B               	movwf	lcdNibble@nibble^0,c
 13443                           
 13444                           ;hd44780.c: 64:     LATCbits.LC0 = (nibble & 0x01) ? 1 : 0;
 13445  002C18  A01B               	btfss	lcdNibble@nibble^0,0,c
 13446  002C1A  D003               	goto	u12430
 13447  002C1C  6A1A               	clrf	??_lcdNibble^0,c
 13448  002C1E  2A1A               	incf	??_lcdNibble^0,f,c
 13449  002C20  D001               	goto	u12448
 13450  002C22                     u12430:
 13451  002C22  6A1A               	clrf	??_lcdNibble^0,c
 13452  002C24                     u12448:
 13453  002C24  508B               	movf	139,w,c	;volatile
 13454  002C26  181A               	xorwf	??_lcdNibble^0,w,c
 13455  002C28  0BFE               	andlw	-2
 13456  002C2A  181A               	xorwf	??_lcdNibble^0,w,c
 13457  002C2C  6E8B               	movwf	139,c	;volatile
 13458                           
 13459                           ;hd44780.c: 65:     LATCbits.LC1 = (nibble & 0x02) ? 1 : 0;
 13460  002C2E  A21B               	btfss	lcdNibble@nibble^0,1,c
 13461  002C30  D003               	goto	u12450
 13462  002C32  6A1A               	clrf	??_lcdNibble^0,c
 13463  002C34  2A1A               	incf	??_lcdNibble^0,f,c
 13464  002C36  D001               	goto	u12468
 13465  002C38                     u12450:
 13466  002C38  6A1A               	clrf	??_lcdNibble^0,c
 13467  002C3A                     u12468:
 13468  002C3A  461A               	rlncf	??_lcdNibble^0,f,c
 13469  002C3C  508B               	movf	139,w,c	;volatile
 13470  002C3E  181A               	xorwf	??_lcdNibble^0,w,c
 13471  002C40  0BFD               	andlw	-3
 13472  002C42  181A               	xorwf	??_lcdNibble^0,w,c
 13473  002C44  6E8B               	movwf	139,c	;volatile
 13474                           
 13475                           ;hd44780.c: 66:     LATCbits.LC2 = (nibble & 0x04) ? 1 : 0;
 13476  002C46  A41B               	btfss	lcdNibble@nibble^0,2,c
 13477  002C48  D003               	goto	u12470
 13478  002C4A  6A1A               	clrf	??_lcdNibble^0,c
 13479  002C4C  2A1A               	incf	??_lcdNibble^0,f,c
 13480  002C4E  D001               	goto	u12488
 13481  002C50                     u12470:
 13482  002C50  6A1A               	clrf	??_lcdNibble^0,c
 13483  002C52                     u12488:
 13484  002C52  D827               	call	PL172	;call to abstracted procedure
 13485  002C54  0BFB               	andlw	-5
 13486  002C56  181A               	xorwf	??_lcdNibble^0,w,c
 13487  002C58  6E8B               	movwf	139,c	;volatile
 13488                           
 13489                           ;hd44780.c: 67:     LATCbits.LC3 = (nibble & 0x08) ? 1 : 0;
 13490  002C5A  A61B               	btfss	lcdNibble@nibble^0,3,c
 13491  002C5C  D003               	goto	u12490
 13492  002C5E  6A1A               	clrf	??_lcdNibble^0,c
 13493  002C60  2A1A               	incf	??_lcdNibble^0,f,c
 13494  002C62  D001               	goto	u12508
 13495  002C64                     u12490:
 13496  002C64  6A1A               	clrf	??_lcdNibble^0,c
 13497  002C66                     u12508:
 13498  002C66  461A               	rlncf	??_lcdNibble^0,f,c
 13499  002C68  D81C               	call	PL172	;call to abstracted procedure
 13500  002C6A  0BF7               	andlw	-9
 13501  002C6C  181A               	xorwf	??_lcdNibble^0,w,c
 13502  002C6E  6E8B               	movwf	139,c	;volatile
 13503                           
 13504                           ;hd44780.c: 70:     LATAbits.LA6 = 1;
 13505  002C70  8C89               	bsf	137,6,c	;volatile
 13506                           
 13507                           ;hd44780.c: 71:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 13508  002C72  0EE4               	movlw	228
 13509  002C74                     u14497:
 13510  002C74  F000 F000          	nop2	
 13511  002C78  F000 F000          	nop2	
 13512  002C7C  2EE8               	decfsz	wreg,f,c
 13513  002C7E  D7FA               	bra	u14497
 13514  002C80  F000 F000          	nop2	
 13515  002C84  F000 F000          	nop2	
 13516                           
 13517                           ;hd44780.c: 72:     LATAbits.LA6 = 0;
 13518  002C88  9C89               	bcf	137,6,c	;volatile
 13519                           
 13520                           ;hd44780.c: 73:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 13521  002C8A  0EE4               	movlw	228
 13522  002C8C                     u14507:
 13523  002C8C  F000 F000          	nop2	
 13524  002C90  F000 F000          	nop2	
 13525  002C94  2EE8               	decfsz	wreg,f,c
 13526  002C96  D7FA               	bra	u14507
 13527  002C98  F000 F000          	nop2	
 13528  002C9C  F000 F000          	nop2	
 13529  002CA0  0012               	return		;funcret
 13530  002CA2                     __end_of_lcdNibble:
 13531                           	callstack 0
 13532  002CA2                     PL172:
 13533                           	callstack 24
 13534  002CA2  461A               	rlncf	??_lcdNibble^0,f,c
 13535  002CA4  461A               	rlncf	??_lcdNibble^0,f,c
 13536  002CA6  508B               	movf	139,w,c	;volatile
 13537  002CA8  181A               	xorwf	??_lcdNibble^0,w,c
 13538  002CAA  0012               	return	
 13539  002CAC                     __end_ofPL172:
 13540                           	callstack 0
 13541                           
 13542 ;; *************** function ___xxtofl *****************
 13543 ;; Defined at:
 13544 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  sign            1    wreg     unsigned char 
 13547 ;;  val             4   25[COMRAM] long 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  sign            1    0[BANK0 ] unsigned char 
 13550 ;;  arg             4    2[BANK0 ] unsigned long 
 13551 ;;  exp             1    1[BANK0 ] unsigned char 
 13552 ;; Return value:  Size  Location     Type
 13553 ;;                  4   25[COMRAM] unsigned char 
 13554 ;; Registers used:
 13555 ;;		wreg, status,2, status,0
 13556 ;; Tracked objects:
 13557 ;;		On entry : 0/1
 13558 ;;		On exit  : 3F/0
 13559 ;;		Unchanged: 0/0
 13560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13561 ;;      Params:         4       0       0       0       0       0       0
 13562 ;;      Locals:         0       6       0       0       0       0       0
 13563 ;;      Temps:          4       0       0       0       0       0       0
 13564 ;;      Totals:         8       6       0       0       0       0       0
 13565 ;;Total ram usage:       14 bytes
 13566 ;; Hardware stack levels used: 1
 13567 ;; Hardware stack levels required when called: 3
 13568 ;; This function calls:
 13569 ;;		Nothing
 13570 ;; This function is called by:
 13571 ;;		_main
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           	psect	text56
 13576  002654                     __ptext56:
 13577                           	callstack 0
 13578  002654                     ___xxtofl:
 13579                           	callstack 27
 13580                           
 13581                           ;incstack = 0
 13582                           ;___xxtofl@sign stored from wreg
 13583  002654  0100               	movlb	0	; () banked
 13584  002656  6F60               	movwf	___xxtofl@sign& (0+255),b
 13585  002658  5160               	movf	___xxtofl@sign& (0+255),w,b
 13586  00265A  E01C               	bz	l1203
 13587                           
 13588                           ; BSR set to: 0
 13589  00265C  AE1D               	btfss	(___xxtofl@val+3)^0,7,c
 13590  00265E  D01A               	goto	l1203
 13591                           
 13592                           ; BSR set to: 0
 13593  002660  C01A  F01E         	movff	___xxtofl@val,??___xxtofl
 13594  002664  C01B  F01F         	movff	___xxtofl@val+1,??___xxtofl+1
 13595  002668  C01C  F020         	movff	___xxtofl@val+2,??___xxtofl+2
 13596  00266C  C01D  F021         	movff	___xxtofl@val+3,??___xxtofl+3
 13597  002670  1E1E               	comf	??___xxtofl^0,f,c
 13598  002672  1E1F               	comf	(??___xxtofl+1)^0,f,c
 13599  002674  1E20               	comf	(??___xxtofl+2)^0,f,c
 13600  002676  1E21               	comf	(??___xxtofl+3)^0,f,c
 13601  002678  2A1E               	incf	??___xxtofl^0,f,c
 13602  00267A  0E00               	movlw	0
 13603  00267C  221F               	addwfc	(??___xxtofl+1)^0,f,c
 13604  00267E  2220               	addwfc	(??___xxtofl+2)^0,f,c
 13605  002680  2221               	addwfc	(??___xxtofl+3)^0,f,c
 13606  002682  C01E  F062         	movff	??___xxtofl,___xxtofl@arg
 13607  002686  C01F  F063         	movff	??___xxtofl+1,___xxtofl@arg+1
 13608  00268A  C020  F064         	movff	??___xxtofl+2,___xxtofl@arg+2
 13609  00268E  C021  F065         	movff	??___xxtofl+3,___xxtofl@arg+3
 13610  002692  D008               	goto	l8333
 13611  002694                     l1203:
 13612                           
 13613                           ; BSR set to: 0
 13614  002694  C01A  F062         	movff	___xxtofl@val,___xxtofl@arg
 13615  002698  C01B  F063         	movff	___xxtofl@val+1,___xxtofl@arg+1
 13616  00269C  C01C  F064         	movff	___xxtofl@val+2,___xxtofl@arg+2
 13617  0026A0  C01D  F065         	movff	___xxtofl@val+3,___xxtofl@arg+3
 13618  0026A4                     l8333:
 13619                           
 13620                           ; BSR set to: 0
 13621  0026A4  501A               	movf	___xxtofl@val^0,w,c
 13622  0026A6  101B               	iorwf	(___xxtofl@val+1)^0,w,c
 13623  0026A8  101C               	iorwf	(___xxtofl@val+2)^0,w,c
 13624  0026AA  101D               	iorwf	(___xxtofl@val+3)^0,w,c
 13625  0026AC  E105               	bnz	l8337
 13626                           
 13627                           ; BSR set to: 0
 13628  0026AE  6A1A               	clrf	?___xxtofl^0,c
 13629  0026B0  6A1B               	clrf	(?___xxtofl+1)^0,c
 13630  0026B2  6A1C               	clrf	(?___xxtofl+2)^0,c
 13631  0026B4  6A1D               	clrf	(?___xxtofl+3)^0,c
 13632  0026B6  0012               	return	
 13633  0026B8                     l8337:
 13634                           
 13635                           ; BSR set to: 0
 13636  0026B8  0E96               	movlw	150
 13637  0026BA  6F61               	movwf	___xxtofl@exp& (0+255),b
 13638  0026BC  D002               	goto	l8341
 13639  0026BE                     l8339:
 13640                           
 13641                           ; BSR set to: 0
 13642  0026BE  2B61               	incf	___xxtofl@exp& (0+255),f,b
 13643  0026C0  D844               	call	PL140	;call to abstracted procedure
 13644  0026C2                     l8341:
 13645                           
 13646                           ; BSR set to: 0
 13647  0026C2  6A1E               	clrf	??___xxtofl^0,c
 13648  0026C4  6A1F               	clrf	(??___xxtofl+1)^0,c
 13649  0026C6  6A20               	clrf	(??___xxtofl+2)^0,c
 13650  0026C8  0EFE               	movlw	254
 13651  0026CA  1565               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 13652  0026CC  D844               	call	PL152	;call to abstracted procedure
 13653  0026CE  E008               	bz	l1210
 13654  0026D0  D7F6               	goto	l8339
 13655  0026D2                     l8343:
 13656                           
 13657                           ; BSR set to: 0
 13658  0026D2  2B61               	incf	___xxtofl@exp& (0+255),f,b
 13659                           
 13660                           ; BSR set to: 0
 13661  0026D4  2B62               	incf	___xxtofl@arg& (0+255),f,b
 13662  0026D6  0E00               	movlw	0
 13663  0026D8  2363               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 13664  0026DA  2364               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 13665  0026DC  2365               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 13666                           
 13667                           ; BSR set to: 0
 13668  0026DE  D835               	call	PL140	;call to abstracted procedure
 13669  0026E0                     l1210:
 13670                           
 13671                           ; BSR set to: 0
 13672  0026E0  6A1E               	clrf	??___xxtofl^0,c
 13673  0026E2  6A1F               	clrf	(??___xxtofl+1)^0,c
 13674  0026E4  6A20               	clrf	(??___xxtofl+2)^0,c
 13675  0026E6  5165               	movf	(___xxtofl@arg+3)& (0+255),w,b
 13676  0026E8  D836               	call	PL152	;call to abstracted procedure
 13677  0026EA  E007               	bz	l8351
 13678  0026EC  D7F2               	goto	l8343
 13679  0026EE                     l8349:
 13680                           
 13681                           ; BSR set to: 0
 13682  0026EE  0761               	decf	___xxtofl@exp& (0+255),f,b
 13683  0026F0  90D8               	bcf	status,0,c
 13684  0026F2  3762               	rlcf	___xxtofl@arg& (0+255),f,b
 13685  0026F4  3763               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 13686  0026F6  3764               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 13687  0026F8  3765               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 13688  0026FA                     l8351:
 13689                           
 13690                           ; BSR set to: 0
 13691  0026FA  BF64               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 13692  0026FC  D003               	goto	u10510
 13693                           
 13694                           ; BSR set to: 0
 13695  0026FE  0E02               	movlw	2
 13696  002700  6161               	cpfslt	___xxtofl@exp& (0+255),b
 13697  002702  D7F5               	goto	l8349
 13698  002704                     u10510:
 13699                           
 13700                           ; BSR set to: 0
 13701  002704  A161               	btfss	___xxtofl@exp& (0+255),0,b
 13702                           
 13703                           ; BSR set to: 0
 13704  002706  9F64               	bcf	(___xxtofl@arg+2)& (0+255),7,b
 13705                           
 13706                           ; BSR set to: 0
 13707  002708  90D8               	bcf	status,0,c
 13708  00270A  3361               	rrcf	___xxtofl@exp& (0+255),f,b
 13709                           
 13710                           ; BSR set to: 0
 13711  00270C  C061  F01E         	movff	___xxtofl@exp,??___xxtofl
 13712  002710  6A1F               	clrf	(??___xxtofl+1)^0,c
 13713  002712  6A20               	clrf	(??___xxtofl+2)^0,c
 13714  002714  6A21               	clrf	(??___xxtofl+3)^0,c
 13715  002716  C01E  F021         	movff	??___xxtofl,??___xxtofl+3
 13716  00271A  6A20               	clrf	(??___xxtofl+2)^0,c
 13717  00271C  6A1F               	clrf	(??___xxtofl+1)^0,c
 13718  00271E  6A1E               	clrf	??___xxtofl^0,c
 13719  002720  501E               	movf	??___xxtofl^0,w,c
 13720  002722  1362               	iorwf	___xxtofl@arg& (0+255),f,b
 13721  002724  501F               	movf	(??___xxtofl+1)^0,w,c
 13722  002726  1363               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 13723  002728  5020               	movf	(??___xxtofl+2)^0,w,c
 13724  00272A  1364               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 13725  00272C  5021               	movf	(??___xxtofl+3)^0,w,c
 13726  00272E  1365               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 13727                           
 13728                           ; BSR set to: 0
 13729  002730  5160               	movf	___xxtofl@sign& (0+255),w,b
 13730  002732  E002               	bz	l8367
 13731                           
 13732                           ; BSR set to: 0
 13733  002734  BE1D               	btfsc	(___xxtofl@val+3)^0,7,c
 13734                           
 13735                           ; BSR set to: 0
 13736  002736  8F65               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 13737  002738                     l8367:
 13738                           
 13739                           ; BSR set to: 0
 13740  002738  C062  F01A         	movff	___xxtofl@arg,?___xxtofl
 13741  00273C  C063  F01B         	movff	___xxtofl@arg+1,?___xxtofl+1
 13742  002740  C064  F01C         	movff	___xxtofl@arg+2,?___xxtofl+2
 13743  002744  C065  F01D         	movff	___xxtofl@arg+3,?___xxtofl+3
 13744                           
 13745                           ; BSR set to: 0
 13746  002748  0012               	return		;funcret
 13747  00274A                     __end_of___xxtofl:
 13748                           	callstack 0
 13749  00274A                     PL140:
 13750                           	callstack 27
 13751  00274A  90D8               	bcf	status,0,c
 13752  00274C  3365               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 13753  00274E  3364               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 13754  002750  3363               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 13755  002752  3362               	rrcf	___xxtofl@arg& (0+255),f,b
 13756  002754  0012               	return	
 13757  002756                     __end_ofPL140:
 13758                           	callstack 0
 13759  002756                     PL152:
 13760                           	callstack 27
 13761  002756  6E21               	movwf	(??___xxtofl+3)^0,c
 13762  002758  501E               	movf	??___xxtofl^0,w,c
 13763  00275A  101F               	iorwf	(??___xxtofl+1)^0,w,c
 13764  00275C  1020               	iorwf	(??___xxtofl+2)^0,w,c
 13765  00275E  1021               	iorwf	(??___xxtofl+3)^0,w,c
 13766  002760  0012               	return	
 13767  002762                     __end_ofPL152:
 13768                           	callstack 0
 13769                           
 13770 ;; *************** function _EncPoll *****************
 13771 ;; Defined at:
 13772 ;;		line 449 in file "main.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;		None
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  1    wreg      unsigned char 
 13779 ;; Registers used:
 13780 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13781 ;; Tracked objects:
 13782 ;;		On entry : 3F/1
 13783 ;;		On exit  : 3F/1
 13784 ;;		Unchanged: 3F/0
 13785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13786 ;;      Params:         0       0       0       0       0       0       0
 13787 ;;      Locals:         0       0       0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0
 13789 ;;      Totals:         0       0       0       0       0       0       0
 13790 ;;Total ram usage:        0 bytes
 13791 ;; Hardware stack levels used: 1
 13792 ;; Hardware stack levels required when called: 3
 13793 ;; This function calls:
 13794 ;;		Nothing
 13795 ;; This function is called by:
 13796 ;;		_main
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           	psect	text57
 13801  003504                     __ptext57:
 13802                           	callstack 0
 13803  003504                     _EncPoll:
 13804                           	callstack 27
 13805                           
 13806                           ; BSR set to: 1
 13807                           ;main.c: 450:     static int8_t EncVal = 0;;main.c: 451:     static uint8_t Enc = 0;;mai
      +                          n.c: 453:     Enc <<= 2;
 13808                           
 13809                           ; BSR set to: 0
 13810                           ;incstack = 0
 13811  003504  90D8               	bcf	status,0,c
 13812  003506  363E               	rlcf	EncPoll@Enc^0,f,c
 13813  003508  90D8               	bcf	status,0,c
 13814  00350A  363E               	rlcf	EncPoll@Enc^0,f,c
 13815                           
 13816                           ;main.c: 454:     Enc &= 0b00001111;
 13817  00350C  0E0F               	movlw	15
 13818  00350E  163E               	andwf	EncPoll@Enc^0,f,c
 13819                           
 13820                           ;main.c: 455:     Enc += ((PORTB & ((1 << 4) | (1 << 5))) >> 4);
 13821  003510  3881               	swapf	129,w,c	;volatile
 13822  003512  0B0F               	andlw	15
 13823  003514  0B03               	andlw	3
 13824  003516  263E               	addwf	EncPoll@Enc^0,f,c
 13825                           
 13826                           ; BSR set to: 1
 13827                           ;main.c: 456:     EncVal = EncState_[Enc];
 13828  003518  0E3B               	movlw	low _EncState_
 13829  00351A  243E               	addwf	EncPoll@Enc^0,w,c
 13830  00351C  6EF6               	movwf	tblptrl,c
 13831  00351E  6AF7               	clrf	tblptrh,c
 13832  003520  0E7E               	movlw	high _EncState_
 13833  003522  22F7               	addwfc	tblptrh,f,c
 13834  003524                     	if	0	;There are less than 3 active tblptr bytes
 13835  003524                     	endif
 13836  003524  0008               	tblrd		*
 13837  003526  CFF5 F03F          	movff	tablat,EncPoll@EncVal
 13838                           
 13839                           ; BSR set to: 1
 13840                           ;main.c: 458:     if (EncVal == 0x7F) EncVal = 0;
 13841  00352A  0E7F               	movlw	127
 13842  00352C  183F               	xorwf	EncPoll@EncVal^0,w,c
 13843  00352E  E101               	bnz	l5957
 13844                           
 13845                           ; BSR set to: 1
 13846  003530  6A3F               	clrf	EncPoll@EncVal^0,c
 13847  003532                     l5957:
 13848                           
 13849                           ; BSR set to: 1
 13850                           ;main.c: 460:     return EncVal;
 13851  003532  503F               	movf	EncPoll@EncVal^0,w,c
 13852                           
 13853                           ; BSR set to: 1
 13854  003534  0012               	return		;funcret
 13855  003536                     __end_of_EncPoll:
 13856                           	callstack 0
 13857                           
 13858 ;; *************** function _Inter_lo *****************
 13859 ;; Defined at:
 13860 ;;		line 7 in file "interrupt.c"
 13861 ;; Parameters:    Size  Location     Type
 13862 ;;		None
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;		None
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      void 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13874 ;;      Params:         0       0       0       0       0       0       0
 13875 ;;      Locals:         0       0       0       0       0       0       0
 13876 ;;      Temps:          3       0       0       0       0       0       0
 13877 ;;      Totals:         3       0       0       0       0       0       0
 13878 ;;Total ram usage:        3 bytes
 13879 ;; Hardware stack levels used: 1
 13880 ;; Hardware stack levels required when called: 2
 13881 ;; This function calls:
 13882 ;;		Nothing
 13883 ;; This function is called by:
 13884 ;;		Interrupt level 1
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           	psect	intcodelo
 13889  000018                     __pintcodelo:
 13890                           	callstack 0
 13891  000018                     _Inter_lo:
 13892                           	callstack 19
 13893                           
 13894                           ; BSR set to: 1
 13895                           ;incstack = 0
 13896  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13897  00001A  CFD8 F017          	movff	status,??_Inter_lo
 13898  00001E  CFE8 F018          	movff	wreg,??_Inter_lo+1
 13899  000022  CFE0 F019          	movff	bsr,??_Inter_lo+2
 13900                           
 13901                           ;interrupt.c: 8:     if (TMR0IE && TMR0IF) {
 13902  000026  BAF2               	btfsc	4082,5,c	;volatile
 13903  000028  A4F2               	btfss	4082,2,c	;volatile
 13904  00002A  D004               	goto	i1l6165
 13905                           
 13906                           ;interrupt.c: 10:         tick_t0++;
 13907  00002C  94F2               	bcf	4082,2,c	;volatile
 13908                           
 13909                           ;interrupt.c: 12:         TMR0L = 57;
 13910  00002E  0E39               	movlw	57
 13911  000030  6ED6               	movwf	214,c	;volatile
 13912                           
 13913                           ;interrupt.c: 13:         ADCON0bits.GODONE = 1;
 13914  000032  82C2               	bsf	194,1,c	;volatile
 13915  000034                     i1l6165:
 13916                           
 13917                           ;interrupt.c: 16:     if (TMR1IE && TMR1IF) {
 13918  000034  B09D               	btfsc	3997,0,c	;volatile
 13919  000036  A09E               	btfss	3998,0,c	;volatile
 13920  000038  D006               	goto	i1l220
 13921                           
 13922                           ;interrupt.c: 17:         TMR1IF = 0;
 13923  00003A  909E               	bcf	3998,0,c	;volatile
 13924                           
 13925                           ;interrupt.c: 18:         tick_t1++;
 13926  00003C  0101               	movlb	1	; () banked
 13927  00003E  2B24               	incf	_tick_t1& (0+255),f,b
 13928                           
 13929                           ;interrupt.c: 19:         tick_t1_1++;
 13930  000040  2B23               	incf	_tick_t1_1& (0+255),f,b
 13931                           
 13932                           ; BSR set to: 1
 13933                           ;interrupt.c: 20:         read_key = 1;
 13934  000042  0E01               	movlw	1
 13935  000044  6F22               	movwf	_read_key& (0+255),b
 13936  000046                     i1l220:
 13937  000046  C019  FFE0         	movff	??_Inter_lo+2,bsr
 13938  00004A  C018  FFE8         	movff	??_Inter_lo+1,wreg
 13939  00004E  C017  FFD8         	movff	??_Inter_lo,status
 13940  000052  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13941  000054  0010               	retfie	
 13942  000056                     __end_of_Inter_lo:
 13943                           	callstack 0
 13944                           
 13945 ;; *************** function _Inter_hi *****************
 13946 ;; Defined at:
 13947 ;;		line 28 in file "interrupt.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;		None
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;  pulse           2   20[COMRAM] short 
 13952 ;;  lev             2   18[COMRAM] short 
 13953 ;; Return value:  Size  Location     Type
 13954 ;;                  1    wreg      void 
 13955 ;; Registers used:
 13956 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13957 ;; Tracked objects:
 13958 ;;		On entry : 0/0
 13959 ;;		On exit  : 0/0
 13960 ;;		Unchanged: 0/0
 13961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13962 ;;      Params:         0       0       0       0       0       0       0
 13963 ;;      Locals:         6       0       0       0       0       0       0
 13964 ;;      Temps:          4       0       0       0       0       0       0
 13965 ;;      Totals:        10       0       0       0       0       0       0
 13966 ;;Total ram usage:       10 bytes
 13967 ;; Hardware stack levels used: 1
 13968 ;; Hardware stack levels required when called: 1
 13969 ;; This function calls:
 13970 ;;		i2___lmul
 13971 ;;		i2___wmul
 13972 ;; This function is called by:
 13973 ;;		Interrupt level 2
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           	psect	intcode
 13978  000008                     __pintcode:
 13979                           	callstack 0
 13980  000008                     _Inter_hi:
 13981                           	callstack 19
 13982                           
 13983                           ;incstack = 0
 13984  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13985  00000A  EF3C  F010         	goto	int_func
 13986                           
 13987                           	psect	intcode_body
 13988  002078                     __pintcode_body:
 13989                           	callstack 19
 13990  002078                     int_func:
 13991                           	callstack 19
 13992  002078  CFF3 F00F          	movff	prodl,??_Inter_hi+2
 13993  00207C  CFF4 F010          	movff	prodh,??_Inter_hi+3
 13994                           
 13995                           ;interrupt.c: 29: int16_t pulse = 0, lev = t_power + err;
 13996  002080  6A15               	clrf	Inter_hi@pulse^0,c
 13997  002082  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 13998  002084  503B               	movf	_t_power^0,w,c
 13999  002086  2439               	addwf	_err^0,w,c
 14000  002088  6E13               	movwf	Inter_hi@lev^0,c
 14001  00208A  503C               	movf	(_t_power+1)^0,w,c
 14002  00208C  203A               	addwfc	(_err+1)^0,w,c
 14003  00208E  6E14               	movwf	(Inter_hi@lev+1)^0,c
 14004                           
 14005                           ;interrupt.c: 32:     if (INT0IE && INT0IF) {
 14006  002090  B8F2               	btfsc	4082,4,c	;volatile
 14007  002092  A2F2               	btfss	4082,1,c	;volatile
 14008  002094  D058               	goto	i2l225
 14009                           
 14010                           ;interrupt.c: 33:         if (lev >= 50) pulse = 1;
 14011  002096  BE14               	btfsc	(Inter_hi@lev+1)^0,7,c
 14012  002098  D008               	goto	i2l6189
 14013  00209A  5014               	movf	(Inter_hi@lev+1)^0,w,c
 14014  00209C  E103               	bnz	i2u711_40
 14015  00209E  0E32               	movlw	50
 14016  0020A0  5C13               	subwf	Inter_hi@lev^0,w,c
 14017  0020A2  E303               	bnc	i2l6189
 14018  0020A4                     i2u711_40:
 14019  0020A4  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 14020  0020A6  0E01               	movlw	1
 14021  0020A8  6E15               	movwf	Inter_hi@pulse^0,c
 14022  0020AA                     i2l6189:
 14023                           
 14024                           ;interrupt.c: 37:         if (ps * pulse * pp > 0) pulse = 0;
 14025  0020AA  5045               	movf	_pp^0,w,c
 14026  0020AC  6E01               	movwf	i2___wmul@multiplier^0,c
 14027  0020AE  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 14028  0020B0  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 14029  0020B2  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 14030  0020B4  C037  F003         	movff	_ps,i2___wmul@multiplicand
 14031  0020B8  C038  F004         	movff	_ps+1,i2___wmul@multiplicand+1
 14032  0020BC  ECF2  F01A         	call	i2___wmul	;wreg free
 14033  0020C0  C001  F011         	movff	?i2___wmul,_Inter_hi$2484
 14034  0020C4  C002  F012         	movff	?i2___wmul+1,_Inter_hi$2484+1
 14035                           
 14036                           ;interrupt.c: 37:         if (ps * pulse * pp > 0) pulse = 0;
 14037  0020C8  C011  F001         	movff	_Inter_hi$2484,i2___wmul@multiplier
 14038  0020CC  C012  F002         	movff	_Inter_hi$2484+1,i2___wmul@multiplier+1
 14039  0020D0  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 14040  0020D4  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 14041  0020D8  ECF2  F01A         	call	i2___wmul	;wreg free
 14042  0020DC  BE02               	btfsc	(?i2___wmul+1)^0,7,c
 14043  0020DE  D006               	goto	i2l6195
 14044  0020E0  5002               	movf	(?i2___wmul+1)^0,w,c
 14045  0020E2  E102               	bnz	i2u712_40
 14046  0020E4  0401               	decf	?i2___wmul^0,w,c
 14047  0020E6  E302               	bnc	i2l6195
 14048  0020E8                     i2u712_40:
 14049  0020E8  6A15               	clrf	Inter_hi@pulse^0,c
 14050  0020EA  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 14051  0020EC                     i2l6195:
 14052                           
 14053                           ;interrupt.c: 38:         if (pulse) {
 14054  0020EC  5015               	movf	Inter_hi@pulse^0,w,c
 14055  0020EE  1016               	iorwf	(Inter_hi@pulse+1)^0,w,c
 14056  0020F0  E008               	bz	i2l228
 14057                           
 14058                           ;interrupt.c: 39:             LATAbits.LA5 = 1;
 14059  0020F2  8A89               	bsf	137,5,c	;volatile
 14060                           
 14061                           ;interrupt.c: 40:             err = lev - 100;
 14062  0020F4  0E9C               	movlw	156
 14063  0020F6  2413               	addwf	Inter_hi@lev^0,w,c
 14064  0020F8  6E39               	movwf	_err^0,c
 14065  0020FA  0EFF               	movlw	255
 14066  0020FC  2014               	addwfc	(Inter_hi@lev+1)^0,w,c
 14067  0020FE  6E3A               	movwf	(_err+1)^0,c
 14068                           
 14069                           ;interrupt.c: 41:         } else {
 14070  002100  D005               	goto	i2l229
 14071  002102                     i2l228:
 14072                           
 14073                           ;interrupt.c: 42:             LATAbits.LA5 = 0;
 14074  002102  9A89               	bcf	137,5,c	;volatile
 14075                           
 14076                           ;interrupt.c: 43:             err = lev;
 14077  002104  C013  F039         	movff	Inter_hi@lev,_err
 14078  002108  C014  F03A         	movff	Inter_hi@lev+1,_err+1
 14079  00210C                     i2l229:
 14080                           
 14081                           ;interrupt.c: 45:         TMR3ON = 1;
 14082  00210C  80B1               	bsf	4017,0,c	;volatile
 14083                           
 14084                           ;interrupt.c: 46:         ps += pp * pulse;
 14085  00210E  5045               	movf	_pp^0,w,c
 14086  002110  6E01               	movwf	i2___wmul@multiplier^0,c
 14087  002112  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 14088  002114  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 14089  002116  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 14090  002118  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 14091  00211C  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 14092  002120  ECF2  F01A         	call	i2___wmul	;wreg free
 14093  002124  5001               	movf	?i2___wmul^0,w,c
 14094  002126  2637               	addwf	_ps^0,f,c
 14095  002128  5002               	movf	(?i2___wmul+1)^0,w,c
 14096  00212A  2238               	addwfc	(_ps+1)^0,f,c
 14097                           
 14098                           ;interrupt.c: 47:         pp = -pp;
 14099  00212C  6C45               	negf	_pp^0,c
 14100                           
 14101                           ;interrupt.c: 49:         if (zero <= (50 - 1))
 14102  00212E  0E32               	movlw	50
 14103  002130  6041               	cpfslt	_zero^0,c
 14104  002132  D001               	goto	i2l6209
 14105                           
 14106                           ;interrupt.c: 50:             zero++;
 14107  002134  2A41               	incf	_zero^0,f,c
 14108  002136                     i2l6209:
 14109                           
 14110                           ;interrupt.c: 51:         if (getU == 1) {
 14111  002136  0440               	decf	_getU^0,w,c
 14112  002138  E105               	bnz	i2l231
 14113                           
 14114                           ;interrupt.c: 52:             getU = 0;
 14115  00213A  6A40               	clrf	_getU^0,c
 14116                           
 14117                           ;interrupt.c: 53:             cnt_adc = 0;
 14118  00213C  0101               	movlb	1	; () banked
 14119  00213E  6B1A               	clrf	_cnt_adc& (0+255),b
 14120  002140  6B1B               	clrf	(_cnt_adc+1)& (0+255),b
 14121                           
 14122                           ;interrupt.c: 54:             zero = 0;
 14123  002142  6A41               	clrf	_zero^0,c
 14124  002144                     i2l231:
 14125                           
 14126                           ;interrupt.c: 56:         INT0IF = 0;
 14127  002144  92F2               	bcf	4082,1,c	;volatile
 14128  002146                     i2l225:
 14129                           
 14130                           ;interrupt.c: 60:     if (ADIE && ADIF) {
 14131  002146  BC9D               	btfsc	3997,6,c	;volatile
 14132  002148  AC9E               	btfss	3998,6,c	;volatile
 14133  00214A  D03B               	goto	i2l6227
 14134                           
 14135                           ;interrupt.c: 61:         if (zero < 50) {
 14136  00214C  0E32               	movlw	50
 14137  00214E  6041               	cpfslt	_zero^0,c
 14138  002150  D037               	goto	i2l6225
 14139                           
 14140                           ;interrupt.c: 62:             U_meas = ((ADRESH << 8) + ADRESL);
 14141  002152  50C3               	movf	195,w,c	;volatile
 14142  002154  CFC4 F00D          	movff	4036,??_Inter_hi	;volatile
 14143  002158  6A0E               	clrf	(??_Inter_hi+1)^0,c
 14144  00215A  C00D  F00E         	movff	??_Inter_hi,??_Inter_hi+1
 14145  00215E  6A0D               	clrf	??_Inter_hi^0,c
 14146  002160  260D               	addwf	??_Inter_hi^0,f,c
 14147  002162  0E00               	movlw	0
 14148  002164  220E               	addwfc	(??_Inter_hi+1)^0,f,c
 14149  002166  C00D  F02B         	movff	??_Inter_hi,_U_meas
 14150  00216A  C00E  F02C         	movff	??_Inter_hi+1,_U_meas+1
 14151  00216E  BE2C               	btfsc	(_U_meas+1)^0,7,c
 14152  002170  0EFF               	movlw	-1
 14153  002172  6E2D               	movwf	(_U_meas+2)^0,c
 14154  002174  6E2E               	movwf	(_U_meas+3)^0,c
 14155                           
 14156                           ;interrupt.c: 63:             U_meas *= U_meas;
 14157  002176  C02B  F001         	movff	_U_meas,i2___lmul@multiplier
 14158  00217A  C02C  F002         	movff	_U_meas+1,i2___lmul@multiplier+1
 14159  00217E  C02D  F003         	movff	_U_meas+2,i2___lmul@multiplier+2
 14160  002182  C02E  F004         	movff	_U_meas+3,i2___lmul@multiplier+3
 14161  002186  C02B  F005         	movff	_U_meas,i2___lmul@multiplicand
 14162  00218A  C02C  F006         	movff	_U_meas+1,i2___lmul@multiplicand+1
 14163  00218E  C02D  F007         	movff	_U_meas+2,i2___lmul@multiplicand+2
 14164  002192  C02E  F008         	movff	_U_meas+3,i2___lmul@multiplicand+3
 14165  002196  ECC2  F018         	call	i2___lmul	;wreg free
 14166  00219A  C001  F02B         	movff	?i2___lmul,_U_meas
 14167  00219E  C002  F02C         	movff	?i2___lmul+1,_U_meas+1
 14168  0021A2  C003  F02D         	movff	?i2___lmul+2,_U_meas+2
 14169  0021A6  C004  F02E         	movff	?i2___lmul+3,_U_meas+3
 14170                           
 14171                           ;interrupt.c: 64:             U_summ += U_meas;
 14172  0021AA  502B               	movf	_U_meas^0,w,c
 14173  0021AC  0101               	movlb	1	; () banked
 14174  0021AE  2710               	addwf	_U_summ& (0+255),f,b
 14175  0021B0  502C               	movf	(_U_meas+1)^0,w,c
 14176  0021B2  2311               	addwfc	(_U_summ+1)& (0+255),f,b
 14177  0021B4  502D               	movf	(_U_meas+2)^0,w,c
 14178  0021B6  2312               	addwfc	(_U_summ+2)& (0+255),f,b
 14179  0021B8  502E               	movf	(_U_meas+3)^0,w,c
 14180  0021BA  2313               	addwfc	(_U_summ+3)& (0+255),f,b
 14181                           
 14182                           ; BSR set to: 1
 14183                           ;interrupt.c: 65:             cnt_adc++;
 14184  0021BC  4B1A               	infsnz	_cnt_adc& (0+255),f,b
 14185  0021BE  2B1B               	incf	(_cnt_adc+1)& (0+255),f,b
 14186  0021C0                     i2l6225:
 14187                           
 14188                           ;interrupt.c: 68:         PIR1bits.ADIF = 0;
 14189  0021C0  9C9E               	bcf	158,6,c	;volatile
 14190  0021C2                     i2l6227:
 14191                           
 14192                           ;interrupt.c: 76:     if (TMR3IE && TMR3IF){
 14193  0021C2  B2A0               	btfsc	4000,1,c	;volatile
 14194  0021C4  A2A1               	btfss	4001,1,c	;volatile
 14195  0021C6  D003               	goto	i2l235
 14196                           
 14197                           ;interrupt.c: 77:         TMR3IF = 0;
 14198  0021C8  92A1               	bcf	4001,1,c	;volatile
 14199                           
 14200                           ;interrupt.c: 78:         LATAbits.LA5 = 0;
 14201  0021CA  9A89               	bcf	137,5,c	;volatile
 14202                           
 14203                           ;interrupt.c: 79:         TMR3ON = 0;
 14204  0021CC  90B1               	bcf	4017,0,c	;volatile
 14205  0021CE                     i2l235:
 14206  0021CE  C010  FFF4         	movff	??_Inter_hi+3,prodh
 14207  0021D2  C00F  FFF3         	movff	??_Inter_hi+2,prodl
 14208  0021D6  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14209  0021D8  0011               	retfie		f
 14210  0021DA                     __end_of_Inter_hi:
 14211                           	callstack 0
 14212                           
 14213 ;; *************** function i2___wmul *****************
 14214 ;; Defined at:
 14215 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 14216 ;; Parameters:    Size  Location     Type
 14217 ;;  multiplier      2    0[COMRAM] unsigned int 
 14218 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;  product         2    4[COMRAM] unsigned int 
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  2    0[COMRAM] unsigned int 
 14223 ;; Registers used:
 14224 ;;		wreg, status,2, status,0, prodl, prodh
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14230 ;;      Params:         4       0       0       0       0       0       0
 14231 ;;      Locals:         2       0       0       0       0       0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0
 14233 ;;      Totals:         6       0       0       0       0       0       0
 14234 ;;Total ram usage:        6 bytes
 14235 ;; Hardware stack levels used: 1
 14236 ;; This function calls:
 14237 ;;		Nothing
 14238 ;; This function is called by:
 14239 ;;		_Inter_hi
 14240 ;; This function uses a non-reentrant model
 14241 ;;
 14242                           
 14243                           	psect	text60
 14244  0035E4                     __ptext60:
 14245                           	callstack 0
 14246  0035E4                     i2___wmul:
 14247                           	callstack 19
 14248                           
 14249                           ;incstack = 0
 14250  0035E4  5001               	movf	i2___wmul@multiplier^0,w,c
 14251  0035E6  0203               	mulwf	i2___wmul@multiplicand^0,c
 14252  0035E8  CFF3 F005          	movff	prodl,i2___wmul@product
 14253  0035EC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14254  0035F0  5001               	movf	i2___wmul@multiplier^0,w,c
 14255  0035F2  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
 14256  0035F4  50F3               	movf	243,w,c
 14257  0035F6  2606               	addwf	(i2___wmul@product+1)^0,f,c
 14258  0035F8  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
 14259  0035FA  0203               	mulwf	i2___wmul@multiplicand^0,c
 14260  0035FC  50F3               	movf	243,w,c
 14261  0035FE  2606               	addwf	(i2___wmul@product+1)^0,f,c
 14262  003600  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14263  003604  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14264  003608  0012               	return		;funcret
 14265  00360A                     __end_ofi2___wmul:
 14266                           	callstack 0
 14267                           
 14268 ;; *************** function i2___lmul *****************
 14269 ;; Defined at:
 14270 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;  multiplier      4    0[COMRAM] unsigned long 
 14273 ;;  multiplicand    4    4[COMRAM] unsigned long 
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;  product         4    8[COMRAM] unsigned long 
 14276 ;; Return value:  Size  Location     Type
 14277 ;;                  4    0[COMRAM] unsigned long 
 14278 ;; Registers used:
 14279 ;;		wreg, status,2, status,0
 14280 ;; Tracked objects:
 14281 ;;		On entry : 0/0
 14282 ;;		On exit  : 0/0
 14283 ;;		Unchanged: 0/0
 14284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14285 ;;      Params:         8       0       0       0       0       0       0
 14286 ;;      Locals:         4       0       0       0       0       0       0
 14287 ;;      Temps:          0       0       0       0       0       0       0
 14288 ;;      Totals:        12       0       0       0       0       0       0
 14289 ;;Total ram usage:       12 bytes
 14290 ;; Hardware stack levels used: 1
 14291 ;; This function calls:
 14292 ;;		Nothing
 14293 ;; This function is called by:
 14294 ;;		_Inter_hi
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           	psect	text61
 14299  003184                     __ptext61:
 14300                           	callstack 0
 14301  003184                     i2___lmul:
 14302                           	callstack 19
 14303                           
 14304                           ;incstack = 0
 14305  003184  6A09               	clrf	i2___lmul@product^0,c
 14306  003186  6A0A               	clrf	(i2___lmul@product+1)^0,c
 14307  003188  6A0B               	clrf	(i2___lmul@product+2)^0,c
 14308  00318A  6A0C               	clrf	(i2___lmul@product+3)^0,c
 14309  00318C                     i2l557:
 14310  00318C  A001               	btfss	i2___lmul@multiplier^0,0,c
 14311  00318E  D008               	goto	i2l6151
 14312  003190  5005               	movf	i2___lmul@multiplicand^0,w,c
 14313  003192  2609               	addwf	i2___lmul@product^0,f,c
 14314  003194  5006               	movf	(i2___lmul@multiplicand+1)^0,w,c
 14315  003196  220A               	addwfc	(i2___lmul@product+1)^0,f,c
 14316  003198  5007               	movf	(i2___lmul@multiplicand+2)^0,w,c
 14317  00319A  220B               	addwfc	(i2___lmul@product+2)^0,f,c
 14318  00319C  5008               	movf	(i2___lmul@multiplicand+3)^0,w,c
 14319  00319E  220C               	addwfc	(i2___lmul@product+3)^0,f,c
 14320  0031A0                     i2l6151:
 14321  0031A0  90D8               	bcf	status,0,c
 14322  0031A2  3605               	rlcf	i2___lmul@multiplicand^0,f,c
 14323  0031A4  3606               	rlcf	(i2___lmul@multiplicand+1)^0,f,c
 14324  0031A6  3607               	rlcf	(i2___lmul@multiplicand+2)^0,f,c
 14325  0031A8  3608               	rlcf	(i2___lmul@multiplicand+3)^0,f,c
 14326  0031AA  90D8               	bcf	status,0,c
 14327  0031AC  3204               	rrcf	(i2___lmul@multiplier+3)^0,f,c
 14328  0031AE  3203               	rrcf	(i2___lmul@multiplier+2)^0,f,c
 14329  0031B0  3202               	rrcf	(i2___lmul@multiplier+1)^0,f,c
 14330  0031B2  3201               	rrcf	i2___lmul@multiplier^0,f,c
 14331  0031B4  5001               	movf	i2___lmul@multiplier^0,w,c
 14332  0031B6  1002               	iorwf	(i2___lmul@multiplier+1)^0,w,c
 14333  0031B8  1003               	iorwf	(i2___lmul@multiplier+2)^0,w,c
 14334  0031BA  1004               	iorwf	(i2___lmul@multiplier+3)^0,w,c
 14335  0031BC  E1E7               	bnz	i2l557
 14336  0031BE  C009  F001         	movff	i2___lmul@product,?i2___lmul
 14337  0031C2  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 14338  0031C6  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 14339  0031CA  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 14340  0031CE  0012               	return		;funcret
 14341  0031D0                     __end_ofi2___lmul:
 14342                           	callstack 0
 14343                           
 14344                           	psect	rparam
 14345  0000                     
 14346                           	psect	temp
 14347  000046                     btemp:
 14348                           	callstack 0
 14349  000046                     	ds	1
 14350  0000                     int$flags	set	btemp
 14351  0000                     wtemp8	set	btemp+1
 14352  0000                     ttemp5	set	btemp+1
 14353  0000                     ttemp6	set	btemp+4
 14354  0000                     ttemp7	set	btemp+8
 14355                           
 14356                           	psect	idloc
 14357                           
 14358                           ;Config register IDLOC0 @ 0x200000
 14359                           ;	unspecified, using default values
 14360  200000                     	org	2097152
 14361  200000  FF                 	db	255
 14362                           
 14363                           ;Config register IDLOC1 @ 0x200001
 14364                           ;	unspecified, using default values
 14365  200001                     	org	2097153
 14366  200001  FF                 	db	255
 14367                           
 14368                           ;Config register IDLOC2 @ 0x200002
 14369                           ;	unspecified, using default values
 14370  200002                     	org	2097154
 14371  200002  FF                 	db	255
 14372                           
 14373                           ;Config register IDLOC3 @ 0x200003
 14374                           ;	unspecified, using default values
 14375  200003                     	org	2097155
 14376  200003  FF                 	db	255
 14377                           
 14378                           ;Config register IDLOC4 @ 0x200004
 14379                           ;	unspecified, using default values
 14380  200004                     	org	2097156
 14381  200004  FF                 	db	255
 14382                           
 14383                           ;Config register IDLOC5 @ 0x200005
 14384                           ;	unspecified, using default values
 14385  200005                     	org	2097157
 14386  200005  FF                 	db	255
 14387                           
 14388                           ;Config register IDLOC6 @ 0x200006
 14389                           ;	unspecified, using default values
 14390  200006                     	org	2097158
 14391  200006  FF                 	db	255
 14392                           
 14393                           ;Config register IDLOC7 @ 0x200007
 14394                           ;	unspecified, using default values
 14395  200007                     	org	2097159
 14396  200007  FF                 	db	255
 14397                           
 14398                           	psect	config
 14399                           
 14400                           ; Padding undefined space
 14401  300000                     	org	3145728
 14402  300000  FF                 	db	255
 14403                           
 14404                           ;Config register CONFIG1H @ 0x300001
 14405                           ;	Oscillator Selection bits
 14406                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
 14407                           ;	Fail-Safe Clock Monitor Enable bit
 14408                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 14409                           ;	Internal/External Oscillator Switchover bit
 14410                           ;	IESO = OFF, Oscillator Switchover mode disabled
 14411  300001                     	org	3145729
 14412  300001  08                 	db	8
 14413                           
 14414                           ;Config register CONFIG2L @ 0x300002
 14415                           ;	Power-up Timer Enable bit
 14416                           ;	PWRT = ON, PWRT enabled
 14417                           ;	Brown-out Reset Enable bits
 14418                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 14419                           ;	Brown Out Reset Voltage bits
 14420                           ;	BORV = 18, VBOR set to 1.8 V nominal
 14421  300002                     	org	3145730
 14422  300002  1E                 	db	30
 14423                           
 14424                           ;Config register CONFIG2H @ 0x300003
 14425                           ;	Watchdog Timer Enable bit
 14426                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
 14427                           ;	Watchdog Timer Postscale Select bits
 14428                           ;	WDTPS = 2048, 1:2048
 14429  300003                     	org	3145731
 14430  300003  17                 	db	23
 14431                           
 14432                           ; Padding undefined space
 14433  300004                     	org	3145732
 14434  300004  FF                 	db	255
 14435                           
 14436                           ;Config register CONFIG3H @ 0x300005
 14437                           ;	CCP2 MUX bit
 14438                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
 14439                           ;	PORTB A/D Enable bit
 14440                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 14441                           ;	Low-Power Timer1 Oscillator Enable bit
 14442                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 14443                           ;	HFINTOSC Fast Start-up
 14444                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
 14445                           ;	MCLR Pin Enable bit
 14446                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 14447  300005                     	org	3145733
 14448  300005  80                 	db	128
 14449                           
 14450                           ;Config register CONFIG4L @ 0x300006
 14451                           ;	Stack Full/Underflow Reset Enable bit
 14452                           ;	STVREN = ON, Stack full/underflow will cause Reset
 14453                           ;	Single-Supply ICSP Enable bit
 14454                           ;	LVP = OFF, Single-Supply ICSP disabled
 14455                           ;	Extended Instruction Set Enable bit
 14456                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 14457                           ;	Background Debugger Enable bit
 14458                           ;	DEBUG = 0x1, unprogrammed default
 14459  300006                     	org	3145734
 14460  300006  81                 	db	129
 14461                           
 14462                           ; Padding undefined space
 14463  300007                     	org	3145735
 14464  300007  FF                 	db	255
 14465                           
 14466                           ;Config register CONFIG5L @ 0x300008
 14467                           ;	Code Protection Block 0
 14468                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 14469                           ;	Code Protection Block 1
 14470                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 14471                           ;	Code Protection Block 2
 14472                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 14473                           ;	Code Protection Block 3
 14474                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 14475  300008                     	org	3145736
 14476  300008  0F                 	db	15
 14477                           
 14478                           ;Config register CONFIG5H @ 0x300009
 14479                           ;	Boot Block Code Protection bit
 14480                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 14481                           ;	Data EEPROM Code Protection bit
 14482                           ;	CPD = OFF, Data EEPROM not code-protected
 14483  300009                     	org	3145737
 14484  300009  C0                 	db	192
 14485                           
 14486                           ;Config register CONFIG6L @ 0x30000A
 14487                           ;	Write Protection Block 0
 14488                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 14489                           ;	Write Protection Block 1
 14490                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 14491                           ;	Write Protection Block 2
 14492                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 14493                           ;	Write Protection Block 3
 14494                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 14495  30000A                     	org	3145738
 14496  30000A  0F                 	db	15
 14497                           
 14498                           ;Config register CONFIG6H @ 0x30000B
 14499                           ;	Configuration Register Write Protection bit
 14500                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 14501                           ;	Boot Block Write Protection bit
 14502                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 14503                           ;	Data EEPROM Write Protection bit
 14504                           ;	WRTD = OFF, Data EEPROM not write-protected
 14505  30000B                     	org	3145739
 14506  30000B  E0                 	db	224
 14507                           
 14508                           ;Config register CONFIG7L @ 0x30000C
 14509                           ;	Table Read Protection Block 0
 14510                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 14511                           ;	Table Read Protection Block 1
 14512                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 14513                           ;	Table Read Protection Block 2
 14514                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 14515                           ;	Table Read Protection Block 3
 14516                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 14517  30000C                     	org	3145740
 14518  30000C  0F                 	db	15
 14519                           
 14520                           ;Config register CONFIG7H @ 0x30000D
 14521                           ;	Boot Block Table Read Protection bit
 14522                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 14523  30000D                     	org	3145741
 14524  30000D  40                 	db	64
 14525                           tosu	equ	0xFFF
 14526                           tosh	equ	0xFFE
 14527                           tosl	equ	0xFFD
 14528                           stkptr	equ	0xFFC
 14529                           pclatu	equ	0xFFB
 14530                           pclath	equ	0xFFA
 14531                           pcl	equ	0xFF9
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           indf0	equ	0xFEF
 14539                           postinc0	equ	0xFEE
 14540                           postdec0	equ	0xFED
 14541                           preinc0	equ	0xFEC
 14542                           plusw0	equ	0xFEB
 14543                           fsr0h	equ	0xFEA
 14544                           fsr0l	equ	0xFE9
 14545                           wreg	equ	0xFE8
 14546                           indf1	equ	0xFE7
 14547                           postinc1	equ	0xFE6
 14548                           postdec1	equ	0xFE5
 14549                           preinc1	equ	0xFE4
 14550                           plusw1	equ	0xFE3
 14551                           fsr1h	equ	0xFE2
 14552                           fsr1l	equ	0xFE1
 14553                           bsr	equ	0xFE0
 14554                           indf2	equ	0xFDF
 14555                           postinc2	equ	0xFDE
 14556                           postdec2	equ	0xFDD
 14557                           preinc2	equ	0xFDC
 14558                           plusw2	equ	0xFDB
 14559                           fsr2h	equ	0xFDA
 14560                           fsr2l	equ	0xFD9
 14561                           status	equ	0xFD8

Data Sizes:
    Strings     366
    Constant    149
    Data        8
    BSS         169
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      69
    BANK0           160    160     160
    BANK1           256     74     221
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    nanf@s	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_38(CODE[1]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_35(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_35(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK0[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK0[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_24(CODE[10]), STR_23(CODE[22]), STR_22(CODE[11]), STR_21(CODE[10]), 
		 -> STR_20(CODE[22]), STR_19(CODE[11]), STR_18(CODE[10]), STR_15(CODE[10]), 
		 -> STR_12(CODE[20]), STR_4(CODE[6]), STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_24(CODE[10]), STR_23(CODE[22]), STR_22(CODE[11]), STR_21(CODE[10]), 
		 -> STR_20(CODE[22]), STR_19(CODE[11]), STR_18(CODE[10]), STR_15(CODE[10]), 
		 -> STR_12(CODE[20]), STR_4(CODE[6]), STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_24(CODE[10]), STR_23(CODE[22]), STR_22(CODE[11]), STR_21(CODE[10]), 
		 -> STR_20(CODE[22]), STR_19(CODE[11]), STR_18(CODE[10]), STR_15(CODE[10]), 
		 -> STR_12(CODE[20]), STR_4(CODE[6]), STR_2(CODE[15]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> stoa@nuls(BANK0[7]), ?_sprintf(BANK1[2]), U_real(BANK1[2]), compile_time(CODE[9]), 
		 -> compile_date(CODE[12]), STR_3(CODE[9]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_24(CODE[10]), STR_23(CODE[22]), STR_22(CODE[11]), STR_21(CODE[10]), 
		 -> STR_20(CODE[22]), STR_19(CODE[11]), STR_18(CODE[10]), STR_15(CODE[10]), 
		 -> STR_12(CODE[20]), STR_4(CODE[6]), STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S1890_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_6(CODE[8]), symbol_5(CODE[8]), symbol_4(CODE[8]), symbol_3(CODE[8]), 
		 -> symbol_2(CODE[8]), symbol_1(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[11]), STR_16(CODE[11]), STR_14(CODE[19]), STR_13(CODE[19]), 
		 -> STR_11(CODE[15]), STR_10(CODE[20]), STR_9(CODE[19]), STR_8(CODE[22]), 
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[21]), TxtBuf(BANK1[21]), 
		 -> STR_1(CODE[21]), 


Critical Paths under _main in COMRAM

    _main->___lldiv
    _sqrtf->___flmul
    _vfpfcnvrt->_atoi
    _utoa->_pad
    _stoa->_fputc
    _efgtoa->_pad
    _tolower->_isupper
    _pad->_fputs
    _fputs->_fputc
    _floorf->___fldiv
    ___fltol->___flmul
    ___flsub->___flmul
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___flge->___flmul
    ___fldiv->___xxtofl
    _ctoa->_fputc
    _fputc->_putch
    _atoi->___wmul
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _calc_power->___lldiv
    ___wmul->___lwmod
    ___lwdiv->___wmul
    _lcd_putc->_lcdWrite
    _init_cpu->_cgrom_char
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble

Critical Paths under _Inter_lo in COMRAM

    None.

Critical Paths under _Inter_hi in COMRAM

    _Inter_hi->i2___lmul

Critical Paths under _main in BANK0

    _main->_show_lcd_main
    _sqrtf->___fladd
    _show_lcd_main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _utoa->___lodiv
    _utoa->___lomod
    _efgtoa->___fltol
    _pad->_fputs
    _floorf->___fldiv
    ___fltol->_sqrtf
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___flge->___flmul
    ___fldiv->___xxtofl
    _calc_power->___lwdiv

Critical Paths under _Inter_lo in BANK0

    None.

Critical Paths under _Inter_hi in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _show_lcd_main->_sprintf
    _vfpfcnvrt->_efgtoa

Critical Paths under _Inter_lo in BANK1

    None.

Critical Paths under _Inter_hi in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Inter_lo in BANK2

    None.

Critical Paths under _Inter_hi in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Inter_lo in BANK3

    None.

Critical Paths under _Inter_hi in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Inter_lo in BANK4

    None.

Critical Paths under _Inter_hi in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Inter_lo in BANK5

    None.

Critical Paths under _Inter_hi in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  228596
                                            156 BANK0      4     4      0
                                             70 BANK1      4     4      0
                            _EncPoll
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                            ___lldiv
                             ___lmul
                           ___xxtofl
                         _calc_power
                           _clearLCD
                           _init_cpu
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
                      _show_lcd_main
                            _sprintf
                              _sqrtf
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     272
                                             25 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _sqrtf                                               49    45      4   14113
                                             43 BANK0     45    41      4
                            ___fladd
                             ___flge
                            ___flmul
                           ___xxtofl (ARG)
                               _nanf
 ---------------------------------------------------------------------------------
 (2) _nanf                                                 8     4      4      99
                                             25 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _show_lcd_main                                        2     2      0   94103
                                            154 BANK0      2     2      0
                         _calc_power
                           _lcdPrint
                         _lcd_gotoxy
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    10     14   76787
                                            146 BANK0      8     8      0
                                             56 BANK1     14     0     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             6     2      4   73937
                                            140 BANK0      6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    41      3   73103
                                            109 BANK0     31    28      3
                               _atoi
                               _ctoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                31    22      9    9808
                                             16 BANK0     31    22      9
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     536
                                             25 COMRAM     1     1      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     554
                                             25 COMRAM     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     4      5     768
                                             25 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _stoa                                                21    18      3    4132
                                             34 COMRAM     1     1      0
                                              0 BANK0     20    17      3
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              67    61      6   43981
                                             98 BANK0     11     5      6
                                              0 BANK1     56    56      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _tolower                                              8     6      2    1372
                                             31 COMRAM     6     4      2
                                              0 BANK0      2     2      0
                            _isupper
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     649
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _strcpy                                              10     6      4    1248
                                             25 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _pad                                                 10     5      5    7948
                                             37 COMRAM     1     1      0
                                              3 BANK0      9     4      5
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     392
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                6     3      3    3208
                                             34 COMRAM     3     3      0
                                              0 BANK0      3     0      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     890
                                             27 BANK0     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       14    10      4     482
                                             25 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     898
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _sqrtf (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    5792
                                             43 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             16     8      8    5124
                                             27 BANK0     16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     196
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    5364
                                             33 COMRAM     4     4      0
                                              6 BANK0     21    13      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1644
                                             27 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     912
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    3790
                                             33 COMRAM     4     4      0
                                              6 BANK0     21    13      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     818
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     842
                                             25 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     5      2    3210
                                             34 COMRAM     3     1      2
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    2590
                                             26 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      42
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    3118
                                             36 COMRAM     2     0      2
                                              0 BANK0     13    13      0
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     321
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     331
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _lcdPrint                                             6     4      2    7477
                                             34 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     4      1    3624
                                             29 COMRAM     5     4      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _calc_power                                          21    15      6    6167
                                              7 BANK0     21    15      6
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1694
                                             30 COMRAM     6     2      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     600
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1190
                                              0 BANK0      7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1122
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     609
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     250
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    1336
                                             29 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      46
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_cpu                                             2     2      0    5392
                                             33 COMRAM     2     2      0
                         _cgrom_char
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2734
                                             30 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             1     1      0    1305
                                             29 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    2658
                                             29 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1305
                                             27 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     124
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     746
                                             25 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _EncPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _Inter_lo                                            3     3      0       0
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _Inter_hi                                           10    10      0     618
                                             12 COMRAM    10    10      0
                           i2___lmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     315
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (12) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EncPoll
   ___fladd
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___fldiv
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
     _sqrtf (ARG)
       ___fladd
       ___flge
         ___flmul (ARG)
       ___flmul
       ___xxtofl (ARG)
       _nanf (ARG)
   ___lldiv
   ___lmul
   ___xxtofl
   _calc_power
     ___lldiv
     ___lmul
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwmod (ARG)
     ___lwmod
     ___wmul
   _clearLCD
     _lcdWrite
       _lcdNibble
   _init_cpu
     _cgrom_char
       _lcdWrite
     _initLCD
       _clearLCD
       _lcdNibble
       _lcdWrite
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _read_eep
   _show_lcd_main
     _calc_power
     _lcdPrint
     _lcd_gotoxy
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _fputc
               _putch
           _efgtoa
             ___awdiv
             ___awmod
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
               ___fladd
               ___flmul (ARG)
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _isupper
             _pad
               _fputc
               _fputs
                 _fputc
               _strlen
             _strcpy
             _tolower
               _isupper
           _fputc
           _isdigit
           _isupper
           _stoa
             _fputc
             _strlen
           _strncmp
           _tolower
           _utoa
             ___lodiv
             ___lomod
             _pad
   _sprintf
   _sqrtf
   _write_eep

 _Inter_lo (ROOT)

 _Inter_hi (ROOT)
   i2___lmul
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     4A      DD       7       86.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     26      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Aug 10 11:53:24 2021

           ___fldiv@aexp 007A             ___fldiv@bexp 0079             ___fldiv@sign 0072  
                     PL2 14B2                       PL4 14C6                       PL6 14EE  
                     PL8 151E             ___awdiv@sign 001F                       _pp 0045  
                     _ps 0037                       bsr 000FE0      ___wmul@multiplicand 0021  
           lcdWrite@byte 001D                      PL10 0606                      PL20 2842  
                    PL12 0624                      PL30 284E                      PL22 1B48  
                    PL14 0DF8                      PL40 1B54                      PL32 067E  
                    PL24 0E2A                      PL16 197C                      PL50 0712  
                    PL42 06DE                      PL34 068C                      PL26 0668  
                    PL18 0656                      PL60 0720                      PL52 1D58  
                    PL44 06F2                      PL36 069A                      PL28 2932  
                    PL70 2F18                      PL62 1998                      PL54 1988  
                    PL46 11F8                      PL38 06BC                      PL80 075C  
                    PL72 1D72                      PL64 19B0                      PL56 152C  
                    PL48 0704                      PL90 0792                      PL82 1B72  
                    PL74 0738                      PL66 204E                      PL58 153C  
                    PL92 07A4                      PL84 076E                      PL76 074A  
                    PL68 1B5E                      PL94 2AB4                      PL86 0780  
                    PL78 0E54                      PL96 07B6                      PL88 0E66  
                    PL98 1B84             lcdWrite@type 001C                      l114 34DC  
                    l123 333E                      l442 08BE                      l445 08F8  
                    l454 0A96                      l535 33C4                      l480 0C80  
                    l537 33F0                      l481 0CA2                      l490 0D2C  
                    l811 2CE2                      l484 0CC4                      l476 0C0A  
                    l557 3140                      l813 2D0E                      l478 0C56  
                    l575 3008                      l479 0C6C                      l986 29FC  
                    l996 2B58                      _pad 2E3A                      _err 0039  
           ___awmod@sign 001F                      wreg 000FE8          lcdNibble@nibble 001B  
           ___flmul@aexp 006F            write_eep@data 001A             ___flmul@bexp 0070  
           ___flmul@sign 006E             ___flmul@temp 0079             ___flmul@prod 0075  
            lcd_gotoxy@x 0021              lcd_gotoxy@y 001E                     PL100 177A  
                   PL110 242E                     PL102 241C                     PL120 0E90  
                   PL112 154C                     PL104 2308                     PL130 1B96  
                   PL122 120A                     PL114 2940                     PL106 0E78  
                   PL140 274A                     PL132 07C8                     PL124 19C8  
                   PL116 2EA6                     PL108 19BE                     PL150 17A2  
                   PL142 2060                     PL134 2DAE                     PL126 0E96  
                   PL118 0E82                     PL160 1218                     PL152 2756  
                   PL144 206C                     PL136 2318                     PL128 178C  
                   PL170 19E0                     PL162 17AC                     PL154 2D2E  
                   PL146 1796                     PL138 2E22                     PL180 0E9C  
                   PL172 2CA2                     PL164 19D6                     PL156 30D2  
                   PL148 2E2E                     PL182 155C                     PL174 07DC  
                   PL166 17B6                     PL158 07D2                     PL184 285C  
                   PL176 1222                     PL168 1BA0                     PL186 1BAA  
                   PL178 2AC6                     PL188 1BB0             ___fltol@exp1 00C1  
                   l1102 172A                     l1103 1726                     l1210 26E0  
                   l1122 1BD6                     l1203 2694                     l1132 1CB0  
                   l1109 1754                     l1150 1D42                     l1126 1C02  
                   l1070 15B6                     l1039 325A                     l1143 1CFC  
                   l1144 1CF8                     l1160 1800                     l1049 33B0  
                   l1065 1584                     l1171 1908                     l1411 1D9C  
                   l1172 1904                     l1156 17E0                     l1324 0248  
                   l1093 16E2                     l1077 1646                     l1078 1638  
                   l1350 0438                     l1504 2928                     l1352 043C  
                   l1265 2E52                     l1409 1D94                     l1530 3498  
                   l1283 2D6A                     l1179 1952                     l1267 2E56  
                   l1516 1FE2                     l1621 32EA                     l1390 2386  
                   l1490 288E                     l1580 1042                     l1583 10D4  
                   l1576 1010                     l1585 1164                     ?_pad 0063  
                   l9011 16EC                     l9021 1702                     l9005 16D2  
                   _ADIE 007CEE                     _ADIF 007CF6                     l9121 1BFE  
                   l9105 1BD2                     l9203 1D4E                     l9043 1744  
                   l9027 170C                     l8341 26C2                     l8333 26A4  
                   l9205 1D50                     l9053 175C                     l8351 26FA  
                   l8343 26D2                     l5927 33C6                     l9135 1C34  
                   l9055 175E                     l9071 354E                     l8337 26B8  
                   l5937 33DE                     l9313 193A                     l9241 1802  
                   l9225 17DC                     l8339 26BE                     l9163 1CAE  
                   l9139 1C42                     l9227 17E2                     l9067 353C  
                   l9075 3400                     l5957 3532                     l8349 26EE  
                   l9413 3078                     l9405 3062                     l9157 1C8A  
                   l9149 1C7A                     l9421 309C                     l9325 1966  
                   l9309 1922                     l9245 1814                     l9077 3404  
                   l5789 360C                     l8367 2738                     l9351 2F4E  
                   l9191 1D1C                     l9175 1CCC                     l9239 17FC  
                   l9345 2F3E                     l9409 306C                     l9169 1CC4  
                   l9425 30B2                     l9505 2978                     l9443 2CF8  
                   l9507 298C                     l9357 2F5E                     l9373 2F8E  
                   l9197 1D2E                     l9429 30CE                     l9437 2CC8  
                   l9293 18D8                     l8901 1598                     l9613 201C  
                   l9541 2E44                     l9517 29E6                     l9533 2B42  
                   l9525 2AE8                     l9359 2F66                     l9287 18BA  
                   l9711 0126                     l9527 2AFC                     l9377 2F9A  
                   l9369 2F84                     l9393 3038                     l9449 2D2A  
                   l9457 363C                     l8913 15B2                     l9465 2B8E  
                   l9617 203C                     l9609 2004                     l9553 2E8A  
                   l9545 2E5C                     l9801 02CC                     l8923 15CC  
                   l9483 2BD8                     l9811 0300                     l9707 010E  
                   l9715 014A                     l9661 2D82                     l9653 2D60  
                   l9397 3044                     l9389 302C                     l9565 2A7E  
                   l9549 2E6E                     l9581 31E0                     l9805 02DA  
                   l9741 01B2                     l9725 0184                     l9733 0194  
                   l9709 011C                     l8863 3696                     l9647 2D4A  
                   l9399 304C                     l9495 2C04                     l9487 2BE0  
                   l9479 2BC8                     l9575 2AAC                     l9911 0504  
                   l9751 01F4                     l8873 2DC8                     l9665 2D9E  
                   l9657 2D70                     l9649 2D56                     l8953 1608  
                   l9489 2BEC                     l9569 2A86                     l9833 03A4  
                   l9745 01D0                     l8963 1640                     l9851 044A  
                   l9827 0370                     l9819 032E                     l9763 0234  
                   l9747 01E6                     l8965 1644                     l8893 1580  
                   l9845 0416                     l9781 02A0                     l9773 0258  
                   l9677 009E                     l9599 1F70                     l9927 0530  
                   l9863 047A                     l9783 02A6                     l9767 0252  
                   STR_1 7F11                     STR_2 7F83                     l8985 1672  
                   l8977 1656                     l9929 0538                     l9793 02C2  
                   l9689 00C0                     l9697 00D4                     STR_3 7FDC  
                   STR_4 7FE5                     l8987 1676                     l8995 167A  
                   l9939 057E                     l9875 0498                     l9883 04A8  
                   l9891 04BA                     STR_5 7EE7                     STR_6 7EFC  
                   l9965 05E0                     l9949 05A2                     STR_7 7ED2  
                   STR_8 7E90                     STR_9 7F4E                     l9985 234A  
                   l9899 04DA                     l9995 239C                     l9999 23AC  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _RBPU 007F8F                     _TXIF 007CF4                     _WPUB 000F7C  
          calc_power@p_w 007A            calc_power@res 0067                     _dbuf 0125  
                   _coef 0108                     _getU 0040            calc_power@pwr 0079  
                   _atoi 2862                     _ctoa 2D3A                     _main 07E6  
                   _nanf 364E                     _prec 0031                     _nout 0114  
                   pad@i 0068                     pad@p 0066                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 006A                     fsr2l 000FD9  
                   _stoa 2324                     btemp 0046                     _zero 0041  
                   _utoa 1D7C            ___fpclassifyf 2A1E                     prodh 000FF4  
                   prodl 000FF3                     start 0056          ___fldiv@new_exp 0073  
        __end_of_EncPoll 3536             _tolower$2230 0060             ___param_bank 000000  
                  ??_pad 0026                    l10001 23B6                    l10011 23FE  
                  l10015 240E                    l10007 23E6                    l10115 34DE  
                  l10131 1248                    l10029 1DD0                    l10205 1372  
                  l10133 124A                    l10071 28A2                    l10055 286C  
                  l10039 1EA0                    l10151 125E                    l10143 1256  
                  l10135 124E                    l10401 2764                    l10073 28A8  
                  l10057 2870                    l10241 1476                    l10233 141C  
                  l10225 13EE                    l10209 1398                    l10307 2FBC  
                  l10331 3232                    l10075 28BE                    l10251 1496  
                  l10171 12D2                    l10155 1266                    l10147 125A  
                  l10139 1252                    l10309 2FC8                    l10341 3250  
                  l10413 27C6                    l10405 2780                    l10421 282E  
                  l10069 289C                    l10173 12D4                    l10157 1288  
                  l10319 2FFA                    l10351 3390                    l10407 278A  
                  l10079 28E6                    l10247 148C                    l10329 322A  
                  l10417 2802                    l10409 2796                    l10097 2ED4  
                  l10169 12B6                    l10257 149E                    l10275 3342  
                  l10283 3350                    l10419 282A                    l10099 2EE0  
                  l10603 0FE4                    l10437 34B0                    l10357 33A6  
                  l10349 3388                    l10277 3346                    l10285 336E  
                  l10197 1354                    l10189 132E                    l10365 3274  
                  l10621 10E0                    l10279 334A                    l10367 3294  
                  l10615 106A                    l10297 3154                    l10635 1148  
                  l10661 1A38                    l10805 0A98                    l10583 0F2E  
                  l10823 0B02                    l10815 0AE2                    l10657 1A26  
                  l10921 0C76                    l10809 0AD4                    l10595 0F82  
                  l10827 0B0E                    l10819 0AEE                    l10763 08F0  
                  l10693 1B06                    l10589 0F60                    l10749 08CC  
                  l10687 1AE2                    l10599 0FD0                    l10943 0CE2  
                  l10935 0CBC                    l10871 0B9E                    l10863 0B7E  
                  l10767 0906                    l10689 1AF8                    l10929 0C8A  
                  l10769 090A                    l10777 0912                    l10955 0D24  
                  l10939 0CCA                    l10883 0BDA                    l10875 0BB2  
                  l10891 0C02                    l10867 0B94                    l10981 0D9C  
                  l10949 0D04                    l10797 0A7A                    l10975 0D82  
                  l10959 0D30                    l10879 0BC6                    l10799 0A82  
                  l10889 0BEE                    l10999 0DCE            ___fltol@sign1 00C0  
                  ?_atoi 0025                    ?_ctoa 0023          __end_of___fladd 177A  
                  ?_main 0001                    ?_nanf 001A          __end_of___fldiv 1D58  
        __end_of___awdiv 2FA4          __end_of___flneg 364E                    _EEADR 000FA9  
                  STR_10 7F3A                    STR_11 7F74                    STR_12 7F26  
                  STR_20 7EA6                    STR_13 7F4E                    STR_21 7FD2  
                  STR_30 7FF7                    STR_22 7F92                    STR_14 7F61  
                  STR_15 7FC8                    STR_23 7EBC                    STR_24 7FD2  
                  STR_16 7FA8                    STR_33 7FFB                    STR_25 7FEB  
                  STR_17 7FB3                    STR_26 7FF3                    STR_18 7FBE  
                  STR_35 7FFB                    STR_19 7F9D          __end_of___awmod 3082  
                  STR_29 7FEF                    STR_38 7EA5          __end_of___flmul 197C  
        __end_of___flsub 346A          __end_of___fltol 2C16                    ?_stoa 0060  
        __end_of___lldiv 301A                    ?_utoa 0070                    u11030 1626  
                  u12000 2B84                    u11210 1710                    u12010 2BAC  
                  u10510 2704                    u11230 1720                    u12110 2B00  
                  u12015 2BA2                    u11080 164C          ??_show_lcd_main 0027  
                  u12050 2BF0          __end_of___lodiv 2A1E                    u12300 1F5E  
                  u11340 341E          ___awdiv@divisor 001C                    u13101 232E  
                  u12215 2A90                    u12400 35B8                    u12240 3212  
                  u11360 358A                    u12080 2990                    u11290 174C  
                  u12170 2A4E                    u11370 358C                    u13050 0590  
                  u13210 1D8C                    u11347 341A                    u12420 3496  
                  u13300 28FC                    u11540 1CF2                    u12340 1FCA  
                  u12260 32D0                    u12325 1F84                    u12430 2C22  
                  u13310 28FE                    u10910 2DC2                    u12326 1F8A  
                  u12270 32D2                    u13070 05CC                    u13150 23B0  
                  u14110 0AFC                    u12175 2A44                    u12327 1F98  
                  u12247 320E                    u11720 18FE                    u12360 200A  
                  u13080 05CE                    u13160 23D0                    u13240 1EC6  
                  u14200 0CDA                    u12345 1FC8                    u12450 2C38  
                  u10930 2DF0                    u12290 1F40                    u12610 00F0  
                  u13250 1ED2                    u14210 0CF0                    u12508 2C66  
                  u11820 2F6A                    u11580 1D28                    u12700 020C  
                  u12620 00F2                    u13260 1ED6                    u14220 0CFE  
                  u14140 0B8E                    u14060 0A8C                    u12365 2008  
                  u12470 2C50                    u12390 35B6                    u11590 1D3A  
                  u13190 2412                    u14230 0D10                    u14070 0AA4  
                  u12295 1F36                    u13167 23CC                    u12448 2C24  
                  u13280 288C                    u11760 192E                    u11680 180A  
                  u12800 02BE                    u14240 0D1E                    u12490 2C64  
                  u11930 30CA                    u11770 1946                    u12730 0240  
                  u12650 0166                    u13530 13D4                    u13450 12EA  
                  u12468 2C3A                    u13620 2FCC                    u12660 0168  
                  u12580 00B4                    u13380 2F06                    u13540 13D6  
                  u13460 12EC                    u14180 0CB6                    u14317 07F4  
                  u13710 27A4                    u13470 12F6                    u14270 0D6A  
                  u14407 25A6                    u14327 0874                    u12488 2C52  
                  u11880 3050                    u12760 026C                    u13800 0F3E  
                  u14088 0AA8                    u14417 25BE                    u14337 2772  
        __end_of___lomod 2B7A                    u13650 3236                    u13730 27C0  
                  u14507 2C8C                    u14427 25D6                    u14347 24CA  
                  u13740 27DE                    u14437 25F2                    u14357 2550  
                  u13717 27A2                    u14285 0D6C                    u13750 2810  
                  u12870 039C                    u14447 260E                    u14367 255E  
                  u13680 3394                    u13760 283C                    u14457 2624  
                  u14377 256C                    u13737 27BE                    u14467 2640  
                  u14387 257A                    u13747 27DC                    u13835 0F96  
                  u13836 0F9C                    u14477 3678                    u14397 258E  
                  u13757 280E                    u13925 11A8                    u13837 0FAA  
                  u12990 04EE                    u14487 34E0                    u13767 283A  
                  u14497 2C74          __end_of___lwdiv 3264                    i1l220 0046  
        __end_of___lwmod 33BA                    i2l231 2144                    i2l225 2146  
                  i2l235 21CE                    i2l228 2102                    i2l229 210C  
                  i2l557 318C          ___awdiv@counter 001E             vfpfcnvrt@fmt 00CE  
           vfpfcnvrt@llu 00D4                    _TMR0L 000FD6                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TXREG 000FAD  
    ___lmul@multiplicand 001E          __end_of_initLCD 2654           calc_power@u_rl 006B  
                  _flags 0033                    _r_dec 011D                    _fputc 2DBA  
                  _fputs 3536          __end_of_isdigit 35BE                    _t_res 0104  
                  atoi@n 006B                    pad@fp 0063                    atoi@s 0025  
                  _power 0120                    _width 002F                    ctoa@c 0024  
                  _putch 3694                    ctoa@l 0060                    ctoa@w 0062  
                  _sqrtf 0EA6                    nanf@s 001A                    nanf@u 001E  
        __end_of_isspace 34A0           __pbitbssCOMRAM 0220          __end_of_isupper 3592  
                  tablat 000FF5         __end_ofi2___lmul 31D0         __end_ofi2___wmul 360A  
                  plusw1 000FE3                    plusw2 000FDB                    stoa@i 006A  
                  stoa@l 0072                    stoa@p 0070                    stoa@s 0061  
                  stoa@w 006C                    ttemp5 0047                    ttemp6 004A  
                  ttemp7 004E                    utoa@d 0071                    utoa@i 008D  
                  utoa@n 0085                    utoa@p 0081                    utoa@w 0083  
                  status 000FD8                    wtemp8 0047          __end_of_sprintf 333A  
         ?___fpclassifyf 001A          __end_of_tolower 32F4          __end_of_strncmp 2F18  
       ___lodiv@dividend 0060             __end_ofPL100 178C             __end_ofPL110 2438  
           __end_ofPL102 242E             __end_ofPL120 0E96             __end_ofPL112 155C  
           __end_ofPL104 2318             __end_ofPL130 1BA0             __end_ofPL122 1218  
           __end_ofPL114 2950             __end_ofPL106 0E82             __end_ofPL140 2756  
           __end_ofPL132 07D2             __end_ofPL124 19D6             __end_ofPL116 2EB4  
           __end_ofPL108 19C8             __end_ofPL150 17AC             __end_ofPL142 206C  
           __end_ofPL134 2DBA             __end_ofPL126 0E9C             __end_ofPL118 0E90  
           __end_ofPL160 1222             __end_ofPL152 2762             __end_ofPL144 2078  
           __end_ofPL136 2324             __end_ofPL128 1796             __end_ofPL170 19EA  
           __end_ofPL162 17B6             __end_ofPL154 2D3A             __end_ofPL146 17A2  
           __end_ofPL138 2E2E             __end_ofPL180 0EA6             __end_ofPL172 2CAC  
           __end_ofPL164 19E0             __end_ofPL156 30DE             __end_ofPL148 2E3A  
           __end_ofPL182 1564             __end_ofPL174 07E6             __end_ofPL166 17C0  
           __end_ofPL158 07DC             __end_ofPL184 2862             __end_ofPL176 122C  
           __end_ofPL168 1BAA             __end_ofPL186 1BB0             __end_ofPL178 2AD0  
           __end_ofPL188 1BB6          __initialization 30DE             __end_of_atoi 2932  
           __end_of_ctoa 2DAE             __end_of_main 0DF8             __end_of_nanf 366A  
           __end_of_stoa 241C             __end_of_utoa 1EFC         __end_of_Inter_hi 21DA  
       __end_of_Inter_lo 0056                   ??_atoi 0060                   ??_ctoa 0025  
                 ??_main 00FC                   ??_nanf 001E                   ??_stoa 0023  
                 ??_utoa 0079            __activetblptr 000002         ___lodiv@quotient 001A  
                 _ADCON1 000FC1                   ?_fputc 001B                   ?_fputs 0060  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _EEDATA 000FA8  
                 _EECON2 000FA7         ___awdiv@dividend 001A                   ?_putch 0001  
                 ?_sqrtf 008B                   _INT0IE 007F94                   _INT0IF 007F91  
                 i1l6165 0034                   i2l6151 31A0                   i2l6225 21C0  
                 i2l6209 2136                   i2l6227 21C2                   i2l6195 20EC  
                 i2l6189 20AA                ??_EncPoll 001A            vfpfcnvrt@done 00DE  
                 _TMR0IE 007F95                   _TMR0IF 007F92                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _TMR1CS 007E69                   _TMR3IE 007D01  
                 _TMR3IF 007D09                   _TMR1IP 007CF8                   _TMR3IP 007D11  
                 _TMR1ON 007E68         i2___lmul@product 0009                   _TMR3ON 007D88  
       __end_of___xxtofl 274A              Inter_hi@lev 0013         __end_of_clearLCD 3682  
                 _U_meas 002B         __end_of_lcdPrint 2842                   _U_real 018A  
                 _U_summ 0110         __end_of_lcdWrite 3504             vfprintf@cfmt 00F0  
                 ___flge 2CAC         __end_of_lcd_putc 36AC                   ___fleq 3082  
                 _TxtBuf 0175                   ___lmul 3138                ??___fladd 0083  
                 ___wmul 35BE                ??___fldiv 0022                ??___awdiv 001E  
              ??___flneg 001E                ??___awmod 001E                ??___flmul 0022  
              ??___flsub 0026                ??___fltol 00BC                ??___lldiv 0022  
              ??___lodiv 001A                ??___lomod 001A                   _efgtoa 005A  
              ??___lwdiv 0025                ??___lwmod 001E                   _floorf 1EFC  
       __end_of_init_cpu 2546         __end_of_read_eep 3694                   clear_0 3116  
                 clear_1 3124         ___awdiv@quotient 0020          ___awmod@divisor 001C  
                 isa$std 000001          ___awmod@counter 001E                   pad@buf 0064  
                 ctoa@fp 0023                   _strcpy 31D0                   _strlen 33F6  
              ??_initLCD 001F            _Inter_hi$2484 0011                   fputc@c 001B  
                 fputs@c 0023                   fputs@i 0024             __pdataCOMRAM 0045  
                 fputs@s 0060                ??_isdigit 001C          ___fpclassifyf@e 0060  
        ___fpclassifyf@u 0062          ___fpclassifyf@x 001A             __mediumconst 7DFA  
              ??_isspace 001C                   tblptrh 000FF7                ??_isupper 001C  
                 tblptrl 000FF6                   tblptru 000FF8                   stoa@cp 006E  
                 stoa@fp 0060         __end_of_vfprintf 32AC            main@whole_dec 0220  
                 utoa@fp 0070                   sqrtf@i 0098                   sqrtf@m 00AC  
                 sqrtf@q 00A0                   sqrtf@r 00B0                   sqrtf@s 0094  
                 sqrtf@t 00A4                   sqrtf@x 008B                   sqrtf@z 00A8  
              ??_sprintf 0027                ??_tolower 0022                ??_strncmp 001F  
       __end_of_symbol_1 7E90         __end_of_symbol_2 7E88         __end_of_symbol_3 7E80  
       __end_of_symbol_4 7E78         __end_of_symbol_5 7E70         __end_of_symbol_6 7E68  
             ___flge@ff1 007B          ??___fpclassifyf 001E               ___flge@ff2 007F  
           ___xxtofl@arg 0062             ___xxtofl@exp 0061             ___xxtofl@val 001A  
             ___fleq@ff1 001A               ___fleq@ff2 001E               __accesstop 0060  
__end_of__initialization 312A               ___flneg@f1 001A        __end_of_EncState_ 7E4B  
          ___rparam_used 000001         write_eep@address 001B               ___fltol@f1 00B8  
   __end_of_compile_date 7E57     __end_of_compile_time 7E60           __pcstackCOMRAM 0001  
           __pidataBANK1 36B6            __end_of_fputc 2E22            __end_of_fputs 3566  
          __end_of_putch 36A0            __end_of_sqrtf 11F8               __end_ofPL2 14C6  
             __end_ofPL4 14EE               __end_ofPL6 151E               __end_ofPL8 152C  
          EncPoll@EncVal 003F                ?i2___lmul 0001                ?i2___wmul 0001  
     __size_of_lcdNibble 008C               _calc_power 21DA        lcd_gotoxy@address 0022  
                ??_fputc 001E                  ??_fputs 0023                  ??_putch 001A  
                ??_sqrtf 008F               __pbssBANK1 0100                ?_Inter_hi 0001  
              ?_Inter_lo 0001       __size_of_key_press 003C                  ?___flge 007B  
                ?___fleq 001A                  ?___lmul 001A                  ?___wmul 001F  
                ?_efgtoa 00C2                  ?_floorf 007B      __end_of_HD44780_CYR 7E3B  
         ___lmul@product 0022               _cgrom_char 34A0                  ?_strcpy 001A  
                ?_strlen 001A               ??i2___lmul 0009               ??i2___wmul 0005  
                _T1OSCEN 007E6B            _eusartRxCount 0042                ?___xxtofl 001A  
              ?_clearLCD 0001       __size_of_vfpfcnvrt 0286               _lcd_gotoxy 333A  
              ?_lcdPrint 0023                ?_lcdWrite 001C                ?_lcd_putc 0001  
       ___lomod@dividend 0060                  _EncData 0116                  _EncPoll 3504  
              ?_init_cpu 0001                ?_read_eep 001A               ??_Inter_hi 000D  
             ??_Inter_lo 0017               _key_GetKey 36AC        __end_of_lcdNibble 2CA2  
     __size_of_write_eep 0024                  __Hparam 0000                  __Lparam 0000  
        __size_of___flge 0082          __size_of___fleq 0050                  ___fladd 1564  
                ___fldiv 1BB6                  ___awdiv 2F2C                  ___flneg 362E  
        __size_of___lmul 004C                  ___awmod 301A                  ___flmul 17C0  
                ___flsub 3430                  ___fltol 2B7A                  ___lldiv 2FA4  
        __size_of___wmul 0026                  ___lodiv 2950                  ___lomod 2AD0  
                ___lwdiv 321A                  ___lwmod 337C                ?_vfprintf 00EC  
        __size_of_efgtoa 05AC          __size_of_floorf 0152                  __pcinit 30DE  
              _ANSELbits 000F7E                  __ramtop 0600                  __ptext0 07E6  
                __ptext1 360A                  __ptext2 0EA6                  __ptext3 364E  
                __ptext4 19EA                  __ptext5 32F4                  __ptext6 3264  
                __ptext7 122C                  __ptext8 1D7C                  __ptext9 2AD0  
                _cnt_adc 011A                _T0CONbits 000FD5          __size_of_strcpy 004A  
        __size_of_strlen 003A                  _initLCD 2546                _T1CONbits 000FCD  
           __size_of_pad 006C                  _isdigit 3592                  _is_stab 0225  
             ??___xxtofl 001E                _T3CONbits 000FB1        __end_of_key_press 33F6  
       ___awmod@dividend 001A    __end_of_show_lcd_main 1B48               ??_clearLCD 001E  
                _isspace 346A                  _r_whole 011E              ?_calc_power 0067  
                _tick_t1 0124                  _isupper 3566                  _t_power 003B  
                efgtoa@c 00C7                  efgtoa@d 01A4                  efgtoa@e 01BC  
                efgtoa@f 00C3                  efgtoa@g 01B6                  efgtoa@h 01AE  
                efgtoa@i 01BA                  efgtoa@l 01B2                  efgtoa@m 019E  
                efgtoa@n 01BE                  efgtoa@p 01A8                  efgtoa@t 0198  
                efgtoa@u 01C0                  efgtoa@w 01AB                  _show_tp 0223  
                atoi@neg 0064               ??_lcdPrint 0060               ??_lcdWrite 001D  
                _sprintf 32F4                  _tolower 32AC                  _strncmp 2EB4  
         __pintcode_body 2078               ??_lcd_putc 001E     end_of_initialization 312A  
                floorf@e 0089                  floorf@m 0085                  floorf@u 008B  
                floorf@x 007B                  fputc@fp 001D             key_press@key 001A  
          __Lmediumconst 7DFA               ??_init_cpu 0022                  int_func 2078  
                fputs@fp 0062      i2___wmul@multiplier 0001               ??_read_eep 001C  
        ___lldiv@divisor 001E          ___lldiv@counter 0026              _HD44780_CYR 7DFB  
      __end_of_vfpfcnvrt 14B2               efgtoa@mode 01AD               efgtoa@sign 01A6  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE      i2___lmul@multiplier 0001  
             ??_vfprintf 0027                  sqrtf@ix 00B4                  strcpy@d 0022  
                strlen@a 001C                  strcpy@s 0020                  strlen@s 001A  
            ?_cgrom_char 001E              ___fladd@grs 008A            key_GetKey@key 001A  
      __end_of_write_eep 362E            ___xxtofl@sign 0060              ?_lcd_gotoxy 001E  
           _compile_date 7E4B              ___fldiv@grs 0075             _compile_time 7E57  
            ___fldiv@rem 006E              ___flmul@grs 0071              ?_key_GetKey 0001  
           calc_power@tt 006F                _EncState_ 7E3B      __size_of_calc_power 012E  
        _calc_power$2468 0073          _calc_power$2469 0077           __end_of___flge 2D2E  
         __end_of___fleq 30D2           __end_of___lmul 3184              vfpfcnvrt@ap 00CF  
            vfpfcnvrt@cp 00DC              vfpfcnvrt@ct 00E8              vfpfcnvrt@fp 00CD  
         __end_of___wmul 35E4            __pidataCOMRAM 36BD           __end_of_efgtoa 0606  
         __end_of_floorf 204E               floorf@F527 0100         i2___wmul@product 0005  
         __end_of_strcpy 321A           __end_of_strlen 3430              __end_ofPL10 0624  
            __end_ofPL20 284E              __end_ofPL12 0656              __end_ofPL30 285C  
            __end_ofPL22 1B54              __end_ofPL14 0E2A              __end_ofPL40 1B5E  
            __end_ofPL32 068C              __end_ofPL24 0E54              __end_ofPL16 1988  
            __end_ofPL50 0720              __end_ofPL42 06F2              __end_ofPL34 069A  
            __end_ofPL26 067E              __end_ofPL18 0668              __end_ofPL60 0738  
            __end_ofPL52 1D72              __end_ofPL44 0704              __end_ofPL36 06BC  
            __end_ofPL28 2940              __end_ofPL70 2F2C              __end_ofPL62 19B0  
            __end_ofPL54 1998              __end_ofPL46 120A              __end_ofPL38 06DE  
            __end_ofPL80 076E              __end_ofPL72 1D7C              __end_ofPL64 19BE  
            __end_ofPL56 153C              __end_ofPL48 0712              __end_ofPL90 07A4  
            __end_ofPL82 1B84              __end_ofPL74 074A              __end_ofPL66 2060  
            __end_ofPL58 154C              __end_ofPL92 07B6              __end_ofPL84 0780  
            __end_ofPL76 075C              __end_ofPL68 1B72              __end_ofPL94 2AC6  
            __end_ofPL86 0792              __end_ofPL78 0E66              __end_ofPL96 07C8  
            __end_ofPL88 0E78              __end_ofPL98 1B96      start_initialization 30DE  
        ___lodiv@divisor 0068        __size_ofi2___lmul 004C          ___lodiv@counter 0022  
      __size_ofi2___wmul 0026              __end_of_pad 2EA6    __end_of___fpclassifyf 2AB4  
    __size_of_cgrom_char 0032        __size_of_Inter_hi 21D2        __size_of_Inter_lo 003E  
            vfprintf@fmt 00ED                 ??___flge 0083                 ??___fleq 0022  
               ??___lmul 0022      __size_of_lcd_gotoxy 0042                 ??___wmul 0023  
               ??_efgtoa 00C8              __pdataBANK1 01D6                 ??_floorf 007F  
        read_eep@address 001A                 ??_strcpy 001E                 ??_strlen 001C  
              ___fladd@a 007F                ___fladd@b 007B                ___fldiv@a 006A  
              ___fldiv@b 0066      __size_of_key_GetKey 000A                ___flmul@a 006A  
              ___flmul@b 0066              __pbssCOMRAM 0027                ___flsub@a 008F  
              ___flsub@b 008B            __pcstackBANK0 0060            __pcstackBANK1 018C  
      __size_of___xxtofl 00F6        __size_of_clearLCD 0018        __size_of_lcdPrint 00E0  
      __size_of_lcdWrite 0032                 ?_EncPoll 0001        __size_of_lcd_putc 000C  
              _atoi$2105 0066                _atoi$2106 006A                _atoi$2107 0068  
      __size_of_init_cpu 010E              _efgtoa$2020 018C              _efgtoa$2021 018E  
            _efgtoa$2030 0192              _efgtoa$2031 0194              _efgtoa$2032 0196  
            _efgtoa$2026 0190        __size_of_read_eep 0012                _main$2467 01D2  
       ___lwdiv@dividend 0060                __pintcode 0008            __pmediumconst 7DFA  
              _lcdNibble 2C16                 ?___fladd 007B                 ?___fldiv 0066  
               ?___awdiv 001A                 ?___flneg 001A                 ?___awmod 001A  
               ?___flmul 0066                 ?___flsub 008B                 ?___fltol 00B8  
               ?___lldiv 001A                 ?___lodiv 0060                 ?___lomod 0060  
               ?___lwdiv 0060                 ?___lwmod 001A              __pintcodelo 0018  
      __size_of_vfprintf 0048  _eusartTxBufferRemaining 0043          ___lomod@divisor 0068  
               ?_initLCD 0001          ___lomod@counter 001A                 ?_isdigit 001A  
              _count_enc 011F             ??_calc_power 006D                 ?_isspace 001A  
               ?_isupper 001A         ___lwdiv@quotient 0065                 ?_sprintf 01C4  
               ?_tolower 0020                _key_press 33BA           __size_of_fputc 0068  
         __size_of_fputs 0030                 ?_strncmp 001A           __size_of_putch 000C  
         __size_of_sqrtf 0352           ___wmul@product 0023                 _LATAbits 000F89  
               _LATCbits 000F8B                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
              _tick_t1_1 0123                 _PIR1bits 000F9E                 i2u711_40 20A4  
               i2u712_40 20E8                 _RCONbits 000FD0               ?_lcdNibble 0001  
     __end_of_calc_power 2308                _power_100 0222                lcdPrint@t 0023  
              _vfpfcnvrt 122C             ??_cgrom_char 0021                _watt_disp 0118  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0        ___wmul@multiplier 001F  
               i2___lmul 3184                 i2___wmul 35E4                _sqrtU_sum 010C  
          Inter_hi@pulse 0015                lcd_putc@c 001E             ??_lcd_gotoxy 001F  
           _isspace$2136 0020               vfpfcnvrt@c 00EB               vfpfcnvrt@f 00E4  
             ?_key_press 0001                _write_eep 360A        ___lmul@multiplier 001A  
            _INTCON2bits 000FF1                copy_data0 30F2             ??_key_GetKey 001A  
       __size_of_EncPoll 0032                 _Inter_hi 0008                 _Inter_lo 0018  
             _EECON1bits 000FA6       __end_of_cgrom_char 34D2                 __Hrparam 0000  
             vfprintf@ap 00EF                 __Lrparam 0000               vfprintf@fp 00EC  
 __size_of_show_lcd_main 015E       __end_of_lcd_gotoxy 337C           key_press@count 0035  
       __size_of___fladd 0216         __size_of___fldiv 01A2         __size_of___awdiv 0078  
       __size_of___flneg 0020         __size_of___awmod 0068         __size_of___flmul 01BC  
       __size_of___flsub 003A         __size_of___fltol 009C    i2___wmul@multiplicand 0003  
       __size_of___lldiv 0076         __size_of___lodiv 00CE         __size_of___lomod 00AA  
             ?_vfpfcnvrt 00CD         __size_of___lwdiv 004A         __size_of___lwmod 003E  
     ___fpclassifyf@F465 0027               sprintf@fmt 01C6         __size_of_initLCD 010E  
               ___xxtofl 2654                 _clearLCD 366A              _key_pressed 003D  
     __end_of_key_GetKey 36B6         __size_of_isdigit 002C          ___lwdiv@divisor 0062  
       __size_of_isspace 0036          ___lwdiv@counter 0064                 __ptext10 2950  
               __ptext11 2EB4                 __ptext20 1EFC                 __ptext12 2324  
               __ptext21 2A1E                 __ptext13 005A                 __ptext30 301A  
               __ptext22 2B7A                 __ptext14 32AC                 __ptext31 2F2C  
               __ptext23 3430                 __ptext15 3566                 __ptext40 21DA  
               __ptext32 2D3A                 __ptext24 1564                 __ptext16 31D0  
               __ptext41 35BE                 __ptext33 2DBA                 __ptext25 362E  
               __ptext17 2E3A                 __ptext50 2438                 __ptext42 337C  
               __ptext34 3694                 __ptext26 17C0                 __ptext18 33F6  
               __ptext51 2546                 __ptext43 321A                 __ptext35 2862  
               __ptext27 2CAC                 __ptext19 3536                 __ptext60 35E4  
               __ptext52 366A                 __ptext44 3138                 __ptext36 346A  
               __ptext28 3082                 __ptext61 3184                 __ptext53 34A0  
               __ptext45 2FA4                 __ptext37 3592                 __ptext29 1BB6  
               __ptext54 34D2                 __ptext46 3682                 __ptext38 2762  
               __ptext55 2C16                 __ptext47 36A0                 __ptext39 333A  
               __ptext56 2654                 __ptext48 33BA                 __ptext57 3504  
               __ptext49 36AC         __size_of_isupper 002C                 _lcdPrint 2762  
               _lcdWrite 34D2               ?_write_eep 001A                 _lcd_putc 36A0  
               _inc_data 0221         __size_of_sprintf 0046         __size_of_tolower 0048  
             strcpy@dest 001A         __size_of_strncmp 0064                 _init_cpu 2438  
          __size_of_atoi 00D0            __size_of_ctoa 0074            __size_of_main 0612  
          __size_of_nanf 001C                 _read_eep 3682                 _read_key 0122  
               _is_power 0224            __size_of_stoa 00F8            __size_of_utoa 0180  
               _sel_main 011C        cgrom_char@address 0020                 efgtoa@fp 00C2  
               efgtoa@ne 019C                 efgtoa@pp 019A                 efgtoa@ou 01A0  
              stoa@F1160 01D6                 isa$xinst 000000              ??_lcdNibble 001A  
               int$flags 0046     show_lcd_main@pwr_dsp 00FA                 _vfprintf 3264  
               _symbol_1 7E88                 _symbol_2 7E80                 _symbol_3 7E78  
               _symbol_4 7E70                 _symbol_5 7E68                 _symbol_6 7E60  
              putch@data 001A           _vfpfcnvrt$2064 00E0           _vfpfcnvrt$2069 00E2  
            _OSCTUNEbits 000F9B               _INTCONbits 000FF2    i2___lmul@multiplicand 0005  
          _show_lcd_main 19EA                 isdigit@c 001A              ??_key_press 001A  
             EncPoll@Enc 003E                 intlevel1 0000                 intlevel2 0000  
              sprintf@ap 00F2         ___lwmod@dividend 001A                 isspace@c 001A  
       ___lldiv@dividend 001A                strcpy@src 001C                 isupper@c 001A  
              strncmp@_l 001A                strncmp@_r 001B               _OSCCONbits 000FD3  
            efgtoa@nmode 01AA              ??_vfpfcnvrt 00D0         cgrom_char@symbol 001E  
               stoa@nuls 0063                 sprintf@f 00F4                 tolower@c 0020  
               sprintf@s 01C4   __size_of___fpclassifyf 0096         ___lldiv@quotient 0022  
        ___lwmod@divisor 001C           ?_show_lcd_main 0001          ___lwmod@counter 001E  
               strncmp@l 0022                 strncmp@n 001D                 strncmp@r 0020  
            cgrom_char@i 0021              ??_write_eep 001B            ___fladd@signs 0087  
            _pressed_key 0121    sqrtf@__xc8_float_word 009C             ___fladd@aexp 0088  
           ___fladd@bexp 0089  
