

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 20 20:27:04 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F25K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=2
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    94                           	psect	pa_nodes0,global,class=CODE,delta=1
    95  0000                     
    96                           ; Version 2.40
    97                           ; Generated 17/11/2021 GMT
    98                           ; 
    99                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F25K20 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	eeprom_data
   133  F00000  18 14 21 00 00 00 00 00 	db	24,20,33,0,0,0,0,0	;# 
   134  0000                     
   135                           	psect	idataCOMRAM
   136  003ECF                     __pidataCOMRAM:
   137                           	callstack 0
   138                           
   139                           ;initializer for _pp
   140  003ECF  01                 	db	1
   141                           
   142                           	psect	idataBANK1
   143  003EC8                     __pidataBANK1:
   144                           	callstack 0
   145                           
   146                           ;initializer for stoa@F1169
   147  003EC8  28                 	db	40
   148  003EC9  6E                 	db	110
   149  003ECA  75                 	db	117
   150  003ECB  6C                 	db	108
   151  003ECC  6C                 	db	108
   152  003ECD  29                 	db	41
   153  003ECE  00                 	db	0
   154                           
   155                           	psect	mediumconst
   156  007DAC                     __pmediumconst:
   157                           	callstack 0
   158  007DAC  00                 	db	0
   159  007DAD                     _HD44780_CYR:
   160                           	callstack 0
   161  007DAD  41                 	db	65
   162  007DAE  A0                 	db	160
   163  007DAF  42                 	db	66
   164  007DB0  A1                 	db	161
   165  007DB1  E0                 	db	224
   166  007DB2  45                 	db	69
   167  007DB3  A3                 	db	163
   168  007DB4  A4                 	db	164
   169  007DB5  A5                 	db	165
   170  007DB6  A6                 	db	166
   171  007DB7  4B                 	db	75
   172  007DB8  A7                 	db	167
   173  007DB9  4D                 	db	77
   174  007DBA  48                 	db	72
   175  007DBB  4F                 	db	79
   176  007DBC  A8                 	db	168
   177  007DBD  50                 	db	80
   178  007DBE  43                 	db	67
   179  007DBF  54                 	db	84
   180  007DC0  A9                 	db	169
   181  007DC1  AA                 	db	170
   182  007DC2  58                 	db	88
   183  007DC3  E1                 	db	225
   184  007DC4  AB                 	db	171
   185  007DC5  AC                 	db	172
   186  007DC6  E2                 	db	226
   187  007DC7  AD                 	db	173
   188  007DC8  AE                 	db	174
   189  007DC9  62                 	db	98
   190  007DCA  AF                 	db	175
   191  007DCB  B0                 	db	176
   192  007DCC  B1                 	db	177
   193  007DCD  61                 	db	97
   194  007DCE  B2                 	db	178
   195  007DCF  B3                 	db	179
   196  007DD0  B4                 	db	180
   197  007DD1  E3                 	db	227
   198  007DD2  65                 	db	101
   199  007DD3  B6                 	db	182
   200  007DD4  B7                 	db	183
   201  007DD5  B8                 	db	184
   202  007DD6  B9                 	db	185
   203  007DD7  BA                 	db	186
   204  007DD8  BB                 	db	187
   205  007DD9  BC                 	db	188
   206  007DDA  BD                 	db	189
   207  007DDB  6F                 	db	111
   208  007DDC  BE                 	db	190
   209  007DDD  70                 	db	112
   210  007DDE  63                 	db	99
   211  007DDF  BF                 	db	191
   212  007DE0  79                 	db	121
   213  007DE1  E4                 	db	228
   214  007DE2  78                 	db	120
   215  007DE3  E5                 	db	229
   216  007DE4  C0                 	db	192
   217  007DE5  C1                 	db	193
   218  007DE6  E6                 	db	230
   219  007DE7  C2                 	db	194
   220  007DE8  C3                 	db	195
   221  007DE9  C4                 	db	196
   222  007DEA  C5                 	db	197
   223  007DEB  C6                 	db	198
   224  007DEC  C7                 	db	199
   225  007DED                     __end_of_HD44780_CYR:
   226                           	callstack 0
   227  007DED                     _EncState_:
   228                           	callstack 0
   229  007DED  00                 	db	0
   230  007DEE  FF                 	db	255
   231  007DEF  01                 	db	1
   232  007DF0  7F                 	db	127
   233  007DF1  01                 	db	1
   234  007DF2  00                 	db	0
   235  007DF3  7F                 	db	127
   236  007DF4  FF                 	db	255
   237  007DF5  FF                 	db	255
   238  007DF6  7F                 	db	127
   239  007DF7  00                 	db	0
   240  007DF8  01                 	db	1
   241  007DF9  7F                 	db	127
   242  007DFA  01                 	db	1
   243  007DFB  FF                 	db	255
   244  007DFC  00                 	db	0
   245  007DFD                     __end_of_EncState_:
   246                           	callstack 0
   247  007DFD                     _fract:
   248                           	callstack 0
   249  007DFD  00                 	db	0
   250  007DFE  01                 	db	1
   251  007DFF  01                 	db	1
   252  007E00  02                 	db	2
   253  007E01  02                 	db	2
   254  007E02  03                 	db	3
   255  007E03  04                 	db	4
   256  007E04  04                 	db	4
   257  007E05  05                 	db	5
   258  007E06  06                 	db	6
   259  007E07  06                 	db	6
   260  007E08  07                 	db	7
   261  007E09  07                 	db	7
   262  007E0A  08                 	db	8
   263  007E0B  09                 	db	9
   264  007E0C  09                 	db	9
   265  007E0D                     __end_of_fract:
   266                           	callstack 0
   267  007E0D                     _compile_date:
   268                           	callstack 0
   269  007E0D  4A                 	db	74
   270  007E0E  75                 	db	117
   271  007E0F  6E                 	db	110
   272  007E10  20                 	db	32
   273  007E11  32                 	db	50
   274  007E12  30                 	db	48
   275  007E13  20                 	db	32
   276  007E14  32                 	db	50
   277  007E15  30                 	db	48
   278  007E16  32                 	db	50
   279  007E17  32                 	db	50
   280  007E18  00                 	db	0
   281  007E19                     __end_of_compile_date:
   282                           	callstack 0
   283  007E19                     _compile_time:
   284                           	callstack 0
   285  007E19  32                 	db	50
   286  007E1A  30                 	db	48
   287  007E1B  3A                 	db	58
   288  007E1C  31                 	db	49
   289  007E1D  34                 	db	52
   290  007E1E  3A                 	db	58
   291  007E1F  30                 	db	48
   292  007E20  39                 	db	57
   293  007E21  00                 	db	0
   294  007E22                     __end_of_compile_time:
   295                           	callstack 0
   296  007E22                     _symbol_7:
   297                           	callstack 0
   298  007E22  06                 	db	6
   299  007E23  09                 	db	9
   300  007E24  09                 	db	9
   301  007E25  06                 	db	6
   302  007E26  00                 	db	0
   303  007E27  00                 	db	0
   304  007E28  00                 	db	0
   305  007E29  00                 	db	0
   306  007E2A                     __end_of_symbol_7:
   307                           	callstack 0
   308  007E2A                     _symbol_6:
   309                           	callstack 0
   310  007E2A  00                 	db	0
   311  007E2B  0E                 	db	14
   312  007E2C  1F                 	db	31
   313  007E2D  1B                 	db	27
   314  007E2E  1F                 	db	31
   315  007E2F  0E                 	db	14
   316  007E30  00                 	db	0
   317  007E31  00                 	db	0
   318  007E32                     __end_of_symbol_6:
   319                           	callstack 0
   320  007E32                     _symbol_5:
   321                           	callstack 0
   322  007E32  00                 	db	0
   323  007E33  00                 	db	0
   324  007E34  1F                 	db	31
   325  007E35  1F                 	db	31
   326  007E36  1F                 	db	31
   327  007E37  00                 	db	0
   328  007E38  00                 	db	0
   329  007E39  00                 	db	0
   330  007E3A                     __end_of_symbol_5:
   331                           	callstack 0
   332  007E3A                     _symbol_4:
   333                           	callstack 0
   334  007E3A  00                 	db	0
   335  007E3B  04                 	db	4
   336  007E3C  0F                 	db	15
   337  007E3D  1F                 	db	31
   338  007E3E  0F                 	db	15
   339  007E3F  04                 	db	4
   340  007E40  00                 	db	0
   341  007E41  00                 	db	0
   342  007E42                     __end_of_symbol_4:
   343                           	callstack 0
   344  007E42                     _symbol_3:
   345                           	callstack 0
   346  007E42  00                 	db	0
   347  007E43  04                 	db	4
   348  007E44  1E                 	db	30
   349  007E45  1F                 	db	31
   350  007E46  1E                 	db	30
   351  007E47  04                 	db	4
   352  007E48  00                 	db	0
   353  007E49  00                 	db	0
   354  007E4A                     __end_of_symbol_3:
   355                           	callstack 0
   356  007E4A                     _symbol_2:
   357                           	callstack 0
   358  007E4A  0E                 	db	14
   359  007E4B  11                 	db	17
   360  007E4C  11                 	db	17
   361  007E4D  11                 	db	17
   362  007E4E  0A                 	db	10
   363  007E4F  1B                 	db	27
   364  007E50  00                 	db	0
   365  007E51  00                 	db	0
   366  007E52                     __end_of_symbol_2:
   367                           	callstack 0
   368  007E52                     _symbol_1:
   369                           	callstack 0
   370  007E52  00                 	db	0
   371  007E53  00                 	db	0
   372  007E54  08                 	db	8
   373  007E55  15                 	db	21
   374  007E56  02                 	db	2
   375  007E57  00                 	db	0
   376  007E58  00                 	db	0
   377  007E59  00                 	db	0
   378  007E5A                     __end_of_symbol_1:
   379                           	callstack 0
   380  0000                     _IPR1bits	set	3999
   381  0000                     _ADCON1	set	4033
   382  0000                     _TRISB	set	3987
   383  0000                     _LATB	set	3978
   384  0000                     _PORTB	set	3969
   385  0000                     _PORTC	set	3970
   386  0000                     _ADRESL	set	4035
   387  0000                     _ADRESH	set	4036
   388  0000                     _LATCbits	set	3979
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _EEADR	set	4009
   392  0000                     _TMR3IE	set	32001
   393  0000                     _TMR2ON	set	32338
   394  0000                     _TRISBbits	set	3987
   395  0000                     _PORTBbits	set	3969
   396  0000                     _T2CONbits	set	4042
   397  0000                     _T3CONbits	set	4017
   398  0000                     _T1CONbits	set	4045
   399  0000                     _INTCON2bits	set	4081
   400  0000                     _TRISC	set	3988
   401  0000                     _LATC	set	3979
   402  0000                     _LATA	set	3977
   403  0000                     _PIR1bits	set	3998
   404  0000                     _TMR1ON	set	32360
   405  0000                     _TMR1IP	set	31992
   406  0000                     _T1OSCEN	set	32363
   407  0000                     _ADIF	set	31990
   408  0000                     _ADIE	set	31982
   409  0000                     _INT0IF	set	32657
   410  0000                     _INT0IE	set	32660
   411  0000                     _TMR2IF	set	31985
   412  0000                     _TMR2IE	set	31977
   413  0000                     _TMR1IF	set	31984
   414  0000                     _TMR1IE	set	31976
   415  0000                     _TMR0IF	set	32658
   416  0000                     _TMR0IE	set	32661
   417  0000                     _WPUB	set	3964
   418  0000                     _PORTA	set	3968
   419  0000                     _LATAbits	set	3977
   420  0000                     _TRISCbits	set	3988
   421  0000                     _EECON1bits	set	4006
   422  0000                     _TXIF	set	31988
   423  0000                     _RCSTAbits	set	4011
   424  0000                     _TXSTAbits	set	4012
   425  0000                     _TXREG	set	4013
   426  0000                     _INTCONbits	set	4082
   427  0000                     _SPBRG	set	4015
   428  0000                     _SPBRGH	set	4016
   429  0000                     _BAUDCONbits	set	4024
   430  0000                     _OSCTUNEbits	set	3995
   431  0000                     _PIE1bits	set	3997
   432  0000                     _ADCON2bits	set	4032
   433  0000                     _ADCON0bits	set	4034
   434  0000                     _TMR0L	set	4054
   435  0000                     _TMR3ON	set	32136
   436  0000                     _TRISA	set	3986
   437  0000                     _RBPU	set	32655
   438  0000                     _PR2	set	4043
   439  0000                     _OSCCONbits	set	4051
   440  0000                     _TMR1CS	set	32361
   441  0000                     _TMR3IP	set	32017
   442  0000                     _TMR3IF	set	32009
   443  0000                     _T0CONbits	set	4053
   444  0000                     _ANSELbits	set	3966
   445  0000                     _RCONbits	set	4048
   446  007E5A                     STR_9:
   447  007E5A  20                 	db	32
   448  007E5B  20                 	db	32
   449  007E5C  20                 	db	32
   450  007E5D  20                 	db	32
   451  007E5E  20                 	db	32
   452  007E5F  20                 	db	32
   453  007E60  20                 	db	32
   454  007E61  20                 	db	32
   455  007E62  20                 	db	32
   456  007E63  45                 	db	69	;'E'
   457  007E64  58                 	db	88	;'X'
   458  007E65  49                 	db	73	;'I'
   459  007E66  54                 	db	84	;'T'
   460  007E67  20                 	db	32
   461  007E68  20                 	db	32
   462  007E69  20                 	db	32
   463  007E6A  20                 	db	32
   464  007E6B  20                 	db	32
   465  007E6C  20                 	db	32
   466  007E6D  20                 	db	32
   467  007E6E  20                 	db	32
   468  007E6F  00                 	db	0
   469  007E70                     STR_26:
   470  007E70  43                 	db	67	;'C'
   471  007E71  6C                 	db	108	;'l'
   472  007E72  63                 	db	99	;'c'
   473  007E73  50                 	db	80	;'P'
   474  007E74  3A                 	db	58	;':'
   475  007E75  25                 	db	37
   476  007E76  63                 	db	99	;'c'
   477  007E77  25                 	db	37
   478  007E78  30                 	db	48	;'0'
   479  007E79  34                 	db	52	;'4'
   480  007E7A  75                 	db	117	;'u'
   481  007E7B  57                 	db	87	;'W'
   482  007E7C  20                 	db	32
   483  007E7D  25                 	db	37
   484  007E7E  63                 	db	99	;'c'
   485  007E7F  3D                 	db	61	;'='
   486  007E80  25                 	db	37
   487  007E81  75                 	db	117	;'u'
   488  007E82  2E                 	db	46
   489  007E83  25                 	db	37
   490  007E84  75                 	db	117	;'u'
   491  007E85  00                 	db	0
   492  007E86                     STR_29:
   493  007E86  41                 	db	65	;'A'
   494  007E87  70                 	db	112	;'p'
   495  007E88  78                 	db	120	;'x'
   496  007E89  50                 	db	80	;'P'
   497  007E8A  3A                 	db	58	;':'
   498  007E8B  25                 	db	37
   499  007E8C  63                 	db	99	;'c'
   500  007E8D  25                 	db	37
   501  007E8E  30                 	db	48	;'0'
   502  007E8F  34                 	db	52	;'4'
   503  007E90  75                 	db	117	;'u'
   504  007E91  57                 	db	87	;'W'
   505  007E92  20                 	db	32
   506  007E93  25                 	db	37
   507  007E94  63                 	db	99	;'c'
   508  007E95  3D                 	db	61	;'='
   509  007E96  25                 	db	37
   510  007E97  75                 	db	117	;'u'
   511  007E98  2E                 	db	46
   512  007E99  25                 	db	37
   513  007E9A  75                 	db	117	;'u'
   514  007E9B  00                 	db	0
   515  007E9C                     STR_8:
   516  007E9C  20                 	db	32
   517  007E9D  20                 	db	32
   518  007E9E  20                 	db	32
   519  007E9F  20                 	db	32
   520  007EA0  20                 	db	32
   521  007EA1  41                 	db	65	;'A'
   522  007EA2  4C                 	db	76	;'L'
   523  007EA3  41                 	db	65	;'A'
   524  007EA4  52                 	db	82	;'R'
   525  007EA5  4D                 	db	77	;'M'
   526  007EA6  20                 	db	32
   527  007EA7  54                 	db	84	;'T'
   528  007EA8  45                 	db	69	;'E'
   529  007EA9  4D                 	db	77	;'M'
   530  007EAA  50                 	db	80	;'P'
   531  007EAB  20                 	db	32
   532  007EAC  20                 	db	32
   533  007EAD  20                 	db	32
   534  007EAE  20                 	db	32
   535  007EAF  20                 	db	32
   536  007EB0  00                 	db	0
   537  007EB1                     STR_7:
   538  007EB1  20                 	db	32
   539  007EB2  20                 	db	32
   540  007EB3  20                 	db	32
   541  007EB4  53                 	db	83	;'S'
   542  007EB5  45                 	db	69	;'E'
   543  007EB6  54                 	db	84	;'T'
   544  007EB7  20                 	db	32
   545  007EB8  31                 	db	49	;'1'
   546  007EB9  30                 	db	48	;'0'
   547  007EBA  30                 	db	48	;'0'
   548  007EBB  25                 	db	37
   549  007EBC  20                 	db	32
   550  007EBD  50                 	db	80	;'P'
   551  007EBE  4F                 	db	79	;'O'
   552  007EBF  57                 	db	87	;'W'
   553  007EC0  45                 	db	69	;'E'
   554  007EC1  52                 	db	82	;'R'
   555  007EC2  20                 	db	32
   556  007EC3  20                 	db	32
   557  007EC4  20                 	db	32
   558  007EC5  00                 	db	0
   559  007EC6                     STR_5:
   560  007EC6  20                 	db	32
   561  007EC7  20                 	db	32
   562  007EC8  20                 	db	32
   563  007EC9  45                 	db	69	;'E'
   564  007ECA  44                 	db	68	;'D'
   565  007ECB  49                 	db	73	;'I'
   566  007ECC  54                 	db	84	;'T'
   567  007ECD  20                 	db	32
   568  007ECE  52                 	db	82	;'R'
   569  007ECF  45                 	db	69	;'E'
   570  007ED0  53                 	db	83	;'S'
   571  007ED1  49                 	db	73	;'I'
   572  007ED2  53                 	db	83	;'S'
   573  007ED3  54                 	db	84	;'T'
   574  007ED4  41                 	db	65	;'A'
   575  007ED5  4E                 	db	78	;'N'
   576  007ED6  43                 	db	67	;'C'
   577  007ED7  45                 	db	69	;'E'
   578  007ED8  20                 	db	32
   579  007ED9  20                 	db	32
   580  007EDA  00                 	db	0
   581  007EDB                     STR_6:
   582  007EDB  20                 	db	32
   583  007EDC  20                 	db	32
   584  007EDD  53                 	db	83	;'S'
   585  007EDE  41                 	db	65	;'A'
   586  007EDF  56                 	db	86	;'V'
   587  007EE0  45                 	db	69	;'E'
   588  007EE1  20                 	db	32
   589  007EE2  4C                 	db	76	;'L'
   590  007EE3  4F                 	db	79	;'O'
   591  007EE4  41                 	db	65	;'A'
   592  007EE5  44                 	db	68	;'D'
   593  007EE6  20                 	db	32
   594  007EE7  44                 	db	68	;'D'
   595  007EE8  45                 	db	69	;'E'
   596  007EE9  46                 	db	70	;'F'
   597  007EEA  41                 	db	65	;'A'
   598  007EEB  55                 	db	85	;'U'
   599  007EEC  4C                 	db	76	;'L'
   600  007EED  54                 	db	84	;'T'
   601  007EEE  20                 	db	32
   602  007EEF  00                 	db	0
   603  007EF0                     STR_1:
   604  007EF0  2D                 	db	45
   605  007EF1  2D                 	db	45
   606  007EF2  2D                 	db	45
   607  007EF3  42                 	db	66	;'B'
   608  007EF4  52                 	db	82	;'R'
   609  007EF5  45                 	db	69	;'E'
   610  007EF6  53                 	db	83	;'S'
   611  007EF7  45                 	db	69	;'E'
   612  007EF8  4E                 	db	78	;'N'
   613  007EF9  48                 	db	72	;'H'
   614  007EFA  41                 	db	65	;'A'
   615  007EFB  4D                 	db	77	;'M'
   616  007EFC  20                 	db	32
   617  007EFD  53                 	db	83	;'S'
   618  007EFE  54                 	db	84	;'T'
   619  007EFF  41                 	db	65	;'A'
   620  007F00  42                 	db	66	;'B'
   621  007F01  2D                 	db	45
   622  007F02  2D                 	db	45
   623  007F03  2D                 	db	45
   624  007F04  00                 	db	0
   625  007F05                     STR_14:
   626  007F05  52                 	db	82	;'R'
   627  007F06  65                 	db	101	;'e'
   628  007F07  73                 	db	115	;'s'
   629  007F08  69                 	db	105	;'i'
   630  007F09  73                 	db	115	;'s'
   631  007F0A  74                 	db	116	;'t'
   632  007F0B  3A                 	db	58	;':'
   633  007F0C  25                 	db	37
   634  007F0D  30                 	db	48	;'0'
   635  007F0E  32                 	db	50	;'2'
   636  007F0F  75                 	db	117	;'u'
   637  007F10  2E                 	db	46
   638  007F11  25                 	db	37
   639  007F12  75                 	db	117	;'u'
   640  007F13  20                 	db	32
   641  007F14  4F                 	db	79	;'O'
   642  007F15  68                 	db	104	;'h'
   643  007F16  6D                 	db	109	;'m'
   644  007F17  20                 	db	32
   645  007F18  00                 	db	0
   646  007F19                     STR_11:
   647  007F19  4C                 	db	76	;'L'
   648  007F1A  6F                 	db	111	;'o'
   649  007F1B  6E                 	db	110	;'n'
   650  007F1C  67                 	db	103	;'g'
   651  007F1D  20                 	db	32
   652  007F1E  70                 	db	112	;'p'
   653  007F1F  72                 	db	114	;'r'
   654  007F20  65                 	db	101	;'e'
   655  007F21  73                 	db	115	;'s'
   656  007F22  73                 	db	115	;'s'
   657  007F23  20                 	db	32
   658  007F24  66                 	db	102	;'f'
   659  007F25  6F                 	db	111	;'o'
   660  007F26  72                 	db	114	;'r'
   661  007F27  20                 	db	32
   662  007F28  73                 	db	115	;'s'
   663  007F29  61                 	db	97	;'a'
   664  007F2A  76                 	db	118	;'v'
   665  007F2B  65                 	db	101	;'e'
   666  007F2C  00                 	db	0
   667  007F2D                     STR_10:
   668  007F2D  20                 	db	32
   669  007F2E  20                 	db	32
   670  007F2F  2D                 	db	45
   671  007F30  20                 	db	32
   672  007F31  57                 	db	87	;'W'
   673  007F32  68                 	db	104	;'h'
   674  007F33  6F                 	db	111	;'o'
   675  007F34  6C                 	db	108	;'l'
   676  007F35  65                 	db	101	;'e'
   677  007F36  20                 	db	32
   678  007F37  70                 	db	112	;'p'
   679  007F38  61                 	db	97	;'a'
   680  007F39  72                 	db	114	;'r'
   681  007F3A  74                 	db	116	;'t'
   682  007F3B  20                 	db	32
   683  007F3C  2D                 	db	45
   684  007F3D  20                 	db	32
   685  007F3E  20                 	db	32
   686  007F3F  00                 	db	0
   687  007F40                     STR_16:
   688  007F40  20                 	db	32
   689  007F41  20                 	db	32
   690  007F42  2D                 	db	45
   691  007F43  20                 	db	32
   692  007F44  46                 	db	70	;'F'
   693  007F45  72                 	db	114	;'r'
   694  007F46  61                 	db	97	;'a'
   695  007F47  63                 	db	99	;'c'
   696  007F48  74                 	db	116	;'t'
   697  007F49  20                 	db	32
   698  007F4A  70                 	db	112	;'p'
   699  007F4B  61                 	db	97	;'a'
   700  007F4C  72                 	db	114	;'r'
   701  007F4D  74                 	db	116	;'t'
   702  007F4E  20                 	db	32
   703  007F4F  2D                 	db	45
   704  007F50  20                 	db	32
   705  007F51  20                 	db	32
   706  007F52  00                 	db	0
   707  007F53                     STR_12:
   708  007F53  20                 	db	32
   709  007F54  20                 	db	32
   710  007F55  20                 	db	32
   711  007F56  20                 	db	32
   712  007F57  74                 	db	116	;'t'
   713  007F58  6F                 	db	111	;'o'
   714  007F59  20                 	db	32
   715  007F5A  45                 	db	69	;'E'
   716  007F5B  45                 	db	69	;'E'
   717  007F5C  50                 	db	80	;'P'
   718  007F5D  52                 	db	82	;'R'
   719  007F5E  4F                 	db	79	;'O'
   720  007F5F  4D                 	db	77	;'M'
   721  007F60  2E                 	db	46
   722  007F61  00                 	db	0
   723  007F62                     STR_2:
   724  007F62  28                 	db	40
   725  007F63  63                 	db	99	;'c'
   726  007F64  29                 	db	41
   727  007F65  49                 	db	73	;'I'
   728  007F66  76                 	db	118	;'v'
   729  007F67  61                 	db	97	;'a'
   730  007F68  6E                 	db	110	;'n'
   731  007F69  5F                 	db	95	;'_'
   732  007F6A  66                 	db	102	;'f'
   733  007F6B  64                 	db	100	;'d'
   734  007F6C  20                 	db	32
   735  007F6D  76                 	db	118	;'v'
   736  007F6E  25                 	db	37
   737  007F6F  73                 	db	115	;'s'
   738  007F70  00                 	db	0
   739  007F71                     STR_17:
   740  007F71  54                 	db	84	;'T'
   741  007F72  65                 	db	101	;'e'
   742  007F73  6D                 	db	109	;'m'
   743  007F74  70                 	db	112	;'p'
   744  007F75  3A                 	db	58	;':'
   745  007F76  25                 	db	37
   746  007F77  75                 	db	117	;'u'
   747  007F78  25                 	db	37
   748  007F79  63                 	db	99	;'c'
   749  007F7A  25                 	db	37
   750  007F7B  2D                 	db	45
   751  007F7C  34                 	db	52	;'4'
   752  007F7D  63                 	db	99	;'c'
   753  007F7E  00                 	db	0
   754  007F7F                     STR_28:
   755  007F7F  50                 	db	80	;'P'
   756  007F80  77                 	db	119	;'w'
   757  007F81  55                 	db	85	;'U'
   758  007F82  3A                 	db	58	;':'
   759  007F83  25                 	db	37
   760  007F84  75                 	db	117	;'u'
   761  007F85  25                 	db	37
   762  007F86  25                 	db	37
   763  007F87  20                 	db	32
   764  007F88  20                 	db	32
   765  007F89  00                 	db	0
   766  007F8A                     STR_22:
   767  007F8A  4E                 	db	78	;'N'
   768  007F8B  4F                 	db	79	;'O'
   769  007F8C  54                 	db	84	;'T'
   770  007F8D  20                 	db	32
   771  007F8E  53                 	db	83	;'S'
   772  007F8F  54                 	db	84	;'T'
   773  007F90  41                 	db	65	;'A'
   774  007F91  42                 	db	66	;'B'
   775  007F92  21                 	db	33
   776  007F93  20                 	db	32
   777  007F94  00                 	db	0
   778  007F95                     STR_23:
   779  007F95  53                 	db	83	;'S'
   780  007F96  54                 	db	84	;'T'
   781  007F97  41                 	db	65	;'A'
   782  007F98  42                 	db	66	;'B'
   783  007F99  49                 	db	73	;'I'
   784  007F9A  4C                 	db	76	;'L'
   785  007F9B  49                 	db	73	;'I'
   786  007F9C  5A                 	db	90	;'Z'
   787  007F9D  45                 	db	69	;'E'
   788  007F9E  20                 	db	32
   789  007F9F  00                 	db	0
   790  007FA0                     STR_18:
   791  007FA0  41                 	db	65	;'A'
   792  007FA1  6C                 	db	108	;'l'
   793  007FA2  61                 	db	97	;'a'
   794  007FA3  72                 	db	114	;'r'
   795  007FA4  6D                 	db	109	;'m'
   796  007FA5  3A                 	db	58	;':'
   797  007FA6  25                 	db	37
   798  007FA7  2D                 	db	45
   799  007FA8  33                 	db	51	;'3'
   800  007FA9  73                 	db	115	;'s'
   801  007FAA  00                 	db	0
   802  007FAB                     STR_24:
   803  007FAB  50                 	db	80	;'P'
   804  007FAC  77                 	db	119	;'w'
   805  007FAD  52                 	db	82	;'R'
   806  007FAE  3A                 	db	58	;':'
   807  007FAF  25                 	db	37
   808  007FB0  75                 	db	117	;'u'
   809  007FB1  25                 	db	37
   810  007FB2  25                 	db	37
   811  007FB3  20                 	db	32
   812  007FB4  00                 	db	0
   813  007FB5                     STR_21:
   814  007FB5  55                 	db	85	;'U'
   815  007FB6  5F                 	db	95	;'_'
   816  007FB7  49                 	db	73	;'I'
   817  007FB8  6E                 	db	110	;'n'
   818  007FB9  3A                 	db	58	;':'
   819  007FBA  25                 	db	37
   820  007FBB  75                 	db	117	;'u'
   821  007FBC  56                 	db	86	;'V'
   822  007FBD  20                 	db	32
   823  007FBE  00                 	db	0
   824  007FBF                     STR_27:
   825  007FBF  50                 	db	80	;'P'
   826  007FC0  77                 	db	119	;'w'
   827  007FC1  55                 	db	85	;'U'
   828  007FC2  3A                 	db	58	;':'
   829  007FC3  25                 	db	37
   830  007FC4  75                 	db	117	;'u'
   831  007FC5  25                 	db	37
   832  007FC6  25                 	db	37
   833  007FC7  2A                 	db	42
   834  007FC8  00                 	db	0
   835  007FC9                     STR_3:
   836  007FC9  31                 	db	49	;'1'
   837  007FCA  39                 	db	57	;'9'
   838  007FCB  2E                 	db	46
   839  007FCC  30                 	db	48	;'0'
   840  007FCD  36                 	db	54	;'6'
   841  007FCE  2E                 	db	46
   842  007FCF  32                 	db	50	;'2'
   843  007FD0  32                 	db	50	;'2'
   844  007FD1  00                 	db	0
   845  007FD2                     STR_25:
   846  007FD2  43                 	db	67	;'C'
   847  007FD3  6F                 	db	111	;'o'
   848  007FD4  65                 	db	101	;'e'
   849  007FD5  3A                 	db	58	;':'
   850  007FD6  25                 	db	37
   851  007FD7  2E                 	db	46
   852  007FD8  34                 	db	52	;'4'
   853  007FD9  66                 	db	102	;'f'
   854  007FDA  00                 	db	0
   855  007FDB                     STR_4:
   856  007FDB  25                 	db	37
   857  007FDC  73                 	db	115	;'s'
   858  007FDD  20                 	db	32
   859  007FDE  25                 	db	37
   860  007FDF  73                 	db	115	;'s'
   861  007FE0  00                 	db	0
   862  007FE1                     STR_31:
   863  007FE1  49                 	db	73	;'I'
   864  007FE2  4E                 	db	78	;'N'
   865  007FE3  46                 	db	70	;'F'
   866  007FE4  00                 	db	0
   867  007FE5                     STR_35:
   868  007FE5  4E                 	db	78	;'N'
   869  007FE6  41                 	db	65	;'A'
   870  007FE7  4E                 	db	78	;'N'
   871  007FE8  00                 	db	0
   872  007FE9                     STR_32:
   873  007FE9  69                 	db	105	;'i'
   874  007FEA  6E                 	db	110	;'n'
   875  007FEB  66                 	db	102	;'f'
   876  007FEC  00                 	db	0
   877  007FED                     STR_36:
   878  007FED  6E                 	db	110	;'n'
   879  007FEE  61                 	db	97	;'a'
   880  007FEF  6E                 	db	110	;'n'
   881  007FF0  00                 	db	0
   882  007FF1                     STR_44:
   883  007FF1  6C                 	db	108	;'l'
   884  007FF2  6C                 	db	108	;'l'
   885  007FF3  73                 	db	115	;'s'
   886  007FF4  00                 	db	0
   887  007FF5                     STR_20:
   888  007FF5  4F                 	db	79	;'O'
   889  007FF6  46                 	db	70	;'F'
   890  007FF7  46                 	db	70	;'F'
   891  007FF8  00                 	db	0
   892  007FF9                     STR_39:
   893  007FF9  6C                 	db	108	;'l'
   894  007FFA  66                 	db	102	;'f'
   895  007FFB  00                 	db	0
   896  007FFC                     STR_19:
   897  007FFC  4F                 	db	79	;'O'
   898  007FFD  4E                 	db	78	;'N'
   899  007FFE  00                 	db	0
   900  007FFF  00                 	db	0	; dummy byte at the end
   901  0000                     
   902                           ; #config settings
   903                           
   904                           	psect	cinit
   905  003766                     __pcinit:
   906                           	callstack 0
   907  003766                     start_initialization:
   908                           	callstack 0
   909  003766                     __initialization:
   910                           	callstack 0
   911                           
   912                           ; Initialize objects allocated to BANK1 (7 bytes)
   913                           ; load TBLPTR registers with __pidataBANK1
   914  003766  0EC8               	movlw	low __pidataBANK1
   915  003768  6EF6               	movwf	tblptrl,c
   916  00376A  0E3E               	movlw	high __pidataBANK1
   917  00376C  6EF7               	movwf	tblptrh,c
   918  00376E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   919  003770  6EF8               	movwf	tblptru,c
   920  003772  EE01  F0F6         	lfsr	0,__pdataBANK1
   921  003776  EE10 F007          	lfsr	1,7
   922  00377A                     copy_data0:
   923  00377A  0009               	tblrd		*+
   924  00377C  CFF5 FFEE          	movff	tablat,postinc0
   925  003780  50E5               	movf	postdec1,w,c
   926  003782  50E1               	movf	fsr1l,w,c
   927  003784  E1FA               	bnz	copy_data0
   928                           
   929                           ; Initialize objects allocated to COMRAM (1 bytes)
   930                           ; load TBLPTR registers with __pidataCOMRAM
   931  003786  0ECF               	movlw	low __pidataCOMRAM
   932  003788  6EF6               	movwf	tblptrl,c
   933  00378A  0E3E               	movlw	high __pidataCOMRAM
   934  00378C  6EF7               	movwf	tblptrh,c
   935  00378E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   936  003790  6EF8               	movwf	tblptru,c
   937  003792  0009               	tblrd		*+	;fetch initializer
   938  003794  CFF5 F044          	movff	tablat,__pdataCOMRAM
   939                           
   940                           ; Clear objects allocated to BANK1 (163 bytes)
   941  003798  EE01  F000         	lfsr	0,__pbssBANK1
   942  00379C  0EA3               	movlw	163
   943  00379E                     clear_0:
   944  00379E  6AEE               	clrf	postinc0,c
   945  0037A0  06E8               	decf	wreg,f,c
   946  0037A2  E1FD               	bnz	clear_0
   947                           
   948                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   949  0037A4  6A43               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   950                           
   951                           ; Clear objects allocated to COMRAM (31 bytes)
   952  0037A6  EE00  F024         	lfsr	0,__pbssCOMRAM
   953  0037AA  0E1F               	movlw	31
   954  0037AC                     clear_1:
   955  0037AC  6AEE               	clrf	postinc0,c
   956  0037AE  06E8               	decf	wreg,f,c
   957  0037B0  E1FD               	bnz	clear_1
   958  0037B2                     end_of_initialization:
   959                           	callstack 0
   960  0037B2                     __end_of__initialization:
   961                           	callstack 0
   962  0037B2  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   963  0037B4  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   964  0037B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   965  0037B8  6EF8               	movwf	tblptru,c
   966  0037BA  0100               	movlb	0
   967  0037BC  EF64  F000         	goto	_main	;jump to C main() function
   968                           
   969                           	psect	bitbssCOMRAM
   970  000218                     __pbitbssCOMRAM:
   971                           	callstack 0
   972  000218                     main@alarm_enable:
   973                           	callstack 0
   974  000218                     	ds	1
   975  000219                     main@whole_dec:
   976                           	callstack 0
   977  000219                     	ds	1
   978  00021A                     _inc_data:
   979                           	callstack 0
   980  00021A                     	ds	1
   981  00021B                     _power_100:
   982                           	callstack 0
   983  00021B                     	ds	1
   984  00021C                     _show_tp:
   985                           	callstack 0
   986  00021C                     	ds	1
   987  00021D                     _is_power:
   988                           	callstack 0
   989  00021D                     	ds	1
   990  00021E                     _is_stab:
   991                           	callstack 0
   992  00021E                     	ds	1
   993                           
   994                           	psect	bssCOMRAM
   995  000024                     __pbssCOMRAM:
   996                           	callstack 0
   997  000024                     ___fpclassifyf@F465:
   998                           	callstack 0
   999  000024                     	ds	4
  1000  000028                     _U_meas:
  1001                           	callstack 0
  1002  000028                     	ds	4
  1003  00002C                     _width:
  1004                           	callstack 0
  1005  00002C                     	ds	2
  1006  00002E                     _prec:
  1007                           	callstack 0
  1008  00002E                     	ds	2
  1009  000030                     _flags:
  1010                           	callstack 0
  1011  000030                     	ds	2
  1012  000032                     key_press@count:
  1013                           	callstack 0
  1014  000032                     	ds	2
  1015  000034                     _ps:
  1016                           	callstack 0
  1017  000034                     	ds	2
  1018  000036                     _err:
  1019                           	callstack 0
  1020  000036                     	ds	2
  1021  000038                     _t_power:
  1022                           	callstack 0
  1023  000038                     	ds	2
  1024  00003A                     _sound_delay:
  1025                           	callstack 0
  1026  00003A                     	ds	2
  1027  00003C                     _key_pressed:
  1028                           	callstack 0
  1029  00003C                     	ds	1
  1030  00003D                     EncPoll@Enc:
  1031                           	callstack 0
  1032  00003D                     	ds	1
  1033  00003E                     EncPoll@EncVal:
  1034                           	callstack 0
  1035  00003E                     	ds	1
  1036  00003F                     _getU:
  1037                           	callstack 0
  1038  00003F                     	ds	1
  1039  000040                     _zero:
  1040                           	callstack 0
  1041  000040                     	ds	1
  1042  000041                     _eusartRxCount:
  1043                           	callstack 0
  1044  000041                     	ds	1
  1045  000042                     _eusartTxBufferRemaining:
  1046                           	callstack 0
  1047  000042                     	ds	1
  1048                           
  1049                           	psect	dataCOMRAM
  1050  000044                     __pdataCOMRAM:
  1051                           	callstack 0
  1052  000044                     _pp:
  1053                           	callstack 0
  1054  000044                     	ds	1
  1055                           
  1056                           	psect	bssBANK1
  1057  000100                     __pbssBANK1:
  1058                           	callstack 0
  1059  000100                     floorf@F526:
  1060                           	callstack 0
  1061  000100                     	ds	4
  1062  000104                     _t_res:
  1063                           	callstack 0
  1064  000104                     	ds	4
  1065  000108                     _coef:
  1066                           	callstack 0
  1067  000108                     	ds	4
  1068  00010C                     _sqrtU_sum:
  1069                           	callstack 0
  1070  00010C                     	ds	4
  1071  000110                     _U_summ:
  1072                           	callstack 0
  1073  000110                     	ds	4
  1074  000114                     _nout:
  1075                           	callstack 0
  1076  000114                     	ds	2
  1077  000116                     _EncData:
  1078                           	callstack 0
  1079  000116                     	ds	2
  1080  000118                     _watt_disp:
  1081                           	callstack 0
  1082  000118                     	ds	2
  1083  00011A                     _cnt_adc:
  1084                           	callstack 0
  1085  00011A                     	ds	2
  1086  00011C                     main@powerOFF:
  1087                           	callstack 0
  1088  00011C                     	ds	1
  1089  00011D                     _sel_main:
  1090                           	callstack 0
  1091  00011D                     	ds	1
  1092  00011E                     _r_dec:
  1093                           	callstack 0
  1094  00011E                     	ds	1
  1095  00011F                     _r_whole:
  1096                           	callstack 0
  1097  00011F                     	ds	1
  1098  000120                     _count_enc:
  1099                           	callstack 0
  1100  000120                     	ds	1
  1101  000121                     _power:
  1102                           	callstack 0
  1103  000121                     	ds	1
  1104  000122                     _pressed_key:
  1105                           	callstack 0
  1106  000122                     	ds	1
  1107  000123                     _isTempReady:
  1108                           	callstack 0
  1109  000123                     	ds	1
  1110  000124                     _TempEnT:
  1111                           	callstack 0
  1112  000124                     	ds	1
  1113  000125                     _TempEn:
  1114                           	callstack 0
  1115  000125                     	ds	1
  1116  000126                     _AlarmTempT:
  1117                           	callstack 0
  1118  000126                     	ds	1
  1119  000127                     _AlarmTemp:
  1120                           	callstack 0
  1121  000127                     	ds	1
  1122  000128                     _isTemp:
  1123                           	callstack 0
  1124  000128                     	ds	1
  1125  000129                     _sound_enable:
  1126                           	callstack 0
  1127  000129                     	ds	1
  1128  00012A                     _read_key:
  1129                           	callstack 0
  1130  00012A                     	ds	1
  1131  00012B                     _tick_t1_1:
  1132                           	callstack 0
  1133  00012B                     	ds	1
  1134  00012C                     _tick_t1:
  1135                           	callstack 0
  1136  00012C                     	ds	1
  1137  00012D                     _dbuf:
  1138                           	callstack 0
  1139  00012D                     	ds	80
  1140  00017D                     _TxtBuf:
  1141                           	callstack 0
  1142  00017D                     	ds	21
  1143  000192                     _scratch:
  1144                           	callstack 0
  1145  000192                     	ds	9
  1146  00019B                     _U_real:
  1147                           	callstack 0
  1148  00019B                     	ds	2
  1149  00019D                     _temperature:
  1150                           	callstack 0
  1151  00019D                     	ds	2
  1152  00019F                     _timer_val:
  1153                           	callstack 0
  1154  00019F                     	ds	2
  1155  0001A1                     _minus:
  1156                           	callstack 0
  1157  0001A1                     	ds	1
  1158  0001A2                     _time_flag:
  1159                           	callstack 0
  1160  0001A2                     	ds	1
  1161                           
  1162                           	psect	dataBANK1
  1163  0001F6                     __pdataBANK1:
  1164                           	callstack 0
  1165  0001F6                     stoa@F1169:
  1166                           	callstack 0
  1167  0001F6                     	ds	7
  1168                           
  1169                           	psect	cstackBANK1
  1170  0001A3                     __pcstackBANK1:
  1171                           	callstack 0
  1172  0001A3                     _efgtoa$2403:
  1173                           	callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x0
  1176  0001A3                     	ds	2
  1177  0001A5                     _efgtoa$2411:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x2
  1181  0001A5                     	ds	2
  1182  0001A7                     _efgtoa$2412:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x4
  1186  0001A7                     	ds	2
  1187  0001A9                     efgtoa@t:
  1188                           	callstack 0
  1189                           
  1190                           ; 2 bytes @ 0x6
  1191  0001A9                     	ds	2
  1192  0001AB                     efgtoa@pp:
  1193                           	callstack 0
  1194                           
  1195                           ; 2 bytes @ 0x8
  1196  0001AB                     	ds	2
  1197  0001AD                     efgtoa@ne:
  1198                           	callstack 0
  1199                           
  1200                           ; 2 bytes @ 0xA
  1201  0001AD                     	ds	2
  1202  0001AF                     efgtoa@m:
  1203                           	callstack 0
  1204                           
  1205                           ; 2 bytes @ 0xC
  1206  0001AF                     	ds	2
  1207  0001B1                     efgtoa@ou:
  1208                           	callstack 0
  1209                           
  1210                           ; 4 bytes @ 0xE
  1211  0001B1                     	ds	4
  1212  0001B5                     efgtoa@d:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x12
  1216  0001B5                     	ds	2
  1217  0001B7                     efgtoa@sign:
  1218                           	callstack 0
  1219                           
  1220                           ; 2 bytes @ 0x14
  1221  0001B7                     	ds	2
  1222  0001B9                     efgtoa@p:
  1223                           	callstack 0
  1224                           
  1225                           ; 2 bytes @ 0x16
  1226  0001B9                     	ds	2
  1227  0001BB                     efgtoa@w:
  1228                           	callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x18
  1231  0001BB                     	ds	2
  1232  0001BD                     efgtoa@nmode:
  1233                           	callstack 0
  1234                           
  1235                           ; 1 bytes @ 0x1A
  1236  0001BD                     	ds	1
  1237  0001BE                     efgtoa@mode:
  1238                           	callstack 0
  1239                           
  1240                           ; 1 bytes @ 0x1B
  1241  0001BE                     	ds	1
  1242  0001BF                     efgtoa@h:
  1243                           	callstack 0
  1244                           
  1245                           ; 4 bytes @ 0x1C
  1246  0001BF                     	ds	4
  1247  0001C3                     efgtoa@l:
  1248                           	callstack 0
  1249                           
  1250                           ; 4 bytes @ 0x20
  1251  0001C3                     	ds	4
  1252  0001C7                     efgtoa@i:
  1253                           	callstack 0
  1254                           
  1255                           ; 2 bytes @ 0x24
  1256  0001C7                     	ds	2
  1257  0001C9                     efgtoa@g:
  1258                           	callstack 0
  1259                           
  1260                           ; 4 bytes @ 0x26
  1261  0001C9                     	ds	4
  1262  0001CD                     efgtoa@e:
  1263                           	callstack 0
  1264                           
  1265                           ; 2 bytes @ 0x2A
  1266  0001CD                     	ds	2
  1267  0001CF                     efgtoa@n:
  1268                           	callstack 0
  1269                           
  1270                           ; 2 bytes @ 0x2C
  1271  0001CF                     	ds	2
  1272  0001D1                     efgtoa@u:
  1273                           	callstack 0
  1274                           
  1275                           ; 4 bytes @ 0x2E
  1276  0001D1                     	ds	4
  1277  0001D5                     ?_sprintf:
  1278                           	callstack 0
  1279  0001D5                     sprintf@s:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x32
  1283  0001D5                     	ds	2
  1284  0001D7                     sprintf@fmt:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x34
  1288  0001D7                     	ds	12
  1289  0001E3                     sprintf@ap:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x40
  1293  0001E3                     	ds	2
  1294  0001E5                     sprintf@f:
  1295                           	callstack 0
  1296                           
  1297                           ; 11 bytes @ 0x42
  1298  0001E5                     	ds	11
  1299  0001F0                     _main$2868:
  1300                           	callstack 0
  1301                           
  1302                           ; 4 bytes @ 0x4D
  1303  0001F0                     	ds	4
  1304  0001F4                     _main$1544:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x51
  1308  0001F4                     	ds	2
  1309                           
  1310                           	psect	cstackBANK0
  1311  000060                     __pcstackBANK0:
  1312                           	callstack 0
  1313  000060                     ??_init_cpu:
  1314  000060                     ??_fputc:
  1315  000060                     ??_tolower:
  1316  000060                     ??___fleq:
  1317  000060                     ?___lwmod:
  1318                           	callstack 0
  1319  000060                     ?___lodiv:
  1320                           	callstack 0
  1321  000060                     ?___lomod:
  1322                           	callstack 0
  1323  000060                     ___xxtofl@sign:
  1324                           	callstack 0
  1325  000060                     lcdPrint@t:
  1326                           	callstack 0
  1327  000060                     readTemp_Single@buf:
  1328                           	callstack 0
  1329  000060                     ___lwmod@dividend:
  1330                           	callstack 0
  1331  000060                     ___fpclassifyf@e:
  1332                           	callstack 0
  1333  000060                     strcpy@s:
  1334                           	callstack 0
  1335  000060                     strncmp@l:
  1336                           	callstack 0
  1337  000060                     ___lmul@product:
  1338                           	callstack 0
  1339  000060                     ___lldiv@quotient:
  1340                           	callstack 0
  1341  000060                     ___lodiv@dividend:
  1342                           	callstack 0
  1343  000060                     ___lomod@dividend:
  1344                           	callstack 0
  1345                           
  1346                           ; 8 bytes @ 0x0
  1347  000060                     	ds	1
  1348  000061                     ___xxtofl@exp:
  1349                           	callstack 0
  1350                           
  1351                           ; 1 bytes @ 0x1
  1352  000061                     	ds	1
  1353  000062                     ??_lcdPrint:
  1354  000062                     readTemp_Single@minus:
  1355                           	callstack 0
  1356  000062                     ___lwmod@divisor:
  1357                           	callstack 0
  1358  000062                     strcpy@d:
  1359                           	callstack 0
  1360  000062                     strncmp@r:
  1361                           	callstack 0
  1362  000062                     ___xxtofl@arg:
  1363                           	callstack 0
  1364  000062                     ___fpclassifyf@u:
  1365                           	callstack 0
  1366                           
  1367                           ; 4 bytes @ 0x2
  1368  000062                     	ds	2
  1369  000064                     ?___wmul:
  1370                           	callstack 0
  1371  000064                     ___lldiv@counter:
  1372                           	callstack 0
  1373  000064                     readTemp_Single@time_flag:
  1374                           	callstack 0
  1375  000064                     ___wmul@multiplier:
  1376                           	callstack 0
  1377                           
  1378                           ; 2 bytes @ 0x4
  1379  000064                     	ds	1
  1380  000065                     ??_stoa:
  1381  000065                     fputs@c:
  1382                           	callstack 0
  1383  000065                     ctoa@l:
  1384                           	callstack 0
  1385                           
  1386                           ; 2 bytes @ 0x5
  1387  000065                     	ds	1
  1388  000066                     ?___fldiv:
  1389                           	callstack 0
  1390  000066                     ?___flmul:
  1391                           	callstack 0
  1392  000066                     readTemp_Single@timer_val:
  1393                           	callstack 0
  1394  000066                     ___wmul@multiplicand:
  1395                           	callstack 0
  1396  000066                     fputs@i:
  1397                           	callstack 0
  1398  000066                     ___fldiv@b:
  1399                           	callstack 0
  1400  000066                     ___flmul@b:
  1401                           	callstack 0
  1402  000066                     stoa@nuls:
  1403                           	callstack 0
  1404                           
  1405                           ; 7 bytes @ 0x6
  1406  000066                     	ds	1
  1407  000067                     ctoa@w:
  1408                           	callstack 0
  1409                           
  1410                           ; 2 bytes @ 0x7
  1411  000067                     	ds	1
  1412  000068                     ??_readTemp_Single:
  1413  000068                     ?_pad:
  1414                           	callstack 0
  1415  000068                     ___wmul@product:
  1416                           	callstack 0
  1417  000068                     pad@fp:
  1418                           	callstack 0
  1419  000068                     ___lodiv@divisor:
  1420                           	callstack 0
  1421  000068                     ___lomod@divisor:
  1422                           	callstack 0
  1423                           
  1424                           ; 8 bytes @ 0x8
  1425  000068                     	ds	2
  1426  00006A                     ?_calc_power:
  1427                           	callstack 0
  1428  00006A                     ?_atoi:
  1429                           	callstack 0
  1430  00006A                     pad@buf:
  1431                           	callstack 0
  1432  00006A                     atoi@s:
  1433                           	callstack 0
  1434  00006A                     calc_power@res:
  1435                           	callstack 0
  1436  00006A                     ___fldiv@a:
  1437                           	callstack 0
  1438  00006A                     ___flmul@a:
  1439                           	callstack 0
  1440                           
  1441                           ; 4 bytes @ 0xA
  1442  00006A                     	ds	1
  1443  00006B                     readTemp_Single@tmp:
  1444                           	callstack 0
  1445                           
  1446                           ; 1 bytes @ 0xB
  1447  00006B                     	ds	1
  1448  00006C                     ??_atoi:
  1449  00006C                     readTemp_Single@i:
  1450                           	callstack 0
  1451  00006C                     pad@p:
  1452                           	callstack 0
  1453                           
  1454                           ; 2 bytes @ 0xC
  1455  00006C                     	ds	1
  1456  00006D                     readTemp_Single@temp:
  1457                           	callstack 0
  1458  00006D                     stoa@i:
  1459                           	callstack 0
  1460                           
  1461                           ; 2 bytes @ 0xD
  1462  00006D                     	ds	1
  1463  00006E                     ??___fldiv:
  1464  00006E                     ??___flmul:
  1465  00006E                     ??_pad:
  1466  00006E                     calc_power@u_rl:
  1467                           	callstack 0
  1468                           
  1469                           ; 2 bytes @ 0xE
  1470  00006E                     	ds	1
  1471  00006F                     pad@i:
  1472                           	callstack 0
  1473  00006F                     stoa@w:
  1474                           	callstack 0
  1475                           
  1476                           ; 2 bytes @ 0xF
  1477  00006F                     	ds	1
  1478  000070                     ??_calc_power:
  1479  000070                     atoi@neg:
  1480                           	callstack 0
  1481                           
  1482                           ; 2 bytes @ 0x10
  1483  000070                     	ds	1
  1484  000071                     pad@w:
  1485                           	callstack 0
  1486  000071                     stoa@cp:
  1487                           	callstack 0
  1488                           
  1489                           ; 2 bytes @ 0x11
  1490  000071                     	ds	1
  1491  000072                     ___flmul@sign:
  1492                           	callstack 0
  1493  000072                     atoi@n:
  1494                           	callstack 0
  1495  000072                     calc_power@tt:
  1496                           	callstack 0
  1497  000072                     ___fldiv@rem:
  1498                           	callstack 0
  1499                           
  1500                           ; 4 bytes @ 0x12
  1501  000072                     	ds	1
  1502  000073                     ?_utoa:
  1503                           	callstack 0
  1504  000073                     ___flmul@aexp:
  1505                           	callstack 0
  1506  000073                     stoa@p:
  1507                           	callstack 0
  1508  000073                     utoa@fp:
  1509                           	callstack 0
  1510                           
  1511                           ; 2 bytes @ 0x13
  1512  000073                     	ds	1
  1513  000074                     ___flmul@bexp:
  1514                           	callstack 0
  1515                           
  1516                           ; 1 bytes @ 0x14
  1517  000074                     	ds	1
  1518  000075                     stoa@l:
  1519                           	callstack 0
  1520  000075                     ___flmul@grs:
  1521                           	callstack 0
  1522  000075                     utoa@d:
  1523                           	callstack 0
  1524                           
  1525                           ; 8 bytes @ 0x15
  1526  000075                     	ds	1
  1527  000076                     ___fldiv@sign:
  1528                           	callstack 0
  1529  000076                     _calc_power$2869:
  1530                           	callstack 0
  1531                           
  1532                           ; 4 bytes @ 0x16
  1533  000076                     	ds	1
  1534  000077                     ___fldiv@new_exp:
  1535                           	callstack 0
  1536                           
  1537                           ; 2 bytes @ 0x17
  1538  000077                     	ds	2
  1539  000079                     ___fldiv@grs:
  1540                           	callstack 0
  1541  000079                     ___flmul@prod:
  1542                           	callstack 0
  1543                           
  1544                           ; 4 bytes @ 0x19
  1545  000079                     	ds	1
  1546  00007A                     _calc_power$2870:
  1547                           	callstack 0
  1548                           
  1549                           ; 2 bytes @ 0x1A
  1550  00007A                     	ds	2
  1551  00007C                     calc_power@pwr:
  1552                           	callstack 0
  1553                           
  1554                           ; 1 bytes @ 0x1C
  1555  00007C                     	ds	1
  1556  00007D                     ??_utoa:
  1557  00007D                     ___fldiv@bexp:
  1558                           	callstack 0
  1559  00007D                     calc_power@p_w:
  1560                           	callstack 0
  1561  00007D                     ___flmul@temp:
  1562                           	callstack 0
  1563                           
  1564                           ; 2 bytes @ 0x1D
  1565  00007D                     	ds	1
  1566  00007E                     ___fldiv@aexp:
  1567                           	callstack 0
  1568                           
  1569                           ; 1 bytes @ 0x1E
  1570  00007E                     	ds	1
  1571  00007F                     ?___fladd:
  1572                           	callstack 0
  1573  00007F                     ?_floorf:
  1574                           	callstack 0
  1575  00007F                     ___flge@ff1:
  1576                           	callstack 0
  1577  00007F                     ___fladd@b:
  1578                           	callstack 0
  1579  00007F                     floorf@x:
  1580                           	callstack 0
  1581                           
  1582                           ; 4 bytes @ 0x1F
  1583  00007F                     	ds	4
  1584  000083                     ??_floorf:
  1585  000083                     ___flge@ff2:
  1586                           	callstack 0
  1587  000083                     ___fladd@a:
  1588                           	callstack 0
  1589                           
  1590                           ; 4 bytes @ 0x23
  1591  000083                     	ds	2
  1592  000085                     utoa@p:
  1593                           	callstack 0
  1594                           
  1595                           ; 2 bytes @ 0x25
  1596  000085                     	ds	2
  1597  000087                     ??___fladd:
  1598  000087                     ??___flge:
  1599  000087                     utoa@w:
  1600                           	callstack 0
  1601                           
  1602                           ; 2 bytes @ 0x27
  1603  000087                     	ds	2
  1604  000089                     floorf@m:
  1605                           	callstack 0
  1606  000089                     utoa@n:
  1607                           	callstack 0
  1608                           
  1609                           ; 8 bytes @ 0x29
  1610  000089                     	ds	2
  1611  00008B                     ___fladd@signs:
  1612                           	callstack 0
  1613                           
  1614                           ; 1 bytes @ 0x2B
  1615  00008B                     	ds	1
  1616  00008C                     ___fladd@aexp:
  1617                           	callstack 0
  1618                           
  1619                           ; 1 bytes @ 0x2C
  1620  00008C                     	ds	1
  1621  00008D                     ___fladd@bexp:
  1622                           	callstack 0
  1623  00008D                     floorf@e:
  1624                           	callstack 0
  1625                           
  1626                           ; 2 bytes @ 0x2D
  1627  00008D                     	ds	1
  1628  00008E                     ___fladd@grs:
  1629                           	callstack 0
  1630                           
  1631                           ; 1 bytes @ 0x2E
  1632  00008E                     	ds	1
  1633  00008F                     ?_sqrtf:
  1634                           	callstack 0
  1635  00008F                     ?___flsub:
  1636                           	callstack 0
  1637  00008F                     ___flsub@b:
  1638                           	callstack 0
  1639  00008F                     floorf@u:
  1640                           	callstack 0
  1641  00008F                     sqrtf@x:
  1642                           	callstack 0
  1643                           
  1644                           ; 4 bytes @ 0x2F
  1645  00008F                     	ds	2
  1646  000091                     utoa@i:
  1647                           	callstack 0
  1648                           
  1649                           ; 2 bytes @ 0x31
  1650  000091                     	ds	2
  1651  000093                     ??_sqrtf:
  1652  000093                     ___flsub@a:
  1653                           	callstack 0
  1654                           
  1655                           ; 4 bytes @ 0x33
  1656  000093                     	ds	5
  1657  000098                     sqrtf@s:
  1658                           	callstack 0
  1659                           
  1660                           ; 4 bytes @ 0x38
  1661  000098                     	ds	4
  1662  00009C                     sqrtf@i:
  1663                           	callstack 0
  1664                           
  1665                           ; 4 bytes @ 0x3C
  1666  00009C                     	ds	4
  1667  0000A0                     sqrtf@__xc8_float_word:
  1668                           	callstack 0
  1669                           
  1670                           ; 4 bytes @ 0x40
  1671  0000A0                     	ds	4
  1672  0000A4                     sqrtf@q:
  1673                           	callstack 0
  1674                           
  1675                           ; 4 bytes @ 0x44
  1676  0000A4                     	ds	4
  1677  0000A8                     sqrtf@t:
  1678                           	callstack 0
  1679                           
  1680                           ; 4 bytes @ 0x48
  1681  0000A8                     	ds	4
  1682  0000AC                     sqrtf@z:
  1683                           	callstack 0
  1684                           
  1685                           ; 4 bytes @ 0x4C
  1686  0000AC                     	ds	4
  1687  0000B0                     sqrtf@m:
  1688                           	callstack 0
  1689                           
  1690                           ; 4 bytes @ 0x50
  1691  0000B0                     	ds	4
  1692  0000B4                     sqrtf@r:
  1693                           	callstack 0
  1694                           
  1695                           ; 4 bytes @ 0x54
  1696  0000B4                     	ds	4
  1697  0000B8                     sqrtf@ix:
  1698                           	callstack 0
  1699                           
  1700                           ; 4 bytes @ 0x58
  1701  0000B8                     	ds	4
  1702  0000BC                     ?___fltol:
  1703                           	callstack 0
  1704  0000BC                     ___fltol@f1:
  1705                           	callstack 0
  1706                           
  1707                           ; 4 bytes @ 0x5C
  1708  0000BC                     	ds	4
  1709  0000C0                     ??___fltol:
  1710                           
  1711                           ; 1 bytes @ 0x60
  1712  0000C0                     	ds	4
  1713  0000C4                     ___fltol@sign1:
  1714                           	callstack 0
  1715                           
  1716                           ; 1 bytes @ 0x64
  1717  0000C4                     	ds	1
  1718  0000C5                     ___fltol@exp1:
  1719                           	callstack 0
  1720                           
  1721                           ; 1 bytes @ 0x65
  1722  0000C5                     	ds	1
  1723  0000C6                     ?_efgtoa:
  1724                           	callstack 0
  1725  0000C6                     efgtoa@fp:
  1726                           	callstack 0
  1727                           
  1728                           ; 2 bytes @ 0x66
  1729  0000C6                     	ds	2
  1730  0000C8                     efgtoa@f:
  1731                           	callstack 0
  1732                           
  1733                           ; 4 bytes @ 0x68
  1734  0000C8                     	ds	4
  1735  0000CC                     efgtoa@c:
  1736                           	callstack 0
  1737                           
  1738                           ; 1 bytes @ 0x6C
  1739  0000CC                     	ds	1
  1740  0000CD                     ??_efgtoa:
  1741                           
  1742                           ; 1 bytes @ 0x6D
  1743  0000CD                     	ds	5
  1744  0000D2                     ?_vfpfcnvrt:
  1745                           	callstack 0
  1746  0000D2                     vfpfcnvrt@fp:
  1747                           	callstack 0
  1748                           
  1749                           ; 2 bytes @ 0x72
  1750  0000D2                     	ds	2
  1751  0000D4                     vfpfcnvrt@fmt:
  1752                           	callstack 0
  1753                           
  1754                           ; 1 bytes @ 0x74
  1755  0000D4                     	ds	1
  1756  0000D5                     vfpfcnvrt@ap:
  1757                           	callstack 0
  1758                           
  1759                           ; 2 bytes @ 0x75
  1760  0000D5                     	ds	2
  1761  0000D7                     ??_vfpfcnvrt:
  1762                           
  1763                           ; 1 bytes @ 0x77
  1764  0000D7                     	ds	4
  1765  0000DB                     vfpfcnvrt@llu:
  1766                           	callstack 0
  1767                           
  1768                           ; 8 bytes @ 0x7B
  1769  0000DB                     	ds	8
  1770  0000E3                     vfpfcnvrt@cp:
  1771                           	callstack 0
  1772                           
  1773                           ; 2 bytes @ 0x83
  1774  0000E3                     	ds	2
  1775  0000E5                     vfpfcnvrt@done:
  1776                           	callstack 0
  1777                           
  1778                           ; 2 bytes @ 0x85
  1779  0000E5                     	ds	2
  1780  0000E7                     _vfpfcnvrt$2452:
  1781                           	callstack 0
  1782                           
  1783                           ; 2 bytes @ 0x87
  1784  0000E7                     	ds	2
  1785  0000E9                     vfpfcnvrt@f:
  1786                           	callstack 0
  1787                           
  1788                           ; 4 bytes @ 0x89
  1789  0000E9                     	ds	4
  1790  0000ED                     vfpfcnvrt@ct:
  1791                           	callstack 0
  1792                           
  1793                           ; 3 bytes @ 0x8D
  1794  0000ED                     	ds	3
  1795  0000F0                     vfpfcnvrt@c:
  1796                           	callstack 0
  1797                           
  1798                           ; 1 bytes @ 0x90
  1799  0000F0                     	ds	1
  1800  0000F1                     ?_vfprintf:
  1801                           	callstack 0
  1802  0000F1                     vfprintf@fp:
  1803                           	callstack 0
  1804                           
  1805                           ; 2 bytes @ 0x91
  1806  0000F1                     	ds	2
  1807  0000F3                     vfprintf@fmt:
  1808                           	callstack 0
  1809                           
  1810                           ; 2 bytes @ 0x93
  1811  0000F3                     	ds	2
  1812  0000F5                     vfprintf@ap:
  1813                           	callstack 0
  1814                           
  1815                           ; 2 bytes @ 0x95
  1816  0000F5                     	ds	2
  1817  0000F7                     vfprintf@cfmt:
  1818                           	callstack 0
  1819                           
  1820                           ; 2 bytes @ 0x97
  1821  0000F7                     	ds	2
  1822  0000F9                     show_lcd_main@pwr_dsp:
  1823                           	callstack 0
  1824                           
  1825                           ; 2 bytes @ 0x99
  1826  0000F9                     	ds	2
  1827  0000FB                     ??_main:
  1828                           
  1829                           ; 1 bytes @ 0x9B
  1830  0000FB                     	ds	4
  1831                           
  1832                           	psect	cstackCOMRAM
  1833  000001                     __pcstackCOMRAM:
  1834                           	callstack 0
  1835  000001                     ?i2___wmul:
  1836                           	callstack 0
  1837  000001                     ?i2___lmul:
  1838                           	callstack 0
  1839  000001                     i2___wmul@multiplier:
  1840                           	callstack 0
  1841  000001                     i2___lmul@multiplier:
  1842                           	callstack 0
  1843                           
  1844                           ; 4 bytes @ 0x0
  1845  000001                     	ds	2
  1846  000003                     i2___wmul@multiplicand:
  1847                           	callstack 0
  1848                           
  1849                           ; 2 bytes @ 0x2
  1850  000003                     	ds	2
  1851  000005                     i2___wmul@product:
  1852                           	callstack 0
  1853  000005                     i2___lmul@multiplicand:
  1854                           	callstack 0
  1855                           
  1856                           ; 4 bytes @ 0x4
  1857  000005                     	ds	4
  1858  000009                     i2___lmul@product:
  1859                           	callstack 0
  1860                           
  1861                           ; 4 bytes @ 0x8
  1862  000009                     	ds	4
  1863  00000D                     ??_Inter_hi:
  1864                           
  1865                           ; 1 bytes @ 0xC
  1866  00000D                     	ds	4
  1867  000011                     _Inter_hi$2885:
  1868                           	callstack 0
  1869                           
  1870                           ; 2 bytes @ 0x10
  1871  000011                     	ds	2
  1872  000013                     Inter_hi@lev:
  1873                           	callstack 0
  1874                           
  1875                           ; 2 bytes @ 0x12
  1876  000013                     	ds	2
  1877  000015                     Inter_hi@pulse:
  1878                           	callstack 0
  1879                           
  1880                           ; 2 bytes @ 0x14
  1881  000015                     	ds	2
  1882  000017                     ??_Inter_lo:
  1883                           
  1884                           ; 1 bytes @ 0x16
  1885  000017                     	ds	4
  1886  00001B                     ??_lcdNibble:
  1887  00001B                     ??_ow_reset:
  1888  00001B                     ??_read_byte:
  1889  00001B                     ?_strlen:
  1890                           	callstack 0
  1891  00001B                     ?___fpclassifyf:
  1892                           	callstack 0
  1893  00001B                     ?_isupper:
  1894                           	callstack 0
  1895  00001B                     ?_isdigit:
  1896                           	callstack 0
  1897  00001B                     ?_strncmp:
  1898                           	callstack 0
  1899  00001B                     ?_isspace:
  1900                           	callstack 0
  1901  00001B                     ?___awdiv:
  1902                           	callstack 0
  1903  00001B                     ?___awmod:
  1904                           	callstack 0
  1905  00001B                     ?___lwdiv:
  1906                           	callstack 0
  1907  00001B                     ?_nanf:
  1908                           	callstack 0
  1909  00001B                     ?___lmul:
  1910                           	callstack 0
  1911  00001B                     ?___lldiv:
  1912                           	callstack 0
  1913  00001B                     ?___flneg:
  1914                           	callstack 0
  1915  00001B                     ?___xxtofl:
  1916                           	callstack 0
  1917  00001B                     write_eep@data:
  1918                           	callstack 0
  1919  00001B                     putch@data:
  1920                           	callstack 0
  1921  00001B                     key_press@key:
  1922                           	callstack 0
  1923  00001B                     key_GetKey@key:
  1924                           	callstack 0
  1925  00001B                     write_bit@bitval:
  1926                           	callstack 0
  1927  00001B                     ___lomod@counter:
  1928                           	callstack 0
  1929  00001B                     read_eep@address:
  1930                           	callstack 0
  1931  00001B                     ds18b20_crc8@data_in:
  1932                           	callstack 0
  1933  00001B                     ___awdiv@dividend:
  1934                           	callstack 0
  1935  00001B                     ___awmod@dividend:
  1936                           	callstack 0
  1937  00001B                     ___lwdiv@dividend:
  1938                           	callstack 0
  1939  00001B                     isdigit@c:
  1940                           	callstack 0
  1941  00001B                     isspace@c:
  1942                           	callstack 0
  1943  00001B                     isupper@c:
  1944                           	callstack 0
  1945  00001B                     nanf@s:
  1946                           	callstack 0
  1947  00001B                     strcpy@dest:
  1948                           	callstack 0
  1949  00001B                     strlen@s:
  1950                           	callstack 0
  1951  00001B                     strncmp@_l:
  1952                           	callstack 0
  1953  00001B                     ___lmul@multiplier:
  1954                           	callstack 0
  1955  00001B                     ___lldiv@dividend:
  1956                           	callstack 0
  1957  00001B                     ___fleq@ff1:
  1958                           	callstack 0
  1959  00001B                     ___flneg@f1:
  1960                           	callstack 0
  1961  00001B                     ___xxtofl@val:
  1962                           	callstack 0
  1963  00001B                     ___fpclassifyf@x:
  1964                           	callstack 0
  1965  00001B                     ___lodiv@quotient:
  1966                           	callstack 0
  1967                           
  1968                           ; 8 bytes @ 0x1A
  1969  00001B                     	ds	1
  1970  00001C                     ??_write_byte:
  1971  00001C                     write_eep@address:
  1972                           	callstack 0
  1973  00001C                     lcdNibble@nibble:
  1974                           	callstack 0
  1975  00001C                     ow_reset@presence:
  1976                           	callstack 0
  1977  00001C                     fputc@c:
  1978                           	callstack 0
  1979                           
  1980                           ; 2 bytes @ 0x1B
  1981  00001C                     	ds	1
  1982  00001D                     ??_isupper:
  1983  00001D                     ??_isdigit:
  1984  00001D                     ??_isspace:
  1985  00001D                     lcdWrite@type:
  1986                           	callstack 0
  1987  00001D                     ds18b20_crc8@num_bytes:
  1988                           	callstack 0
  1989  00001D                     read_byte@val:
  1990                           	callstack 0
  1991  00001D                     ___awdiv@divisor:
  1992                           	callstack 0
  1993  00001D                     ___awmod@divisor:
  1994                           	callstack 0
  1995  00001D                     ___lwdiv@divisor:
  1996                           	callstack 0
  1997  00001D                     strcpy@src:
  1998                           	callstack 0
  1999  00001D                     strlen@a:
  2000                           	callstack 0
  2001  00001D                     strncmp@_r:
  2002                           	callstack 0
  2003                           
  2004                           ; 2 bytes @ 0x1C
  2005  00001D                     	ds	1
  2006  00001E                     lcdWrite@byte:
  2007                           	callstack 0
  2008  00001E                     ds18b20_crc8@bit_counter:
  2009                           	callstack 0
  2010  00001E                     read_byte@i:
  2011                           	callstack 0
  2012  00001E                     write_byte@val:
  2013                           	callstack 0
  2014  00001E                     fputc@fp:
  2015                           	callstack 0
  2016                           
  2017                           ; 2 bytes @ 0x1D
  2018  00001E                     	ds	1
  2019  00001F                     ??_clearLCD:
  2020  00001F                     ??___fpclassifyf:
  2021  00001F                     ??_strcpy:
  2022  00001F                     ??___xxtofl:
  2023  00001F                     lcd_gotoxy@y:
  2024                           	callstack 0
  2025  00001F                     lcd_putc@c:
  2026                           	callstack 0
  2027  00001F                     ds18b20_crc8@data:
  2028                           	callstack 0
  2029  00001F                     write_byte@temp:
  2030                           	callstack 0
  2031  00001F                     ___awdiv@counter:
  2032                           	callstack 0
  2033  00001F                     ___awmod@counter:
  2034                           	callstack 0
  2035  00001F                     ___lwdiv@counter:
  2036                           	callstack 0
  2037  00001F                     cgrom_char@symbol:
  2038                           	callstack 0
  2039  00001F                     strncmp@n:
  2040                           	callstack 0
  2041  00001F                     ___lmul@multiplicand:
  2042                           	callstack 0
  2043  00001F                     ___lldiv@divisor:
  2044                           	callstack 0
  2045  00001F                     ___fleq@ff2:
  2046                           	callstack 0
  2047  00001F                     nanf@u:
  2048                           	callstack 0
  2049                           
  2050                           ; 4 bytes @ 0x1E
  2051  00001F                     	ds	1
  2052  000020                     ??_initLCD:
  2053  000020                     ??_lcd_gotoxy:
  2054  000020                     ?_ctoa:
  2055                           	callstack 0
  2056  000020                     ?_stoa:
  2057                           	callstack 0
  2058  000020                     ds18b20_crc8@feedback_bit:
  2059                           	callstack 0
  2060  000020                     write_byte@i:
  2061                           	callstack 0
  2062  000020                     ___awdiv@sign:
  2063                           	callstack 0
  2064  000020                     ___awmod@sign:
  2065                           	callstack 0
  2066  000020                     ___lwdiv@quotient:
  2067                           	callstack 0
  2068  000020                     ctoa@fp:
  2069                           	callstack 0
  2070  000020                     stoa@fp:
  2071                           	callstack 0
  2072  000020                     fputs@s:
  2073                           	callstack 0
  2074                           
  2075                           ; 2 bytes @ 0x1F
  2076  000020                     	ds	1
  2077  000021                     ??_strncmp:
  2078  000021                     ?_tolower:
  2079                           	callstack 0
  2080  000021                     cgrom_char@address:
  2081                           	callstack 0
  2082  000021                     ds18b20_crc8@loop_count:
  2083                           	callstack 0
  2084  000021                     _isspace$2517:
  2085                           	callstack 0
  2086  000021                     ___awdiv@quotient:
  2087                           	callstack 0
  2088  000021                     tolower@c:
  2089                           	callstack 0
  2090                           
  2091                           ; 2 bytes @ 0x20
  2092  000021                     	ds	1
  2093  000022                     lcd_gotoxy@x:
  2094                           	callstack 0
  2095  000022                     cgrom_char@i:
  2096                           	callstack 0
  2097  000022                     ds18b20_crc8@crc:
  2098                           	callstack 0
  2099  000022                     ___lwmod@counter:
  2100                           	callstack 0
  2101  000022                     ctoa@c:
  2102                           	callstack 0
  2103  000022                     stoa@s:
  2104                           	callstack 0
  2105  000022                     fputs@fp:
  2106                           	callstack 0
  2107                           
  2108                           ; 2 bytes @ 0x21
  2109  000022                     	ds	1
  2110  000023                     ??_ctoa:
  2111  000023                     lcd_gotoxy@address:
  2112                           	callstack 0
  2113  000023                     ___lodiv@counter:
  2114                           	callstack 0
  2115                           
  2116                           ; 1 bytes @ 0x22
  2117  000023                     	ds	1
  2118  000024                     
  2119                           ; 1 bytes @ 0x23
  2120 ;;
  2121 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2122 ;;
  2123 ;; *************** function _main *****************
  2124 ;; Defined at:
  2125 ;;		line 85 in file "main.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 3F/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2139 ;;      Params:         0       0       0       0       0       0       0
  2140 ;;      Locals:         0       0       6       0       0       0       0
  2141 ;;      Temps:          0       4       0       0       0       0       0
  2142 ;;      Totals:         0       4       6       0       0       0       0
  2143 ;;Total ram usage:       10 bytes
  2144 ;; Hardware stack levels required when called: 12
  2145 ;; This function calls:
  2146 ;;		_EncPoll
  2147 ;;		___fladd
  2148 ;;		___fldiv
  2149 ;;		___flmul
  2150 ;;		___fltol
  2151 ;;		___lldiv
  2152 ;;		___lmul
  2153 ;;		___lwdiv
  2154 ;;		___xxtofl
  2155 ;;		_calc_power
  2156 ;;		_clearLCD
  2157 ;;		_init_cpu
  2158 ;;		_key_GetKey
  2159 ;;		_key_press
  2160 ;;		_lcdPrint
  2161 ;;		_lcd_gotoxy
  2162 ;;		_lcd_putc
  2163 ;;		_readTemp_Single
  2164 ;;		_read_eep
  2165 ;;		_show_lcd_main
  2166 ;;		_sprintf
  2167 ;;		_sqrtf
  2168 ;;		_write_eep
  2169 ;; This function is called by:
  2170 ;;		Startup code after reset
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text0
  2175  0000C8                     __ptext0:
  2176                           	callstack 0
  2177  0000C8                     _main:
  2178                           	callstack 19
  2179                           
  2180                           ;main.c: 87:     static __bit whole_dec = 0;;main.c: 88:     static __bit alarm_enable =
      +                           0;;main.c: 89:     static uint8_t powerOFF = 0;;main.c: 92:     init_cpu();
  2181                           
  2182                           ;incstack = 0
  2183  0000C8  EC0A  F014         	call	_init_cpu	;wreg free
  2184                           
  2185                           ;main.c: 93:     EncData = power;
  2186  0000CC  ECD3  F004         	call	PL132	;call to abstracted procedure
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;main.c: 94:     _delay((unsigned long)((10)*(64000000/4000.0)));
  2190  0000D0  0ED0               	movlw	208
  2191  0000D2  0100               	movlb	0	; () banked
  2192  0000D4  6FFB               	movwf	??_main& (0+255),b
  2193  0000D6  0EC9               	movlw	201
  2194  0000D8                     u12137:
  2195  0000D8  2EE8               	decfsz	wreg,f,c
  2196  0000DA  D7FE               	bra	u12137
  2197  0000DC  2FFB               	decfsz	??_main& (0+255),f,b
  2198  0000DE  D7FC               	bra	u12137
  2199  0000E0  F000 F000          	nop2	
  2200                           
  2201                           ;main.c: 97:     lcd_gotoxy(1, 1);
  2202  0000E4  0E01               	movlw	1
  2203  0000E6  6E1F               	movwf	lcd_gotoxy@y^0,c
  2204  0000E8  EC12  F01D         	call	_lcd_gotoxy
  2205                           
  2206                           ;main.c: 98:     lcdPrint("---BRESENHAM STAB---");
  2207  0000EC  0EF0               	movlw	low STR_1
  2208  0000EE  0100               	movlb	0	; () banked
  2209  0000F0  6F60               	movwf	lcdPrint@t& (0+255),b
  2210  0000F2  0E7E               	movlw	high STR_1
  2211  0000F4  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  2212  0000F6  ECD9  F016         	call	_lcdPrint	;wreg free
  2213                           
  2214                           ;main.c: 99:     lcd_gotoxy(1, 2);
  2215  0000FA  ECD0  F004         	call	PL130	;call to abstracted procedure
  2216  0000FE  EC12  F01D         	call	_lcd_gotoxy
  2217                           
  2218                           ;main.c: 100:     sprintf(TxtBuf, "(c)Ivan_fd v%s", "19.06.22");
  2219  000102  EC0D  F00C         	call	PL32	;call to abstracted procedure
  2220  000106  0E62               	movlw	low STR_2
  2221  000108  6FD7               	movwf	sprintf@fmt& (0+255),b
  2222  00010A  0E7F               	movlw	high STR_2
  2223  00010C  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  2224  00010E  0EC9               	movlw	low STR_3
  2225  000110  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  2226  000112  0E7F               	movlw	high STR_3
  2227  000114  6FDA               	movwf	(?_sprintf+5)& (0+255),b
  2228  000116  ECEF  F01C         	call	_sprintf	;wreg free
  2229                           
  2230                           ; BSR set to: 1
  2231                           ;main.c: 101:     lcdPrint(TxtBuf);
  2232  00011A  EC01  F00C         	call	PL14	;call to abstracted procedure
  2233  00011E  ECD9  F016         	call	_lcdPrint	;wreg free
  2234                           
  2235                           ;main.c: 102:     lcd_gotoxy(1, 3);
  2236  000122  ECCD  F004         	call	PL128	;call to abstracted procedure
  2237  000126  EC12  F01D         	call	_lcd_gotoxy
  2238                           
  2239                           ;main.c: 103:     sprintf(TxtBuf, "%s %s", compile_date, compile_time);
  2240  00012A  EC0D  F00C         	call	PL32	;call to abstracted procedure
  2241  00012E  0EDB               	movlw	low STR_4
  2242  000130  6FD7               	movwf	sprintf@fmt& (0+255),b
  2243  000132  0E7F               	movlw	high STR_4
  2244  000134  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  2245  000136  0E0D               	movlw	low _compile_date
  2246  000138  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  2247  00013A  0E7E               	movlw	high _compile_date
  2248  00013C  6FDA               	movwf	(?_sprintf+5)& (0+255),b
  2249  00013E  0E19               	movlw	low _compile_time
  2250  000140  6FDB               	movwf	(?_sprintf+6)& (0+255),b
  2251  000142  0E7E               	movlw	high _compile_time
  2252  000144  6FDC               	movwf	(?_sprintf+7)& (0+255),b
  2253  000146  ECEF  F01C         	call	_sprintf	;wreg free
  2254                           
  2255                           ; BSR set to: 1
  2256                           ;main.c: 104:     lcdPrint(TxtBuf);
  2257  00014A  EC01  F00C         	call	PL14	;call to abstracted procedure
  2258  00014E  ECD9  F016         	call	_lcdPrint	;wreg free
  2259                           
  2260                           ;main.c: 107:     _delay((unsigned long)((2000)*(64000000/4000.0)));
  2261  000152  0EA3               	movlw	163
  2262  000154  0100               	movlb	0	; () banked
  2263  000156  6FFC               	movwf	(??_main+1)& (0+255),b
  2264  000158  0E57               	movlw	87
  2265  00015A  6FFB               	movwf	??_main& (0+255),b
  2266  00015C  0E02               	movlw	2
  2267  00015E                     u12147:
  2268  00015E  2EE8               	decfsz	wreg,f,c
  2269  000160  D7FE               	bra	u12147
  2270  000162  2FFB               	decfsz	??_main& (0+255),f,b
  2271  000164  D7FC               	bra	u12147
  2272  000166  2FFC               	decfsz	(??_main+1)& (0+255),f,b
  2273  000168  D7FA               	bra	u12147
  2274  00016A  F000               	nop	
  2275  00016C  0004               	clrwdt		;# 
  2276                           
  2277                           ;main.c: 109:     clearLCD();
  2278  00016E  EC3E  F01F         	call	_clearLCD	;wreg free
  2279                           
  2280                           ;main.c: 110:     AlarmTemp = read_eep(3);
  2281  000172  6A1C               	clrf	(read_eep@address+1)^0,c
  2282  000174  0E03               	movlw	3
  2283  000176  6E1B               	movwf	read_eep@address^0,c
  2284  000178  EC4A  F01F         	call	_read_eep	;wreg free
  2285  00017C  0101               	movlb	1	; () banked
  2286  00017E  6F27               	movwf	_AlarmTemp& (0+255),b
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 111:     TempEn = read_eep(4);
  2290  000180  6A1C               	clrf	(read_eep@address+1)^0,c
  2291  000182  0E04               	movlw	4
  2292  000184  6E1B               	movwf	read_eep@address^0,c
  2293  000186  EC4A  F01F         	call	_read_eep	;wreg free
  2294  00018A  0101               	movlb	1	; () banked
  2295  00018C  6F25               	movwf	_TempEn& (0+255),b
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;main.c: 112:     power = read_eep(2);
  2299  00018E  6A1C               	clrf	(read_eep@address+1)^0,c
  2300  000190  0E02               	movlw	2
  2301  000192  6E1B               	movwf	read_eep@address^0,c
  2302  000194  EC4A  F01F         	call	_read_eep	;wreg free
  2303  000198  0101               	movlb	1	; () banked
  2304  00019A  6F21               	movwf	_power& (0+255),b
  2305                           
  2306                           ; BSR set to: 1
  2307                           ;main.c: 113:     EncData = power;
  2308  00019C  C121  F116         	movff	_power,_EncData
  2309  0001A0  6B17               	clrf	(_EncData+1)& (0+255),b
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;main.c: 114:     r_whole = read_eep(0);
  2313  0001A2  6A1C               	clrf	(read_eep@address+1)^0,c
  2314  0001A4  6A1B               	clrf	read_eep@address^0,c
  2315  0001A6  EC4A  F01F         	call	_read_eep	;wreg free
  2316  0001AA  0101               	movlb	1	; () banked
  2317  0001AC  6F1F               	movwf	_r_whole& (0+255),b
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;main.c: 115:     r_dec = read_eep(1);
  2321  0001AE  6A1C               	clrf	(read_eep@address+1)^0,c
  2322  0001B0  0E01               	movlw	1
  2323  0001B2  6E1B               	movwf	read_eep@address^0,c
  2324  0001B4  EC4A  F01F         	call	_read_eep	;wreg free
  2325  0001B8  0101               	movlb	1	; () banked
  2326  0001BA  6F1E               	movwf	_r_dec& (0+255),b
  2327                           
  2328                           ; BSR set to: 1
  2329                           ;main.c: 116:     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  2330  0001BC  DBA9               	call	PL22	;call to abstracted procedure
  2331  0001BE  EC08  F01C         	call	___lmul	;wreg free
  2332  0001C2  DBBF               	call	PL30	;call to abstracted procedure
  2333  0001C4                     l515:
  2334  0001C4  0004               	clrwdt		;# 
  2335                           
  2336                           ;main.c: 127:         if (read_key) {
  2337  0001C6  0101               	movlb	1	; () banked
  2338  0001C8  512A               	movf	_read_key& (0+255),w,b
  2339  0001CA  E003               	bz	l9862
  2340                           
  2341                           ; BSR set to: 1
  2342                           ;main.c: 128:             key_press();
  2343  0001CC  EC91  F01D         	call	_key_press	;wreg free
  2344                           
  2345                           ; BSR set to: 1
  2346                           ;main.c: 129:             read_key = 0;
  2347  0001D0  6B2A               	clrf	_read_key& (0+255),b
  2348  0001D2                     l9862:
  2349                           
  2350                           ; BSR set to: 1
  2351                           ;main.c: 131:         pressed_key = key_GetKey();
  2352  0001D2  EC5F  F01F         	call	_key_GetKey	;wreg free
  2353  0001D6  6F22               	movwf	_pressed_key& (0+255),b
  2354                           
  2355                           ; BSR set to: 1
  2356                           ;main.c: 135:             isTempReady = readTemp_Single(&temperature, &minus, &time_flag
      +                          , &timer_val);
  2357  0001D8  0E9D               	movlw	low _temperature
  2358  0001DA  0100               	movlb	0	; () banked
  2359  0001DC  6F60               	movwf	readTemp_Single@buf& (0+255),b
  2360  0001DE  0E01               	movlw	high _temperature
  2361  0001E0  6F61               	movwf	(readTemp_Single@buf+1)& (0+255),b
  2362  0001E2  0EA1               	movlw	low _minus
  2363  0001E4  6F62               	movwf	readTemp_Single@minus& (0+255),b
  2364  0001E6  0E01               	movlw	high _minus
  2365  0001E8  6F63               	movwf	(readTemp_Single@minus+1)& (0+255),b
  2366  0001EA  0EA2               	movlw	low _time_flag
  2367  0001EC  6F64               	movwf	readTemp_Single@time_flag& (0+255),b
  2368  0001EE  0E01               	movlw	high _time_flag
  2369  0001F0  6F65               	movwf	(readTemp_Single@time_flag+1)& (0+255),b
  2370  0001F2  0E9F               	movlw	low _timer_val
  2371  0001F4  6F66               	movwf	readTemp_Single@timer_val& (0+255),b
  2372  0001F6  0E01               	movlw	high _timer_val
  2373  0001F8  6F67               	movwf	(readTemp_Single@timer_val+1)& (0+255),b
  2374  0001FA  ECA7  F014         	call	_readTemp_Single	;wreg free
  2375  0001FE  0101               	movlb	1	; () banked
  2376  000200  6F23               	movwf	_isTempReady& (0+255),b
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;main.c: 137:         if (TempEn) {
  2380  000202  5125               	movf	_TempEn& (0+255),w,b
  2381  000204  E016               	bz	l9872
  2382                           
  2383                           ; BSR set to: 1
  2384                           ;main.c: 138:             if ((temperature / 10) >= AlarmTemp) {
  2385  000206  5127               	movf	_AlarmTemp& (0+255),w,b
  2386  000208  0100               	movlb	0	; () banked
  2387  00020A  6FFB               	movwf	??_main& (0+255),b
  2388  00020C  6BFC               	clrf	(??_main+1)& (0+255),b
  2389  00020E  C19D  F01B         	movff	_temperature,___lwdiv@dividend
  2390  000212  C19E  F01C         	movff	_temperature+1,___lwdiv@dividend+1
  2391  000216  EC06  F014         	call	PL208	;call to abstracted procedure
  2392  00021A  ECCA  F01C         	call	___lwdiv	;wreg free
  2393  00021E  0100               	movlb	0	; () banked
  2394  000220  51FB               	movf	??_main& (0+255),w,b
  2395  000222  5C1B               	subwf	?___lwdiv^0,w,c
  2396  000224  51FC               	movf	(??_main+1)& (0+255),w,b
  2397  000226  581C               	subwfb	(?___lwdiv+1)^0,w,c
  2398  000228  E304               	bnc	l9872
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 139:                 powerOFF = 1;
  2402  00022A  0E01               	movlw	1
  2403  00022C  0101               	movlb	1	; () banked
  2404  00022E  6F1C               	movwf	main@powerOFF& (0+255),b
  2405                           
  2406                           ;main.c: 140:                 sound_enable = 1;
  2407  000230  6F29               	movwf	_sound_enable& (0+255),b
  2408  000232                     l9872:
  2409                           
  2410                           ;main.c: 144:         if (isTempReady == 1)
  2411  000232  0101               	movlb	1	; () banked
  2412  000234  0523               	decf	_isTempReady& (0+255),w,b
  2413  000236  E102               	bnz	l9876
  2414                           
  2415                           ; BSR set to: 1
  2416                           ;main.c: 145:             isTemp = 1;
  2417  000238  0E01               	movlw	1
  2418  00023A  6F28               	movwf	_isTemp& (0+255),b
  2419  00023C                     l9876:
  2420                           
  2421                           ; BSR set to: 1
  2422                           ;main.c: 146:         if (isTempReady == 3)
  2423  00023C  0E03               	movlw	3
  2424  00023E  1923               	xorwf	_isTempReady& (0+255),w,b
  2425  000240  E102               	bnz	l9880
  2426                           
  2427                           ; BSR set to: 1
  2428                           ;main.c: 147:             isTemp = 3;
  2429  000242  0E03               	movlw	3
  2430  000244  6F28               	movwf	_isTemp& (0+255),b
  2431  000246                     l9880:
  2432                           
  2433                           ; BSR set to: 1
  2434                           ;main.c: 150:         count_enc += EncPoll();
  2435  000246  EC6B  F01E         	call	_EncPoll	;wreg free
  2436  00024A  2720               	addwf	_count_enc& (0+255),f,b
  2437                           
  2438                           ; BSR set to: 1
  2439                           ;main.c: 151:         if (((count_enc % 2) == 0) && !(count_enc == 0)) {
  2440  00024C  B120               	btfsc	_count_enc& (0+255),0,b
  2441  00024E  D01B               	goto	l9906
  2442                           
  2443                           ; BSR set to: 1
  2444  000250  5120               	movf	_count_enc& (0+255),w,b
  2445  000252  E019               	bz	l9906
  2446                           
  2447                           ; BSR set to: 1
  2448                           ;main.c: 152:             if ((count_enc & (1 << (7)))) {
  2449  000254  AF20               	btfss	_count_enc& (0+255),7,b
  2450  000256  D00A               	goto	l522
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;main.c: 153:                 if (inc_data)
  2454  000258  A443               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2455  00025A  D004               	goto	l9892
  2456                           
  2457                           ; BSR set to: 1
  2458                           ;main.c: 154:                     EncData -= 10;
  2459  00025C  0EF6               	movlw	246
  2460  00025E  2716               	addwf	_EncData& (0+255),f,b
  2461  000260  0EFF               	movlw	255
  2462  000262  D009               	goto	L1
  2463  000264                     l9892:
  2464                           
  2465                           ; BSR set to: 1
  2466                           ;main.c: 156:                     EncData--;
  2467  000264  0716               	decf	_EncData& (0+255),f,b
  2468  000266  A0D8               	btfss	status,0,c
  2469  000268  0717               	decf	(_EncData+1)& (0+255),f,b
  2470  00026A  D009               	goto	l9898
  2471  00026C                     l522:
  2472                           
  2473                           ; BSR set to: 1
  2474                           ;main.c: 158:                 if (inc_data)
  2475  00026C  A443               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2476  00026E  D005               	goto	l9896
  2477                           
  2478                           ; BSR set to: 1
  2479                           ;main.c: 159:                     EncData += 10;
  2480  000270  0E0A               	movlw	10
  2481  000272  2716               	addwf	_EncData& (0+255),f,b
  2482  000274  0E00               	movlw	0
  2483  000276                     L1:
  2484  000276  2317               	addwfc	(_EncData+1)& (0+255),f,b
  2485  000278  D002               	goto	l9898
  2486  00027A                     l9896:
  2487                           
  2488                           ; BSR set to: 1
  2489                           ;main.c: 161:                     EncData++;
  2490  00027A  4B16               	infsnz	_EncData& (0+255),f,b
  2491  00027C  2B17               	incf	(_EncData+1)& (0+255),f,b
  2492  00027E                     l9898:
  2493                           
  2494                           ; BSR set to: 1
  2495                           ;main.c: 163:             count_enc = 0;
  2496  00027E  6B20               	clrf	_count_enc& (0+255),b
  2497                           
  2498                           ; BSR set to: 1
  2499                           ;main.c: 164:             is_power = 0;
  2500  000280  9A43               	bcf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2501                           
  2502                           ; BSR set to: 1
  2503                           ;main.c: 165:             show_tp = 1;
  2504  000282  8843               	bsf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  2505                           
  2506                           ; BSR set to: 1
  2507                           ;main.c: 166:             tick_t1_1 = 0;
  2508  000284  6B2B               	clrf	_tick_t1_1& (0+255),b
  2509  000286                     l9906:
  2510                           
  2511                           ; BSR set to: 1
  2512                           ;main.c: 170:         if (!getU && (zero == 50)) {
  2513  000286  503F               	movf	_getU^0,w,c
  2514  000288  E001 D32A          	bnz	l10222
  2515                           
  2516                           ; BSR set to: 1
  2517  00028C  0E32               	movlw	50
  2518  00028E  1840               	xorwf	_zero^0,w,c
  2519  000290  E001 D326          	bnz	l10222
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;main.c: 173:             sqrtU_sum = U_summ / cnt_adc;
  2523  000294  C110  F01B         	movff	_U_summ,___lldiv@dividend
  2524  000298  C111  F01C         	movff	_U_summ+1,___lldiv@dividend+1
  2525  00029C  C112  F01D         	movff	_U_summ+2,___lldiv@dividend+2
  2526  0002A0  C113  F01E         	movff	_U_summ+3,___lldiv@dividend+3
  2527  0002A4  C11A  F01F         	movff	_cnt_adc,___lldiv@divisor
  2528  0002A8  C11B  F020         	movff	_cnt_adc+1,___lldiv@divisor+1
  2529  0002AC  6A21               	clrf	(___lldiv@divisor+2)^0,c
  2530  0002AE  6A22               	clrf	(___lldiv@divisor+3)^0,c
  2531  0002B0  EC14  F01B         	call	___lldiv	;wreg free
  2532  0002B4  C01B  F10C         	movff	?___lldiv,_sqrtU_sum
  2533  0002B8  C01C  F10D         	movff	?___lldiv+1,_sqrtU_sum+1
  2534  0002BC  C01D  F10E         	movff	?___lldiv+2,_sqrtU_sum+2
  2535  0002C0  C01E  F10F         	movff	?___lldiv+3,_sqrtU_sum+3
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 174:             U_real = sqrtf(sqrtU_sum);
  2539  0002C4  C10C  F01B         	movff	_sqrtU_sum,___xxtofl@val
  2540  0002C8  C10D  F01C         	movff	_sqrtU_sum+1,___xxtofl@val+1
  2541  0002CC  C10E  F01D         	movff	_sqrtU_sum+2,___xxtofl@val+2
  2542  0002D0  C10F  F01E         	movff	_sqrtU_sum+3,___xxtofl@val+3
  2543  0002D4  0E00               	movlw	0
  2544  0002D6  EC52  F016         	call	___xxtofl
  2545  0002DA  C01B  F08F         	movff	?___xxtofl,sqrtf@x
  2546  0002DE  C01C  F090         	movff	?___xxtofl+1,sqrtf@x+1
  2547  0002E2  C01D  F091         	movff	?___xxtofl+2,sqrtf@x+2
  2548  0002E6  C01E  F092         	movff	?___xxtofl+3,sqrtf@x+3
  2549  0002EA  EC47  F00C         	call	_sqrtf	;wreg free
  2550  0002EE  C08F  F0BC         	movff	?_sqrtf,___fltol@f1
  2551  0002F2  C090  F0BD         	movff	?_sqrtf+1,___fltol@f1+1
  2552  0002F6  C091  F0BE         	movff	?_sqrtf+2,___fltol@f1+2
  2553  0002FA  C092  F0BF         	movff	?_sqrtf+3,___fltol@f1+3
  2554  0002FE  EC2A  F019         	call	___fltol	;wreg free
  2555  000302  C0BC  F19B         	movff	?___fltol,_U_real
  2556  000306  C0BD  F19C         	movff	?___fltol+1,_U_real+1
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 175:             U_real = U_real / 2;
  2560  00030A  90D8               	bcf	status,0,c
  2561  00030C  0101               	movlb	1	; () banked
  2562  00030E  319C               	rrcf	(_U_real+1)& (0+255),w,b
  2563  000310  0100               	movlb	0	; () banked
  2564  000312  6FFB               	movwf	??_main& (0+255),b
  2565  000314  0101               	movlb	1	; () banked
  2566  000316  319B               	rrcf	_U_real& (0+255),w,b
  2567  000318  6F9B               	movwf	_U_real& (0+255),b
  2568  00031A  C0FB  F19C         	movff	??_main,_U_real+1
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;main.c: 176:             coef = 220.0 / U_real;
  2572  00031E  0100               	movlb	0	; () banked
  2573  000320  6B66               	clrf	___fldiv@b& (0+255),b
  2574  000322  6B67               	clrf	(___fldiv@b+1)& (0+255),b
  2575  000324  0E5C               	movlw	92
  2576  000326  6F68               	movwf	(___fldiv@b+2)& (0+255),b
  2577  000328  0E43               	movlw	67
  2578  00032A  6F69               	movwf	(___fldiv@b+3)& (0+255),b
  2579  00032C  C19B  F01B         	movff	_U_real,___xxtofl@val
  2580  000330  C19C  F01C         	movff	_U_real+1,___xxtofl@val+1
  2581  000334  6A1D               	clrf	(___xxtofl@val+2)^0,c
  2582  000336  6A1E               	clrf	(___xxtofl@val+3)^0,c
  2583  000338  0E00               	movlw	0
  2584  00033A  EC52  F016         	call	___xxtofl
  2585  00033E  C01B  F06A         	movff	?___xxtofl,___fldiv@a
  2586  000342  C01C  F06B         	movff	?___xxtofl+1,___fldiv@a+1
  2587  000346  C01D  F06C         	movff	?___xxtofl+2,___fldiv@a+2
  2588  00034A  C01E  F06D         	movff	?___xxtofl+3,___fldiv@a+3
  2589  00034E  EC4D  F010         	call	___fldiv	;wreg free
  2590  000352  C066  F108         	movff	?___fldiv,_coef
  2591  000356  C067  F109         	movff	?___fldiv+1,_coef+1
  2592  00035A  C068  F10A         	movff	?___fldiv+2,_coef+2
  2593  00035E  C069  F10B         	movff	?___fldiv+3,_coef+3
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 177:             U_summ = 0;
  2597  000362  0101               	movlb	1	; () banked
  2598  000364  6B10               	clrf	_U_summ& (0+255),b
  2599  000366  6B11               	clrf	(_U_summ+1)& (0+255),b
  2600  000368  6B12               	clrf	(_U_summ+2)& (0+255),b
  2601  00036A  6B13               	clrf	(_U_summ+3)& (0+255),b
  2602                           
  2603                           ; BSR set to: 1
  2604                           ;main.c: 178:             getU = 1;
  2605  00036C  0E01               	movlw	1
  2606  00036E  6E3F               	movwf	_getU^0,c
  2607                           
  2608                           ; BSR set to: 1
  2609                           ;main.c: 180:             if (powerOFF && TempEn)
  2610  000370  511C               	movf	main@powerOFF& (0+255),w,b
  2611  000372  E005               	bz	l529
  2612                           
  2613                           ; BSR set to: 1
  2614  000374  5125               	movf	_TempEn& (0+255),w,b
  2615  000376  E003               	bz	l529
  2616                           
  2617                           ; BSR set to: 1
  2618                           ;main.c: 181:                 t_power = 0;
  2619  000378  6A38               	clrf	_t_power^0,c
  2620  00037A  6A39               	clrf	(_t_power+1)^0,c
  2621  00037C  D04E               	goto	l9938
  2622  00037E                     l529:
  2623                           
  2624                           ; BSR set to: 1
  2625                           ;main.c: 183:                 if (!power_100)
  2626  00037E  B643               	btfsc	(_power_100/(0+8))^0,_power_100& (0+7),c
  2627  000380  D03D               	goto	l9930
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;main.c: 184:                     t_power = (uint16_t) (power * coef * coef + 0.5);
  2631  000382  DB02               	call	PL106	;call to abstracted procedure
  2632  000384  5121               	movf	_power& (0+255),w,b
  2633  000386  6E1B               	movwf	___xxtofl@val^0,c
  2634  000388  6A1C               	clrf	(___xxtofl@val+1)^0,c
  2635  00038A  6A1D               	clrf	(___xxtofl@val+2)^0,c
  2636  00038C  6A1E               	clrf	(___xxtofl@val+3)^0,c
  2637  00038E  0E01               	movlw	1
  2638  000390  EC52  F016         	call	___xxtofl
  2639  000394  C01B  F066         	movff	?___xxtofl,___flmul@b
  2640  000398  C01C  F067         	movff	?___xxtofl+1,___flmul@b+1
  2641  00039C  C01D  F068         	movff	?___xxtofl+2,___flmul@b+2
  2642  0003A0  C01E  F069         	movff	?___xxtofl+3,___flmul@b+3
  2643  0003A4  EC38  F00F         	call	___flmul	;wreg free
  2644  0003A8  C066  F1F0         	movff	?___flmul,_main$2868
  2645  0003AC  C067  F1F1         	movff	?___flmul+1,_main$2868+1
  2646  0003B0  C068  F1F2         	movff	?___flmul+2,_main$2868+2
  2647  0003B4  C069  F1F3         	movff	?___flmul+3,_main$2868+3
  2648                           
  2649                           ;main.c: 184:                     t_power = (uint16_t) (power * coef * coef + 0.5);
  2650  0003B8  6B83               	clrf	___fladd@a& (0+255),b
  2651  0003BA  6B84               	clrf	(___fladd@a+1)& (0+255),b
  2652  0003BC  6B85               	clrf	(___fladd@a+2)& (0+255),b
  2653  0003BE  0E3F               	movlw	63
  2654  0003C0  6F86               	movwf	(___fladd@a+3)& (0+255),b
  2655  0003C2  DAE2               	call	PL106	;call to abstracted procedure
  2656  0003C4  C1F0  F066         	movff	_main$2868,___flmul@b
  2657  0003C8  C1F1  F067         	movff	_main$2868+1,___flmul@b+1
  2658  0003CC  C1F2  F068         	movff	_main$2868+2,___flmul@b+2
  2659  0003D0  C1F3  F069         	movff	_main$2868+3,___flmul@b+3
  2660  0003D4  EC38  F00F         	call	___flmul	;wreg free
  2661  0003D8  DACE               	call	PL90	;call to abstracted procedure
  2662  0003DA  EC0A  F00E         	call	___fladd	;wreg free
  2663  0003DE  C07F  F0BC         	movff	?___fladd,___fltol@f1
  2664  0003E2  C080  F0BD         	movff	?___fladd+1,___fltol@f1+1
  2665  0003E6  C081  F0BE         	movff	?___fladd+2,___fltol@f1+2
  2666  0003EA  C082  F0BF         	movff	?___fladd+3,___fltol@f1+3
  2667  0003EE  EC2A  F019         	call	___fltol	;wreg free
  2668  0003F2  C0BC  F038         	movff	?___fltol,_t_power
  2669  0003F6  C0BD  F039         	movff	?___fltol+1,_t_power+1
  2670  0003FA  D004               	goto	l9932
  2671  0003FC                     l9930:
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 186:                     t_power = 100;
  2675  0003FC  0E00               	movlw	0
  2676  0003FE  6E39               	movwf	(_t_power+1)^0,c
  2677  000400  0E64               	movlw	100
  2678  000402  6E38               	movwf	_t_power^0,c
  2679  000404                     l9932:
  2680                           
  2681                           ;main.c: 187:                 if (t_power > 100) {
  2682  000404  5039               	movf	(_t_power+1)^0,w,c
  2683  000406  E103               	bnz	u11770
  2684  000408  0E65               	movlw	101
  2685  00040A  5C38               	subwf	_t_power^0,w,c
  2686  00040C  E305               	bnc	l533
  2687  00040E                     u11770:
  2688                           
  2689                           ;main.c: 188:                     t_power = 100;
  2690  00040E  6A39               	clrf	(_t_power+1)^0,c
  2691  000410  0E64               	movlw	100
  2692  000412  6E38               	movwf	_t_power^0,c
  2693                           
  2694                           ;main.c: 189:                     is_stab = 0;
  2695  000414  9C43               	bcf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2696                           
  2697                           ;main.c: 190:                 } else
  2698  000416  D001               	goto	l9938
  2699  000418                     l533:
  2700                           
  2701                           ;main.c: 191:                     is_stab = 1;
  2702  000418  8C43               	bsf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2703  00041A                     l9938:
  2704                           
  2705                           ;main.c: 193:             LATAbits.LA3 = !LATAbits.LA3;
  2706  00041A  B689               	btfsc	137,3,c	;volatile
  2707  00041C  D004               	goto	u11780
  2708  00041E  0100               	movlb	0	; () banked
  2709  000420  6BFB               	clrf	??_main& (0+255),b
  2710  000422  2BFB               	incf	??_main& (0+255),f,b
  2711  000424  D002               	goto	u11798
  2712  000426                     u11780:
  2713  000426  0100               	movlb	0	; () banked
  2714  000428  6BFB               	clrf	??_main& (0+255),b
  2715  00042A                     u11798:
  2716  00042A  47FB               	rlncf	??_main& (0+255),f,b
  2717  00042C  47FB               	rlncf	??_main& (0+255),f,b
  2718  00042E  47FB               	rlncf	??_main& (0+255),f,b
  2719  000430  5089               	movf	137,w,c	;volatile
  2720  000432  19FB               	xorwf	??_main& (0+255),w,b
  2721  000434  0BF7               	andlw	-9
  2722  000436  19FB               	xorwf	??_main& (0+255),w,b
  2723  000438  6E89               	movwf	137,c	;volatile
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 194:             watt_disp = calc_power(t_power, t_res, U_real);
  2727  00043A  EC27  F00C         	call	PL110	;call to abstracted procedure
  2728  00043E  C19B  F06E         	movff	_U_real,calc_power@u_rl
  2729  000442  C19C  F06F         	movff	_U_real+1,calc_power@u_rl+1
  2730  000446  5038               	movf	_t_power^0,w,c
  2731  000448  EC61  F013         	call	_calc_power
  2732  00044C  C06A  F118         	movff	?_calc_power,_watt_disp
  2733  000450  C06B  F119         	movff	?_calc_power+1,_watt_disp+1
  2734  000454  D245               	goto	l10222
  2735  000456                     l9942:
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 202:                 if (tick_t1 >= 6) {
  2739  000456  0E05               	movlw	5
  2740  000458  0101               	movlb	1	; () banked
  2741  00045A  652C               	cpfsgt	_tick_t1& (0+255),b
  2742  00045C  D003               	goto	l9948
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;main.c: 203:                     tick_t1 = 0;
  2746  00045E  6B2C               	clrf	_tick_t1& (0+255),b
  2747                           
  2748                           ; BSR set to: 1
  2749                           ;main.c: 210:                     show_lcd_main();
  2750  000460  EC83  F00A         	call	_show_lcd_main	;wreg free
  2751  000464                     l9948:
  2752                           
  2753                           ;main.c: 215:                 if (EncData < 0)
  2754  000464  0101               	movlb	1	; () banked
  2755  000466  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2756  000468  D003               	goto	l9952
  2757                           
  2758                           ; BSR set to: 1
  2759                           ;main.c: 216:                     EncData = 0;
  2760  00046A  6B16               	clrf	_EncData& (0+255),b
  2761  00046C  6B17               	clrf	(_EncData+1)& (0+255),b
  2762  00046E  D00A               	goto	l9956
  2763  000470                     l9952:
  2764                           
  2765                           ; BSR set to: 1
  2766  000470  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2767  000472  D008               	goto	l9956
  2768  000474  5117               	movf	(_EncData+1)& (0+255),w,b
  2769  000476  E103               	bnz	u11820
  2770  000478  0E65               	movlw	101
  2771  00047A  5D16               	subwf	_EncData& (0+255),w,b
  2772  00047C  E303               	bnc	l9956
  2773  00047E                     u11820:
  2774                           
  2775                           ; BSR set to: 1
  2776                           ;main.c: 218:                     EncData = 100;
  2777  00047E  6B17               	clrf	(_EncData+1)& (0+255),b
  2778  000480  0E64               	movlw	100
  2779  000482  6F16               	movwf	_EncData& (0+255),b
  2780  000484                     l9956:
  2781                           
  2782                           ; BSR set to: 1
  2783                           ;main.c: 220:                 if (pressed_key == 1) {
  2784  000484  0522               	decf	_pressed_key& (0+255),w,b
  2785  000486  E107               	bnz	l9960
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;main.c: 222:                     power = EncData;
  2789  000488  C116  F121         	movff	_EncData,_power
  2790                           
  2791                           ;main.c: 223:                     is_power = 1;
  2792  00048C  8A43               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2793                           
  2794                           ;main.c: 224:                     power_100 = 0;
  2795  00048E  9643               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2796                           
  2797                           ;main.c: 225:                     powerOFF = 0;
  2798  000490  6B1C               	clrf	main@powerOFF& (0+255),b
  2799                           
  2800                           ;main.c: 226:                     sound_enable = 0;
  2801  000492  6B29               	clrf	_sound_enable& (0+255),b
  2802                           
  2803                           ;main.c: 227:                     LATCbits.LATC5 = 0;
  2804  000494  9A8B               	bcf	139,5,c	;volatile
  2805  000496                     l9960:
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;main.c: 230:                 if (pressed_key == 2) {
  2809  000496  0E02               	movlw	2
  2810  000498  1922               	xorwf	_pressed_key& (0+255),w,b
  2811  00049A  E001 D693          	bnz	l515
  2812                           
  2813                           ; BSR set to: 1
  2814                           ;main.c: 231:                     clearLCD();
  2815  00049E  EC3E  F01F         	call	_clearLCD	;wreg free
  2816                           
  2817                           ;main.c: 232:                     sel_main = 3;
  2818  0004A2  0E03               	movlw	3
  2819  0004A4  0101               	movlb	1	; () banked
  2820  0004A6  6F1D               	movwf	_sel_main& (0+255),b
  2821                           
  2822                           ; BSR set to: 1
  2823                           ;main.c: 233:                     lcd_gotoxy(5, 2);
  2824  0004A8  0E02               	movlw	2
  2825  0004AA  6E1F               	movwf	lcd_gotoxy@y^0,c
  2826  0004AC  0E05               	movlw	5
  2827  0004AE  EC12  F01D         	call	_lcd_gotoxy
  2828                           
  2829                           ;main.c: 234:                     lcd_putc(0x04);
  2830  0004B2  0E04               	movlw	4
  2831  0004B4  EC59  F01F         	call	_lcd_putc
  2832                           
  2833                           ;main.c: 235:                     lcd_putc(0x05);
  2834  0004B8  0E05               	movlw	5
  2835  0004BA  EC59  F01F         	call	_lcd_putc
  2836                           
  2837                           ;main.c: 236:                     lcd_putc(0x05);
  2838  0004BE  0E05               	movlw	5
  2839  0004C0  EC59  F01F         	call	_lcd_putc
  2840                           
  2841                           ;main.c: 237:                     lcd_putc(0x05);
  2842  0004C4  0E05               	movlw	5
  2843  0004C6  EC59  F01F         	call	_lcd_putc
  2844                           
  2845                           ;main.c: 238:                     lcd_putc(0x05);
  2846  0004CA  0E05               	movlw	5
  2847  0004CC  EC59  F01F         	call	_lcd_putc
  2848                           
  2849                           ;main.c: 239:                     lcd_putc(' ');
  2850  0004D0  0E20               	movlw	32
  2851  0004D2  EC59  F01F         	call	_lcd_putc
  2852                           
  2853                           ;main.c: 240:                     lcd_putc(0x06);
  2854  0004D6  0E06               	movlw	6
  2855  0004D8  EC59  F01F         	call	_lcd_putc
  2856                           
  2857                           ;main.c: 241:                     lcd_putc(' ');
  2858  0004DC  0E20               	movlw	32
  2859  0004DE  EC59  F01F         	call	_lcd_putc
  2860                           
  2861                           ;main.c: 242:                     lcd_putc(0x05);
  2862  0004E2  0E05               	movlw	5
  2863  0004E4  EC59  F01F         	call	_lcd_putc
  2864                           
  2865                           ;main.c: 243:                     lcd_putc(0x05);
  2866  0004E8  0E05               	movlw	5
  2867  0004EA  EC59  F01F         	call	_lcd_putc
  2868                           
  2869                           ;main.c: 244:                     lcd_putc(0x05);
  2870  0004EE  0E05               	movlw	5
  2871  0004F0  EC59  F01F         	call	_lcd_putc
  2872                           
  2873                           ;main.c: 245:                     lcd_putc(0x05);
  2874  0004F4  0E05               	movlw	5
  2875  0004F6  EC59  F01F         	call	_lcd_putc
  2876                           
  2877                           ;main.c: 246:                     lcd_putc(0x03);
  2878  0004FA  0E03               	movlw	3
  2879  0004FC  EC59  F01F         	call	_lcd_putc
  2880                           
  2881                           ;main.c: 248:                     EncData = 0;
  2882  000500  0101               	movlb	1	; () banked
  2883  000502  6B16               	clrf	_EncData& (0+255),b
  2884  000504  D08E               	goto	L2
  2885  000506                     l9996:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 256:                 if (EncData > 4)
  2889  000506  0101               	movlb	1	; () banked
  2890  000508  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2891  00050A  D008               	goto	l10000
  2892  00050C  5117               	movf	(_EncData+1)& (0+255),w,b
  2893  00050E  E103               	bnz	u11850
  2894  000510  0E05               	movlw	5
  2895  000512  5D16               	subwf	_EncData& (0+255),w,b
  2896  000514  E303               	bnc	l10000
  2897  000516                     u11850:
  2898                           
  2899                           ; BSR set to: 1
  2900                           ;main.c: 257:                     EncData = 4;
  2901  000516  6B17               	clrf	(_EncData+1)& (0+255),b
  2902  000518  0E04               	movlw	4
  2903  00051A  6F16               	movwf	_EncData& (0+255),b
  2904  00051C                     l10000:
  2905                           
  2906                           ; BSR set to: 1
  2907                           ;main.c: 258:                 if (EncData < 0)
  2908  00051C  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2909  00051E  D036               	goto	l10026
  2910                           
  2911                           ; BSR set to: 1
  2912                           ;main.c: 259:                     EncData = 0;
  2913  000520  6B16               	clrf	_EncData& (0+255),b
  2914  000522  6B17               	clrf	(_EncData+1)& (0+255),b
  2915  000524  D033               	goto	l10026
  2916  000526                     l10004:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 263:                         lcd_gotoxy(1, 3);
  2920  000526  DA39               	call	PL128	;call to abstracted procedure
  2921  000528  EC12  F01D         	call	_lcd_gotoxy
  2922                           
  2923                           ;main.c: 264:                         lcdPrint("   EDIT RESISTANCE  ");
  2924  00052C  0EC6               	movlw	low STR_5
  2925  00052E  0100               	movlb	0	; () banked
  2926  000530  6F60               	movwf	lcdPrint@t& (0+255),b
  2927  000532  0E7E               	movlw	high STR_5
  2928  000534  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  2929  000536  ECD9  F016         	call	_lcdPrint	;wreg free
  2930                           
  2931                           ;main.c: 265:                         break;
  2932  00053A  D034               	goto	l10028
  2933  00053C                     l10008:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 267:                         lcd_gotoxy(1, 3);
  2937  00053C  DA2E               	call	PL128	;call to abstracted procedure
  2938  00053E  EC12  F01D         	call	_lcd_gotoxy
  2939                           
  2940                           ;main.c: 268:                         lcdPrint("  SAVE LOAD DEFAULT ");
  2941  000542  0EDB               	movlw	low STR_6
  2942  000544  0100               	movlb	0	; () banked
  2943  000546  6F60               	movwf	lcdPrint@t& (0+255),b
  2944  000548  0E7E               	movlw	high STR_6
  2945  00054A  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  2946  00054C  ECD9  F016         	call	_lcdPrint	;wreg free
  2947                           
  2948                           ;main.c: 269:                         break;
  2949  000550  D029               	goto	l10028
  2950  000552                     l10012:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 271:                         lcd_gotoxy(1, 3);
  2954  000552  DA23               	call	PL128	;call to abstracted procedure
  2955  000554  EC12  F01D         	call	_lcd_gotoxy
  2956                           
  2957                           ;main.c: 272:                         lcdPrint("   SET 100% POWER   ");
  2958  000558  0EB1               	movlw	low STR_7
  2959  00055A  0100               	movlb	0	; () banked
  2960  00055C  6F60               	movwf	lcdPrint@t& (0+255),b
  2961  00055E  0E7E               	movlw	high STR_7
  2962  000560  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  2963  000562  ECD9  F016         	call	_lcdPrint	;wreg free
  2964                           
  2965                           ;main.c: 273:                         break;
  2966  000566  D01E               	goto	l10028
  2967  000568                     l10016:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 275:                         lcd_gotoxy(1, 3);
  2971  000568  DA18               	call	PL128	;call to abstracted procedure
  2972  00056A  EC12  F01D         	call	_lcd_gotoxy
  2973                           
  2974                           ;main.c: 276:                         lcdPrint("     ALARM TEMP     ");
  2975  00056E  DA2D               	call	PL174	;call to abstracted procedure
  2976  000570  ECD9  F016         	call	_lcdPrint	;wreg free
  2977                           
  2978                           ;main.c: 277:                         break;
  2979  000574  D017               	goto	l10028
  2980  000576                     l10020:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;main.c: 279:                         lcd_gotoxy(1, 3);
  2984  000576  DA11               	call	PL128	;call to abstracted procedure
  2985  000578  EC12  F01D         	call	_lcd_gotoxy
  2986                           
  2987                           ;main.c: 280:                         lcdPrint("         EXIT        ");
  2988  00057C  0E5A               	movlw	low STR_9
  2989  00057E  0100               	movlb	0	; () banked
  2990  000580  6F60               	movwf	lcdPrint@t& (0+255),b
  2991  000582  0E7E               	movlw	high STR_9
  2992  000584  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  2993  000586  ECD9  F016         	call	_lcdPrint	;wreg free
  2994                           
  2995                           ;main.c: 281:                         break; }
  2996  00058A  D00C               	goto	l10028
  2997  00058C                     l10026:
  2998                           
  2999                           ; BSR set to: 1
  3000                           
  3001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3002                           ; Switch size 1, requested type "space"
  3003                           ; Number of cases is 1, Range of values is 0 to 0
  3004                           ; switch strategies available:
  3005                           ; Name         Instructions Cycles
  3006                           ; simple_byte            4     3 (average)
  3007                           ;	Chosen strategy is simple_byte
  3008  00058C  DA11               	call	PL146	;call to abstracted procedure
  3009  00058E  E10A               	bnz	l10028
  3010                           
  3011                           ; BSR set to: 0
  3012                           ; Switch size 1, requested type "space"
  3013                           ; Number of cases is 5, Range of values is 0 to 4
  3014                           ; switch strategies available:
  3015                           ; Name         Instructions Cycles
  3016                           ; simple_byte           16     9 (average)
  3017                           ;	Chosen strategy is simple_byte
  3018  000590  51FB               	movf	??_main& (0+255),w,b
  3019  000592  E0C9               	bz	l10004
  3020  000594  0A01               	xorlw	1	; case 1
  3021  000596  E0D2               	bz	l10008
  3022  000598  0A03               	xorlw	3	; case 2
  3023  00059A  E0DB               	bz	l10012
  3024  00059C  0A01               	xorlw	1	; case 3
  3025  00059E  E0E4               	bz	l10016
  3026  0005A0  0A07               	xorlw	7	; case 4
  3027  0005A2  E0E9               	bz	l10020
  3028  0005A4                     l10028:
  3029                           
  3030                           ;main.c: 282:                 if (pressed_key == 1) {
  3031  0005A4  0101               	movlb	1	; () banked
  3032  0005A6  0522               	decf	_pressed_key& (0+255),w,b
  3033  0005A8  E05F               	bz	l10086
  3034  0005AA  D60C               	goto	l515
  3035  0005AC                     l556:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;main.c: 285:                             t_power = 0;
  3039  0005AC  6A38               	clrf	_t_power^0,c
  3040  0005AE  6A39               	clrf	(_t_power+1)^0,c
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;main.c: 286:                             clearLCD();
  3044  0005B0  EC3E  F01F         	call	_clearLCD	;wreg free
  3045                           
  3046                           ;main.c: 287:                             EncData = r_whole;
  3047  0005B4  C11F  F116         	movff	_r_whole,_EncData
  3048  0005B8  0101               	movlb	1	; () banked
  3049  0005BA  6B17               	clrf	(_EncData+1)& (0+255),b
  3050                           
  3051                           ; BSR set to: 1
  3052                           ;main.c: 288:                             whole_dec = 1;
  3053  0005BC  8243               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3054                           
  3055                           ;main.c: 289:                             lcd_gotoxy(1, 2);
  3056  0005BE  D9F0               	call	PL130	;call to abstracted procedure
  3057  0005C0  EC12  F01D         	call	_lcd_gotoxy
  3058                           
  3059                           ;main.c: 290:                             lcdPrint("  - Whole part -  ");
  3060  0005C4  D9FC               	call	PL160	;call to abstracted procedure
  3061  0005C6  ECD9  F016         	call	_lcdPrint	;wreg free
  3062                           
  3063                           ;main.c: 291:                             lcd_gotoxy(1, 3);
  3064  0005CA  D9E7               	call	PL128	;call to abstracted procedure
  3065  0005CC  EC12  F01D         	call	_lcd_gotoxy
  3066                           
  3067                           ;main.c: 292:                             lcdPrint("Long press for save");
  3068  0005D0  0E19               	movlw	low STR_11
  3069  0005D2  0100               	movlb	0	; () banked
  3070  0005D4  6F60               	movwf	lcdPrint@t& (0+255),b
  3071  0005D6  0E7F               	movlw	high STR_11
  3072  0005D8  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  3073  0005DA  ECD9  F016         	call	_lcdPrint	;wreg free
  3074                           
  3075                           ;main.c: 293:                             lcd_gotoxy(1, 4);
  3076  0005DE  EC41  F00C         	call	PL212	;call to abstracted procedure
  3077  0005E2  EC12  F01D         	call	_lcd_gotoxy
  3078                           
  3079                           ;main.c: 294:                             lcdPrint("    to EEPROM.");
  3080  0005E6  0E53               	movlw	low STR_12
  3081  0005E8  0100               	movlb	0	; () banked
  3082  0005EA  6F60               	movwf	lcdPrint@t& (0+255),b
  3083  0005EC  0E7F               	movlw	high STR_12
  3084  0005EE  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  3085  0005F0  ECD9  F016         	call	_lcdPrint	;wreg free
  3086                           
  3087                           ;main.c: 295:                             sel_main = 1;
  3088  0005F4  0E01               	movlw	1
  3089  0005F6  0101               	movlb	1	; () banked
  3090  0005F8  6F1D               	movwf	_sel_main& (0+255),b
  3091                           
  3092                           ;main.c: 296:                             break;
  3093  0005FA  D5E4               	goto	l515
  3094  0005FC                     l558:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;main.c: 298:                             sel_main = 0;
  3098  0005FC  0101               	movlb	1	; () banked
  3099  0005FE  6B1D               	clrf	_sel_main& (0+255),b
  3100                           
  3101                           ; BSR set to: 1
  3102                           ;main.c: 299:                             write_eep(2, power);
  3103  000600  C121  F01B         	movff	_power,write_eep@data
  3104  000604  0E02               	movlw	2
  3105  000606  EC00  F01F         	call	_write_eep
  3106                           
  3107                           ;main.c: 300:                             EncData = power;
  3108  00060A  D9CD               	call	PL132	;call to abstracted procedure
  3109                           
  3110                           ; BSR set to: 1
  3111                           ;main.c: 301:                             clearLCD();
  3112  00060C  EC3E  F01F         	call	_clearLCD	;wreg free
  3113                           
  3114                           ;main.c: 302:                             break;
  3115  000610  D5D9               	goto	l515
  3116  000612                     l559:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 304:                             sel_main = 0;
  3120  000612  0101               	movlb	1	; () banked
  3121  000614  6B1D               	clrf	_sel_main& (0+255),b
  3122                           
  3123                           ; BSR set to: 1
  3124                           ;main.c: 305:                             clearLCD();
  3125  000616  EC3E  F01F         	call	_clearLCD	;wreg free
  3126                           
  3127                           ;main.c: 306:                             power_100 = 1;
  3128  00061A  8643               	bsf	(_power_100/(0+8))^0,_power_100& (0+7),c
  3129  00061C                     l10058:
  3130                           
  3131                           ;main.c: 307:                             EncData = power;
  3132  00061C  C121  F116         	movff	_power,_EncData
  3133  000620  0101               	movlb	1	; () banked
  3134  000622                     L2:
  3135  000622  6B17               	clrf	(_EncData+1)& (0+255),b
  3136                           
  3137                           ;main.c: 308:                             break;
  3138  000624  D5CF               	goto	l515
  3139  000626                     l10060:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 310:                             sel_main = 4;
  3143  000626  0E04               	movlw	4
  3144  000628  0101               	movlb	1	; () banked
  3145  00062A  6F1D               	movwf	_sel_main& (0+255),b
  3146                           
  3147                           ; BSR set to: 1
  3148                           ;main.c: 311:                             clearLCD();
  3149  00062C  EC3E  F01F         	call	_clearLCD	;wreg free
  3150                           
  3151                           ;main.c: 312:                             AlarmTempT = AlarmTemp;
  3152  000630  C127  F126         	movff	_AlarmTemp,_AlarmTempT
  3153                           
  3154                           ;main.c: 313:                             alarm_enable = 0;
  3155  000634  9043               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3156                           
  3157                           ;main.c: 314:                             EncData = AlarmTempT;
  3158  000636  C126  F116         	movff	_AlarmTempT,_EncData
  3159  00063A  0101               	movlb	1	; () banked
  3160  00063C  6B17               	clrf	(_EncData+1)& (0+255),b
  3161                           
  3162                           ; BSR set to: 1
  3163                           ;main.c: 315:                             TempEnT = TempEn;
  3164  00063E  C125  F124         	movff	_TempEn,_TempEnT
  3165                           
  3166                           ; BSR set to: 1
  3167                           ;main.c: 316:                             lcd_gotoxy(1, 1);
  3168  000642  0E01               	movlw	1
  3169  000644  6E1F               	movwf	lcd_gotoxy@y^0,c
  3170  000646  EC12  F01D         	call	_lcd_gotoxy
  3171                           
  3172                           ;main.c: 317:                             lcdPrint("     ALARM TEMP     ");
  3173  00064A  D9BF               	call	PL174	;call to abstracted procedure
  3174  00064C  ECD9  F016         	call	_lcdPrint	;wreg free
  3175                           
  3176                           ;main.c: 318:                             lcd_gotoxy(1, 2);
  3177  000650  D9A7               	call	PL130	;call to abstracted procedure
  3178  000652  EC12  F01D         	call	_lcd_gotoxy
  3179                           
  3180                           ;main.c: 319:                             lcd_putc(0x03);
  3181  000656  0E03               	movlw	3
  3182  000658  EC59  F01F         	call	_lcd_putc
  3183                           
  3184                           ;main.c: 320:                             break;
  3185  00065C  D5B3               	goto	l515
  3186  00065E                     l561:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;main.c: 322:                             sel_main = 0;
  3190  00065E  0101               	movlb	1	; () banked
  3191  000660  6B1D               	clrf	_sel_main& (0+255),b
  3192                           
  3193                           ; BSR set to: 1
  3194                           ;main.c: 323:                             clearLCD();
  3195  000662  EC3E  F01F         	call	_clearLCD	;wreg free
  3196  000666  D7DA               	goto	l10058
  3197  000668                     l10086:
  3198                           
  3199                           ; BSR set to: 1
  3200                           
  3201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3202                           ; Switch size 1, requested type "space"
  3203                           ; Number of cases is 1, Range of values is 0 to 0
  3204                           ; switch strategies available:
  3205                           ; Name         Instructions Cycles
  3206                           ; simple_byte            4     3 (average)
  3207                           ;	Chosen strategy is simple_byte
  3208  000668  D9A3               	call	PL146	;call to abstracted procedure
  3209  00066A  E001 D5AB          	bnz	l515
  3210                           
  3211                           ; BSR set to: 0
  3212                           ; Switch size 1, requested type "space"
  3213                           ; Number of cases is 5, Range of values is 0 to 4
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte           16     9 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218  00066E  51FB               	movf	??_main& (0+255),w,b
  3219  000670  E09D               	bz	l556
  3220  000672  0A01               	xorlw	1	; case 1
  3221  000674  E0C3               	bz	l558
  3222  000676  0A03               	xorlw	3	; case 2
  3223  000678  E0CC               	bz	l559
  3224  00067A  0A01               	xorlw	1	; case 3
  3225  00067C  E0D4               	bz	l10060
  3226  00067E  0A07               	xorlw	7	; case 4
  3227  000680  E0EE               	bz	l561
  3228  000682  D5A0               	goto	l515
  3229  000684                     l562:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 335:                 if (whole_dec) {
  3233  000684  A243               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3234  000686  D012               	goto	l10096
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 336:                     if (EncData >= 100)
  3238  000688  0101               	movlb	1	; () banked
  3239  00068A  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3240  00068C  D008               	goto	l10092
  3241  00068E  5117               	movf	(_EncData+1)& (0+255),w,b
  3242  000690  E103               	bnz	u11890
  3243  000692  0E64               	movlw	100
  3244  000694  5D16               	subwf	_EncData& (0+255),w,b
  3245  000696  E303               	bnc	l10092
  3246  000698                     u11890:
  3247                           
  3248                           ; BSR set to: 1
  3249                           ;main.c: 337:                         EncData = 99;
  3250  000698  6B17               	clrf	(_EncData+1)& (0+255),b
  3251  00069A  0E63               	movlw	99
  3252  00069C  6F16               	movwf	_EncData& (0+255),b
  3253  00069E                     l10092:
  3254                           
  3255                           ; BSR set to: 1
  3256                           ;main.c: 338:                     if (EncData < 0)
  3257  00069E  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3258  0006A0  D002               	goto	l565
  3259                           
  3260                           ; BSR set to: 1
  3261                           ;main.c: 339:                         EncData = 0;
  3262  0006A2  6B16               	clrf	_EncData& (0+255),b
  3263  0006A4  6B17               	clrf	(_EncData+1)& (0+255),b
  3264  0006A6                     l565:
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;main.c: 340:                     r_whole = (uint8_t) EncData;
  3268  0006A6  C116  F11F         	movff	_EncData,_r_whole
  3269                           
  3270                           ;main.c: 341:                 } else {
  3271  0006AA  D033               	goto	l10116
  3272  0006AC                     l10096:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;main.c: 342:                     if (EncData >= 100)
  3276  0006AC  0101               	movlb	1	; () banked
  3277  0006AE  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3278  0006B0  D009               	goto	l10100
  3279  0006B2  5117               	movf	(_EncData+1)& (0+255),w,b
  3280  0006B4  E103               	bnz	u11910
  3281  0006B6  0E64               	movlw	100
  3282  0006B8  5D16               	subwf	_EncData& (0+255),w,b
  3283  0006BA  E304               	bnc	l10100
  3284  0006BC                     u11910:
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;main.c: 343:                         EncData = 99;
  3288  0006BC  0E00               	movlw	0
  3289  0006BE  6F17               	movwf	(_EncData+1)& (0+255),b
  3290  0006C0  0E63               	movlw	99
  3291  0006C2  6F16               	movwf	_EncData& (0+255),b
  3292  0006C4                     l10100:
  3293                           
  3294                           ; BSR set to: 1
  3295                           ;main.c: 344:                     if ((EncData < 10) && (EncData > 5))
  3296  0006C4  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3297  0006C6  D005               	goto	u11920
  3298  0006C8  5117               	movf	(_EncData+1)& (0+255),w,b
  3299  0006CA  E10D               	bnz	l10106
  3300  0006CC  0E0A               	movlw	10
  3301  0006CE  5D16               	subwf	_EncData& (0+255),w,b
  3302  0006D0  E20A               	bc	l10106
  3303  0006D2                     u11920:
  3304                           
  3305                           ; BSR set to: 1
  3306  0006D2  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3307  0006D4  D008               	goto	l10106
  3308  0006D6  5117               	movf	(_EncData+1)& (0+255),w,b
  3309  0006D8  E103               	bnz	u11930
  3310  0006DA  0E06               	movlw	6
  3311  0006DC  5D16               	subwf	_EncData& (0+255),w,b
  3312  0006DE  E303               	bnc	l10106
  3313  0006E0                     u11930:
  3314                           
  3315                           ; BSR set to: 1
  3316                           ;main.c: 345:                         EncData = 0;
  3317  0006E0  6B16               	clrf	_EncData& (0+255),b
  3318  0006E2  6B17               	clrf	(_EncData+1)& (0+255),b
  3319  0006E4  D010               	goto	l10112
  3320  0006E6                     l10106:
  3321                           
  3322                           ; BSR set to: 1
  3323  0006E6  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3324  0006E8  D00E               	goto	l10112
  3325  0006EA  5117               	movf	(_EncData+1)& (0+255),w,b
  3326  0006EC  E102               	bnz	u11940
  3327  0006EE  0516               	decf	_EncData& (0+255),w,b
  3328  0006F0  E30A               	bnc	l10112
  3329  0006F2                     u11940:
  3330                           
  3331                           ; BSR set to: 1
  3332  0006F2  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3333  0006F4  D005               	goto	u11950
  3334  0006F6  5117               	movf	(_EncData+1)& (0+255),w,b
  3335  0006F8  E106               	bnz	l10112
  3336  0006FA  0E05               	movlw	5
  3337  0006FC  5D16               	subwf	_EncData& (0+255),w,b
  3338  0006FE  E203               	bc	l10112
  3339  000700                     u11950:
  3340                           
  3341                           ; BSR set to: 1
  3342                           ;main.c: 347:                         EncData = 10;
  3343  000700  6B17               	clrf	(_EncData+1)& (0+255),b
  3344  000702  0E0A               	movlw	10
  3345  000704  6F16               	movwf	_EncData& (0+255),b
  3346  000706                     l10112:
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;main.c: 348:                     if (EncData < 0)
  3350  000706  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3351  000708  D002               	goto	l571
  3352                           
  3353                           ; BSR set to: 1
  3354                           ;main.c: 349:                         EncData = 0;
  3355  00070A  6B16               	clrf	_EncData& (0+255),b
  3356  00070C  6B17               	clrf	(_EncData+1)& (0+255),b
  3357  00070E                     l571:
  3358                           
  3359                           ; BSR set to: 1
  3360                           ;main.c: 351:                     r_dec = (uint8_t) EncData;
  3361  00070E  C116  F11E         	movff	_EncData,_r_dec
  3362  000712                     l10116:
  3363                           
  3364                           ; BSR set to: 1
  3365                           ;main.c: 353:                 sprintf(TxtBuf, "Resist:%02u.%u Ohm ", r_whole, r_dec);
  3366  000712  D92C               	call	PL88	;call to abstracted procedure
  3367  000714  0E05               	movlw	low STR_14
  3368  000716  6FD7               	movwf	sprintf@fmt& (0+255),b
  3369  000718  0E7F               	movlw	high STR_14
  3370  00071A  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3371  00071C  C11F  F1D9         	movff	_r_whole,?_sprintf+4
  3372  000720  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  3373  000722  C11E  F1DB         	movff	_r_dec,?_sprintf+6
  3374  000726  6BDC               	clrf	(?_sprintf+7)& (0+255),b
  3375  000728  ECEF  F01C         	call	_sprintf	;wreg free
  3376                           
  3377                           ; BSR set to: 1
  3378                           ;main.c: 354:                 lcd_gotoxy(1, 1);
  3379  00072C  0E01               	movlw	1
  3380  00072E  6E1F               	movwf	lcd_gotoxy@y^0,c
  3381  000730  EC12  F01D         	call	_lcd_gotoxy
  3382                           
  3383                           ;main.c: 355:                 lcdPrint(TxtBuf);
  3384  000734  EC01  F00C         	call	PL14	;call to abstracted procedure
  3385  000738  ECD9  F016         	call	_lcdPrint	;wreg free
  3386                           
  3387                           ;main.c: 357:                 if (pressed_key == 1) {
  3388  00073C  0101               	movlb	1	; () banked
  3389  00073E  0522               	decf	_pressed_key& (0+255),w,b
  3390  000740  E11E               	bnz	l10138
  3391                           
  3392                           ; BSR set to: 1
  3393                           ;main.c: 358:                     whole_dec = ~whole_dec;
  3394  000742  B243               	btfsc	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3395  000744  D002               	goto	u11980
  3396  000746  8243               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3397  000748  D001               	goto	u11995
  3398  00074A                     u11980:
  3399  00074A  9243               	bcf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3400  00074C                     u11995:
  3401                           
  3402                           ;main.c: 359:                     if (whole_dec) {
  3403  00074C  A243               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3404  00074E  D009               	goto	l10132
  3405                           
  3406                           ;main.c: 360:                         lcd_gotoxy(1, 2);
  3407  000750  D927               	call	PL130	;call to abstracted procedure
  3408  000752  EC12  F01D         	call	_lcd_gotoxy
  3409                           
  3410                           ;main.c: 361:                         lcdPrint("  - Whole part -  ");
  3411  000756  D933               	call	PL160	;call to abstracted procedure
  3412  000758  ECD9  F016         	call	_lcdPrint	;wreg free
  3413                           
  3414                           ;main.c: 362:                         EncData = r_whole;
  3415  00075C  C11F  F116         	movff	_r_whole,_EncData
  3416  000760  D00C               	goto	L3
  3417  000762                     l10132:
  3418                           
  3419                           ;main.c: 364:                         lcd_gotoxy(1, 2);
  3420  000762  D91E               	call	PL130	;call to abstracted procedure
  3421  000764  EC12  F01D         	call	_lcd_gotoxy
  3422                           
  3423                           ;main.c: 365:                         lcdPrint("  - Fract part -  ");
  3424  000768  0E40               	movlw	low STR_16
  3425  00076A  0100               	movlb	0	; () banked
  3426  00076C  6F60               	movwf	lcdPrint@t& (0+255),b
  3427  00076E  0E7F               	movlw	high STR_16
  3428  000770  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  3429  000772  ECD9  F016         	call	_lcdPrint	;wreg free
  3430                           
  3431                           ;main.c: 366:                         EncData = r_dec;
  3432  000776  C11E  F116         	movff	_r_dec,_EncData
  3433  00077A                     L3:
  3434  00077A  0101               	movlb	1	; () banked
  3435  00077C  6B17               	clrf	(_EncData+1)& (0+255),b
  3436  00077E                     l10138:
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 370:                 if (pressed_key == 2) {
  3440  00077E  0E02               	movlw	2
  3441  000780  1922               	xorwf	_pressed_key& (0+255),w,b
  3442  000782  E001 D51F          	bnz	l515
  3443                           
  3444                           ; BSR set to: 1
  3445                           ;main.c: 371:                     clearLCD();
  3446  000786  EC3E  F01F         	call	_clearLCD	;wreg free
  3447                           
  3448                           ;main.c: 372:                     sel_main = 0;
  3449  00078A  0101               	movlb	1	; () banked
  3450  00078C  6B1D               	clrf	_sel_main& (0+255),b
  3451                           
  3452                           ; BSR set to: 1
  3453                           ;main.c: 374:                     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  3454  00078E  D8C0               	call	PL22	;call to abstracted procedure
  3455  000790  EC08  F01C         	call	___lmul	;wreg free
  3456  000794  D8D6               	call	PL30	;call to abstracted procedure
  3457                           
  3458                           ; BSR set to: 1
  3459                           ;main.c: 376:                     write_eep(0, r_whole);
  3460  000796  C11F  F01B         	movff	_r_whole,write_eep@data
  3461  00079A  0E00               	movlw	0
  3462  00079C  EC00  F01F         	call	_write_eep
  3463                           
  3464                           ;main.c: 377:                     write_eep(1, r_dec);
  3465  0007A0  C11E  F01B         	movff	_r_dec,write_eep@data
  3466  0007A4  0E01               	movlw	1
  3467  0007A6  EC00  F01F         	call	_write_eep
  3468                           
  3469                           ;main.c: 378:                     EncData = power;
  3470  0007AA  D8FD               	call	PL132	;call to abstracted procedure
  3471                           
  3472                           ; BSR set to: 1
  3473                           ;main.c: 379:                         inc_data = 0;
  3474  0007AC  9443               	bcf	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  3475  0007AE  D50A               	goto	l515
  3476  0007B0                     l576:
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;main.c: 386:                 if (!alarm_enable) {
  3480  0007B0  B043               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3481  0007B2  D012               	goto	l10162
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;main.c: 387:                     if (EncData > 105)
  3485  0007B4  0101               	movlb	1	; () banked
  3486  0007B6  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3487  0007B8  D008               	goto	l10158
  3488  0007BA  5117               	movf	(_EncData+1)& (0+255),w,b
  3489  0007BC  E103               	bnz	u12030
  3490  0007BE  0E6A               	movlw	106
  3491  0007C0  5D16               	subwf	_EncData& (0+255),w,b
  3492  0007C2  E303               	bnc	l10158
  3493  0007C4                     u12030:
  3494                           
  3495                           ; BSR set to: 1
  3496                           ;main.c: 388:                         EncData = 105;
  3497  0007C4  6B17               	clrf	(_EncData+1)& (0+255),b
  3498  0007C6  0E69               	movlw	105
  3499  0007C8  6F16               	movwf	_EncData& (0+255),b
  3500  0007CA                     l10158:
  3501                           
  3502                           ; BSR set to: 1
  3503                           ;main.c: 389:                     if (EncData < 0)
  3504  0007CA  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3505  0007CC  D002               	goto	l579
  3506                           
  3507                           ; BSR set to: 1
  3508                           ;main.c: 390:                         EncData = 0;
  3509  0007CE  6B16               	clrf	_EncData& (0+255),b
  3510  0007D0  6B17               	clrf	(_EncData+1)& (0+255),b
  3511  0007D2                     l579:
  3512                           
  3513                           ; BSR set to: 1
  3514                           ;main.c: 391:                     AlarmTempT = (uint8_t) EncData;
  3515  0007D2  C116  F126         	movff	_EncData,_AlarmTempT
  3516                           
  3517                           ;main.c: 393:                 } else {
  3518  0007D6  D009               	goto	l10170
  3519  0007D8                     l10162:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;main.c: 394:                     if (count_enc < 0)
  3523  0007D8  0101               	movlb	1	; () banked
  3524  0007DA  BF20               	btfsc	_count_enc& (0+255),7,b
  3525                           
  3526                           ; BSR set to: 1
  3527                           ;main.c: 395:                         TempEnT = 0;
  3528  0007DC  6B24               	clrf	_TempEnT& (0+255),b
  3529                           
  3530                           ; BSR set to: 1
  3531                           ;main.c: 396:                     if (count_enc > 0)
  3532  0007DE  5120               	movf	_count_enc& (0+255),w,b
  3533  0007E0  0A80               	xorlw	128
  3534  0007E2  0F7F               	addlw	-129
  3535  0007E4  E302               	bnc	l10170
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;main.c: 397:                         TempEnT = 1;
  3539  0007E6  0E01               	movlw	1
  3540  0007E8  6F24               	movwf	_TempEnT& (0+255),b
  3541  0007EA                     l10170:
  3542                           
  3543                           ; BSR set to: 1
  3544                           ;main.c: 400:                 sprintf(TxtBuf, "Temp:%u%c%-4c", AlarmTempT, 7, 'C');
  3545  0007EA  D8C0               	call	PL88	;call to abstracted procedure
  3546  0007EC  0E71               	movlw	low STR_17
  3547  0007EE  6FD7               	movwf	sprintf@fmt& (0+255),b
  3548  0007F0  0E7F               	movlw	high STR_17
  3549  0007F2  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3550  0007F4  C126  F1D9         	movff	_AlarmTempT,?_sprintf+4
  3551  0007F8  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  3552  0007FA  6BDC               	clrf	(?_sprintf+7)& (0+255),b
  3553  0007FC  0E07               	movlw	7
  3554  0007FE  6FDB               	movwf	(?_sprintf+6)& (0+255),b
  3555  000800  6BDE               	clrf	(?_sprintf+9)& (0+255),b
  3556  000802  0E43               	movlw	67
  3557  000804  6FDD               	movwf	(?_sprintf+8)& (0+255),b
  3558  000806  ECEF  F01C         	call	_sprintf	;wreg free
  3559                           
  3560                           ; BSR set to: 1
  3561                           ;main.c: 401:                 lcd_gotoxy(2, 2);
  3562  00080A  0E02               	movlw	2
  3563  00080C  6E1F               	movwf	lcd_gotoxy@y^0,c
  3564  00080E  EC12  F01D         	call	_lcd_gotoxy
  3565                           
  3566                           ;main.c: 402:                 lcdPrint(TxtBuf);
  3567  000812  EC01  F00C         	call	PL14	;call to abstracted procedure
  3568  000816  ECD9  F016         	call	_lcdPrint	;wreg free
  3569                           
  3570                           ;main.c: 404:                 sprintf(TxtBuf, "Alarm:%-3s", (TempEnT) ? "ON" : "OFF");
  3571  00081A  0101               	movlb	1	; () banked
  3572  00081C  5124               	movf	_TempEnT& (0+255),w,b
  3573  00081E  E104               	bnz	l10180
  3574                           
  3575                           ; BSR set to: 1
  3576  000820  0EF5               	movlw	low STR_20
  3577  000822  6FF4               	movwf	_main$1544& (0+255),b
  3578  000824  0E7F               	movlw	high STR_20
  3579  000826  D003               	goto	L4
  3580  000828                     l10180:
  3581                           
  3582                           ; BSR set to: 1
  3583  000828  0EFC               	movlw	low STR_19
  3584  00082A  6FF4               	movwf	_main$1544& (0+255),b
  3585  00082C  0E7F               	movlw	high STR_19
  3586  00082E                     L4:
  3587  00082E  6FF5               	movwf	(_main$1544+1)& (0+255),b
  3588                           
  3589                           ; BSR set to: 1
  3590  000830  D89D               	call	PL88	;call to abstracted procedure
  3591  000832  0EA0               	movlw	low STR_18
  3592  000834  6FD7               	movwf	sprintf@fmt& (0+255),b
  3593  000836  0E7F               	movlw	high STR_18
  3594  000838  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3595  00083A  C1F4  F1D9         	movff	_main$1544,?_sprintf+4
  3596  00083E  C1F5  F1DA         	movff	_main$1544+1,?_sprintf+5
  3597  000842  ECEF  F01C         	call	_sprintf	;wreg free
  3598                           
  3599                           ; BSR set to: 1
  3600                           ;main.c: 405:                 lcd_gotoxy(2, 3);
  3601  000846  0E03               	movlw	3
  3602  000848  6E1F               	movwf	lcd_gotoxy@y^0,c
  3603  00084A  0E02               	movlw	2
  3604  00084C  EC12  F01D         	call	_lcd_gotoxy
  3605                           
  3606                           ;main.c: 406:                 lcdPrint(TxtBuf);
  3607  000850  EC01  F00C         	call	PL14	;call to abstracted procedure
  3608  000854  ECD9  F016         	call	_lcdPrint	;wreg free
  3609                           
  3610                           ;main.c: 408:                 if (pressed_key == 1) {
  3611  000858  0101               	movlb	1	; () banked
  3612  00085A  0522               	decf	_pressed_key& (0+255),w,b
  3613  00085C  E126               	bnz	l10204
  3614                           
  3615                           ; BSR set to: 1
  3616                           ;main.c: 409:                     alarm_enable = ~alarm_enable;
  3617  00085E  B043               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3618  000860  D002               	goto	u12090
  3619  000862  8043               	bsf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3620  000864  D001               	goto	u12105
  3621  000866                     u12090:
  3622  000866  9043               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3623  000868                     u12105:
  3624                           
  3625                           ;main.c: 410:                     if (alarm_enable) {
  3626  000868  A043               	btfss	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3627  00086A  D00D               	goto	l10194
  3628                           
  3629                           ;main.c: 412:                         lcd_gotoxy(1, 3);
  3630  00086C  D896               	call	PL128	;call to abstracted procedure
  3631  00086E  EC12  F01D         	call	_lcd_gotoxy
  3632                           
  3633                           ;main.c: 413:                         lcd_putc(0x03);
  3634  000872  0E03               	movlw	3
  3635  000874  EC59  F01F         	call	_lcd_putc
  3636                           
  3637                           ;main.c: 414:                         lcd_gotoxy(1, 2);
  3638  000878  D893               	call	PL130	;call to abstracted procedure
  3639  00087A  EC12  F01D         	call	_lcd_gotoxy
  3640                           
  3641                           ;main.c: 415:                         lcd_putc(' ');
  3642  00087E  0E20               	movlw	32
  3643  000880  EC59  F01F         	call	_lcd_putc
  3644                           
  3645                           ;main.c: 416:                     } else {
  3646  000884  D012               	goto	l10204
  3647  000886                     l10194:
  3648                           
  3649                           ;main.c: 417:                         EncData = (int8_t) AlarmTempT;
  3650  000886  0101               	movlb	1	; () banked
  3651  000888  5126               	movf	_AlarmTempT& (0+255),w,b
  3652  00088A  6F16               	movwf	_EncData& (0+255),b
  3653  00088C  6B17               	clrf	(_EncData+1)& (0+255),b
  3654  00088E  BF16               	btfsc	_EncData& (0+255),7,b
  3655  000890  0717               	decf	(_EncData+1)& (0+255),f,b
  3656                           
  3657                           ; BSR set to: 1
  3658                           ;main.c: 418:                         lcd_gotoxy(1, 2);
  3659  000892  D886               	call	PL130	;call to abstracted procedure
  3660  000894  EC12  F01D         	call	_lcd_gotoxy
  3661                           
  3662                           ;main.c: 419:                         lcd_putc(0x03);
  3663  000898  0E03               	movlw	3
  3664  00089A  EC59  F01F         	call	_lcd_putc
  3665                           
  3666                           ;main.c: 420:                         lcd_gotoxy(1, 3);
  3667  00089E  D87D               	call	PL128	;call to abstracted procedure
  3668  0008A0  EC12  F01D         	call	_lcd_gotoxy
  3669                           
  3670                           ;main.c: 421:                         lcd_putc(' ');
  3671  0008A4  0E20               	movlw	32
  3672  0008A6  EC59  F01F         	call	_lcd_putc
  3673  0008AA                     l10204:
  3674                           
  3675                           ;main.c: 426:                 if (pressed_key == 2) {
  3676  0008AA  0E02               	movlw	2
  3677  0008AC  0101               	movlb	1	; () banked
  3678  0008AE  1922               	xorwf	_pressed_key& (0+255),w,b
  3679  0008B0  E001 D488          	bnz	l515
  3680                           
  3681                           ; BSR set to: 1
  3682                           ;main.c: 427:                     clearLCD();
  3683  0008B4  EC3E  F01F         	call	_clearLCD	;wreg free
  3684                           
  3685                           ;main.c: 428:                     sel_main = 0;
  3686  0008B8  0101               	movlb	1	; () banked
  3687  0008BA  6B1D               	clrf	_sel_main& (0+255),b
  3688                           
  3689                           ; BSR set to: 1
  3690                           ;main.c: 430:                     EncData = power;
  3691  0008BC  C121  F116         	movff	_power,_EncData
  3692  0008C0  6B17               	clrf	(_EncData+1)& (0+255),b
  3693                           
  3694                           ; BSR set to: 1
  3695                           ;main.c: 431:                     AlarmTemp = AlarmTempT;
  3696  0008C2  C126  F127         	movff	_AlarmTempT,_AlarmTemp
  3697                           
  3698                           ; BSR set to: 1
  3699                           ;main.c: 432:                     TempEn = TempEnT;
  3700  0008C6  C124  F125         	movff	_TempEnT,_TempEn
  3701                           
  3702                           ; BSR set to: 1
  3703                           ;main.c: 433:                     write_eep(3, AlarmTemp);
  3704  0008CA  C127  F01B         	movff	_AlarmTemp,write_eep@data
  3705  0008CE  0E03               	movlw	3
  3706  0008D0  EC00  F01F         	call	_write_eep
  3707                           
  3708                           ;main.c: 434:                     write_eep(4, TempEn);
  3709  0008D4  C125  F01B         	movff	_TempEn,write_eep@data
  3710  0008D8  0E04               	movlw	4
  3711  0008DA  EC00  F01F         	call	_write_eep
  3712  0008DE  D472               	goto	l515
  3713  0008E0                     l10222:
  3714  0008E0  0101               	movlb	1	; () banked
  3715  0008E2  511D               	movf	_sel_main& (0+255),w,b
  3716  0008E4  0100               	movlb	0	; () banked
  3717  0008E6  6FFB               	movwf	??_main& (0+255),b
  3718  0008E8  6BFC               	clrf	(??_main+1)& (0+255),b
  3719                           
  3720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3721                           ; Switch size 1, requested type "space"
  3722                           ; Number of cases is 1, Range of values is 0 to 0
  3723                           ; switch strategies available:
  3724                           ; Name         Instructions Cycles
  3725                           ; simple_byte            4     3 (average)
  3726                           ;	Chosen strategy is simple_byte
  3727  0008EA  51FC               	movf	(??_main+1)& (0+255),w,b
  3728  0008EC  E001 D46A          	bnz	l515
  3729                           
  3730                           ; BSR set to: 0
  3731                           ; Switch size 1, requested type "space"
  3732                           ; Number of cases is 5, Range of values is 0 to 4
  3733                           ; switch strategies available:
  3734                           ; Name         Instructions Cycles
  3735                           ; simple_byte           16     9 (average)
  3736                           ;	Chosen strategy is simple_byte
  3737  0008F0  51FB               	movf	??_main& (0+255),w,b
  3738  0008F2  E101 D5B0          	bz	l9942
  3739  0008F6  0A01               	xorlw	1	; case 1
  3740  0008F8  E101 D6C4          	bz	l562
  3741  0008FC  0A03               	xorlw	3	; case 2
  3742  0008FE  E101 D461          	bz	l515
  3743  000902  0A01               	xorlw	1	; case 3
  3744  000904  E101 D5FF          	bz	l9996
  3745  000908  0A07               	xorlw	7	; case 4
  3746  00090A  E101 D751          	bz	l576
  3747                           
  3748                           ; BSR set to: 0
  3749  00090E  D45A               	goto	l515
  3750  000910                     __end_of_main:
  3751                           	callstack 0
  3752  000910                     PL22:
  3753                           	callstack 19
  3754  000910  511E               	movf	_r_dec& (0+255),w,b
  3755  000912  0D0A               	mullw	10
  3756  000914  CFF3 F0FB          	movff	prodl,??_main
  3757  000918  CFF4 F0FC          	movff	prodh,??_main+1
  3758  00091C  0E00               	movlw	0
  3759  00091E  0100               	movlb	0	; () banked
  3760  000920  BFFC               	btfsc	(??_main+1)& (0+255),7,b
  3761  000922  0EFF               	movlw	255
  3762  000924  6FFD               	movwf	(??_main+2)& (0+255),b
  3763  000926  6FFE               	movwf	(??_main+3)& (0+255),b
  3764  000928  0101               	movlb	1	; () banked
  3765  00092A  511F               	movf	_r_whole& (0+255),w,b
  3766  00092C  6E1B               	movwf	___lmul@multiplier^0,c
  3767  00092E  6A1C               	clrf	(___lmul@multiplier+1)^0,c
  3768  000930  6A1D               	clrf	(___lmul@multiplier+2)^0,c
  3769  000932  6A1E               	clrf	(___lmul@multiplier+3)^0,c
  3770  000934  0EE8               	movlw	232
  3771  000936  6E1F               	movwf	___lmul@multiplicand^0,c
  3772  000938  0E03               	movlw	3
  3773  00093A  6E20               	movwf	(___lmul@multiplicand+1)^0,c
  3774  00093C  6A21               	clrf	(___lmul@multiplicand+2)^0,c
  3775  00093E  6A22               	clrf	(___lmul@multiplicand+3)^0,c
  3776  000940  0C03               	retlw	3
  3777  000942                     __end_ofPL22:
  3778                           	callstack 0
  3779  000942                     PL30:
  3780                           	callstack 19
  3781  000942  0100               	movlb	0	; () banked
  3782  000944  51FB               	movf	??_main& (0+255),w,b
  3783  000946  241B               	addwf	?___lmul^0,w,c
  3784  000948  0101               	movlb	1	; () banked
  3785  00094A  6F04               	movwf	_t_res& (0+255),b
  3786  00094C  0100               	movlb	0	; () banked
  3787  00094E  51FC               	movf	(??_main+1)& (0+255),w,b
  3788  000950  201C               	addwfc	(?___lmul+1)^0,w,c
  3789  000952  0101               	movlb	1	; () banked
  3790  000954  6F05               	movwf	(_t_res+1)& (0+255),b
  3791  000956  0100               	movlb	0	; () banked
  3792  000958  51FD               	movf	(??_main+2)& (0+255),w,b
  3793  00095A  201D               	addwfc	(?___lmul+2)^0,w,c
  3794  00095C  0101               	movlb	1	; () banked
  3795  00095E  6F06               	movwf	(_t_res+2)& (0+255),b
  3796  000960  0100               	movlb	0	; () banked
  3797  000962  51FE               	movf	(??_main+3)& (0+255),w,b
  3798  000964  201E               	addwfc	(?___lmul+3)^0,w,c
  3799  000966  0101               	movlb	1	; () banked
  3800  000968  6F07               	movwf	(_t_res+3)& (0+255),b
  3801  00096A  0012               	return	
  3802  00096C                     __end_ofPL30:
  3803                           	callstack 0
  3804  00096C                     PL88:
  3805                           	callstack 19
  3806  00096C  0E7D               	movlw	low _TxtBuf
  3807  00096E  6FD5               	movwf	sprintf@s& (0+255),b
  3808  000970  0E01               	movlw	high _TxtBuf
  3809  000972  6FD6               	movwf	(sprintf@s+1)& (0+255),b
  3810  000974  0012               	return	
  3811  000976                     __end_ofPL88:
  3812                           	callstack 0
  3813  000976                     PL90:
  3814                           	callstack 26
  3815  000976  C066  F07F         	movff	?___flmul,___fladd@b
  3816  00097A  C067  F080         	movff	?___flmul+1,___fladd@b+1
  3817  00097E  C068  F081         	movff	?___flmul+2,___fladd@b+2
  3818  000982  C069  F082         	movff	?___flmul+3,___fladd@b+3
  3819  000986  0012               	return	
  3820  000988                     __end_ofPL90:
  3821                           	callstack 0
  3822  000988                     PL106:
  3823                           	callstack 19
  3824  000988  C108  F06A         	movff	_coef,___flmul@a
  3825  00098C  C109  F06B         	movff	_coef+1,___flmul@a+1
  3826  000990  C10A  F06C         	movff	_coef+2,___flmul@a+2
  3827  000994  C10B  F06D         	movff	_coef+3,___flmul@a+3
  3828  000998  0012               	return	
  3829  00099A                     __end_ofPL106:
  3830                           	callstack 0
  3831  00099A                     PL128:
  3832                           	callstack 19
  3833  00099A  0E03               	movlw	3
  3834  00099C  6E1F               	movwf	lcd_gotoxy@y^0,c
  3835  00099E  0C01               	retlw	1
  3836  0009A0                     __end_ofPL128:
  3837                           	callstack 0
  3838  0009A0                     PL130:
  3839                           	callstack 19
  3840  0009A0  0E02               	movlw	2
  3841  0009A2  6E1F               	movwf	lcd_gotoxy@y^0,c
  3842  0009A4  0C01               	retlw	1
  3843  0009A6                     __end_ofPL130:
  3844                           	callstack 0
  3845  0009A6                     PL132:
  3846                           	callstack 19
  3847  0009A6  C121  F116         	movff	_power,_EncData
  3848  0009AA  0101               	movlb	1	; () banked
  3849  0009AC  6B17               	clrf	(_EncData+1)& (0+255),b
  3850  0009AE  0012               	return	
  3851  0009B0                     __end_ofPL132:
  3852                           	callstack 0
  3853  0009B0                     PL146:
  3854                           	callstack 19
  3855  0009B0  C116  F0FB         	movff	_EncData,??_main
  3856  0009B4  C117  F0FC         	movff	_EncData+1,??_main+1
  3857  0009B8  0100               	movlb	0	; () banked
  3858  0009BA  51FC               	movf	(??_main+1)& (0+255),w,b
  3859  0009BC  0012               	return	
  3860  0009BE                     __end_ofPL146:
  3861                           	callstack 0
  3862  0009BE                     PL160:
  3863                           	callstack 19
  3864  0009BE  0E2D               	movlw	low STR_10
  3865  0009C0  0100               	movlb	0	; () banked
  3866  0009C2  6F60               	movwf	lcdPrint@t& (0+255),b
  3867  0009C4  0E7F               	movlw	high STR_10
  3868  0009C6  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  3869  0009C8  0012               	return	
  3870  0009CA                     __end_ofPL160:
  3871                           	callstack 0
  3872  0009CA                     PL174:
  3873                           	callstack 19
  3874  0009CA  0E9C               	movlw	low STR_8
  3875  0009CC  0100               	movlb	0	; () banked
  3876  0009CE  6F60               	movwf	lcdPrint@t& (0+255),b
  3877  0009D0  0E7E               	movlw	high STR_8
  3878  0009D2  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  3879  0009D4  0012               	return	
  3880  0009D6                     __end_ofPL174:
  3881                           	callstack 0
  3882                           
  3883 ;; *************** function _write_eep *****************
  3884 ;; Defined at:
  3885 ;;		line 5 in file "eeprom.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  address         1    wreg     unsigned char 
  3888 ;;  data            1   26[COMRAM] unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  address         1   27[COMRAM] unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/1
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3900 ;;      Params:         1       0       0       0       0       0       0
  3901 ;;      Locals:         1       0       0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0
  3903 ;;      Totals:         2       0       0       0       0       0       0
  3904 ;;Total ram usage:        2 bytes
  3905 ;; Hardware stack levels used: 1
  3906 ;; Hardware stack levels required when called: 3
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text1
  3915  003E00                     __ptext1:
  3916                           	callstack 0
  3917  003E00                     _write_eep:
  3918                           	callstack 27
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;incstack = 0
  3922                           ;write_eep@address stored from wreg
  3923  003E00  6E1C               	movwf	write_eep@address^0,c
  3924  003E02                     
  3925                           ;eeprom.c: 7:     while( EECON1bits.WR )
  3926                           
  3927                           ;eeprom.c: 8:     {}
  3928  003E02  B2A6               	btfsc	166,1,c	;volsfr
  3929  003E04  D7FE               	goto	l6476
  3930                           
  3931                           ;eeprom.c: 11:     EEADR = address;
  3932  003E06  C01C  FFA9         	movff	write_eep@address,4009	;volatile
  3933                           
  3934                           ;eeprom.c: 12:     EEDATA = data;
  3935  003E0A  C01B  FFA8         	movff	write_eep@data,4008	;volatile
  3936                           
  3937                           ;eeprom.c: 13:     EECON1bits.EEPGD = 0;
  3938  003E0E  9EA6               	bcf	166,7,c	;volsfr
  3939                           
  3940                           ;eeprom.c: 14:     EECON1bits.CFGS = 0;
  3941  003E10  9CA6               	bcf	166,6,c	;volsfr
  3942                           
  3943                           ;eeprom.c: 15:     EECON1bits.WREN = 1;
  3944  003E12  84A6               	bsf	166,2,c	;volsfr
  3945                           
  3946                           ;eeprom.c: 16:     INTCONbits.GIE = 0;
  3947  003E14  9EF2               	bcf	242,7,c	;volatile
  3948                           
  3949                           ;eeprom.c: 18:     EECON2 = 0x55;
  3950  003E16  0E55               	movlw	85
  3951  003E18  6EA7               	movwf	167,c	;volsfr
  3952                           
  3953                           ;eeprom.c: 19:     EECON2 = 0xAA;
  3954  003E1A  0EAA               	movlw	170
  3955  003E1C  6EA7               	movwf	167,c	;volsfr
  3956                           
  3957                           ;eeprom.c: 20:     EECON1bits.WR = 1;
  3958  003E1E  82A6               	bsf	166,1,c	;volsfr
  3959                           
  3960                           ;eeprom.c: 22:     INTCONbits.GIE = 1;
  3961  003E20  8EF2               	bsf	242,7,c	;volatile
  3962  003E22  0CAA               	retlw	170	;funcret
  3963  003E24                     __end_of_write_eep:
  3964                           	callstack 0
  3965                           
  3966 ;; *************** function _sqrtf *****************
  3967 ;; Defined at:
  3968 ;;		line 22 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sqrtf.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  x               4   47[BANK0 ] float 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  ix              4   88[BANK0 ] long 
  3973 ;;  r               4   84[BANK0 ] unsigned long 
  3974 ;;  m               4   80[BANK0 ] long 
  3975 ;;  z               4   76[BANK0 ] float 
  3976 ;;  t               4   72[BANK0 ] long 
  3977 ;;  q               4   68[BANK0 ] long 
  3978 ;;  __xc8_float_    4   64[BANK0 ] struct .
  3979 ;;  i               4   60[BANK0 ] long 
  3980 ;;  s               4   56[BANK0 ] long 
  3981 ;;  sign            4    0        long 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  4   47[BANK0 ] float 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 3F/0
  3988 ;;		On exit  : 3F/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3991 ;;      Params:         0       4       0       0       0       0       0
  3992 ;;      Locals:         0      36       0       0       0       0       0
  3993 ;;      Temps:          0       5       0       0       0       0       0
  3994 ;;      Totals:         0      45       0       0       0       0       0
  3995 ;;Total ram usage:       45 bytes
  3996 ;; Hardware stack levels used: 1
  3997 ;; Hardware stack levels required when called: 4
  3998 ;; This function calls:
  3999 ;;		___fladd
  4000 ;;		___flge
  4001 ;;		___flmul
  4002 ;;		_nanf
  4003 ;; This function is called by:
  4004 ;;		_main
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text2
  4009  00188E                     __ptext2:
  4010                           	callstack 0
  4011  00188E                     _sqrtf:
  4012                           	callstack 26
  4013                           
  4014                           ; BSR set to: 0
  4015                           
  4016                           ; BSR set to: 0
  4017                           
  4018                           ;incstack = 0
  4019  00188E  C08F  F0A0         	movff	sqrtf@x,sqrtf@__xc8_float_word
  4020  001892  C090  F0A1         	movff	sqrtf@x+1,sqrtf@__xc8_float_word+1
  4021  001896  C091  F0A2         	movff	sqrtf@x+2,sqrtf@__xc8_float_word+2
  4022  00189A  C092  F0A3         	movff	sqrtf@x+3,sqrtf@__xc8_float_word+3
  4023                           
  4024                           ; BSR set to: 0
  4025  00189E  C0A0  F0B8         	movff	sqrtf@__xc8_float_word,sqrtf@ix
  4026  0018A2  C0A1  F0B9         	movff	sqrtf@__xc8_float_word+1,sqrtf@ix+1
  4027  0018A6  C0A2  F0BA         	movff	sqrtf@__xc8_float_word+2,sqrtf@ix+2
  4028  0018AA  C0A3  F0BB         	movff	sqrtf@__xc8_float_word+3,sqrtf@ix+3
  4029                           
  4030                           ; BSR set to: 0
  4031  0018AE  6B93               	clrf	??_sqrtf& (0+255),b
  4032  0018B0  6B94               	clrf	(??_sqrtf+1)& (0+255),b
  4033  0018B2  0E80               	movlw	128
  4034  0018B4  15BA               	andwf	(sqrtf@ix+2)& (0+255),w,b
  4035  0018B6  D9A9               	call	PL190	;call to abstracted procedure
  4036  0018B8  0E80               	movlw	128
  4037  0018BA  1995               	xorwf	(??_sqrtf+2)& (0+255),w,b
  4038  0018BC  E12C               	bnz	l9626
  4039  0018BE  0E7F               	movlw	127
  4040  0018C0  1996               	xorwf	(??_sqrtf+3)& (0+255),w,b
  4041  0018C2  1193               	iorwf	??_sqrtf& (0+255),w,b
  4042  0018C4  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4043  0018C6  E127               	bnz	l9626
  4044                           
  4045                           ; BSR set to: 0
  4046  0018C8  C08F  F06A         	movff	sqrtf@x,___flmul@a
  4047  0018CC  C090  F06B         	movff	sqrtf@x+1,___flmul@a+1
  4048  0018D0  C091  F06C         	movff	sqrtf@x+2,___flmul@a+2
  4049  0018D4  C092  F06D         	movff	sqrtf@x+3,___flmul@a+3
  4050  0018D8  C08F  F066         	movff	sqrtf@x,___flmul@b
  4051  0018DC  C090  F067         	movff	sqrtf@x+1,___flmul@b+1
  4052  0018E0  C091  F068         	movff	sqrtf@x+2,___flmul@b+2
  4053  0018E4  C092  F069         	movff	sqrtf@x+3,___flmul@b+3
  4054  0018E8  EC38  F00F         	call	___flmul	;wreg free
  4055  0018EC  ECBB  F004         	call	PL90	;call to abstracted procedure
  4056  0018F0  C08F  F083         	movff	sqrtf@x,___fladd@a
  4057  0018F4  C090  F084         	movff	sqrtf@x+1,___fladd@a+1
  4058  0018F8  C091  F085         	movff	sqrtf@x+2,___fladd@a+2
  4059  0018FC  C092  F086         	movff	sqrtf@x+3,___fladd@a+3
  4060  001900  EC0A  F00E         	call	___fladd	;wreg free
  4061  001904  C07F  F08F         	movff	?___fladd,?_sqrtf
  4062  001908  C080  F090         	movff	?___fladd+1,?_sqrtf+1
  4063  00190C  C081  F091         	movff	?___fladd+2,?_sqrtf+2
  4064  001910  C082  F092         	movff	?___fladd+3,?_sqrtf+3
  4065  001914  0012               	return	
  4066  001916                     l9626:
  4067                           
  4068                           ; BSR set to: 0
  4069  001916  BFBB               	btfsc	(sqrtf@ix+3)& (0+255),7,b
  4070  001918  D006               	goto	u11310
  4071  00191A  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4072  00191C  11BA               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  4073  00191E  11B9               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  4074  001920  E124               	bnz	l9638
  4075  001922  05B8               	decf	sqrtf@ix& (0+255),w,b
  4076  001924  E222               	bc	l9638
  4077  001926                     u11310:
  4078                           
  4079                           ; BSR set to: 0
  4080  001926  D96C               	call	PL186	;call to abstracted procedure
  4081  001928  51BA               	movf	(sqrtf@ix+2)& (0+255),w,b
  4082  00192A  D96F               	call	PL190	;call to abstracted procedure
  4083  00192C  5193               	movf	??_sqrtf& (0+255),w,b
  4084  00192E  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4085  001930  1195               	iorwf	(??_sqrtf+2)& (0+255),w,b
  4086  001932  1196               	iorwf	(??_sqrtf+3)& (0+255),w,b
  4087  001934  E109               	bnz	l9632
  4088                           
  4089                           ; BSR set to: 0
  4090  001936  C08F  F08F         	movff	sqrtf@x,?_sqrtf
  4091  00193A  C090  F090         	movff	sqrtf@x+1,?_sqrtf+1
  4092  00193E  C091  F091         	movff	sqrtf@x+2,?_sqrtf+2
  4093  001942  C092  F092         	movff	sqrtf@x+3,?_sqrtf+3
  4094  001946  0012               	return	
  4095  001948                     l9632:
  4096                           
  4097                           ; BSR set to: 0
  4098  001948  AFBB               	btfss	(sqrtf@ix+3)& (0+255),7,b
  4099  00194A  D00F               	goto	l9638
  4100                           
  4101                           ; BSR set to: 0
  4102  00194C  0E6F               	movlw	low (STR_9+21)
  4103  00194E  6E1B               	movwf	nanf@s^0,c
  4104  001950  0E7E               	movlw	high (STR_9+21)
  4105  001952  6E1C               	movwf	(nanf@s+1)^0,c
  4106  001954  EC22  F01F         	call	_nanf	;wreg free
  4107  001958  C01B  F08F         	movff	?_nanf,?_sqrtf
  4108  00195C  C01C  F090         	movff	?_nanf+1,?_sqrtf+1
  4109  001960  C01D  F091         	movff	?_nanf+2,?_sqrtf+2
  4110  001964  C01E  F092         	movff	?_nanf+3,?_sqrtf+3
  4111  001968  0012               	return	
  4112  00196A                     l9638:
  4113                           
  4114                           ; BSR set to: 0
  4115  00196A  0E17               	movlw	23
  4116  00196C  6F93               	movwf	??_sqrtf& (0+255),b
  4117  00196E  C0B8  F094         	movff	sqrtf@ix,??_sqrtf+1
  4118  001972  C0B9  F095         	movff	sqrtf@ix+1,??_sqrtf+2
  4119  001976  C0BA  F096         	movff	sqrtf@ix+2,??_sqrtf+3
  4120  00197A  C0BB  F097         	movff	sqrtf@ix+3,??_sqrtf+4
  4121  00197E                     u11345:
  4122  00197E  6793               	tstfsz	??_sqrtf& (0+255),b
  4123  001980  D001               	goto	u11346
  4124  001982  D007               	goto	u11347
  4125  001984                     u11346:
  4126  001984  3597               	rlcf	(??_sqrtf+4)& (0+255),w,b
  4127  001986  3397               	rrcf	(??_sqrtf+4)& (0+255),f,b
  4128  001988  3396               	rrcf	(??_sqrtf+3)& (0+255),f,b
  4129  00198A  3395               	rrcf	(??_sqrtf+2)& (0+255),f,b
  4130  00198C  3394               	rrcf	(??_sqrtf+1)& (0+255),f,b
  4131  00198E  2F93               	decfsz	??_sqrtf& (0+255),f,b
  4132  001990  D7F6               	goto	u11345
  4133  001992                     u11347:
  4134  001992  C094  F0B0         	movff	??_sqrtf+1,sqrtf@m
  4135  001996  C095  F0B1         	movff	??_sqrtf+2,sqrtf@m+1
  4136  00199A  C096  F0B2         	movff	??_sqrtf+3,sqrtf@m+2
  4137  00199E  C097  F0B3         	movff	??_sqrtf+4,sqrtf@m+3
  4138  0019A2  0100               	movlb	0	; () banked
  4139  0019A4  51B0               	movf	sqrtf@m& (0+255),w,b
  4140  0019A6  11B1               	iorwf	(sqrtf@m+1)& (0+255),w,b
  4141  0019A8  11B2               	iorwf	(sqrtf@m+2)& (0+255),w,b
  4142  0019AA  11B3               	iorwf	(sqrtf@m+3)& (0+255),w,b
  4143  0019AC  E125               	bnz	l1757
  4144                           
  4145                           ; BSR set to: 0
  4146  0019AE  6B9C               	clrf	sqrtf@i& (0+255),b
  4147  0019B0  6B9D               	clrf	(sqrtf@i+1)& (0+255),b
  4148  0019B2  6B9E               	clrf	(sqrtf@i+2)& (0+255),b
  4149  0019B4  6B9F               	clrf	(sqrtf@i+3)& (0+255),b
  4150  0019B6  D00A               	goto	l9646
  4151  0019B8                     l9642:
  4152                           
  4153                           ; BSR set to: 0
  4154  0019B8  90D8               	bcf	status,0,c
  4155  0019BA  37B8               	rlcf	sqrtf@ix& (0+255),f,b
  4156  0019BC  37B9               	rlcf	(sqrtf@ix+1)& (0+255),f,b
  4157  0019BE  37BA               	rlcf	(sqrtf@ix+2)& (0+255),f,b
  4158  0019C0  37BB               	rlcf	(sqrtf@ix+3)& (0+255),f,b
  4159                           
  4160                           ; BSR set to: 0
  4161  0019C2  2B9C               	incf	sqrtf@i& (0+255),f,b
  4162  0019C4  0E00               	movlw	0
  4163  0019C6  239D               	addwfc	(sqrtf@i+1)& (0+255),f,b
  4164  0019C8  239E               	addwfc	(sqrtf@i+2)& (0+255),f,b
  4165  0019CA  239F               	addwfc	(sqrtf@i+3)& (0+255),f,b
  4166  0019CC                     l9646:
  4167                           
  4168                           ; BSR set to: 0
  4169  0019CC  AFBA               	btfss	(sqrtf@ix+2)& (0+255),7,b
  4170  0019CE  D7F4               	goto	l9642
  4171                           
  4172                           ; BSR set to: 0
  4173  0019D0  0EFF               	movlw	255
  4174  0019D2  259C               	addwf	sqrtf@i& (0+255),w,b
  4175  0019D4  6F93               	movwf	??_sqrtf& (0+255),b
  4176  0019D6  0EFF               	movlw	255
  4177  0019D8  219D               	addwfc	(sqrtf@i+1)& (0+255),w,b
  4178  0019DA  6F94               	movwf	(??_sqrtf+1)& (0+255),b
  4179  0019DC  0EFF               	movlw	255
  4180  0019DE  219E               	addwfc	(sqrtf@i+2)& (0+255),w,b
  4181  0019E0  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4182  0019E2  0EFF               	movlw	255
  4183  0019E4  219F               	addwfc	(sqrtf@i+3)& (0+255),w,b
  4184  0019E6  6F96               	movwf	(??_sqrtf+3)& (0+255),b
  4185  0019E8  5193               	movf	??_sqrtf& (0+255),w,b
  4186  0019EA  5FB0               	subwf	sqrtf@m& (0+255),f,b
  4187  0019EC  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4188  0019EE  5BB1               	subwfb	(sqrtf@m+1)& (0+255),f,b
  4189  0019F0  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4190  0019F2  5BB2               	subwfb	(sqrtf@m+2)& (0+255),f,b
  4191  0019F4  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4192  0019F6  5BB3               	subwfb	(sqrtf@m+3)& (0+255),f,b
  4193  0019F8                     l1757:
  4194                           
  4195                           ; BSR set to: 0
  4196  0019F8  0E81               	movlw	129
  4197  0019FA  27B0               	addwf	sqrtf@m& (0+255),f,b
  4198  0019FC  0EFF               	movlw	255
  4199  0019FE  23B1               	addwfc	(sqrtf@m+1)& (0+255),f,b
  4200  001A00  23B2               	addwfc	(sqrtf@m+2)& (0+255),f,b
  4201  001A02  23B3               	addwfc	(sqrtf@m+3)& (0+255),f,b
  4202  001A04  D8FD               	call	PL186	;call to abstracted procedure
  4203  001A06  0E7F               	movlw	127
  4204  001A08  15BA               	andwf	(sqrtf@ix+2)& (0+255),w,b
  4205  001A0A  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4206  001A0C  0E00               	movlw	0
  4207  001A0E  6B96               	clrf	(??_sqrtf+3)& (0+255),b
  4208  001A10  1193               	iorwf	??_sqrtf& (0+255),w,b
  4209  001A12  6FB8               	movwf	sqrtf@ix& (0+255),b
  4210  001A14  0E00               	movlw	0
  4211  001A16  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4212  001A18  6FB9               	movwf	(sqrtf@ix+1)& (0+255),b
  4213  001A1A  0E80               	movlw	128
  4214  001A1C  1195               	iorwf	(??_sqrtf+2)& (0+255),w,b
  4215  001A1E  6FBA               	movwf	(sqrtf@ix+2)& (0+255),b
  4216  001A20  0E00               	movlw	0
  4217  001A22  1196               	iorwf	(??_sqrtf+3)& (0+255),w,b
  4218  001A24  6FBB               	movwf	(sqrtf@ix+3)& (0+255),b
  4219                           
  4220                           ; BSR set to: 0
  4221  001A26  B1B0               	btfsc	sqrtf@m& (0+255),0,b
  4222                           
  4223                           ; BSR set to: 0
  4224  001A28  D8DB               	call	PL58	;call to abstracted procedure
  4225  001A2A                     l1761:
  4226                           
  4227                           ; BSR set to: 0
  4228  001A2A  35B3               	rlcf	(sqrtf@m+3)& (0+255),w,b
  4229  001A2C  33B3               	rrcf	(sqrtf@m+3)& (0+255),f,b
  4230  001A2E  33B2               	rrcf	(sqrtf@m+2)& (0+255),f,b
  4231  001A30  33B1               	rrcf	(sqrtf@m+1)& (0+255),f,b
  4232  001A32  33B0               	rrcf	sqrtf@m& (0+255),f,b
  4233  001A34  D8D5               	call	PL58	;call to abstracted procedure
  4234                           
  4235                           ; BSR set to: 0
  4236  001A36  6B98               	clrf	sqrtf@s& (0+255),b
  4237  001A38  6B99               	clrf	(sqrtf@s+1)& (0+255),b
  4238  001A3A  6B9A               	clrf	(sqrtf@s+2)& (0+255),b
  4239  001A3C  6B9B               	clrf	(sqrtf@s+3)& (0+255),b
  4240  001A3E  6BA4               	clrf	sqrtf@q& (0+255),b
  4241  001A40  6BA5               	clrf	(sqrtf@q+1)& (0+255),b
  4242  001A42  6BA6               	clrf	(sqrtf@q+2)& (0+255),b
  4243  001A44  6BA7               	clrf	(sqrtf@q+3)& (0+255),b
  4244                           
  4245                           ; BSR set to: 0
  4246  001A46  6BB4               	clrf	sqrtf@r& (0+255),b
  4247  001A48  6BB5               	clrf	(sqrtf@r+1)& (0+255),b
  4248  001A4A  6BB6               	clrf	(sqrtf@r+2)& (0+255),b
  4249  001A4C  0E01               	movlw	1
  4250  001A4E  6FB7               	movwf	(sqrtf@r+3)& (0+255),b
  4251  001A50  D03B               	goto	l9664
  4252  001A52                     l9658:
  4253                           
  4254                           ; BSR set to: 0
  4255  001A52  5198               	movf	sqrtf@s& (0+255),w,b
  4256  001A54  25B4               	addwf	sqrtf@r& (0+255),w,b
  4257  001A56  6FA8               	movwf	sqrtf@t& (0+255),b
  4258  001A58  5199               	movf	(sqrtf@s+1)& (0+255),w,b
  4259  001A5A  21B5               	addwfc	(sqrtf@r+1)& (0+255),w,b
  4260  001A5C  6FA9               	movwf	(sqrtf@t+1)& (0+255),b
  4261  001A5E  519A               	movf	(sqrtf@s+2)& (0+255),w,b
  4262  001A60  21B6               	addwfc	(sqrtf@r+2)& (0+255),w,b
  4263  001A62  6FAA               	movwf	(sqrtf@t+2)& (0+255),b
  4264  001A64  519B               	movf	(sqrtf@s+3)& (0+255),w,b
  4265  001A66  21B7               	addwfc	(sqrtf@r+3)& (0+255),w,b
  4266  001A68  6FAB               	movwf	(sqrtf@t+3)& (0+255),b
  4267  001A6A  51A8               	movf	sqrtf@t& (0+255),w,b
  4268  001A6C  5DB8               	subwf	sqrtf@ix& (0+255),w,b
  4269  001A6E  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4270  001A70  59B9               	subwfb	(sqrtf@ix+1)& (0+255),w,b
  4271  001A72  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4272  001A74  59BA               	subwfb	(sqrtf@ix+2)& (0+255),w,b
  4273  001A76  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4274  001A78  0A80               	xorlw	128
  4275  001A7A  6F93               	movwf	??_sqrtf& (0+255),b
  4276  001A7C  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4277  001A7E  0A80               	xorlw	128
  4278  001A80  5993               	subwfb	??_sqrtf& (0+255),w,b
  4279  001A82  E31C               	bnc	l1764
  4280                           
  4281                           ; BSR set to: 0
  4282  001A84  51A8               	movf	sqrtf@t& (0+255),w,b
  4283  001A86  25B4               	addwf	sqrtf@r& (0+255),w,b
  4284  001A88  6F98               	movwf	sqrtf@s& (0+255),b
  4285  001A8A  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4286  001A8C  21B5               	addwfc	(sqrtf@r+1)& (0+255),w,b
  4287  001A8E  6F99               	movwf	(sqrtf@s+1)& (0+255),b
  4288  001A90  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4289  001A92  21B6               	addwfc	(sqrtf@r+2)& (0+255),w,b
  4290  001A94  6F9A               	movwf	(sqrtf@s+2)& (0+255),b
  4291  001A96  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4292  001A98  21B7               	addwfc	(sqrtf@r+3)& (0+255),w,b
  4293  001A9A  6F9B               	movwf	(sqrtf@s+3)& (0+255),b
  4294  001A9C  51A8               	movf	sqrtf@t& (0+255),w,b
  4295  001A9E  5FB8               	subwf	sqrtf@ix& (0+255),f,b
  4296  001AA0  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4297  001AA2  5BB9               	subwfb	(sqrtf@ix+1)& (0+255),f,b
  4298  001AA4  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4299  001AA6  5BBA               	subwfb	(sqrtf@ix+2)& (0+255),f,b
  4300  001AA8  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4301  001AAA  5BBB               	subwfb	(sqrtf@ix+3)& (0+255),f,b
  4302  001AAC  51B4               	movf	sqrtf@r& (0+255),w,b
  4303  001AAE  27A4               	addwf	sqrtf@q& (0+255),f,b
  4304  001AB0  51B5               	movf	(sqrtf@r+1)& (0+255),w,b
  4305  001AB2  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4306  001AB4  51B6               	movf	(sqrtf@r+2)& (0+255),w,b
  4307  001AB6  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4308  001AB8  51B7               	movf	(sqrtf@r+3)& (0+255),w,b
  4309  001ABA  23A7               	addwfc	(sqrtf@q+3)& (0+255),f,b
  4310  001ABC                     l1764:
  4311                           
  4312                           ; BSR set to: 0
  4313  001ABC  D891               	call	PL58	;call to abstracted procedure
  4314                           
  4315                           ; BSR set to: 0
  4316  001ABE  90D8               	bcf	status,0,c
  4317  001AC0  33B7               	rrcf	(sqrtf@r+3)& (0+255),f,b
  4318  001AC2  33B6               	rrcf	(sqrtf@r+2)& (0+255),f,b
  4319  001AC4  33B5               	rrcf	(sqrtf@r+1)& (0+255),f,b
  4320  001AC6  33B4               	rrcf	sqrtf@r& (0+255),f,b
  4321  001AC8                     l9664:
  4322                           
  4323                           ; BSR set to: 0
  4324  001AC8  51B4               	movf	sqrtf@r& (0+255),w,b
  4325  001ACA  11B5               	iorwf	(sqrtf@r+1)& (0+255),w,b
  4326  001ACC  11B6               	iorwf	(sqrtf@r+2)& (0+255),w,b
  4327  001ACE  11B7               	iorwf	(sqrtf@r+3)& (0+255),w,b
  4328  001AD0  E1C0               	bnz	l9658
  4329                           
  4330                           ; BSR set to: 0
  4331  001AD2  51B8               	movf	sqrtf@ix& (0+255),w,b
  4332  001AD4  11B9               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  4333  001AD6  11BA               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  4334  001AD8  11BB               	iorwf	(sqrtf@ix+3)& (0+255),w,b
  4335  001ADA  E038               	bz	l1766
  4336                           
  4337                           ; BSR set to: 0
  4338  001ADC  D88A               	call	PL148	;call to abstracted procedure
  4339                           
  4340                           ; BSR set to: 0
  4341  001ADE  C0AC  F07F         	movff	sqrtf@z,___flge@ff1
  4342  001AE2  C0AD  F080         	movff	sqrtf@z+1,___flge@ff1+1
  4343  001AE6  C0AE  F081         	movff	sqrtf@z+2,___flge@ff1+2
  4344  001AEA  C0AF  F082         	movff	sqrtf@z+3,___flge@ff1+3
  4345  001AEE  6B83               	clrf	___flge@ff2& (0+255),b
  4346  001AF0  6B84               	clrf	(___flge@ff2+1)& (0+255),b
  4347  001AF2  0E80               	movlw	128
  4348  001AF4  6F85               	movwf	(___flge@ff2+2)& (0+255),b
  4349  001AF6  0E3F               	movlw	63
  4350  001AF8  6F86               	movwf	(___flge@ff2+3)& (0+255),b
  4351  001AFA  ECC3  F019         	call	___flge	;wreg free
  4352  001AFE  E326               	bnc	l1766
  4353                           
  4354                           ; BSR set to: 0
  4355  001B00  D878               	call	PL148	;call to abstracted procedure
  4356                           
  4357                           ; BSR set to: 0
  4358  001B02  6B7F               	clrf	___flge@ff1& (0+255),b
  4359  001B04  6B80               	clrf	(___flge@ff1+1)& (0+255),b
  4360  001B06  0E80               	movlw	128
  4361  001B08  6F81               	movwf	(___flge@ff1+2)& (0+255),b
  4362  001B0A  0E3F               	movlw	63
  4363  001B0C  6F82               	movwf	(___flge@ff1+3)& (0+255),b
  4364  001B0E  C0AC  F083         	movff	sqrtf@z,___flge@ff2
  4365  001B12  C0AD  F084         	movff	sqrtf@z+1,___flge@ff2+1
  4366  001B16  C0AE  F085         	movff	sqrtf@z+2,___flge@ff2+2
  4367  001B1A  C0AF  F086         	movff	sqrtf@z+3,___flge@ff2+3
  4368  001B1E  ECC3  F019         	call	___flge	;wreg free
  4369  001B22  E206               	bc	l9678
  4370                           
  4371                           ; BSR set to: 0
  4372  001B24  0E02               	movlw	2
  4373  001B26  27A4               	addwf	sqrtf@q& (0+255),f,b
  4374  001B28  0E00               	movlw	0
  4375  001B2A  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4376  001B2C  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4377  001B2E  D00D               	goto	L5
  4378  001B30                     l9678:
  4379                           
  4380                           ; BSR set to: 0
  4381  001B30  0E01               	movlw	1
  4382  001B32  15A4               	andwf	sqrtf@q& (0+255),w,b
  4383  001B34  6F93               	movwf	??_sqrtf& (0+255),b
  4384  001B36  6B94               	clrf	(??_sqrtf+1)& (0+255),b
  4385  001B38  6B95               	clrf	(??_sqrtf+2)& (0+255),b
  4386  001B3A  6B96               	clrf	(??_sqrtf+3)& (0+255),b
  4387  001B3C  5193               	movf	??_sqrtf& (0+255),w,b
  4388  001B3E  27A4               	addwf	sqrtf@q& (0+255),f,b
  4389  001B40  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4390  001B42  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4391  001B44  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4392  001B46  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4393  001B48  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4394  001B4A                     L5:
  4395  001B4A  23A7               	addwfc	(sqrtf@q+3)& (0+255),f,b
  4396  001B4C                     l1766:
  4397                           
  4398                           ; BSR set to: 0
  4399  001B4C  C0A4  F093         	movff	sqrtf@q,??_sqrtf
  4400  001B50  C0A5  F094         	movff	sqrtf@q+1,??_sqrtf+1
  4401  001B54  C0A6  F095         	movff	sqrtf@q+2,??_sqrtf+2
  4402  001B58  C0A7  F096         	movff	sqrtf@q+3,??_sqrtf+3
  4403  001B5C  3596               	rlcf	(??_sqrtf+3)& (0+255),w,b
  4404  001B5E  3396               	rrcf	(??_sqrtf+3)& (0+255),f,b
  4405  001B60  3395               	rrcf	(??_sqrtf+2)& (0+255),f,b
  4406  001B62  3394               	rrcf	(??_sqrtf+1)& (0+255),f,b
  4407  001B64  3393               	rrcf	??_sqrtf& (0+255),f,b
  4408  001B66  0E00               	movlw	0
  4409  001B68  2593               	addwf	??_sqrtf& (0+255),w,b
  4410  001B6A  6FB8               	movwf	sqrtf@ix& (0+255),b
  4411  001B6C  0E00               	movlw	0
  4412  001B6E  2194               	addwfc	(??_sqrtf+1)& (0+255),w,b
  4413  001B70  6FB9               	movwf	(sqrtf@ix+1)& (0+255),b
  4414  001B72  0E00               	movlw	0
  4415  001B74  2195               	addwfc	(??_sqrtf+2)& (0+255),w,b
  4416  001B76  6FBA               	movwf	(sqrtf@ix+2)& (0+255),b
  4417  001B78  0E3F               	movlw	63
  4418  001B7A  2196               	addwfc	(??_sqrtf+3)& (0+255),w,b
  4419  001B7C  6FBB               	movwf	(sqrtf@ix+3)& (0+255),b
  4420  001B7E  C0B0  F093         	movff	sqrtf@m,??_sqrtf
  4421  001B82  C0B1  F094         	movff	sqrtf@m+1,??_sqrtf+1
  4422  001B86  C0B2  F095         	movff	sqrtf@m+2,??_sqrtf+2
  4423  001B8A  C0B3  F096         	movff	sqrtf@m+3,??_sqrtf+3
  4424  001B8E  0E17               	movlw	23
  4425  001B90                     u11435:
  4426  001B90  90D8               	bcf	status,0,c
  4427  001B92  3793               	rlcf	??_sqrtf& (0+255),f,b
  4428  001B94  3794               	rlcf	(??_sqrtf+1)& (0+255),f,b
  4429  001B96  3795               	rlcf	(??_sqrtf+2)& (0+255),f,b
  4430  001B98  3796               	rlcf	(??_sqrtf+3)& (0+255),f,b
  4431  001B9A  2EE8               	decfsz	wreg,f,c
  4432  001B9C  D7F9               	goto	u11435
  4433  001B9E  5193               	movf	??_sqrtf& (0+255),w,b
  4434  001BA0  27B8               	addwf	sqrtf@ix& (0+255),f,b
  4435  001BA2  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4436  001BA4  23B9               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  4437  001BA6  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4438  001BA8  23BA               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  4439  001BAA  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4440  001BAC  23BB               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  4441                           
  4442                           ; BSR set to: 0
  4443  001BAE  C0B8  F0A0         	movff	sqrtf@ix,sqrtf@__xc8_float_word
  4444  001BB2  C0B9  F0A1         	movff	sqrtf@ix+1,sqrtf@__xc8_float_word+1
  4445  001BB6  C0BA  F0A2         	movff	sqrtf@ix+2,sqrtf@__xc8_float_word+2
  4446  001BBA  C0BB  F0A3         	movff	sqrtf@ix+3,sqrtf@__xc8_float_word+3
  4447                           
  4448                           ; BSR set to: 0
  4449  001BBE  C0A0  F0AC         	movff	sqrtf@__xc8_float_word,sqrtf@z
  4450  001BC2  C0A1  F0AD         	movff	sqrtf@__xc8_float_word+1,sqrtf@z+1
  4451  001BC6  C0A2  F0AE         	movff	sqrtf@__xc8_float_word+2,sqrtf@z+2
  4452  001BCA  C0A3  F0AF         	movff	sqrtf@__xc8_float_word+3,sqrtf@z+3
  4453                           
  4454                           ; BSR set to: 0
  4455  001BCE  C0AC  F08F         	movff	sqrtf@z,?_sqrtf
  4456  001BD2  C0AD  F090         	movff	sqrtf@z+1,?_sqrtf+1
  4457  001BD6  C0AE  F091         	movff	sqrtf@z+2,?_sqrtf+2
  4458  001BDA  C0AF  F092         	movff	sqrtf@z+3,?_sqrtf+3
  4459                           
  4460                           ; BSR set to: 0
  4461  001BDE  0012               	return		;funcret
  4462  001BE0                     __end_of_sqrtf:
  4463                           	callstack 0
  4464  001BE0                     PL58:
  4465                           	callstack 26
  4466  001BE0  51B8               	movf	sqrtf@ix& (0+255),w,b
  4467  001BE2  27B8               	addwf	sqrtf@ix& (0+255),f,b
  4468  001BE4  51B9               	movf	(sqrtf@ix+1)& (0+255),w,b
  4469  001BE6  23B9               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  4470  001BE8  51BA               	movf	(sqrtf@ix+2)& (0+255),w,b
  4471  001BEA  23BA               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  4472  001BEC  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4473  001BEE  23BB               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  4474  001BF0  0012               	return	
  4475  001BF2                     __end_ofPL58:
  4476                           	callstack 0
  4477  001BF2                     PL148:
  4478                           	callstack 26
  4479  001BF2  6BAC               	clrf	sqrtf@z& (0+255),b
  4480  001BF4  6BAD               	clrf	(sqrtf@z+1)& (0+255),b
  4481  001BF6  0E80               	movlw	128
  4482  001BF8  6FAE               	movwf	(sqrtf@z+2)& (0+255),b
  4483  001BFA  0E3F               	movlw	63
  4484  001BFC  6FAF               	movwf	(sqrtf@z+3)& (0+255),b
  4485  001BFE  0C3F               	retlw	63
  4486  001C00                     __end_ofPL148:
  4487                           	callstack 0
  4488  001C00                     PL186:
  4489                           	callstack 26
  4490  001C00  51B8               	movf	sqrtf@ix& (0+255),w,b
  4491  001C02  6F93               	movwf	??_sqrtf& (0+255),b
  4492  001C04  51B9               	movf	(sqrtf@ix+1)& (0+255),w,b
  4493  001C06  6F94               	movwf	(??_sqrtf+1)& (0+255),b
  4494  001C08  0012               	return	
  4495  001C0A                     __end_ofPL186:
  4496                           	callstack 0
  4497  001C0A                     PL190:
  4498                           	callstack 26
  4499  001C0A  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4500  001C0C  0E7F               	movlw	127
  4501  001C0E  15BB               	andwf	(sqrtf@ix+3)& (0+255),w,b
  4502  001C10  6F96               	movwf	(??_sqrtf+3)& (0+255),b
  4503  001C12  0012               	return	
  4504  001C14                     __end_ofPL190:
  4505                           	callstack 0
  4506                           
  4507 ;; *************** function _nanf *****************
  4508 ;; Defined at:
  4509 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nanf.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  s               2   26[COMRAM] PTR const unsigned char 
  4512 ;;		 -> STR_49(1), 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  u               4   30[COMRAM] struct .
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  4   26[COMRAM] float 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2
  4519 ;; Tracked objects:
  4520 ;;		On entry : 3F/0
  4521 ;;		On exit  : 3F/0
  4522 ;;		Unchanged: 3F/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4524 ;;      Params:         4       0       0       0       0       0       0
  4525 ;;      Locals:         4       0       0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0
  4527 ;;      Totals:         8       0       0       0       0       0       0
  4528 ;;Total ram usage:        8 bytes
  4529 ;; Hardware stack levels used: 1
  4530 ;; Hardware stack levels required when called: 3
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_sqrtf
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text3
  4539  003E44                     __ptext3:
  4540                           	callstack 0
  4541  003E44                     _nanf:
  4542                           	callstack 26
  4543                           
  4544                           ; BSR set to: 0
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;incstack = 0
  4548  003E44  681F               	setf	nanf@u^0,c
  4549  003E46  6820               	setf	(nanf@u+1)^0,c
  4550  003E48  6821               	setf	(nanf@u+2)^0,c
  4551  003E4A  0E7F               	movlw	127
  4552  003E4C  6E22               	movwf	(nanf@u+3)^0,c
  4553                           
  4554                           ; BSR set to: 0
  4555  003E4E  C01F  F01B         	movff	nanf@u,?_nanf
  4556  003E52  C020  F01C         	movff	nanf@u+1,?_nanf+1
  4557  003E56  C021  F01D         	movff	nanf@u+2,?_nanf+2
  4558  003E5A  C022  F01E         	movff	nanf@u+3,?_nanf+3
  4559                           
  4560                           ; BSR set to: 0
  4561  003E5E  0C7F               	retlw	127	;funcret
  4562  003E60                     __end_of_nanf:
  4563                           	callstack 0
  4564                           
  4565 ;; *************** function _show_lcd_main *****************
  4566 ;; Defined at:
  4567 ;;		line 598 in file "main.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  pwr_dsp         2  153[BANK0 ] unsigned short 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 3F/1
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4581 ;;      Params:         0       0       0       0       0       0       0
  4582 ;;      Locals:         0       2       0       0       0       0       0
  4583 ;;      Temps:          0       0       0       0       0       0       0
  4584 ;;      Totals:         0       2       0       0       0       0       0
  4585 ;;Total ram usage:        2 bytes
  4586 ;; Hardware stack levels used: 1
  4587 ;; Hardware stack levels required when called: 11
  4588 ;; This function calls:
  4589 ;;		___lwdiv
  4590 ;;		___lwmod
  4591 ;;		_calc_power
  4592 ;;		_lcdPrint
  4593 ;;		_lcd_gotoxy
  4594 ;;		_lcd_putc
  4595 ;;		_sprintf
  4596 ;; This function is called by:
  4597 ;;		_main
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text4
  4602  001506                     __ptext4:
  4603                           	callstack 0
  4604  001506                     _show_lcd_main:
  4605                           	callstack 0
  4606                           
  4607                           ; BSR set to: 1
  4608                           ;main.c: 599:     uint16_t pwr_dsp;;main.c: 601:     sprintf(TxtBuf, "U_In:%uV ", U_real
      +                          );
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;incstack = 0
  4612  001506  ECB6  F004         	call	PL88	;call to abstracted procedure
  4613  00150A  0EB5               	movlw	low STR_21
  4614  00150C  6FD7               	movwf	sprintf@fmt& (0+255),b
  4615  00150E  0E7F               	movlw	high STR_21
  4616  001510  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4617  001512  C19B  F1D9         	movff	_U_real,?_sprintf+4
  4618  001516  C19C  F1DA         	movff	_U_real+1,?_sprintf+5
  4619  00151A  ECEF  F01C         	call	_sprintf	;wreg free
  4620                           
  4621                           ; BSR set to: 1
  4622                           ;main.c: 602:     lcd_gotoxy(1, 1);
  4623  00151E  0E01               	movlw	1
  4624  001520  6E1F               	movwf	lcd_gotoxy@y^0,c
  4625  001522  EC12  F01D         	call	_lcd_gotoxy
  4626                           
  4627                           ;main.c: 603:     lcdPrint(TxtBuf);
  4628  001526  D96D               	call	PL14	;call to abstracted procedure
  4629  001528  ECD9  F016         	call	_lcdPrint	;wreg free
  4630                           
  4631                           ;main.c: 605:     if (!is_stab) {
  4632  00152C  BC43               	btfsc	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  4633  00152E  D00B               	goto	l9700
  4634                           
  4635                           ;main.c: 606:         lcd_gotoxy(11, 1);
  4636  001530  D9AB               	call	PL214	;call to abstracted procedure
  4637  001532  EC12  F01D         	call	_lcd_gotoxy
  4638                           
  4639                           ;main.c: 607:         lcdPrint("NOT STAB! ");
  4640  001536  0E8A               	movlw	low STR_22
  4641  001538  0100               	movlb	0	; () banked
  4642  00153A  6F60               	movwf	lcdPrint@t& (0+255),b
  4643  00153C  0E7F               	movlw	high STR_22
  4644  00153E  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  4645  001540  ECD9  F016         	call	_lcdPrint	;wreg free
  4646                           
  4647                           ;main.c: 608:     } else {
  4648  001544  D00A               	goto	l9704
  4649  001546                     l9700:
  4650                           
  4651                           ;main.c: 609:         lcd_gotoxy(11, 1);
  4652  001546  D9A0               	call	PL214	;call to abstracted procedure
  4653  001548  EC12  F01D         	call	_lcd_gotoxy
  4654                           
  4655                           ;main.c: 610:         lcdPrint("STABILIZE ");
  4656  00154C  0E95               	movlw	low STR_23
  4657  00154E  0100               	movlb	0	; () banked
  4658  001550  6F60               	movwf	lcdPrint@t& (0+255),b
  4659  001552  0E7F               	movlw	high STR_23
  4660  001554  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  4661  001556  ECD9  F016         	call	_lcdPrint	;wreg free
  4662  00155A                     l9704:
  4663                           
  4664                           ;main.c: 613:     sprintf(TxtBuf, "PwR:%u%% ", t_power);
  4665  00155A  D95F               	call	PL32	;call to abstracted procedure
  4666  00155C  0EAB               	movlw	low STR_24
  4667  00155E  6FD7               	movwf	sprintf@fmt& (0+255),b
  4668  001560  0E7F               	movlw	high STR_24
  4669  001562  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4670  001564  C038  F1D9         	movff	_t_power,?_sprintf+4
  4671  001568  C039  F1DA         	movff	_t_power+1,?_sprintf+5
  4672  00156C  ECEF  F01C         	call	_sprintf	;wreg free
  4673                           
  4674                           ; BSR set to: 1
  4675                           ;main.c: 614:     lcd_gotoxy(11, 2);
  4676  001570  0E02               	movlw	2
  4677  001572  6E1F               	movwf	lcd_gotoxy@y^0,c
  4678  001574  0E0B               	movlw	11
  4679  001576  EC12  F01D         	call	_lcd_gotoxy
  4680                           
  4681                           ;main.c: 615:     lcdPrint(TxtBuf);
  4682  00157A  D943               	call	PL14	;call to abstracted procedure
  4683  00157C  ECD9  F016         	call	_lcdPrint	;wreg free
  4684                           
  4685                           ;main.c: 617:     sprintf(TxtBuf, "Coe:%.4f", coef);
  4686  001580  D94C               	call	PL32	;call to abstracted procedure
  4687  001582  0ED2               	movlw	low STR_25
  4688  001584  6FD7               	movwf	sprintf@fmt& (0+255),b
  4689  001586  0E7F               	movlw	high STR_25
  4690  001588  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4691  00158A  C108  F1D9         	movff	_coef,?_sprintf+4
  4692  00158E  C109  F1DA         	movff	_coef+1,?_sprintf+5
  4693  001592  C10A  F1DB         	movff	_coef+2,?_sprintf+6
  4694  001596  C10B  F1DC         	movff	_coef+3,?_sprintf+7
  4695  00159A  ECEF  F01C         	call	_sprintf	;wreg free
  4696                           
  4697                           ; BSR set to: 1
  4698                           ;main.c: 618:     lcd_gotoxy(1, 4);
  4699  00159E  D971               	call	PL212	;call to abstracted procedure
  4700  0015A0  EC12  F01D         	call	_lcd_gotoxy
  4701                           
  4702                           ;main.c: 619:     lcdPrint(TxtBuf);
  4703  0015A4  D92E               	call	PL14	;call to abstracted procedure
  4704  0015A6  ECD9  F016         	call	_lcdPrint	;wreg free
  4705                           
  4706                           ;main.c: 621:     lcd_gotoxy(12, 4);
  4707  0015AA  0E04               	movlw	4
  4708  0015AC  6E1F               	movwf	lcd_gotoxy@y^0,c
  4709  0015AE  0E0C               	movlw	12
  4710  0015B0  EC12  F01D         	call	_lcd_gotoxy
  4711                           
  4712                           ;main.c: 622:     lcd_putc('T');
  4713  0015B4  0E54               	movlw	84
  4714  0015B6  EC59  F01F         	call	_lcd_putc
  4715                           
  4716                           ;main.c: 623:     lcd_putc(':');
  4717  0015BA  0E3A               	movlw	58
  4718  0015BC  EC59  F01F         	call	_lcd_putc
  4719                           
  4720                           ;main.c: 624:     if (isTemp == 1) {
  4721  0015C0  0101               	movlb	1	; () banked
  4722  0015C2  0528               	decf	_isTemp& (0+255),w,b
  4723  0015C4  E001 D09B          	bnz	l9732
  4724                           
  4725                           ; BSR set to: 1
  4726                           ;main.c: 625:         if (((temperature / 1000) % 10) == 0) {
  4727  0015C8  D94B               	call	PL116	;call to abstracted procedure
  4728  0015CA  D921               	call	PL28	;call to abstracted procedure
  4729  0015CC  ECCA  F01C         	call	___lwdiv	;wreg free
  4730  0015D0  D90F               	call	PL10	;call to abstracted procedure
  4731  0015D2  EC53  F01D         	call	___lwmod	;wreg free
  4732  0015D6  5160               	movf	?___lwmod& (0+255),w,b
  4733  0015D8  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4734  0015DA  E15C               	bnz	l9730
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;main.c: 626:             if (((temperature / 100) % 10) == 0) {
  4738  0015DC  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4739  0015DE  0E64               	movlw	100
  4740  0015E0  D916               	call	PL28	;call to abstracted procedure
  4741  0015E2  ECCA  F01C         	call	___lwdiv	;wreg free
  4742  0015E6  D904               	call	PL10	;call to abstracted procedure
  4743  0015E8  EC53  F01D         	call	___lwmod	;wreg free
  4744  0015EC  5160               	movf	?___lwmod& (0+255),w,b
  4745  0015EE  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4746  0015F0  E124               	bnz	l9728
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;main.c: 627:                 lcd_putc(((temperature / 10) % 10) + 48);
  4750  0015F2  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4751  0015F4  0E0A               	movlw	10
  4752  0015F6  D90B               	call	PL28	;call to abstracted procedure
  4753  0015F8  ECCA  F01C         	call	___lwdiv	;wreg free
  4754  0015FC  D8F9               	call	PL10	;call to abstracted procedure
  4755  0015FE  EC53  F01D         	call	___lwmod	;wreg free
  4756  001602  5160               	movf	?___lwmod& (0+255),w,b
  4757  001604  0F30               	addlw	48
  4758  001606  EC59  F01F         	call	_lcd_putc
  4759                           
  4760                           ;main.c: 628:                 lcd_putc('.');
  4761  00160A  0E2E               	movlw	46
  4762  00160C  EC59  F01F         	call	_lcd_putc
  4763                           
  4764                           ;main.c: 629:                 lcd_putc((temperature % 10) + 48);
  4765  001610  D90F               	call	PL54	;call to abstracted procedure
  4766  001612  D909               	call	PL38	;call to abstracted procedure
  4767  001614  EC53  F01D         	call	___lwmod	;wreg free
  4768  001618  5160               	movf	?___lwmod& (0+255),w,b
  4769  00161A  0F30               	addlw	48
  4770  00161C  EC59  F01F         	call	_lcd_putc
  4771                           
  4772                           ;main.c: 630:                 lcd_putc(7);
  4773  001620  0E07               	movlw	7
  4774  001622  EC59  F01F         	call	_lcd_putc
  4775                           
  4776                           ;main.c: 631:                 lcd_putc(' ');
  4777  001626  0E20               	movlw	32
  4778  001628  EC59  F01F         	call	_lcd_putc
  4779                           
  4780                           ;main.c: 632:                 lcd_putc(' ');
  4781  00162C  0E20               	movlw	32
  4782  00162E  EC59  F01F         	call	_lcd_putc
  4783                           
  4784                           ;main.c: 633:                 lcd_putc(' ');
  4785  001632  0E20               	movlw	32
  4786  001634  EC59  F01F         	call	_lcd_putc
  4787                           
  4788                           ;main.c: 635:             } else {
  4789  001638  D07A               	goto	l9736
  4790  00163A                     l9728:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;main.c: 636:                 lcd_putc(((temperature / 100) % 10) + 48);
  4794  00163A  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4795  00163C  0E64               	movlw	100
  4796  00163E  D8E7               	call	PL28	;call to abstracted procedure
  4797  001640  ECCA  F01C         	call	___lwdiv	;wreg free
  4798  001644  D8D5               	call	PL10	;call to abstracted procedure
  4799  001646  EC53  F01D         	call	___lwmod	;wreg free
  4800  00164A  5160               	movf	?___lwmod& (0+255),w,b
  4801  00164C  0F30               	addlw	48
  4802  00164E  EC59  F01F         	call	_lcd_putc
  4803                           
  4804                           ;main.c: 637:                 lcd_putc(((temperature / 10) % 10) + 48);
  4805  001652  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4806  001654  0E0A               	movlw	10
  4807  001656  D8DB               	call	PL28	;call to abstracted procedure
  4808  001658  ECCA  F01C         	call	___lwdiv	;wreg free
  4809  00165C  D8C9               	call	PL10	;call to abstracted procedure
  4810  00165E  EC53  F01D         	call	___lwmod	;wreg free
  4811  001662  5160               	movf	?___lwmod& (0+255),w,b
  4812  001664  0F30               	addlw	48
  4813  001666  EC59  F01F         	call	_lcd_putc
  4814                           
  4815                           ;main.c: 638:                 lcd_putc('.');
  4816  00166A  0E2E               	movlw	46
  4817  00166C  EC59  F01F         	call	_lcd_putc
  4818                           
  4819                           ;main.c: 639:                 lcd_putc((temperature % 10) + 48);
  4820  001670  D8DF               	call	PL54	;call to abstracted procedure
  4821  001672  D8D9               	call	PL38	;call to abstracted procedure
  4822  001674  EC53  F01D         	call	___lwmod	;wreg free
  4823  001678  5160               	movf	?___lwmod& (0+255),w,b
  4824  00167A  0F30               	addlw	48
  4825  00167C  EC59  F01F         	call	_lcd_putc
  4826                           
  4827                           ;main.c: 640:                 lcd_putc(7);
  4828  001680  0E07               	movlw	7
  4829  001682  EC59  F01F         	call	_lcd_putc
  4830                           
  4831                           ;main.c: 641:                 lcd_putc(' ');
  4832  001686  0E20               	movlw	32
  4833  001688  EC59  F01F         	call	_lcd_putc
  4834                           
  4835                           ;main.c: 642:                 lcd_putc(' ');
  4836  00168C  0E20               	movlw	32
  4837  00168E  EC59  F01F         	call	_lcd_putc
  4838  001692  D04D               	goto	l9736
  4839  001694                     l9730:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;main.c: 646:             lcd_putc(((temperature / 1000) % 10) + 48);
  4843  001694  D8E5               	call	PL116	;call to abstracted procedure
  4844  001696  D8BB               	call	PL28	;call to abstracted procedure
  4845  001698  ECCA  F01C         	call	___lwdiv	;wreg free
  4846  00169C  D8A9               	call	PL10	;call to abstracted procedure
  4847  00169E  EC53  F01D         	call	___lwmod	;wreg free
  4848  0016A2  5160               	movf	?___lwmod& (0+255),w,b
  4849  0016A4  0F30               	addlw	48
  4850  0016A6  EC59  F01F         	call	_lcd_putc
  4851                           
  4852                           ;main.c: 647:             lcd_putc(((temperature / 100) % 10) + 48);
  4853  0016AA  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4854  0016AC  0E64               	movlw	100
  4855  0016AE  D8AF               	call	PL28	;call to abstracted procedure
  4856  0016B0  ECCA  F01C         	call	___lwdiv	;wreg free
  4857  0016B4  D89D               	call	PL10	;call to abstracted procedure
  4858  0016B6  EC53  F01D         	call	___lwmod	;wreg free
  4859  0016BA  5160               	movf	?___lwmod& (0+255),w,b
  4860  0016BC  0F30               	addlw	48
  4861  0016BE  EC59  F01F         	call	_lcd_putc
  4862                           
  4863                           ;main.c: 648:             lcd_putc(((temperature / 10) % 10) + 48);
  4864  0016C2  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
  4865  0016C4  0E0A               	movlw	10
  4866  0016C6  D8A3               	call	PL28	;call to abstracted procedure
  4867  0016C8  ECCA  F01C         	call	___lwdiv	;wreg free
  4868  0016CC  D891               	call	PL10	;call to abstracted procedure
  4869  0016CE  EC53  F01D         	call	___lwmod	;wreg free
  4870  0016D2  5160               	movf	?___lwmod& (0+255),w,b
  4871  0016D4  0F30               	addlw	48
  4872  0016D6  EC59  F01F         	call	_lcd_putc
  4873                           
  4874                           ;main.c: 649:             lcd_putc('.');
  4875  0016DA  0E2E               	movlw	46
  4876  0016DC  EC59  F01F         	call	_lcd_putc
  4877                           
  4878                           ;main.c: 650:             lcd_putc((temperature % 10) + 48);
  4879  0016E0  D8A7               	call	PL54	;call to abstracted procedure
  4880  0016E2  D8A1               	call	PL38	;call to abstracted procedure
  4881  0016E4  EC53  F01D         	call	___lwmod	;wreg free
  4882  0016E8  5160               	movf	?___lwmod& (0+255),w,b
  4883  0016EA  0F30               	addlw	48
  4884  0016EC  EC59  F01F         	call	_lcd_putc
  4885                           
  4886                           ;main.c: 651:             lcd_putc(7);
  4887  0016F0  0E07               	movlw	7
  4888  0016F2  EC59  F01F         	call	_lcd_putc
  4889                           
  4890                           ;main.c: 652:             lcd_putc(' ');
  4891  0016F6  0E20               	movlw	32
  4892  0016F8  EC59  F01F         	call	_lcd_putc
  4893  0016FC  D018               	goto	l9736
  4894  0016FE                     l9732:
  4895                           
  4896                           ; BSR set to: 1
  4897  0016FE  0E03               	movlw	3
  4898  001700  1928               	xorwf	_isTemp& (0+255),w,b
  4899  001702  E115               	bnz	l9736
  4900                           
  4901                           ; BSR set to: 1
  4902                           ;main.c: 656:         lcd_putc('?');
  4903  001704  0E3F               	movlw	63
  4904  001706  EC59  F01F         	call	_lcd_putc
  4905                           
  4906                           ;main.c: 657:         lcd_putc('?');
  4907  00170A  0E3F               	movlw	63
  4908  00170C  EC59  F01F         	call	_lcd_putc
  4909                           
  4910                           ;main.c: 658:         lcd_putc('?');
  4911  001710  0E3F               	movlw	63
  4912  001712  EC59  F01F         	call	_lcd_putc
  4913                           
  4914                           ;main.c: 659:         lcd_putc(' ');
  4915  001716  0E20               	movlw	32
  4916  001718  EC59  F01F         	call	_lcd_putc
  4917                           
  4918                           ;main.c: 660:         lcd_putc(' ');
  4919  00171C  0E20               	movlw	32
  4920  00171E  EC59  F01F         	call	_lcd_putc
  4921                           
  4922                           ;main.c: 661:         lcd_putc(' ');
  4923  001722  0E20               	movlw	32
  4924  001724  EC59  F01F         	call	_lcd_putc
  4925                           
  4926                           ;main.c: 662:         lcd_putc(' ');
  4927  001728  0E20               	movlw	32
  4928  00172A  EC59  F01F         	call	_lcd_putc
  4929  00172E                     l9736:
  4930                           
  4931                           ;main.c: 665:     if ((tick_t1_1 <= 100) && (show_tp)) {
  4932  00172E  0E65               	movlw	101
  4933  001730  0101               	movlb	1	; () banked
  4934  001732  612B               	cpfslt	_tick_t1_1& (0+255),b
  4935  001734  D03B               	goto	l9758
  4936                           
  4937                           ; BSR set to: 1
  4938  001736  A843               	btfss	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4939  001738  D039               	goto	l9758
  4940                           
  4941                           ; BSR set to: 1
  4942                           ;main.c: 667:         pwr_dsp = calc_power((uint8_t) EncData, t_res, 220);
  4943  00173A  D889               	call	PL110	;call to abstracted procedure
  4944  00173C  0100               	movlb	0	; () banked
  4945  00173E  6B6F               	clrf	(calc_power@u_rl+1)& (0+255),b
  4946  001740  0EDC               	movlw	220
  4947  001742  6F6E               	movwf	calc_power@u_rl& (0+255),b
  4948  001744  0101               	movlb	1	; () banked
  4949  001746  5116               	movf	_EncData& (0+255),w,b
  4950  001748  EC61  F013         	call	_calc_power
  4951  00174C  C06A  F0F9         	movff	?_calc_power,show_lcd_main@pwr_dsp
  4952  001750  C06B  F0FA         	movff	?_calc_power+1,show_lcd_main@pwr_dsp+1
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;main.c: 668:         sprintf(TxtBuf, "ClcP:%c%04uW %c=%u.%u", 0x01, pwr_dsp, 0x02, r_wh
      +                          ole, r_dec);
  4956  001754  D862               	call	PL32	;call to abstracted procedure
  4957  001756  0E70               	movlw	low STR_26
  4958  001758  6FD7               	movwf	sprintf@fmt& (0+255),b
  4959  00175A  0E7E               	movlw	high STR_26
  4960  00175C  D88D               	call	PL198	;call to abstracted procedure
  4961  00175E  C0F9  F1DB         	movff	show_lcd_main@pwr_dsp,?_sprintf+6
  4962  001762  C0FA  F1DC         	movff	show_lcd_main@pwr_dsp+1,?_sprintf+7
  4963  001766  D869               	call	PL84	;call to abstracted procedure
  4964  001768  ECEF  F01C         	call	_sprintf	;wreg free
  4965                           
  4966                           ; BSR set to: 1
  4967                           ;main.c: 669:         lcd_gotoxy(1, 3);
  4968  00176C  ECCD  F004         	call	PL128	;call to abstracted procedure
  4969  001770  EC12  F01D         	call	_lcd_gotoxy
  4970                           
  4971                           ;main.c: 670:         lcdPrint(TxtBuf);
  4972  001774  D846               	call	PL14	;call to abstracted procedure
  4973  001776  ECD9  F016         	call	_lcdPrint	;wreg free
  4974                           
  4975                           ;main.c: 671:         if (is_power) {
  4976  00177A  AA43               	btfss	(_is_power/(0+8))^0,_is_power& (0+7),c
  4977  00177C  D005               	goto	l9752
  4978                           
  4979                           ;main.c: 672:             sprintf(TxtBuf, "PwU:%u%%*", EncData);
  4980  00177E  D84D               	call	PL32	;call to abstracted procedure
  4981  001780  D872               	call	PL124	;call to abstracted procedure
  4982  001782  ECEF  F01C         	call	_sprintf	;wreg free
  4983                           
  4984                           ;main.c: 673:         } else {
  4985  001786  D00B               	goto	l9754
  4986  001788                     l9752:
  4987                           
  4988                           ;main.c: 674:             sprintf(TxtBuf, "PwU:%u%%  ", EncData);
  4989  001788  D848               	call	PL32	;call to abstracted procedure
  4990  00178A  0E7F               	movlw	low STR_28
  4991  00178C  6FD7               	movwf	sprintf@fmt& (0+255),b
  4992  00178E  0E7F               	movlw	high STR_28
  4993  001790  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4994  001792  C116  F1D9         	movff	_EncData,?_sprintf+4
  4995  001796  C117  F1DA         	movff	_EncData+1,?_sprintf+5
  4996  00179A  ECEF  F01C         	call	_sprintf	;wreg free
  4997  00179E                     l9754:
  4998                           
  4999                           ; BSR set to: 1
  5000                           ;main.c: 676:         lcd_gotoxy(1, 2);
  5001  00179E  ECD0  F004         	call	PL130	;call to abstracted procedure
  5002  0017A2  EC12  F01D         	call	_lcd_gotoxy
  5003                           
  5004                           ;main.c: 677:         lcdPrint(TxtBuf);
  5005  0017A6  D82D               	call	PL14	;call to abstracted procedure
  5006  0017A8  EFD9  F016         	goto	_lcdPrint	;wreg free
  5007  0017AC                     l9758:
  5008                           
  5009                           ; BSR set to: 1
  5010                           ;main.c: 679:         sprintf(TxtBuf, "ApxP:%c%04uW %c=%u.%u", 0x01, watt_disp, 0x02, r_
      +                          whole, r_dec);
  5011  0017AC  ECB6  F004         	call	PL88	;call to abstracted procedure
  5012  0017B0  0E86               	movlw	low STR_29
  5013  0017B2  6FD7               	movwf	sprintf@fmt& (0+255),b
  5014  0017B4  0E7E               	movlw	high STR_29
  5015  0017B6  D860               	call	PL198	;call to abstracted procedure
  5016  0017B8  C118  F1DB         	movff	_watt_disp,?_sprintf+6
  5017  0017BC  C119  F1DC         	movff	_watt_disp+1,?_sprintf+7
  5018  0017C0  D83C               	call	PL84	;call to abstracted procedure
  5019  0017C2  ECEF  F01C         	call	_sprintf	;wreg free
  5020                           
  5021                           ; BSR set to: 1
  5022                           ;main.c: 680:         show_tp = 0;
  5023  0017C6  9843               	bcf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  5024                           
  5025                           ; BSR set to: 1
  5026                           ;main.c: 681:         lcd_gotoxy(1, 3);
  5027  0017C8  ECCD  F004         	call	PL128	;call to abstracted procedure
  5028  0017CC  EC12  F01D         	call	_lcd_gotoxy
  5029                           
  5030                           ;main.c: 682:         lcdPrint(TxtBuf);
  5031  0017D0  D818               	call	PL14	;call to abstracted procedure
  5032  0017D2  ECD9  F016         	call	_lcdPrint	;wreg free
  5033                           
  5034                           ;main.c: 683:         sprintf(TxtBuf, "PwU:%u%%*", EncData);
  5035  0017D6  D821               	call	PL32	;call to abstracted procedure
  5036  0017D8  D846               	call	PL124	;call to abstracted procedure
  5037  0017DA  ECEF  F01C         	call	_sprintf	;wreg free
  5038                           
  5039                           ; BSR set to: 1
  5040                           ;main.c: 684:         lcd_gotoxy(1, 2);
  5041  0017DE  ECD0  F004         	call	PL130	;call to abstracted procedure
  5042  0017E2  EC12  F01D         	call	_lcd_gotoxy
  5043                           
  5044                           ;main.c: 685:         lcdPrint(TxtBuf);
  5045  0017E6  D80D               	call	PL14	;call to abstracted procedure
  5046  0017E8  ECD9  F016         	call	_lcdPrint	;wreg free
  5047                           
  5048                           ;main.c: 686:         EncData = power;
  5049  0017EC  EFD3  F004         	goto	PL132	;call to abstracted procedure
  5050  0017F0                     __end_of_show_lcd_main:
  5051                           	callstack 0
  5052  0017F0                     PL10:
  5053                           	callstack 19
  5054  0017F0  C01B  F060         	movff	?___lwdiv,___lwmod@dividend
  5055  0017F4  C01C  F061         	movff	?___lwdiv+1,___lwmod@dividend+1
  5056  0017F8  0100               	movlb	0	; () banked
  5057  0017FA  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  5058  0017FC  0E0A               	movlw	10
  5059  0017FE  6F62               	movwf	___lwmod@divisor& (0+255),b
  5060  001800  0C0A               	retlw	10
  5061  001802                     __end_ofPL10:
  5062                           	callstack 0
  5063  001802                     PL14:
  5064                           	callstack 19
  5065  001802  0E7D               	movlw	low _TxtBuf
  5066  001804  0100               	movlb	0	; () banked
  5067  001806  6F60               	movwf	lcdPrint@t& (0+255),b
  5068  001808  0E01               	movlw	high _TxtBuf
  5069  00180A  6F61               	movwf	(lcdPrint@t+1)& (0+255),b
  5070  00180C  0012               	return	
  5071  00180E                     __end_ofPL14:
  5072                           	callstack 0
  5073  00180E                     PL28:
  5074                           	callstack 19
  5075  00180E  6E1D               	movwf	___lwdiv@divisor^0,c
  5076  001810  C19D  F01B         	movff	_temperature,___lwdiv@dividend
  5077  001814  C19E  F01C         	movff	_temperature+1,___lwdiv@dividend+1
  5078  001818  0012               	return	
  5079  00181A                     __end_ofPL28:
  5080                           	callstack 0
  5081  00181A                     PL32:
  5082                           	callstack 19
  5083  00181A  0E7D               	movlw	low _TxtBuf
  5084  00181C  0101               	movlb	1	; () banked
  5085  00181E  6FD5               	movwf	sprintf@s& (0+255),b
  5086  001820  0E01               	movlw	high _TxtBuf
  5087  001822  6FD6               	movwf	(sprintf@s+1)& (0+255),b
  5088  001824  0012               	return	
  5089  001826                     __end_ofPL32:
  5090                           	callstack 0
  5091  001826                     PL38:
  5092                           	callstack 19
  5093  001826  0100               	movlb	0	; () banked
  5094  001828  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  5095  00182A  0E0A               	movlw	10
  5096  00182C  6F62               	movwf	___lwmod@divisor& (0+255),b
  5097  00182E  0C0A               	retlw	10
  5098  001830                     __end_ofPL38:
  5099                           	callstack 0
  5100  001830                     PL54:
  5101                           	callstack 19
  5102  001830  C19D  F060         	movff	_temperature,___lwmod@dividend
  5103  001834  C19E  F061         	movff	_temperature+1,___lwmod@dividend+1
  5104  001838  0012               	return	
  5105  00183A                     __end_ofPL54:
  5106                           	callstack 0
  5107  00183A                     PL84:
  5108                           	callstack 19
  5109  00183A  6BDE               	clrf	(?_sprintf+9)& (0+255),b
  5110  00183C  0E02               	movlw	2
  5111  00183E  6FDD               	movwf	(?_sprintf+8)& (0+255),b
  5112  001840  C11F  F1DF         	movff	_r_whole,?_sprintf+10
  5113  001844  6BE0               	clrf	(?_sprintf+11)& (0+255),b
  5114  001846  C11E  F1E1         	movff	_r_dec,?_sprintf+12
  5115  00184A  6BE2               	clrf	(?_sprintf+13)& (0+255),b
  5116  00184C  0012               	return	
  5117  00184E                     __end_ofPL84:
  5118                           	callstack 0
  5119  00184E                     PL110:
  5120                           	callstack 19
  5121  00184E  C104  F06A         	movff	_t_res,calc_power@res
  5122  001852  C105  F06B         	movff	_t_res+1,calc_power@res+1
  5123  001856  C106  F06C         	movff	_t_res+2,calc_power@res+2
  5124  00185A  C107  F06D         	movff	_t_res+3,calc_power@res+3
  5125  00185E  0012               	return	
  5126  001860                     __end_ofPL110:
  5127                           	callstack 0
  5128  001860                     PL116:
  5129                           	callstack 19
  5130  001860  0E03               	movlw	3
  5131  001862  6E1E               	movwf	(___lwdiv@divisor+1)^0,c
  5132  001864  0CE8               	retlw	232
  5133  001866                     __end_ofPL116:
  5134                           	callstack 0
  5135  001866                     PL124:
  5136                           	callstack 19
  5137  001866  0EBF               	movlw	low STR_27
  5138  001868  6FD7               	movwf	sprintf@fmt& (0+255),b
  5139  00186A  0E7F               	movlw	high STR_27
  5140  00186C  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  5141  00186E  C116  F1D9         	movff	_EncData,?_sprintf+4
  5142  001872  C117  F1DA         	movff	_EncData+1,?_sprintf+5
  5143  001876  0012               	return	
  5144  001878                     __end_ofPL124:
  5145                           	callstack 0
  5146  001878                     PL198:
  5147                           	callstack 19
  5148  001878  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  5149  00187A  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  5150  00187C  0E01               	movlw	1
  5151  00187E  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  5152  001880  0C01               	retlw	1
  5153  001882                     __end_ofPL198:
  5154                           	callstack 0
  5155  001882                     PL212:
  5156                           	callstack 19
  5157  001882  0E04               	movlw	4
  5158  001884  6E1F               	movwf	lcd_gotoxy@y^0,c
  5159  001886  0C01               	retlw	1
  5160  001888                     __end_ofPL212:
  5161                           	callstack 0
  5162  001888                     PL214:
  5163                           	callstack 19
  5164  001888  0E01               	movlw	1
  5165  00188A  6E1F               	movwf	lcd_gotoxy@y^0,c
  5166  00188C  0C0B               	retlw	11
  5167  00188E                     __end_ofPL214:
  5168                           	callstack 0
  5169                           
  5170 ;; *************** function _sprintf *****************
  5171 ;; Defined at:
  5172 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  s               2   50[BANK1 ] PTR unsigned char 
  5175 ;;		 -> TxtBuf(21), 
  5176 ;;  fmt             2   52[BANK1 ] PTR const unsigned char 
  5177 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5178 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5179 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5180 ;;		 -> STR_2(15), 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  f              11   66[BANK1 ] struct _IO_FILE
  5183 ;;  ap              2   64[BANK1 ] PTR void [1]
  5184 ;;		 -> ?_sprintf(2), 
  5185 ;;  ret             2    0        int 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  2   50[BANK1 ] int 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 3F/1
  5192 ;;		On exit  : 3F/1
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5195 ;;      Params:         0       0      14       0       0       0       0
  5196 ;;      Locals:         0       0      13       0       0       0       0
  5197 ;;      Temps:          0       0       0       0       0       0       0
  5198 ;;      Totals:         0       0      27       0       0       0       0
  5199 ;;Total ram usage:       27 bytes
  5200 ;; Hardware stack levels used: 1
  5201 ;; Hardware stack levels required when called: 10
  5202 ;; This function calls:
  5203 ;;		_vfprintf
  5204 ;; This function is called by:
  5205 ;;		_main
  5206 ;;		_show_lcd_main
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text5
  5211  0039DE                     __ptext5:
  5212                           	callstack 0
  5213  0039DE                     _sprintf:
  5214                           	callstack 20
  5215                           
  5216                           ; BSR set to: 1
  5217                           
  5218                           ;incstack = 0
  5219  0039DE  0ED9               	movlw	low (?_sprintf+4)
  5220  0039E0  6FE3               	movwf	sprintf@ap& (0+255),b
  5221  0039E2  0E01               	movlw	high (?_sprintf+4)
  5222  0039E4  6FE4               	movwf	(sprintf@ap+1)& (0+255),b
  5223  0039E6  C1D5  F1E5         	movff	sprintf@s,sprintf@f
  5224  0039EA  C1D6  F1E6         	movff	sprintf@s+1,sprintf@f+1
  5225                           
  5226                           ; BSR set to: 1
  5227  0039EE  6BE8               	clrf	(sprintf@f+3)& (0+255),b
  5228  0039F0  6BE9               	clrf	(sprintf@f+4)& (0+255),b
  5229                           
  5230                           ; BSR set to: 1
  5231  0039F2  6BEE               	clrf	(sprintf@f+9)& (0+255),b
  5232  0039F4  6BEF               	clrf	(sprintf@f+10)& (0+255),b
  5233                           
  5234                           ; BSR set to: 1
  5235  0039F6  0EE5               	movlw	low sprintf@f
  5236  0039F8  0100               	movlb	0	; () banked
  5237  0039FA  6FF1               	movwf	vfprintf@fp& (0+255),b
  5238  0039FC  0E01               	movlw	high sprintf@f
  5239  0039FE  6FF2               	movwf	(vfprintf@fp+1)& (0+255),b
  5240  003A00  C1D7  F0F3         	movff	sprintf@fmt,vfprintf@fmt
  5241  003A04  C1D8  F0F4         	movff	sprintf@fmt+1,vfprintf@fmt+1
  5242  003A08  0EE3               	movlw	low sprintf@ap
  5243  003A0A  6FF5               	movwf	vfprintf@ap& (0+255),b
  5244  003A0C  0E01               	movlw	high sprintf@ap
  5245  003A0E  6FF6               	movwf	(vfprintf@ap+1)& (0+255),b
  5246  003A10  ECE0  F01B         	call	_vfprintf	;wreg free
  5247                           
  5248                           ; BSR set to: 1
  5249  003A14  51E8               	movf	(sprintf@f+3)& (0+255),w,b
  5250  003A16  25D5               	addwf	sprintf@s& (0+255),w,b
  5251  003A18  6ED9               	movwf	fsr2l,c
  5252  003A1A  51E9               	movf	(sprintf@f+4)& (0+255),w,b
  5253  003A1C  21D6               	addwfc	(sprintf@s+1)& (0+255),w,b
  5254  003A1E  6EDA               	movwf	fsr2h,c
  5255  003A20  6ADF               	clrf	indf2,c
  5256                           
  5257                           ; BSR set to: 1
  5258  003A22  0C00               	retlw	0	;funcret
  5259  003A24                     __end_of_sprintf:
  5260                           	callstack 0
  5261                           
  5262 ;; *************** function _vfprintf *****************
  5263 ;; Defined at:
  5264 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  fp              2  145[BANK0 ] PTR struct _IO_FILE
  5267 ;;		 -> sprintf@f(11), 
  5268 ;;  fmt             2  147[BANK0 ] PTR const unsigned char 
  5269 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5270 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5271 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5272 ;;		 -> STR_2(15), 
  5273 ;;  ap              2  149[BANK0 ] PTR PTR void 
  5274 ;;		 -> sprintf@ap(2), 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  cfmt            2  151[BANK0 ] PTR unsigned char 
  5277 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5278 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5279 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5280 ;;		 -> STR_2(15), 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  2  145[BANK0 ] int 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 3F/0
  5287 ;;		On exit  : 3F/1
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5290 ;;      Params:         0       6       0       0       0       0       0
  5291 ;;      Locals:         0       2       0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0
  5293 ;;      Totals:         0       8       0       0       0       0       0
  5294 ;;Total ram usage:        8 bytes
  5295 ;; Hardware stack levels used: 1
  5296 ;; Hardware stack levels required when called: 9
  5297 ;; This function calls:
  5298 ;;		_vfpfcnvrt
  5299 ;; This function is called by:
  5300 ;;		_sprintf
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text6
  5305  0037C0                     __ptext6:
  5306                           	callstack 0
  5307  0037C0                     _vfprintf:
  5308                           	callstack 20
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  5312                           
  5313                           ; BSR set to: 1
  5314                           ;incstack = 0
  5315  0037C0  C0F3  F0F7         	movff	vfprintf@fmt,vfprintf@cfmt
  5316  0037C4  C0F4  F0F8         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  5320  0037C8  0101               	movlb	1	; () banked
  5321  0037CA  6B14               	clrf	_nout& (0+255),b
  5322  0037CC  6B15               	clrf	(_nout+1)& (0+255),b
  5323                           
  5324                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  5325  0037CE  D014               	goto	l9256
  5326  0037D0                     l9254:
  5327                           
  5328                           ; BSR set to: 1
  5329                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  5330  0037D0  C0F1  F0D2         	movff	vfprintf@fp,vfpfcnvrt@fp
  5331  0037D4  C0F2  F0D3         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  5332  0037D8  0EF7               	movlw	low vfprintf@cfmt
  5333  0037DA  0100               	movlb	0	; () banked
  5334  0037DC  6FD4               	movwf	vfpfcnvrt@fmt& (0+255),b
  5335  0037DE  C0F5  F0D5         	movff	vfprintf@ap,vfpfcnvrt@ap
  5336  0037E2  C0F6  F0D6         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  5337  0037E6  ECA0  F008         	call	_vfpfcnvrt	;wreg free
  5338  0037EA  51D2               	movf	?_vfpfcnvrt& (0+255),w,b
  5339  0037EC  0101               	movlb	1	; () banked
  5340  0037EE  2714               	addwf	_nout& (0+255),f,b
  5341  0037F0  0100               	movlb	0	; () banked
  5342  0037F2  51D3               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  5343  0037F4  0101               	movlb	1	; () banked
  5344  0037F6  2315               	addwfc	(_nout+1)& (0+255),f,b
  5345  0037F8                     l9256:
  5346                           
  5347                           ; BSR set to: 1
  5348                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  5349  0037F8  C0F7  FFF6         	movff	vfprintf@cfmt,tblptrl
  5350  0037FC  C0F8  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  5351  003800                     	if	0	;tblptru may be non-zero
  5352  003800                     	endif
  5353  003800                     	if	0	;tblptru may be non-zero
  5354  003800                     	endif
  5355  003800  0008               	tblrd		*
  5356  003802  50F5               	movf	tablat,w,c
  5357  003804  E1E5               	bnz	l9254
  5358                           
  5359                           ; BSR set to: 1
  5360                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  5361  003806  C114  F0F1         	movff	_nout,?_vfprintf
  5362  00380A  C115  F0F2         	movff	_nout+1,?_vfprintf+1
  5363                           
  5364                           ; BSR set to: 1
  5365  00380E  0012               	return		;funcret
  5366  003810                     __end_of_vfprintf:
  5367                           	callstack 0
  5368                           
  5369 ;; *************** function _vfpfcnvrt *****************
  5370 ;; Defined at:
  5371 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  fp              2  114[BANK0 ] PTR struct _IO_FILE
  5374 ;;		 -> sprintf@f(11), 
  5375 ;;  fmt             1  116[BANK0 ] PTR PTR unsigned char 
  5376 ;;		 -> vfprintf@cfmt(2), 
  5377 ;;  ap              2  117[BANK0 ] PTR PTR void 
  5378 ;;		 -> sprintf@ap(2), 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  llu             8  123[BANK0 ] unsigned long long 
  5381 ;;  ll              8    0        long long 
  5382 ;;  f               4  137[BANK0 ] long long 
  5383 ;;  ct              3  141[BANK0 ] unsigned char [3]
  5384 ;;  vp              3    0        PTR void 
  5385 ;;  done            2  133[BANK0 ] int 
  5386 ;;  cp              2  131[BANK0 ] PTR unsigned char 
  5387 ;;		 -> ?_sprintf(2), STR_20(4), STR_19(3), U_real(2), 
  5388 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  5389 ;;  i               2    0        int 
  5390 ;;  c               1  144[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  2  114[BANK0 ] int 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 3F/0
  5397 ;;		On exit  : 3F/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5400 ;;      Params:         0       5       0       0       0       0       0
  5401 ;;      Locals:         0      22       0       0       0       0       0
  5402 ;;      Temps:          0       4       0       0       0       0       0
  5403 ;;      Totals:         0      31       0       0       0       0       0
  5404 ;;Total ram usage:       31 bytes
  5405 ;; Hardware stack levels used: 1
  5406 ;; Hardware stack levels required when called: 8
  5407 ;; This function calls:
  5408 ;;		_atoi
  5409 ;;		_ctoa
  5410 ;;		_efgtoa
  5411 ;;		_fputc
  5412 ;;		_isdigit
  5413 ;;		_isupper
  5414 ;;		_stoa
  5415 ;;		_strncmp
  5416 ;;		_tolower
  5417 ;;		_utoa
  5418 ;; This function is called by:
  5419 ;;		_vfprintf
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text7
  5424  001140                     __ptext7:
  5425                           	callstack 0
  5426  001140                     _vfpfcnvrt:
  5427                           	callstack 0
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  5431                           
  5432                           ; BSR set to: 1
  5433                           ;incstack = 0
  5434  001140  D975               	call	PL2	;call to abstracted procedure
  5435  001142  0A25               	xorlw	37
  5436  001144  E001 D169          	bnz	l9108
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  5440  001148  D9A6               	call	PL8	;call to abstracted procedure
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  5444  00114A  6A2C               	clrf	_width^0,c
  5445  00114C  6A2D               	clrf	(_width+1)^0,c
  5446  00114E  6A30               	clrf	_flags^0,c
  5447  001150  6A31               	clrf	(_flags+1)^0,c
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  5451  001152  682E               	setf	_prec^0,c
  5452  001154  682F               	setf	(_prec+1)^0,c
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
  5456  001156  6BE5               	clrf	vfpfcnvrt@done& (0+255),b
  5457  001158  6BE6               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  5458                           
  5459                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  5460  00115A  D020               	goto	l8982
  5461  00115C                     l8956:
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
  5465  00115C  8030               	bsf	_flags^0,0,c
  5466  00115E                     l8958:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
  5470  00115E  D99B               	call	PL8	;call to abstracted procedure
  5471                           
  5472                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
  5473  001160  D01D               	goto	l8982
  5474  001162                     l8960:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
  5478  001162  8230               	bsf	_flags^0,1,c
  5479  001164  D7FC               	goto	l8958
  5480  001166                     l8964:
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
  5484  001166  8430               	bsf	_flags^0,2,c
  5485  001168  D7FA               	goto	l8958
  5486  00116A                     l8968:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
  5490  00116A  8630               	bsf	_flags^0,3,c
  5491  00116C  D7F8               	goto	l8958
  5492  00116E                     l8972:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
  5496  00116E  8830               	bsf	_flags^0,4,c
  5497  001170  D7F6               	goto	l8958
  5498  001172                     l8976:
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  5502  001172  6BE6               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  5503  001174  0E01               	movlw	1
  5504  001176  6FE5               	movwf	vfpfcnvrt@done& (0+255),b
  5505                           
  5506                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  5507  001178  D011               	goto	l8982
  5508  00117A                     l8980:
  5509                           
  5510                           ; BSR set to: 0
  5511  00117A  D958               	call	PL2	;call to abstracted procedure
  5512  00117C  6FD7               	movwf	??_vfpfcnvrt& (0+255),b
  5513  00117E  6BD8               	clrf	(??_vfpfcnvrt+1)& (0+255),b
  5514                           
  5515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5516                           ; Switch size 1, requested type "space"
  5517                           ; Number of cases is 1, Range of values is 0 to 0
  5518                           ; switch strategies available:
  5519                           ; Name         Instructions Cycles
  5520                           ; simple_byte            4     3 (average)
  5521                           ;	Chosen strategy is simple_byte
  5522  001180  51D8               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  5523  001182  E1F7               	bnz	l8976
  5524                           
  5525                           ; BSR set to: 0
  5526                           ; Switch size 1, requested type "space"
  5527                           ; Number of cases is 5, Range of values is 32 to 48
  5528                           ; switch strategies available:
  5529                           ; Name         Instructions Cycles
  5530                           ; simple_byte           16     9 (average)
  5531                           ;	Chosen strategy is simple_byte
  5532  001184  51D7               	movf	??_vfpfcnvrt& (0+255),w,b
  5533  001186  0A20               	xorlw	32	; case 32
  5534  001188  E0F0               	bz	l8968
  5535  00118A  0A03               	xorlw	3	; case 35
  5536  00118C  E0F0               	bz	l8972
  5537  00118E  0A08               	xorlw	8	; case 43
  5538  001190  E0EA               	bz	l8964
  5539  001192  0A06               	xorlw	6	; case 45
  5540  001194  E0E3               	bz	l8956
  5541  001196  0A1D               	xorlw	29	; case 48
  5542  001198  E0E4               	bz	l8960
  5543  00119A  D7EB               	goto	l8976
  5544  00119C                     l8982:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  5548  00119C  51E5               	movf	vfpfcnvrt@done& (0+255),w,b
  5549  00119E  11E6               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  5550  0011A0  E0EC               	bz	l8980
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  5554  0011A2  B030               	btfsc	_flags^0,0,c
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  5558  0011A4  9230               	bcf	_flags^0,1,c
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  5562  0011A6  D942               	call	PL2	;call to abstracted procedure
  5563  0011A8  0A2A               	xorlw	42
  5564  0011AA  E10F               	bnz	l8994
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  5568  0011AC  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5569  0011AE  D97A               	call	PL12	;call to abstracted procedure
  5570                           
  5571                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  5572  0011B0  D947               	call	PL4	;call to abstracted procedure
  5573  0011B2  CFDE F02C          	movff	postinc2,_width
  5574  0011B6  CFDD F02D          	movff	postdec2,_width+1
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  5578  0011BA  AE2D               	btfss	(_width+1)^0,7,c
  5579  0011BC  D016               	goto	u10790
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  5583  0011BE  8030               	bsf	_flags^0,0,c
  5584                           
  5585                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  5586  0011C0  6C2C               	negf	_width^0,c
  5587  0011C2  1E2D               	comf	(_width+1)^0,f,c
  5588  0011C4  B0D8               	btfsc	status,0,c
  5589  0011C6  2A2D               	incf	(_width+1)^0,f,c
  5590  0011C8  D010               	goto	u10790
  5591  0011CA                     l8994:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  5595  0011CA  D98C               	call	PL142	;call to abstracted procedure
  5596  0011CC  ECC1  F017         	call	_atoi	;wreg free
  5597  0011D0  C06A  F02C         	movff	?_atoi,_width
  5598  0011D4  C06B  F02D         	movff	?_atoi+1,_width+1
  5599                           
  5600                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  5601  0011D8  D001               	goto	l9000
  5602  0011DA                     l8996:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  5606  0011DA  D95D               	call	PL8	;call to abstracted procedure
  5607  0011DC                     l9000:
  5608                           
  5609                           ; BSR set to: 0
  5610  0011DC  D967               	call	PL34	;call to abstracted procedure
  5611  0011DE  D926               	call	PL2	;call to abstracted procedure
  5612  0011E0  D979               	call	PL72	;call to abstracted procedure
  5613  0011E2  E103               	bnz	u10790
  5614  0011E4  0E0A               	movlw	10
  5615  0011E6  5DD9               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  5616  0011E8  E3F8               	bnc	l8996
  5617  0011EA                     u10790:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 762:         if (
      +                          (*fmt)[0] == '.') {
  5621  0011EA  D920               	call	PL2	;call to abstracted procedure
  5622  0011EC  0A2E               	xorlw	46
  5623  0011EE  E11E               	bnz	u10820
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 763:             
      +                          prec = 0;
  5627  0011F0  6A2E               	clrf	_prec^0,c
  5628  0011F2  6A2F               	clrf	(_prec+1)^0,c
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 764:             
      +                          ++*fmt;
  5632  0011F4  D950               	call	PL8	;call to abstracted procedure
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 765:             
      +                          if ((*fmt)[0] == '*') {
  5636  0011F6  D91A               	call	PL2	;call to abstracted procedure
  5637  0011F8  0A2A               	xorlw	42
  5638  0011FA  E108               	bnz	l9012
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 766:             
      +                              ++*fmt;
  5642  0011FC  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5643  0011FE  D952               	call	PL12	;call to abstracted procedure
  5644                           
  5645                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 767:             
      +                              prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  5646  001200  D91F               	call	PL4	;call to abstracted procedure
  5647  001202  CFDE F02E          	movff	postinc2,_prec
  5648  001206  CFDD F02F          	movff	postdec2,_prec+1
  5649                           
  5650                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 768:             
      +                          } else {
  5651  00120A  D010               	goto	u10820
  5652  00120C                     l9012:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 769:             
      +                              prec = atoi(*fmt);
  5656  00120C  D96B               	call	PL142	;call to abstracted procedure
  5657  00120E  ECC1  F017         	call	_atoi	;wreg free
  5658  001212  C06A  F02E         	movff	?_atoi,_prec
  5659  001216  C06B  F02F         	movff	?_atoi+1,_prec+1
  5660                           
  5661                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 770:             
      +                              while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  5662  00121A  D001               	goto	l9018
  5663  00121C                     l9014:
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 771:             
      +                                  ++*fmt;
  5667  00121C  D93C               	call	PL8	;call to abstracted procedure
  5668  00121E                     l9018:
  5669                           
  5670                           ; BSR set to: 0
  5671  00121E  D946               	call	PL34	;call to abstracted procedure
  5672  001220  D905               	call	PL2	;call to abstracted procedure
  5673  001222  D958               	call	PL72	;call to abstracted procedure
  5674  001224  E103               	bnz	u10820
  5675  001226  0E0A               	movlw	10
  5676  001228  5DD9               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  5677  00122A  E3F8               	bnc	l9014
  5678  00122C                     u10820:
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 779:         ct[0
      +                          ] = (char)tolower((int)(*fmt)[0]);
  5682  00122C  D8FF               	call	PL2	;call to abstracted procedure
  5683  00122E  6E21               	movwf	tolower@c^0,c
  5684  001230  6A22               	clrf	(tolower@c+1)^0,c
  5685  001232  ECE9  F01D         	call	_tolower	;wreg free
  5686  001236  5021               	movf	?_tolower^0,w,c
  5687  001238  6FED               	movwf	vfpfcnvrt@ct& (0+255),b
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 780:         if (
      +                          ct[0]) {
  5691  00123A  51ED               	movf	vfpfcnvrt@ct& (0+255),w,b
  5692  00123C  E013               	bz	l9030
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 781:             
      +                          ct[1] = (char)tolower((int)(*fmt)[1]);
  5696  00123E  D942               	call	PL70	;call to abstracted procedure
  5697  001240  2BD7               	incf	??_vfpfcnvrt& (0+255),f,b
  5698  001242  D938               	call	PL68	;call to abstracted procedure
  5699  001244  D95C               	call	PL206	;call to abstracted procedure
  5700  001246  ECE9  F01D         	call	_tolower	;wreg free
  5701  00124A  5021               	movf	?_tolower^0,w,c
  5702  00124C  6FEE               	movwf	(vfpfcnvrt@ct+1)& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 782:             
      +                          if (ct[1]) {
  5706  00124E  51EE               	movf	(vfpfcnvrt@ct+1)& (0+255),w,b
  5707  001250  E009               	bz	l9030
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 783:             
      +                              ct[2] = (char)tolower((int)(*fmt)[2]);
  5711  001252  D938               	call	PL70	;call to abstracted procedure
  5712  001254  0E02               	movlw	2
  5713  001256  27D7               	addwf	??_vfpfcnvrt& (0+255),f,b
  5714  001258  D92D               	call	PL68	;call to abstracted procedure
  5715  00125A  D951               	call	PL206	;call to abstracted procedure
  5716  00125C  ECE9  F01D         	call	_tolower	;wreg free
  5717  001260  5021               	movf	?_tolower^0,w,c
  5718  001262  6FEF               	movwf	(vfpfcnvrt@ct+2)& (0+255),b
  5719  001264                     l9030:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 814:         if (
      +                          *fmt[0] == 'c') {
  5723  001264  D8E3               	call	PL2	;call to abstracted procedure
  5724  001266  0A63               	xorlw	99
  5725  001268  E112               	bnz	l9038
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 815:             
      +                          ++*fmt;
  5729  00126A  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5730  00126C  D91B               	call	PL12	;call to abstracted procedure
  5731                           
  5732                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 816:             
      +                          c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5733  00126E  D8E8               	call	PL4	;call to abstracted procedure
  5734  001270  50DF               	movf	indf2,w,c
  5735  001272  6FF0               	movwf	vfpfcnvrt@c& (0+255),b
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 817:             
      +                          return ctoa(fp, c);
  5739  001274  C0D2  F020         	movff	vfpfcnvrt@fp,ctoa@fp
  5740  001278  C0D3  F021         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  5741  00127C  C0F0  F022         	movff	vfpfcnvrt@c,ctoa@c
  5742  001280  EC51  F01A         	call	_ctoa	;wreg free
  5743  001284  C020  F0D2         	movff	?_ctoa,?_vfpfcnvrt
  5744  001288  C021  F0D3         	movff	?_ctoa+1,?_vfpfcnvrt+1
  5745  00128C  0012               	return	
  5746  00128E                     l9038:
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 942:         if (
      +                          ct[0] == 'f') {
  5750  00128E  0E66               	movlw	102
  5751  001290  19ED               	xorwf	vfpfcnvrt@ct& (0+255),w,b
  5752  001292  E121               	bnz	l9050
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 944:             
      +                          c = (*fmt)[0];
  5756  001294  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5757  001296  6ED9               	movwf	fsr2l,c
  5758  001298  6ADA               	clrf	fsr2h,c
  5759  00129A  CFDE FFF6          	movff	postinc2,tblptrl
  5760  00129E  CFDD FFF7          	movff	postdec2,tblptrh
  5761  0012A2                     	if	0	;tblptru may be non-zero
  5762  0012A2                     	endif
  5763  0012A2                     	if	0	;tblptru may be non-zero
  5764  0012A2                     	endif
  5765  0012A2  0008               	tblrd		*
  5766  0012A4  CFF5 F0F0          	movff	tablat,vfpfcnvrt@c
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 945:             
      +                          ++*fmt;
  5770  0012A8  D8F6               	call	PL8	;call to abstracted procedure
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 946:             
      +                          f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5774  0012AA  D8DC               	call	PL6	;call to abstracted procedure
  5775  0012AC                     l9046:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 948:             
      +                          return efgtoa(fp, f, c);
  5779  0012AC  C0D2  F0C6         	movff	vfpfcnvrt@fp,efgtoa@fp
  5780  0012B0  C0D3  F0C7         	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  5781  0012B4  C0E9  F0C8         	movff	vfpfcnvrt@f,efgtoa@f
  5782  0012B8  C0EA  F0C9         	movff	vfpfcnvrt@f+1,efgtoa@f+1
  5783  0012BC  C0EB  F0CA         	movff	vfpfcnvrt@f+2,efgtoa@f+2
  5784  0012C0  C0EC  F0CB         	movff	vfpfcnvrt@f+3,efgtoa@f+3
  5785  0012C4  C0F0  F0CC         	movff	vfpfcnvrt@c,efgtoa@c
  5786  0012C8  ECEB  F004         	call	_efgtoa	;wreg free
  5787  0012CC  C0C6  F0D2         	movff	?_efgtoa,?_vfpfcnvrt
  5788  0012D0  C0C7  F0D3         	movff	?_efgtoa+1,?_vfpfcnvrt+1
  5789  0012D4  0012               	return	
  5790  0012D6                     l9050:
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 950:         if (
      +                          !strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  5794  0012D6  0EED               	movlw	low vfpfcnvrt@ct
  5795  0012D8  6E1B               	movwf	strncmp@_l^0,c
  5796  0012DA  6A1C               	clrf	(strncmp@_l+1)^0,c
  5797  0012DC  0EF9               	movlw	low STR_39
  5798  0012DE  6E1D               	movwf	strncmp@_r^0,c
  5799  0012E0  0E7F               	movlw	high STR_39
  5800  0012E2  6E1E               	movwf	(strncmp@_r+1)^0,c
  5801  0012E4  6A20               	clrf	(strncmp@n+1)^0,c
  5802  0012E6  0E02               	movlw	2
  5803  0012E8  6E1F               	movwf	strncmp@n^0,c
  5804  0012EA  ECD5  F018         	call	_strncmp	;wreg free
  5805  0012EE  501B               	movf	?_strncmp^0,w,c
  5806  0012F0  101C               	iorwf	(?_strncmp+1)^0,w,c
  5807  0012F2  E115               	bnz	l9066
  5808                           
  5809                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 952:             
      +                          c = (*fmt)[1];
  5810  0012F4  0100               	movlb	0	; () banked
  5811  0012F6  D8E6               	call	PL70	;call to abstracted procedure
  5812  0012F8  2BD7               	incf	??_vfpfcnvrt& (0+255),f,b
  5813  0012FA  D8DC               	call	PL68	;call to abstracted procedure
  5814  0012FC  CFF5 F0F0          	movff	tablat,vfpfcnvrt@c
  5815                           
  5816                           ; BSR set to: 0
  5817                           
  5818                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 953:             
      +                          if ((0 && isupper((int)(*fmt)[0]), ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  5819  001300  0EBF               	movlw	191
  5820  001302  6FD7               	movwf	??_vfpfcnvrt& (0+255),b
  5821  001304  69D8               	setf	(??_vfpfcnvrt+1)& (0+255),b
  5822  001306  D892               	call	PL2	;call to abstracted procedure
  5823  001308  D8E5               	call	PL72	;call to abstracted procedure
  5824  00130A  E100               	bnz	l9060
  5825  00130C                     l9060:
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 956:             
      +                              f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5829  00130C  D8AB               	call	PL6	;call to abstracted procedure
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 958:             
      +                          *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
  5833                           
  5834                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 957:             
      +                          }
  5835  00130E  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5836  001310  6ED9               	movwf	fsr2l,c
  5837  001312  6ADA               	clrf	fsr2h,c
  5838  001314  0E02               	movlw	2
  5839  001316  26DE               	addwf	postinc2,f,c
  5840  001318  0E00               	movlw	0
  5841  00131A  22DD               	addwfc	postdec2,f,c
  5842  00131C  D7C7               	goto	l9046
  5843  00131E                     l9066:
  5844                           
  5845                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1171:         if 
      +                          (*fmt[0] == 's' || !strncmp(*fmt, "lls", ((sizeof("lls")/sizeof("lls"[0]))-1))) {
  5846  00131E  0100               	movlb	0	; () banked
  5847  001320  D885               	call	PL2	;call to abstracted procedure
  5848  001322  0A73               	xorlw	115
  5849  001324  E013               	bz	u10900
  5850                           
  5851                           ; BSR set to: 0
  5852  001326  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5853  001328  6ED9               	movwf	fsr2l,c
  5854  00132A  6ADA               	clrf	fsr2h,c
  5855  00132C  CFDE F01B          	movff	postinc2,strncmp@_l
  5856  001330  CFDD F01C          	movff	postdec2,strncmp@_l+1
  5857  001334  0EF1               	movlw	low STR_44
  5858  001336  6E1D               	movwf	strncmp@_r^0,c
  5859  001338  0E7F               	movlw	high STR_44
  5860  00133A  6E1E               	movwf	(strncmp@_r+1)^0,c
  5861  00133C  6A20               	clrf	(strncmp@n+1)^0,c
  5862  00133E  0E03               	movlw	3
  5863  001340  6E1F               	movwf	strncmp@n^0,c
  5864  001342  ECD5  F018         	call	_strncmp	;wreg free
  5865  001346  501B               	movf	?_strncmp^0,w,c
  5866  001348  101C               	iorwf	(?_strncmp+1)^0,w,c
  5867  00134A  E124               	bnz	l9084
  5868  00134C                     u10900:
  5869                           
  5870                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1173:    *fmt += 
      +                          *fmt[0] == 's' ? 1 : ((sizeof("lls")/sizeof("lls"[0]))-1);
  5871  00134C  0100               	movlb	0	; () banked
  5872  00134E  D86E               	call	PL2	;call to abstracted procedure
  5873  001350  0A73               	xorlw	115
  5874  001352  E003               	bz	l9074
  5875                           
  5876                           ; BSR set to: 0
  5877  001354  6BE8               	clrf	(_vfpfcnvrt$2452+1)& (0+255),b
  5878  001356  0E03               	movlw	3
  5879  001358  D002               	goto	L6
  5880  00135A                     l9074:
  5881                           
  5882                           ; BSR set to: 0
  5883  00135A  6BE8               	clrf	(_vfpfcnvrt$2452+1)& (0+255),b
  5884  00135C  0E01               	movlw	1
  5885  00135E                     L6:
  5886  00135E  6FE7               	movwf	_vfpfcnvrt$2452& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889  001360  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5890  001362  6ED9               	movwf	fsr2l,c
  5891  001364  6ADA               	clrf	fsr2h,c
  5892  001366  51E7               	movf	_vfpfcnvrt$2452& (0+255),w,b
  5893  001368  26DE               	addwf	postinc2,f,c
  5894  00136A  51E8               	movf	(_vfpfcnvrt$2452+1)& (0+255),w,b
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1174:            
      +                           cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  5898  00136C  D869               	call	PL4	;call to abstracted procedure
  5899  00136E  CFDE F0E3          	movff	postinc2,vfpfcnvrt@cp
  5900  001372  CFDD F0E4          	movff	postdec2,vfpfcnvrt@cp+1
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1176:            
      +                           return stoa(fp, cp);
  5904  001376  C0D2  F020         	movff	vfpfcnvrt@fp,stoa@fp
  5905  00137A  C0D3  F021         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  5906  00137E  C0E3  F022         	movff	vfpfcnvrt@cp,stoa@s
  5907  001382  C0E4  F023         	movff	vfpfcnvrt@cp+1,stoa@s+1
  5908  001386  EC40  F015         	call	_stoa	;wreg free
  5909  00138A  C020  F0D2         	movff	?_stoa,?_vfpfcnvrt
  5910  00138E  C021  F0D3         	movff	?_stoa+1,?_vfpfcnvrt+1
  5911  001392  0012               	return	
  5912  001394                     l9084:
  5913                           
  5914                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
  5915  001394  0100               	movlb	0	; () banked
  5916  001396  D84A               	call	PL2	;call to abstracted procedure
  5917  001398  0A75               	xorlw	117
  5918  00139A  E12C               	bnz	l9092
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
  5922  00139C  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5923  00139E  D882               	call	PL12	;call to abstracted procedure
  5924                           
  5925                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
  5926  0013A0  D84F               	call	PL4	;call to abstracted procedure
  5927  0013A2  CFDE F0D9          	movff	postinc2,??_vfpfcnvrt+2
  5928  0013A6  CFDD F0DA          	movff	postdec2,??_vfpfcnvrt+3
  5929  0013AA  C0D9  F0DB         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  5930  0013AE  C0DA  F0DC         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  5931  0013B2  6BDD               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  5932  0013B4  6BDE               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  5933  0013B6  6BDF               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  5934  0013B8  6BE0               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  5935  0013BA  6BE1               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  5936  0013BC  6BE2               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
  5940  0013BE  C0D2  F073         	movff	vfpfcnvrt@fp,utoa@fp
  5941  0013C2  C0D3  F074         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  5942  0013C6  C0DB  F075         	movff	vfpfcnvrt@llu,utoa@d
  5943  0013CA  C0DC  F076         	movff	vfpfcnvrt@llu+1,utoa@d+1
  5944  0013CE  C0DD  F077         	movff	vfpfcnvrt@llu+2,utoa@d+2
  5945  0013D2  C0DE  F078         	movff	vfpfcnvrt@llu+3,utoa@d+3
  5946  0013D6  C0DF  F079         	movff	vfpfcnvrt@llu+4,utoa@d+4
  5947  0013DA  C0E0  F07A         	movff	vfpfcnvrt@llu+5,utoa@d+5
  5948  0013DE  C0E1  F07B         	movff	vfpfcnvrt@llu+6,utoa@d+6
  5949  0013E2  C0E2  F07C         	movff	vfpfcnvrt@llu+7,utoa@d+7
  5950  0013E6  EC30  F011         	call	_utoa	;wreg free
  5951  0013EA  C073  F0D2         	movff	?_utoa,?_vfpfcnvrt
  5952  0013EE  C074  F0D3         	movff	?_utoa+1,?_vfpfcnvrt+1
  5953  0013F2  0012               	return	
  5954  0013F4                     l9092:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  5958  0013F4  D81B               	call	PL2	;call to abstracted procedure
  5959  0013F6  0A25               	xorlw	37
  5960  0013F8  E10C               	bnz	l9102
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  5964  0013FA  D84D               	call	PL8	;call to abstracted procedure
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  5968  0013FC  6A1D               	clrf	(fputc@c+1)^0,c
  5969  0013FE  0E25               	movlw	37
  5970  001400  6E1C               	movwf	fputc@c^0,c
  5971  001402  D878               	call	PL182	;call to abstracted procedure
  5972  001404  EC0A  F01A         	call	_fputc	;wreg free
  5973  001408                     l9098:
  5974                           
  5975                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  5976  001408  0100               	movlb	0	; () banked
  5977  00140A  6BD3               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  5978  00140C  0E01               	movlw	1
  5979  00140E  6FD2               	movwf	?_vfpfcnvrt& (0+255),b
  5980  001410  0C01               	retlw	1
  5981  001412                     l9102:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  5985  001412  D841               	call	PL8	;call to abstracted procedure
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  5989  001414  6BD2               	clrf	?_vfpfcnvrt& (0+255),b
  5990  001416  6BD3               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  5991  001418  0012               	return	
  5992  00141A                     l9108:
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  5996  00141A  D808               	call	PL2	;call to abstracted procedure
  5997  00141C  6E1C               	movwf	fputc@c^0,c
  5998  00141E  6A1D               	clrf	(fputc@c+1)^0,c
  5999  001420  D869               	call	PL182	;call to abstracted procedure
  6000  001422  EC0A  F01A         	call	_fputc	;wreg free
  6001                           
  6002                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  6003  001426  0100               	movlb	0	; () banked
  6004  001428  D836               	call	PL8	;call to abstracted procedure
  6005  00142A  D7EE               	goto	l9098
  6006  00142C                     __end_of_vfpfcnvrt:
  6007                           	callstack 0
  6008  00142C                     PL2:
  6009                           	callstack 20
  6010  00142C  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6011  00142E  6ED9               	movwf	fsr2l,c
  6012  001430  6ADA               	clrf	fsr2h,c
  6013  001432  CFDE FFF6          	movff	postinc2,tblptrl
  6014  001436  CFDD FFF7          	movff	postdec2,tblptrh
  6015  00143A                     	if	0	;tblptru may be non-zero
  6016  00143A                     	endif
  6017  00143A                     	if	0	;tblptru may be non-zero
  6018  00143A                     	endif
  6019  00143A  0008               	tblrd		*
  6020  00143C  50F5               	movf	tablat,w,c
  6021  00143E  0012               	return	
  6022  001440                     __end_ofPL2:
  6023                           	callstack 0
  6024  001440                     PL4:
  6025                           	callstack 20
  6026  001440  22DD               	addwfc	postdec2,f,c
  6027  001442  C0D5  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  6028  001446  C0D6  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  6029  00144A  CFDF F0D7          	movff	indf2,??_vfpfcnvrt
  6030  00144E  0E02               	movlw	2
  6031  001450  26DE               	addwf	postinc2,f,c
  6032  001452  CFDF F0D8          	movff	indf2,??_vfpfcnvrt+1
  6033  001456  0E00               	movlw	0
  6034  001458  22DD               	addwfc	postdec2,f,c
  6035  00145A  C0D7  FFD9         	movff	??_vfpfcnvrt,fsr2l
  6036  00145E  C0D8  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  6037  001462  0C00               	retlw	0
  6038  001464                     __end_ofPL4:
  6039                           	callstack 0
  6040  001464                     PL6:
  6041                           	callstack 20
  6042  001464  C0D5  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  6043  001468  C0D6  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  6044  00146C  CFDF F0D7          	movff	indf2,??_vfpfcnvrt
  6045  001470  0E04               	movlw	4
  6046  001472  26DE               	addwf	postinc2,f,c
  6047  001474  CFDF F0D8          	movff	indf2,??_vfpfcnvrt+1
  6048  001478  0E00               	movlw	0
  6049  00147A  22DD               	addwfc	postdec2,f,c
  6050  00147C  C0D7  FFD9         	movff	??_vfpfcnvrt,fsr2l
  6051  001480  C0D8  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  6052  001484  CFDE F0E9          	movff	postinc2,vfpfcnvrt@f
  6053  001488  CFDE F0EA          	movff	postinc2,vfpfcnvrt@f+1
  6054  00148C  CFDE F0EB          	movff	postinc2,vfpfcnvrt@f+2
  6055  001490  CFDE F0EC          	movff	postinc2,vfpfcnvrt@f+3
  6056  001494  0C00               	retlw	0
  6057  001496                     __end_ofPL6:
  6058                           	callstack 0
  6059  001496                     PL8:
  6060                           	callstack 20
  6061  001496  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6062  001498  6ED9               	movwf	fsr2l,c
  6063  00149A  6ADA               	clrf	fsr2h,c
  6064  00149C  2ADE               	incf	postinc2,f,c
  6065  00149E  0E00               	movlw	0
  6066  0014A0  22DD               	addwfc	postdec2,f,c
  6067  0014A2  0C00               	retlw	0
  6068  0014A4                     __end_ofPL8:
  6069                           	callstack 0
  6070  0014A4                     PL12:
  6071                           	callstack 20
  6072  0014A4  6ED9               	movwf	fsr2l,c
  6073  0014A6  6ADA               	clrf	fsr2h,c
  6074  0014A8  2ADE               	incf	postinc2,f,c
  6075  0014AA  0C00               	retlw	0
  6076  0014AC                     __end_ofPL12:
  6077                           	callstack 0
  6078  0014AC                     PL34:
  6079                           	callstack 20
  6080  0014AC  0ED0               	movlw	208
  6081  0014AE  6FD7               	movwf	??_vfpfcnvrt& (0+255),b
  6082  0014B0  69D8               	setf	(??_vfpfcnvrt+1)& (0+255),b
  6083  0014B2  0CD0               	retlw	208
  6084  0014B4                     __end_ofPL34:
  6085                           	callstack 0
  6086  0014B4                     PL68:
  6087                           	callstack 20
  6088  0014B4  0E00               	movlw	0
  6089  0014B6  23D8               	addwfc	(??_vfpfcnvrt+1)& (0+255),f,b
  6090  0014B8  C0D7  FFF6         	movff	??_vfpfcnvrt,tblptrl
  6091  0014BC  C0D8  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  6092  0014C0                     	if	0	;tblptru may be non-zero
  6093  0014C0                     	endif
  6094  0014C0                     	if	0	;tblptru may be non-zero
  6095  0014C0                     	endif
  6096  0014C0  0008               	tblrd		*
  6097  0014C2  0C00               	retlw	0
  6098  0014C4                     __end_ofPL68:
  6099                           	callstack 0
  6100  0014C4                     PL70:
  6101                           	callstack 20
  6102  0014C4  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6103  0014C6  6ED9               	movwf	fsr2l,c
  6104  0014C8  6ADA               	clrf	fsr2h,c
  6105  0014CA  CFDE F0D7          	movff	postinc2,??_vfpfcnvrt
  6106  0014CE  CFDD F0D8          	movff	postdec2,??_vfpfcnvrt+1
  6107  0014D2  0012               	return	
  6108  0014D4                     __end_ofPL70:
  6109                           	callstack 0
  6110  0014D4                     PL72:
  6111                           	callstack 20
  6112  0014D4  6FD9               	movwf	(??_vfpfcnvrt+2)& (0+255),b
  6113  0014D6  6BDA               	clrf	(??_vfpfcnvrt+3)& (0+255),b
  6114  0014D8  51D7               	movf	??_vfpfcnvrt& (0+255),w,b
  6115  0014DA  27D9               	addwf	(??_vfpfcnvrt+2)& (0+255),f,b
  6116  0014DC  51D8               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  6117  0014DE  23DA               	addwfc	(??_vfpfcnvrt+3)& (0+255),f,b
  6118  0014E0  51DA               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
  6119  0014E2  0012               	return	
  6120  0014E4                     __end_ofPL72:
  6121                           	callstack 0
  6122  0014E4                     PL142:
  6123                           	callstack 20
  6124  0014E4  51D4               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6125  0014E6  6ED9               	movwf	fsr2l,c
  6126  0014E8  6ADA               	clrf	fsr2h,c
  6127  0014EA  CFDE F06A          	movff	postinc2,atoi@s
  6128  0014EE  CFDD F06B          	movff	postdec2,atoi@s+1
  6129  0014F2  0012               	return	
  6130  0014F4                     __end_ofPL142:
  6131                           	callstack 0
  6132  0014F4                     PL182:
  6133                           	callstack 20
  6134  0014F4  C0D2  F01E         	movff	vfpfcnvrt@fp,fputc@fp
  6135  0014F8  C0D3  F01F         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  6136  0014FC  0012               	return	
  6137  0014FE                     __end_ofPL182:
  6138                           	callstack 0
  6139  0014FE                     PL206:
  6140                           	callstack 20
  6141  0014FE  50F5               	movf	tablat,w,c
  6142  001500  6E21               	movwf	tolower@c^0,c
  6143  001502  6A22               	clrf	(tolower@c+1)^0,c
  6144  001504  0012               	return	
  6145  001506                     __end_ofPL206:
  6146                           	callstack 0
  6147                           
  6148 ;; *************** function _utoa *****************
  6149 ;; Defined at:
  6150 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  fp              2   19[BANK0 ] PTR struct _IO_FILE
  6153 ;;		 -> sprintf@f(11), 
  6154 ;;  d               8   21[BANK0 ] unsigned long long 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  n               8   41[BANK0 ] unsigned long long 
  6157 ;;  i               2   49[BANK0 ] int 
  6158 ;;  w               2   39[BANK0 ] int 
  6159 ;;  p               2   37[BANK0 ] int 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  2   19[BANK0 ] int 
  6162 ;; Registers used:
  6163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6164 ;; Tracked objects:
  6165 ;;		On entry : 3F/0
  6166 ;;		On exit  : 3F/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6169 ;;      Params:         0      10       0       0       0       0       0
  6170 ;;      Locals:         0      14       0       0       0       0       0
  6171 ;;      Temps:          0       8       0       0       0       0       0
  6172 ;;      Totals:         0      32       0       0       0       0       0
  6173 ;;Total ram usage:       32 bytes
  6174 ;; Hardware stack levels used: 1
  6175 ;; Hardware stack levels required when called: 7
  6176 ;; This function calls:
  6177 ;;		___lodiv
  6178 ;;		___lomod
  6179 ;;		_pad
  6180 ;; This function is called by:
  6181 ;;		_vfpfcnvrt
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text8
  6186  002260                     __ptext8:
  6187                           	callstack 0
  6188  002260                     _utoa:
  6189                           	callstack 20
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;incstack = 0
  6196  002260  AE2F               	btfss	(_prec+1)^0,7,c
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  6200  002262  9230               	bcf	_flags^0,1,c
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  6204  002264  BE2F               	btfsc	(_prec+1)^0,7,c
  6205  002266  D004               	goto	u10550
  6206  002268  502F               	movf	(_prec+1)^0,w,c
  6207  00226A  E106               	bnz	l1586
  6208  00226C  042E               	decf	_prec^0,w,c
  6209  00226E  E204               	bc	l1586
  6210  002270                     u10550:
  6211                           
  6212                           ; BSR set to: 0
  6213  002270  6B86               	clrf	(utoa@p+1)& (0+255),b
  6214  002272  0E01               	movlw	1
  6215  002274  6F85               	movwf	utoa@p& (0+255),b
  6216  002276  D004               	goto	l1588
  6217  002278                     l1586:
  6218                           
  6219                           ; BSR set to: 0
  6220  002278  C02E  F085         	movff	_prec,utoa@p
  6221  00227C  C02F  F086         	movff	_prec+1,utoa@p+1
  6222  002280                     l1588:
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  6226  002280  C02C  F087         	movff	_width,utoa@w
  6227  002284  C02D  F088         	movff	_width+1,utoa@w+1
  6228                           
  6229                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 628:     n = d;
  6230  002288  C075  F089         	movff	utoa@d,utoa@n
  6231  00228C  C076  F08A         	movff	utoa@d+1,utoa@n+1
  6232  002290  C077  F08B         	movff	utoa@d+2,utoa@n+2
  6233  002294  C078  F08C         	movff	utoa@d+3,utoa@n+3
  6234  002298  C079  F08D         	movff	utoa@d+4,utoa@n+4
  6235  00229C  C07A  F08E         	movff	utoa@d+5,utoa@n+5
  6236  0022A0  C07B  F08F         	movff	utoa@d+6,utoa@n+6
  6237  0022A4  C07C  F090         	movff	utoa@d+7,utoa@n+7
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  6241  0022A8  6B92               	clrf	(utoa@i+1)& (0+255),b
  6242  0022AA  0E4F               	movlw	79
  6243  0022AC  6F91               	movwf	utoa@i& (0+255),b
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  6247  0022AE  0101               	movlb	1	; () banked
  6248  0022B0  6B7C               	clrf	(_dbuf+79)& (0+255),b
  6249                           
  6250                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  6251  0022B2  D068               	goto	l8858
  6252  0022B4                     l8848:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 632:         --i;
  6256  0022B4  0791               	decf	utoa@i& (0+255),f,b
  6257  0022B6  A0D8               	btfss	status,0,c
  6258  0022B8  0792               	decf	(utoa@i+1)& (0+255),f,b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  6262  0022BA  0E2D               	movlw	low _dbuf
  6263  0022BC  2591               	addwf	utoa@i& (0+255),w,b
  6264  0022BE  6ED9               	movwf	fsr2l,c
  6265  0022C0  0E01               	movlw	high _dbuf
  6266  0022C2  2192               	addwfc	(utoa@i+1)& (0+255),w,b
  6267  0022C4  6EDA               	movwf	fsr2h,c
  6268  0022C6  C089  F060         	movff	utoa@n,___lomod@dividend
  6269  0022CA  C08A  F061         	movff	utoa@n+1,___lomod@dividend+1
  6270  0022CE  C08B  F062         	movff	utoa@n+2,___lomod@dividend+2
  6271  0022D2  C08C  F063         	movff	utoa@n+3,___lomod@dividend+3
  6272  0022D6  C08D  F064         	movff	utoa@n+4,___lomod@dividend+4
  6273  0022DA  C08E  F065         	movff	utoa@n+5,___lomod@dividend+5
  6274  0022DE  C08F  F066         	movff	utoa@n+6,___lomod@dividend+6
  6275  0022E2  C090  F067         	movff	utoa@n+7,___lomod@dividend+7
  6276  0022E6  0E0A               	movlw	10
  6277  0022E8  6F68               	movwf	___lomod@divisor& (0+255),b
  6278  0022EA  6B69               	clrf	(___lomod@divisor+1)& (0+255),b
  6279  0022EC  6B6A               	clrf	(___lomod@divisor+2)& (0+255),b
  6280  0022EE  6B6B               	clrf	(___lomod@divisor+3)& (0+255),b
  6281  0022F0  6B6C               	clrf	(___lomod@divisor+4)& (0+255),b
  6282  0022F2  6B6D               	clrf	(___lomod@divisor+5)& (0+255),b
  6283  0022F4  6B6E               	clrf	(___lomod@divisor+6)& (0+255),b
  6284  0022F6  6B6F               	clrf	(___lomod@divisor+7)& (0+255),b
  6285  0022F8  EC80  F018         	call	___lomod	;wreg free
  6286  0022FC  C060  F07D         	movff	?___lomod,??_utoa
  6287  002300  C061  F07E         	movff	?___lomod+1,??_utoa+1
  6288  002304  C062  F07F         	movff	?___lomod+2,??_utoa+2
  6289  002308  C063  F080         	movff	?___lomod+3,??_utoa+3
  6290  00230C  C064  F081         	movff	?___lomod+4,??_utoa+4
  6291  002310  C065  F082         	movff	?___lomod+5,??_utoa+5
  6292  002314  C066  F083         	movff	?___lomod+6,??_utoa+6
  6293  002318  C067  F084         	movff	?___lomod+7,??_utoa+7
  6294  00231C  517D               	movf	??_utoa& (0+255),w,b
  6295  00231E  0F30               	addlw	48
  6296  002320  6EDF               	movwf	indf2,c
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 634:         --p;
  6300  002322  0785               	decf	utoa@p& (0+255),f,b
  6301  002324  A0D8               	btfss	status,0,c
  6302  002326  0786               	decf	(utoa@p+1)& (0+255),f,b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 635:         --w;
  6306  002328  0787               	decf	utoa@w& (0+255),f,b
  6307  00232A  A0D8               	btfss	status,0,c
  6308  00232C  0788               	decf	(utoa@w+1)& (0+255),f,b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  6312  00232E  C089  F060         	movff	utoa@n,___lodiv@dividend
  6313  002332  C08A  F061         	movff	utoa@n+1,___lodiv@dividend+1
  6314  002336  C08B  F062         	movff	utoa@n+2,___lodiv@dividend+2
  6315  00233A  C08C  F063         	movff	utoa@n+3,___lodiv@dividend+3
  6316  00233E  C08D  F064         	movff	utoa@n+4,___lodiv@dividend+4
  6317  002342  C08E  F065         	movff	utoa@n+5,___lodiv@dividend+5
  6318  002346  C08F  F066         	movff	utoa@n+6,___lodiv@dividend+6
  6319  00234A  C090  F067         	movff	utoa@n+7,___lodiv@dividend+7
  6320  00234E  0E0A               	movlw	10
  6321  002350  6F68               	movwf	___lodiv@divisor& (0+255),b
  6322  002352  6B69               	clrf	(___lodiv@divisor+1)& (0+255),b
  6323  002354  6B6A               	clrf	(___lodiv@divisor+2)& (0+255),b
  6324  002356  6B6B               	clrf	(___lodiv@divisor+3)& (0+255),b
  6325  002358  6B6C               	clrf	(___lodiv@divisor+4)& (0+255),b
  6326  00235A  6B6D               	clrf	(___lodiv@divisor+5)& (0+255),b
  6327  00235C  6B6E               	clrf	(___lodiv@divisor+6)& (0+255),b
  6328  00235E  6B6F               	clrf	(___lodiv@divisor+7)& (0+255),b
  6329  002360  EC5A  F017         	call	___lodiv	;wreg free
  6330  002364  C060  F089         	movff	?___lodiv,utoa@n
  6331  002368  C061  F08A         	movff	?___lodiv+1,utoa@n+1
  6332  00236C  C062  F08B         	movff	?___lodiv+2,utoa@n+2
  6333  002370  C063  F08C         	movff	?___lodiv+3,utoa@n+3
  6334  002374  C064  F08D         	movff	?___lodiv+4,utoa@n+4
  6335  002378  C065  F08E         	movff	?___lodiv+5,utoa@n+5
  6336  00237C  C066  F08F         	movff	?___lodiv+6,utoa@n+6
  6337  002380  C067  F090         	movff	?___lodiv+7,utoa@n+7
  6338  002384                     l8858:
  6339                           
  6340                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  6341  002384  0100               	movlb	0	; () banked
  6342  002386  5191               	movf	utoa@i& (0+255),w,b
  6343  002388  1192               	iorwf	(utoa@i+1)& (0+255),w,b
  6344  00238A  E017               	bz	u10600
  6345                           
  6346                           ; BSR set to: 0
  6347  00238C  5189               	movf	utoa@n& (0+255),w,b
  6348  00238E  118A               	iorwf	(utoa@n+1)& (0+255),w,b
  6349  002390  118B               	iorwf	(utoa@n+2)& (0+255),w,b
  6350  002392  118C               	iorwf	(utoa@n+3)& (0+255),w,b
  6351  002394  118D               	iorwf	(utoa@n+4)& (0+255),w,b
  6352  002396  118E               	iorwf	(utoa@n+5)& (0+255),w,b
  6353  002398  118F               	iorwf	(utoa@n+6)& (0+255),w,b
  6354  00239A  1190               	iorwf	(utoa@n+7)& (0+255),w,b
  6355  00239C  E18B               	bnz	l8848
  6356                           
  6357                           ; BSR set to: 0
  6358  00239E  BF86               	btfsc	(utoa@p+1)& (0+255),7,b
  6359  0023A0  D004               	goto	u10580
  6360  0023A2  5186               	movf	(utoa@p+1)& (0+255),w,b
  6361  0023A4  E187               	bnz	l8848
  6362  0023A6  0585               	decf	utoa@p& (0+255),w,b
  6363  0023A8  E285               	bc	l8848
  6364  0023AA                     u10580:
  6365                           
  6366                           ; BSR set to: 0
  6367  0023AA  BF88               	btfsc	(utoa@w+1)& (0+255),7,b
  6368  0023AC  D006               	goto	u10600
  6369  0023AE  5188               	movf	(utoa@w+1)& (0+255),w,b
  6370  0023B0  E102               	bnz	u10590
  6371  0023B2  0587               	decf	utoa@w& (0+255),w,b
  6372  0023B4  E302               	bnc	u10600
  6373  0023B6                     u10590:
  6374                           
  6375                           ; BSR set to: 0
  6376  0023B6  B230               	btfsc	_flags^0,1,c
  6377  0023B8  D77D               	goto	l8848
  6378  0023BA                     u10600:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  6382  0023BA  C073  F068         	movff	utoa@fp,pad@fp
  6383  0023BE  C074  F069         	movff	utoa@fp+1,pad@fp+1
  6384  0023C2  0E2D               	movlw	low _dbuf
  6385  0023C4  2591               	addwf	utoa@i& (0+255),w,b
  6386  0023C6  6F6A               	movwf	pad@buf& (0+255),b
  6387  0023C8  0E01               	movlw	high _dbuf
  6388  0023CA  2192               	addwfc	(utoa@i+1)& (0+255),w,b
  6389  0023CC  6F6B               	movwf	(pad@buf+1)& (0+255),b
  6390  0023CE  C087  F06C         	movff	utoa@w,pad@p
  6391  0023D2  C088  F06D         	movff	utoa@w+1,pad@p+1
  6392  0023D6  EC96  F01A         	call	_pad	;wreg free
  6393  0023DA  C068  F073         	movff	?_pad,?_utoa
  6394  0023DE  C069  F074         	movff	?_pad+1,?_utoa+1
  6395                           
  6396                           ; BSR set to: 0
  6397  0023E2  0012               	return		;funcret
  6398  0023E4                     __end_of_utoa:
  6399                           	callstack 0
  6400                           
  6401 ;; *************** function ___lomod *****************
  6402 ;; Defined at:
  6403 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lomod.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  dividend        8    0[BANK0 ] unsigned long long 
  6406 ;;  divisor         8    8[BANK0 ] unsigned long long 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  counter         1   26[COMRAM] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  8    0[BANK0 ] unsigned long long 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2, status,0
  6413 ;; Tracked objects:
  6414 ;;		On entry : 3F/0
  6415 ;;		On exit  : 3F/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6418 ;;      Params:         0      16       0       0       0       0       0
  6419 ;;      Locals:         1       0       0       0       0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0
  6421 ;;      Totals:         1      16       0       0       0       0       0
  6422 ;;Total ram usage:       17 bytes
  6423 ;; Hardware stack levels used: 1
  6424 ;; Hardware stack levels required when called: 3
  6425 ;; This function calls:
  6426 ;;		Nothing
  6427 ;; This function is called by:
  6428 ;;		_utoa
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text9
  6433  003100                     __ptext9:
  6434                           	callstack 0
  6435  003100                     ___lomod:
  6436                           	callstack 23
  6437                           
  6438                           ; BSR set to: 0
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;incstack = 0
  6442  003100  5168               	movf	___lomod@divisor& (0+255),w,b
  6443  003102  1169               	iorwf	(___lomod@divisor+1)& (0+255),w,b
  6444  003104  116A               	iorwf	(___lomod@divisor+2)& (0+255),w,b
  6445  003106  116B               	iorwf	(___lomod@divisor+3)& (0+255),w,b
  6446  003108  116C               	iorwf	(___lomod@divisor+4)& (0+255),w,b
  6447  00310A  116D               	iorwf	(___lomod@divisor+5)& (0+255),w,b
  6448  00310C  116E               	iorwf	(___lomod@divisor+6)& (0+255),w,b
  6449  00310E  116F               	iorwf	(___lomod@divisor+7)& (0+255),w,b
  6450  003110  E03B               	bz	l1179
  6451                           
  6452                           ; BSR set to: 0
  6453  003112  0E01               	movlw	1
  6454  003114  6E1B               	movwf	___lomod@counter^0,c
  6455  003116  D00A               	goto	l8348
  6456  003118                     l8346:
  6457                           
  6458                           ; BSR set to: 0
  6459  003118  90D8               	bcf	status,0,c
  6460  00311A  3768               	rlcf	___lomod@divisor& (0+255),f,b
  6461  00311C  3769               	rlcf	(___lomod@divisor+1)& (0+255),f,b
  6462  00311E  376A               	rlcf	(___lomod@divisor+2)& (0+255),f,b
  6463  003120  376B               	rlcf	(___lomod@divisor+3)& (0+255),f,b
  6464  003122  376C               	rlcf	(___lomod@divisor+4)& (0+255),f,b
  6465  003124  376D               	rlcf	(___lomod@divisor+5)& (0+255),f,b
  6466  003126  376E               	rlcf	(___lomod@divisor+6)& (0+255),f,b
  6467  003128  376F               	rlcf	(___lomod@divisor+7)& (0+255),f,b
  6468  00312A  2A1B               	incf	___lomod@counter^0,f,c
  6469  00312C                     l8348:
  6470                           
  6471                           ; BSR set to: 0
  6472  00312C  AF6F               	btfss	(___lomod@divisor+7)& (0+255),7,b
  6473  00312E  D7F4               	goto	l8346
  6474  003130                     u9530:
  6475                           
  6476                           ; BSR set to: 0
  6477  003130  5168               	movf	___lomod@divisor& (0+255),w,b
  6478  003132  5D60               	subwf	___lomod@dividend& (0+255),w,b
  6479  003134  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  6480  003136  5961               	subwfb	(___lomod@dividend+1)& (0+255),w,b
  6481  003138  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  6482  00313A  5962               	subwfb	(___lomod@dividend+2)& (0+255),w,b
  6483  00313C  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  6484  00313E  5963               	subwfb	(___lomod@dividend+3)& (0+255),w,b
  6485  003140  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  6486  003142  5964               	subwfb	(___lomod@dividend+4)& (0+255),w,b
  6487  003144  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  6488  003146  5965               	subwfb	(___lomod@dividend+5)& (0+255),w,b
  6489  003148  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  6490  00314A  5966               	subwfb	(___lomod@dividend+6)& (0+255),w,b
  6491  00314C  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  6492  00314E  5967               	subwfb	(___lomod@dividend+7)& (0+255),w,b
  6493  003150  E310               	bnc	l8354
  6494                           
  6495                           ; BSR set to: 0
  6496  003152  5168               	movf	___lomod@divisor& (0+255),w,b
  6497  003154  5F60               	subwf	___lomod@dividend& (0+255),f,b
  6498  003156  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  6499  003158  5B61               	subwfb	(___lomod@dividend+1)& (0+255),f,b
  6500  00315A  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  6501  00315C  5B62               	subwfb	(___lomod@dividend+2)& (0+255),f,b
  6502  00315E  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  6503  003160  5B63               	subwfb	(___lomod@dividend+3)& (0+255),f,b
  6504  003162  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  6505  003164  5B64               	subwfb	(___lomod@dividend+4)& (0+255),f,b
  6506  003166  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  6507  003168  5B65               	subwfb	(___lomod@dividend+5)& (0+255),f,b
  6508  00316A  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  6509  00316C  5B66               	subwfb	(___lomod@dividend+6)& (0+255),f,b
  6510  00316E  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  6511  003170  5B67               	subwfb	(___lomod@dividend+7)& (0+255),f,b
  6512  003172                     l8354:
  6513                           
  6514                           ; BSR set to: 0
  6515  003172  90D8               	bcf	status,0,c
  6516  003174  336F               	rrcf	(___lomod@divisor+7)& (0+255),f,b
  6517  003176  336E               	rrcf	(___lomod@divisor+6)& (0+255),f,b
  6518  003178  336D               	rrcf	(___lomod@divisor+5)& (0+255),f,b
  6519  00317A  336C               	rrcf	(___lomod@divisor+4)& (0+255),f,b
  6520  00317C  336B               	rrcf	(___lomod@divisor+3)& (0+255),f,b
  6521  00317E  336A               	rrcf	(___lomod@divisor+2)& (0+255),f,b
  6522  003180  3369               	rrcf	(___lomod@divisor+1)& (0+255),f,b
  6523  003182  3368               	rrcf	___lomod@divisor& (0+255),f,b
  6524                           
  6525                           ; BSR set to: 0
  6526  003184  2E1B               	decfsz	___lomod@counter^0,f,c
  6527  003186  D7D4               	goto	u9530
  6528  003188                     l1179:
  6529                           
  6530                           ; BSR set to: 0
  6531  003188  C060  F060         	movff	___lomod@dividend,?___lomod
  6532  00318C  C061  F061         	movff	___lomod@dividend+1,?___lomod+1
  6533  003190  C062  F062         	movff	___lomod@dividend+2,?___lomod+2
  6534  003194  C063  F063         	movff	___lomod@dividend+3,?___lomod+3
  6535  003198  C064  F064         	movff	___lomod@dividend+4,?___lomod+4
  6536  00319C  C065  F065         	movff	___lomod@dividend+5,?___lomod+5
  6537  0031A0  C066  F066         	movff	___lomod@dividend+6,?___lomod+6
  6538  0031A4  C067  F067         	movff	___lomod@dividend+7,?___lomod+7
  6539                           
  6540                           ; BSR set to: 0
  6541  0031A8  0012               	return		;funcret
  6542  0031AA                     __end_of___lomod:
  6543                           	callstack 0
  6544                           
  6545 ;; *************** function ___lodiv *****************
  6546 ;; Defined at:
  6547 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lodiv.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  dividend        8    0[BANK0 ] unsigned long long 
  6550 ;;  divisor         8    8[BANK0 ] unsigned long long 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  quotient        8   26[COMRAM] unsigned long long 
  6553 ;;  counter         1   34[COMRAM] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  8    0[BANK0 ] unsigned long long 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0
  6558 ;; Tracked objects:
  6559 ;;		On entry : 3F/0
  6560 ;;		On exit  : 3F/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6563 ;;      Params:         0      16       0       0       0       0       0
  6564 ;;      Locals:         9       0       0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0
  6566 ;;      Totals:         9      16       0       0       0       0       0
  6567 ;;Total ram usage:       25 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 3
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_utoa
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text10
  6578  002EB4                     __ptext10:
  6579                           	callstack 0
  6580  002EB4                     ___lodiv:
  6581                           	callstack 23
  6582                           
  6583                           ; BSR set to: 0
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;incstack = 0
  6587  002EB4  6A1B               	clrf	___lodiv@quotient^0,c
  6588  002EB6  6A1C               	clrf	(___lodiv@quotient+1)^0,c
  6589  002EB8  6A1D               	clrf	(___lodiv@quotient+2)^0,c
  6590  002EBA  6A1E               	clrf	(___lodiv@quotient+3)^0,c
  6591  002EBC  6A1F               	clrf	(___lodiv@quotient+4)^0,c
  6592  002EBE  6A20               	clrf	(___lodiv@quotient+5)^0,c
  6593  002EC0  6A21               	clrf	(___lodiv@quotient+6)^0,c
  6594  002EC2  6A22               	clrf	(___lodiv@quotient+7)^0,c
  6595                           
  6596                           ; BSR set to: 0
  6597  002EC4  5168               	movf	___lodiv@divisor& (0+255),w,b
  6598  002EC6  1169               	iorwf	(___lodiv@divisor+1)& (0+255),w,b
  6599  002EC8  116A               	iorwf	(___lodiv@divisor+2)& (0+255),w,b
  6600  002ECA  116B               	iorwf	(___lodiv@divisor+3)& (0+255),w,b
  6601  002ECC  116C               	iorwf	(___lodiv@divisor+4)& (0+255),w,b
  6602  002ECE  116D               	iorwf	(___lodiv@divisor+5)& (0+255),w,b
  6603  002ED0  116E               	iorwf	(___lodiv@divisor+6)& (0+255),w,b
  6604  002ED2  116F               	iorwf	(___lodiv@divisor+7)& (0+255),w,b
  6605  002ED4  E045               	bz	l1169
  6606                           
  6607                           ; BSR set to: 0
  6608  002ED6  0E01               	movlw	1
  6609  002ED8  6E23               	movwf	___lodiv@counter^0,c
  6610  002EDA  D00A               	goto	l8328
  6611  002EDC                     l8326:
  6612                           
  6613                           ; BSR set to: 0
  6614  002EDC  90D8               	bcf	status,0,c
  6615  002EDE  3768               	rlcf	___lodiv@divisor& (0+255),f,b
  6616  002EE0  3769               	rlcf	(___lodiv@divisor+1)& (0+255),f,b
  6617  002EE2  376A               	rlcf	(___lodiv@divisor+2)& (0+255),f,b
  6618  002EE4  376B               	rlcf	(___lodiv@divisor+3)& (0+255),f,b
  6619  002EE6  376C               	rlcf	(___lodiv@divisor+4)& (0+255),f,b
  6620  002EE8  376D               	rlcf	(___lodiv@divisor+5)& (0+255),f,b
  6621  002EEA  376E               	rlcf	(___lodiv@divisor+6)& (0+255),f,b
  6622  002EEC  376F               	rlcf	(___lodiv@divisor+7)& (0+255),f,b
  6623  002EEE  2A23               	incf	___lodiv@counter^0,f,c
  6624  002EF0                     l8328:
  6625                           
  6626                           ; BSR set to: 0
  6627  002EF0  AF6F               	btfss	(___lodiv@divisor+7)& (0+255),7,b
  6628  002EF2  D7F4               	goto	l8326
  6629  002EF4                     u9500:
  6630                           
  6631                           ; BSR set to: 0
  6632  002EF4  90D8               	bcf	status,0,c
  6633  002EF6  361B               	rlcf	___lodiv@quotient^0,f,c
  6634  002EF8  361C               	rlcf	(___lodiv@quotient+1)^0,f,c
  6635  002EFA  361D               	rlcf	(___lodiv@quotient+2)^0,f,c
  6636  002EFC  361E               	rlcf	(___lodiv@quotient+3)^0,f,c
  6637  002EFE  361F               	rlcf	(___lodiv@quotient+4)^0,f,c
  6638  002F00  3620               	rlcf	(___lodiv@quotient+5)^0,f,c
  6639  002F02  3621               	rlcf	(___lodiv@quotient+6)^0,f,c
  6640  002F04  3622               	rlcf	(___lodiv@quotient+7)^0,f,c
  6641                           
  6642                           ; BSR set to: 0
  6643  002F06  5168               	movf	___lodiv@divisor& (0+255),w,b
  6644  002F08  5D60               	subwf	___lodiv@dividend& (0+255),w,b
  6645  002F0A  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  6646  002F0C  5961               	subwfb	(___lodiv@dividend+1)& (0+255),w,b
  6647  002F0E  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  6648  002F10  5962               	subwfb	(___lodiv@dividend+2)& (0+255),w,b
  6649  002F12  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  6650  002F14  5963               	subwfb	(___lodiv@dividend+3)& (0+255),w,b
  6651  002F16  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  6652  002F18  5964               	subwfb	(___lodiv@dividend+4)& (0+255),w,b
  6653  002F1A  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  6654  002F1C  5965               	subwfb	(___lodiv@dividend+5)& (0+255),w,b
  6655  002F1E  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  6656  002F20  5966               	subwfb	(___lodiv@dividend+6)& (0+255),w,b
  6657  002F22  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  6658  002F24  5967               	subwfb	(___lodiv@dividend+7)& (0+255),w,b
  6659  002F26  E311               	bnc	l8338
  6660                           
  6661                           ; BSR set to: 0
  6662  002F28  5168               	movf	___lodiv@divisor& (0+255),w,b
  6663  002F2A  5F60               	subwf	___lodiv@dividend& (0+255),f,b
  6664  002F2C  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  6665  002F2E  5B61               	subwfb	(___lodiv@dividend+1)& (0+255),f,b
  6666  002F30  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  6667  002F32  5B62               	subwfb	(___lodiv@dividend+2)& (0+255),f,b
  6668  002F34  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  6669  002F36  5B63               	subwfb	(___lodiv@dividend+3)& (0+255),f,b
  6670  002F38  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  6671  002F3A  5B64               	subwfb	(___lodiv@dividend+4)& (0+255),f,b
  6672  002F3C  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  6673  002F3E  5B65               	subwfb	(___lodiv@dividend+5)& (0+255),f,b
  6674  002F40  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  6675  002F42  5B66               	subwfb	(___lodiv@dividend+6)& (0+255),f,b
  6676  002F44  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  6677  002F46  5B67               	subwfb	(___lodiv@dividend+7)& (0+255),f,b
  6678                           
  6679                           ; BSR set to: 0
  6680  002F48  801B               	bsf	___lodiv@quotient^0,0,c
  6681  002F4A                     l8338:
  6682                           
  6683                           ; BSR set to: 0
  6684  002F4A  90D8               	bcf	status,0,c
  6685  002F4C  336F               	rrcf	(___lodiv@divisor+7)& (0+255),f,b
  6686  002F4E  336E               	rrcf	(___lodiv@divisor+6)& (0+255),f,b
  6687  002F50  336D               	rrcf	(___lodiv@divisor+5)& (0+255),f,b
  6688  002F52  336C               	rrcf	(___lodiv@divisor+4)& (0+255),f,b
  6689  002F54  336B               	rrcf	(___lodiv@divisor+3)& (0+255),f,b
  6690  002F56  336A               	rrcf	(___lodiv@divisor+2)& (0+255),f,b
  6691  002F58  3369               	rrcf	(___lodiv@divisor+1)& (0+255),f,b
  6692  002F5A  3368               	rrcf	___lodiv@divisor& (0+255),f,b
  6693                           
  6694                           ; BSR set to: 0
  6695  002F5C  2E23               	decfsz	___lodiv@counter^0,f,c
  6696  002F5E  D7CA               	goto	u9500
  6697  002F60                     l1169:
  6698                           
  6699                           ; BSR set to: 0
  6700  002F60  C01B  F060         	movff	___lodiv@quotient,?___lodiv
  6701  002F64  C01C  F061         	movff	___lodiv@quotient+1,?___lodiv+1
  6702  002F68  C01D  F062         	movff	___lodiv@quotient+2,?___lodiv+2
  6703  002F6C  C01E  F063         	movff	___lodiv@quotient+3,?___lodiv+3
  6704  002F70  C01F  F064         	movff	___lodiv@quotient+4,?___lodiv+4
  6705  002F74  C020  F065         	movff	___lodiv@quotient+5,?___lodiv+5
  6706  002F78  C021  F066         	movff	___lodiv@quotient+6,?___lodiv+6
  6707  002F7C  C022  F067         	movff	___lodiv@quotient+7,?___lodiv+7
  6708                           
  6709                           ; BSR set to: 0
  6710  002F80  0012               	return		;funcret
  6711  002F82                     __end_of___lodiv:
  6712                           	callstack 0
  6713                           
  6714 ;; *************** function _strncmp *****************
  6715 ;; Defined at:
  6716 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strncmp.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  _l              2   26[COMRAM] PTR const unsigned char 
  6719 ;;		 -> vfpfcnvrt@ct(3), STR_30(10), STR_29(22), STR_28(11), 
  6720 ;;		 -> STR_27(10), STR_26(22), STR_25(9), STR_24(10), 
  6721 ;;		 -> STR_21(10), STR_18(11), STR_17(14), STR_14(20), 
  6722 ;;		 -> STR_4(6), STR_2(15), 
  6723 ;;  _r              2   28[COMRAM] PTR const unsigned char 
  6724 ;;		 -> STR_46(4), STR_41(3), 
  6725 ;;  n               2   30[COMRAM] unsigned int 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  r               2    2[BANK0 ] PTR const unsigned char 
  6728 ;;		 -> STR_46(4), STR_41(3), 
  6729 ;;  l               2    0[BANK0 ] PTR const unsigned char 
  6730 ;;		 -> vfpfcnvrt@ct(3), STR_30(10), STR_29(22), STR_28(11), 
  6731 ;;		 -> STR_27(10), STR_26(22), STR_25(9), STR_24(10), 
  6732 ;;		 -> STR_21(10), STR_18(11), STR_17(14), STR_14(20), 
  6733 ;;		 -> STR_4(6), STR_2(15), 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  2   26[COMRAM] int 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  6738 ;; Tracked objects:
  6739 ;;		On entry : 3F/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6743 ;;      Params:         6       0       0       0       0       0       0
  6744 ;;      Locals:         0       4       0       0       0       0       0
  6745 ;;      Temps:          1       0       0       0       0       0       0
  6746 ;;      Totals:         7       4       0       0       0       0       0
  6747 ;;Total ram usage:       11 bytes
  6748 ;; Hardware stack levels used: 1
  6749 ;; Hardware stack levels required when called: 3
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_vfpfcnvrt
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text11
  6758  0031AA                     __ptext11:
  6759                           	callstack 0
  6760  0031AA                     _strncmp:
  6761                           	callstack 24
  6762                           
  6763                           ; BSR set to: 0
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;incstack = 0
  6767  0031AA  C01B  F060         	movff	strncmp@_l,strncmp@l
  6768  0031AE  C01C  F061         	movff	strncmp@_l+1,strncmp@l+1
  6769  0031B2  C01D  F062         	movff	strncmp@_r,strncmp@r
  6770  0031B6  C01E  F063         	movff	strncmp@_r+1,strncmp@r+1
  6771  0031BA  061F               	decf	strncmp@n^0,f,c
  6772  0031BC  A0D8               	btfss	status,0,c
  6773  0031BE  0620               	decf	(strncmp@n+1)^0,f,c
  6774  0031C0  281F               	incf	strncmp@n^0,w,c
  6775  0031C2  E10D               	bnz	l8910
  6776  0031C4  2820               	incf	(strncmp@n+1)^0,w,c
  6777  0031C6  E10B               	bnz	l8910
  6778                           
  6779                           ; BSR set to: 0
  6780  0031C8  6A1B               	clrf	?_strncmp^0,c
  6781  0031CA  6A1C               	clrf	(?_strncmp+1)^0,c
  6782  0031CC  0012               	return	
  6783  0031CE                     l8908:
  6784  0031CE  0100               	movlb	0	; () banked
  6785  0031D0  4B60               	infsnz	strncmp@l& (0+255),f,b
  6786  0031D2  2B61               	incf	(strncmp@l+1)& (0+255),f,b
  6787  0031D4  4B62               	infsnz	strncmp@r& (0+255),f,b
  6788  0031D6  2B63               	incf	(strncmp@r+1)& (0+255),f,b
  6789  0031D8  061F               	decf	strncmp@n^0,f,c
  6790  0031DA  A0D8               	btfss	status,0,c
  6791  0031DC  0620               	decf	(strncmp@n+1)^0,f,c
  6792  0031DE                     l8910:
  6793                           
  6794                           ; BSR set to: 0
  6795  0031DE  D82D               	call	PL78	;call to abstracted procedure
  6796  0031E0  64F7               	cpfsgt	tblptrh,c
  6797  0031E2  D003               	bra	u10667
  6798  0031E4  0008               	tblrd		*
  6799  0031E6  50F5               	movf	tablat,w,c
  6800  0031E8  D002               	bra	u10660
  6801  0031EA                     u10667:
  6802  0031EA  EC4A  F017         	call	PL16	;call to abstracted procedure
  6803  0031EE                     u10660:
  6804  0031EE  0900               	iorlw	0
  6805  0031F0  E013               	bz	u10700
  6806  0031F2  D82A               	call	PL126	;call to abstracted procedure
  6807  0031F4  50F5               	movf	tablat,w,c
  6808  0031F6  E010               	bz	u10700
  6809  0031F8  501F               	movf	strncmp@n^0,w,c
  6810  0031FA  1020               	iorwf	(strncmp@n+1)^0,w,c
  6811  0031FC  E00D               	bz	u10700
  6812  0031FE  D824               	call	PL126	;call to abstracted procedure
  6813  003200  CFF5 F021          	movff	tablat,??_strncmp
  6814  003204  D81A               	call	PL78	;call to abstracted procedure
  6815  003206  64F7               	cpfsgt	tblptrh,c
  6816  003208  D003               	bra	u10707
  6817  00320A  0008               	tblrd		*
  6818  00320C  50F5               	movf	tablat,w,c
  6819  00320E  D002               	bra	u10705
  6820  003210                     u10707:
  6821  003210  EC4A  F017         	call	PL16	;call to abstracted procedure
  6822  003214                     u10705:
  6823  003214  1821               	xorwf	??_strncmp^0,w,c
  6824  003216  E0DB               	bz	l8908
  6825  003218                     u10700:
  6826  003218  D810               	call	PL78	;call to abstracted procedure
  6827  00321A  64F7               	cpfsgt	tblptrh,c
  6828  00321C  D003               	bra	u10717
  6829  00321E  0008               	tblrd		*
  6830  003220  50F5               	movf	tablat,w,c
  6831  003222  D002               	bra	u10710
  6832  003224                     u10717:
  6833  003224  EC4A  F017         	call	PL16	;call to abstracted procedure
  6834  003228                     u10710:
  6835  003228  6E21               	movwf	??_strncmp^0,c
  6836  00322A  D80E               	call	PL126	;call to abstracted procedure
  6837  00322C  50F5               	movf	tablat,w,c
  6838  00322E  5C21               	subwf	??_strncmp^0,w,c
  6839  003230  6E1B               	movwf	?_strncmp^0,c
  6840  003232  6A1C               	clrf	(?_strncmp+1)^0,c
  6841  003234  A0D8               	btfss	status,0,c
  6842  003236  061C               	decf	(?_strncmp+1)^0,f,c
  6843  003238  0012               	return		;funcret
  6844  00323A                     __end_of_strncmp:
  6845                           	callstack 0
  6846  00323A                     PL78:
  6847                           	callstack 24
  6848  00323A  C060  FFF6         	movff	strncmp@l,tblptrl
  6849  00323E  C061  FFF7         	movff	strncmp@l+1,tblptrh
  6850  003242  6AF8               	clrf	tblptru,c
  6851  003244  0E05               	movlw	(high __ramtop+-1)
  6852  003246  0012               	return	
  6853  003248                     __end_ofPL78:
  6854                           	callstack 0
  6855  003248                     PL126:
  6856                           	callstack 24
  6857  003248  C062  FFF6         	movff	strncmp@r,tblptrl
  6858  00324C  C063  FFF7         	movff	strncmp@r+1,tblptrh
  6859  003250                     	if	0	;tblptru may be non-zero
  6860  003250                     	endif
  6861  003250                     	if	0	;tblptru may be non-zero
  6862  003250                     	endif
  6863  003250  0008               	tblrd		*
  6864  003252  0012               	return	
  6865  003254                     __end_ofPL126:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _stoa *****************
  6869 ;; Defined at:
  6870 ;;		line 568 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  6873 ;;		 -> sprintf@f(11), 
  6874 ;;  s               2   33[COMRAM] PTR unsigned char 
  6875 ;;		 -> ?_sprintf(2), STR_20(4), STR_19(3), U_real(2), 
  6876 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  nuls            7    6[BANK0 ] unsigned char [7]
  6879 ;;  l               2   21[BANK0 ] int 
  6880 ;;  p               2   19[BANK0 ] int 
  6881 ;;  cp              2   17[BANK0 ] PTR unsigned char 
  6882 ;;		 -> stoa@nuls(7), ?_sprintf(2), STR_20(4), STR_19(3), 
  6883 ;;		 -> U_real(2), compile_time(9), compile_date(12), STR_3(9), 
  6884 ;;  w               2   15[BANK0 ] int 
  6885 ;;  i               2   13[BANK0 ] int 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  2   31[COMRAM] int 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 3F/0
  6892 ;;		On exit  : 3F/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         4       0       0       0       0       0       0
  6896 ;;      Locals:         0      17       0       0       0       0       0
  6897 ;;      Temps:          0       1       0       0       0       0       0
  6898 ;;      Totals:         4      18       0       0       0       0       0
  6899 ;;Total ram usage:       22 bytes
  6900 ;; Hardware stack levels used: 1
  6901 ;; Hardware stack levels required when called: 5
  6902 ;; This function calls:
  6903 ;;		_fputc
  6904 ;;		_strlen
  6905 ;; This function is called by:
  6906 ;;		_vfpfcnvrt
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text12
  6911  002A80                     __ptext12:
  6912                           	callstack 0
  6913  002A80                     _stoa:
  6914                           	callstack 22
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 568: static int s
      +                          toa(FILE *fp, char *s);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprn
      +                          t.c: 569: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 570:  
      +                             char *cp, nuls[] = "(null)";
  6918                           
  6919                           ;incstack = 0
  6920  002A80  EE21  F0F6         	lfsr	2,stoa@F1169
  6921  002A84  EE10  F066         	lfsr	1,stoa@nuls
  6922  002A88  0E06               	movlw	6
  6923  002A8A                     u10441:
  6924  002A8A  CFDB FFE3          	movff	plusw2,plusw1
  6925  002A8E  06E8               	decf	wreg,f,c
  6926  002A90  E2FC               	bc	u10441
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 571:     int i, l
      +                          , p, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 574:     c
      +                          p = s;
  6930  002A92  C022  F071         	movff	stoa@s,stoa@cp
  6931  002A96  C023  F072         	movff	stoa@s+1,stoa@cp+1
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 575:     if (!cp)
      +                           {
  6935  002A9A  5171               	movf	stoa@cp& (0+255),w,b
  6936  002A9C  1172               	iorwf	(stoa@cp+1)& (0+255),w,b
  6937  002A9E  E103               	bnz	l8804
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 576:         cp =
      +                           nuls;
  6941  002AA0  0E66               	movlw	low stoa@nuls
  6942  002AA2  6F71               	movwf	stoa@cp& (0+255),b
  6943  002AA4  6B72               	clrf	(stoa@cp+1)& (0+255),b
  6944  002AA6                     l8804:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 580:     l = (int
      +                          )strlen(cp);
  6948  002AA6  C071  F01B         	movff	stoa@cp,strlen@s
  6949  002AAA  C072  F01C         	movff	stoa@cp+1,strlen@s+1
  6950  002AAE  ECAF  F01D         	call	_strlen	;wreg free
  6951  002AB2  C01B  F075         	movff	?_strlen,stoa@l
  6952  002AB6  C01C  F076         	movff	?_strlen+1,stoa@l+1
  6953                           
  6954                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 581:     p = prec
      +                          ;
  6955  002ABA  C02E  F073         	movff	_prec,stoa@p
  6956  002ABE  C02F  F074         	movff	_prec+1,stoa@p+1
  6957                           
  6958                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 582:     l = (!(p
      +                           < 0) && (p < l)) ? p : l;
  6959  002AC2  0100               	movlb	0	; () banked
  6960  002AC4  BF74               	btfsc	(stoa@p+1)& (0+255),7,b
  6961  002AC6  D00D               	goto	l1567
  6962                           
  6963                           ; BSR set to: 0
  6964  002AC8  5175               	movf	stoa@l& (0+255),w,b
  6965  002ACA  5D73               	subwf	stoa@p& (0+255),w,b
  6966  002ACC  5174               	movf	(stoa@p+1)& (0+255),w,b
  6967  002ACE  0A80               	xorlw	128
  6968  002AD0  6F65               	movwf	??_stoa& (0+255),b
  6969  002AD2  5176               	movf	(stoa@l+1)& (0+255),w,b
  6970  002AD4  0A80               	xorlw	128
  6971  002AD6  5965               	subwfb	??_stoa& (0+255),w,b
  6972  002AD8  E204               	bc	l1567
  6973                           
  6974                           ; BSR set to: 0
  6975  002ADA  C073  F075         	movff	stoa@p,stoa@l
  6976  002ADE  C074  F076         	movff	stoa@p+1,stoa@l+1
  6977  002AE2                     l1567:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 583:     p = l;
  6981  002AE2  C075  F073         	movff	stoa@l,stoa@p
  6982  002AE6  C076  F074         	movff	stoa@l+1,stoa@p+1
  6983                           
  6984                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 584:     w = widt
      +                          h;
  6985  002AEA  C02C  F06F         	movff	_width,stoa@w
  6986  002AEE  C02D  F070         	movff	_width+1,stoa@w+1
  6987                           
  6988                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 587:     if (!(fl
      +                          ags & (1 << 0))) {
  6989  002AF2  B030               	btfsc	_flags^0,0,c
  6990  002AF4  D009               	goto	u10490
  6991  002AF6  D006               	goto	l8818
  6992  002AF8                     l8814:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 589:             
      +                          fputc(' ', fp);
  6996  002AF8  D846               	call	PL144	;call to abstracted procedure
  6997  002AFA  EC0A  F01A         	call	_fputc	;wreg free
  6998                           
  6999                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 590:             
      +                          ++l;
  7000  002AFE  0100               	movlb	0	; () banked
  7001  002B00  4B75               	infsnz	stoa@l& (0+255),f,b
  7002  002B02  2B76               	incf	(stoa@l+1)& (0+255),f,b
  7003  002B04                     l8818:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 588:         whil
      +                          e (l < w) {
  7007  002B04  D837               	call	PL122	;call to abstracted procedure
  7008  002B06  E3F8               	bnc	l8814
  7009  002B08                     u10490:
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 595:     i = 0;
  7013                           
  7014                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 592:     }
  7015  002B08  6B6D               	clrf	stoa@i& (0+255),b
  7016  002B0A  6B6E               	clrf	(stoa@i+1)& (0+255),b
  7017                           
  7018                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  7019  002B0C  D01A               	goto	l8826
  7020  002B0E                     l8820:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 597:         fput
      +                          c(*cp, fp);
  7024  002B0E  C071  FFF6         	movff	stoa@cp,tblptrl
  7025  002B12  C072  FFF7         	movff	stoa@cp+1,tblptrh
  7026  002B16  6AF8               	clrf	tblptru,c
  7027  002B18  0E05               	movlw	(high __ramtop+-1)
  7028  002B1A  64F7               	cpfsgt	tblptrh,c
  7029  002B1C  D003               	bra	u10507
  7030  002B1E  0008               	tblrd		*
  7031  002B20  50F5               	movf	tablat,w,c
  7032  002B22  D002               	bra	u10500
  7033  002B24                     u10507:
  7034  002B24  EC4A  F017         	call	PL16	;call to abstracted procedure
  7035  002B28                     u10500:
  7036  002B28  6E1C               	movwf	fputc@c^0,c
  7037  002B2A  6A1D               	clrf	(fputc@c+1)^0,c
  7038  002B2C  C020  F01E         	movff	stoa@fp,fputc@fp
  7039  002B30  C021  F01F         	movff	stoa@fp+1,fputc@fp+1
  7040  002B34  EC0A  F01A         	call	_fputc	;wreg free
  7041                           
  7042                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 598:         ++cp
      +                          ;
  7043  002B38  0100               	movlb	0	; () banked
  7044  002B3A  4B71               	infsnz	stoa@cp& (0+255),f,b
  7045  002B3C  2B72               	incf	(stoa@cp+1)& (0+255),f,b
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 599:         ++i;
  7049  002B3E  4B6D               	infsnz	stoa@i& (0+255),f,b
  7050  002B40  2B6E               	incf	(stoa@i+1)& (0+255),f,b
  7051  002B42                     l8826:
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  7055  002B42  5173               	movf	stoa@p& (0+255),w,b
  7056  002B44  5D6D               	subwf	stoa@i& (0+255),w,b
  7057  002B46  516E               	movf	(stoa@i+1)& (0+255),w,b
  7058  002B48  0A80               	xorlw	128
  7059  002B4A  6F65               	movwf	??_stoa& (0+255),b
  7060  002B4C  5174               	movf	(stoa@p+1)& (0+255),w,b
  7061  002B4E  0A80               	xorlw	128
  7062  002B50  5965               	subwfb	??_stoa& (0+255),w,b
  7063  002B52  E3DD               	bnc	l8820
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 603:     if (flag
      +                          s & (1 << 0)) {
  7067  002B54  A030               	btfss	_flags^0,0,c
  7068  002B56  D009               	goto	u10530
  7069  002B58  D006               	goto	l8834
  7070  002B5A                     l8830:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 605:             
      +                          fputc(' ', fp);
  7074  002B5A  D815               	call	PL144	;call to abstracted procedure
  7075  002B5C  EC0A  F01A         	call	_fputc	;wreg free
  7076                           
  7077                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 606:             
      +                          ++l;
  7078  002B60  0100               	movlb	0	; () banked
  7079  002B62  4B75               	infsnz	stoa@l& (0+255),f,b
  7080  002B64  2B76               	incf	(stoa@l+1)& (0+255),f,b
  7081  002B66                     l8834:
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 604:         whil
      +                          e (l < w) {
  7085  002B66  D806               	call	PL122	;call to abstracted procedure
  7086  002B68  E3F8               	bnc	l8830
  7087  002B6A                     u10530:
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 610:     return l
      +                          ;
  7091                           
  7092                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 608:     }
  7093  002B6A  C075  F020         	movff	stoa@l,?_stoa
  7094  002B6E  C076  F021         	movff	stoa@l+1,?_stoa+1
  7095                           
  7096                           ; BSR set to: 0
  7097  002B72  0012               	return		;funcret
  7098  002B74                     __end_of_stoa:
  7099                           	callstack 0
  7100  002B74                     PL122:
  7101                           	callstack 22
  7102  002B74  516F               	movf	stoa@w& (0+255),w,b
  7103  002B76  5D75               	subwf	stoa@l& (0+255),w,b
  7104  002B78  5176               	movf	(stoa@l+1)& (0+255),w,b
  7105  002B7A  0A80               	xorlw	128
  7106  002B7C  6F65               	movwf	??_stoa& (0+255),b
  7107  002B7E  5170               	movf	(stoa@w+1)& (0+255),w,b
  7108  002B80  0A80               	xorlw	128
  7109  002B82  5965               	subwfb	??_stoa& (0+255),w,b
  7110  002B84  0012               	return	
  7111  002B86                     __end_ofPL122:
  7112                           	callstack 0
  7113  002B86                     PL144:
  7114                           	callstack 22
  7115  002B86  6A1D               	clrf	(fputc@c+1)^0,c
  7116  002B88  0E20               	movlw	32
  7117  002B8A  6E1C               	movwf	fputc@c^0,c
  7118  002B8C  C020  F01E         	movff	stoa@fp,fputc@fp
  7119  002B90  C021  F01F         	movff	stoa@fp+1,fputc@fp+1
  7120  002B94  0C20               	retlw	32
  7121  002B96                     __end_ofPL144:
  7122                           	callstack 0
  7123                           
  7124 ;; *************** function _efgtoa *****************
  7125 ;; Defined at:
  7126 ;;		line 332 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  fp              2  102[BANK0 ] PTR struct _IO_FILE
  7129 ;;		 -> sprintf@f(11), 
  7130 ;;  f               4  104[BANK0 ] PTR struct _IO_FILE
  7131 ;;  c               1  108[BANK0 ] unsigned char 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  u               4   46[BANK1 ] unsigned char 
  7134 ;;  g               4   38[BANK1 ] unsigned char 
  7135 ;;  l               4   32[BANK1 ] unsigned char 
  7136 ;;  h               4   28[BANK1 ] unsigned char 
  7137 ;;  ou              4   14[BANK1 ] unsigned char 
  7138 ;;  n               2   44[BANK1 ] int 
  7139 ;;  e               2   42[BANK1 ] int 
  7140 ;;  i               2   36[BANK1 ] int 
  7141 ;;  w               2   24[BANK1 ] int 
  7142 ;;  p               2   22[BANK1 ] int 
  7143 ;;  sign            2   20[BANK1 ] int 
  7144 ;;  d               2   18[BANK1 ] int 
  7145 ;;  m               2   12[BANK1 ] int 
  7146 ;;  ne              2   10[BANK1 ] int 
  7147 ;;  pp              2    8[BANK1 ] int 
  7148 ;;  t               2    6[BANK1 ] int 
  7149 ;;  mode            1   27[BANK1 ] unsigned char 
  7150 ;;  nmode           1   26[BANK1 ] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  2  102[BANK0 ] int 
  7153 ;; Registers used:
  7154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 3F/0
  7157 ;;		On exit  : 3F/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7160 ;;      Params:         0       7       0       0       0       0       0
  7161 ;;      Locals:         0       0      50       0       0       0       0
  7162 ;;      Temps:          0       5       0       0       0       0       0
  7163 ;;      Totals:         0      12      50       0       0       0       0
  7164 ;;Total ram usage:       62 bytes
  7165 ;; Hardware stack levels used: 1
  7166 ;; Hardware stack levels required when called: 7
  7167 ;; This function calls:
  7168 ;;		___awdiv
  7169 ;;		___awmod
  7170 ;;		___fladd
  7171 ;;		___fldiv
  7172 ;;		___fleq
  7173 ;;		___flge
  7174 ;;		___flmul
  7175 ;;		___flneg
  7176 ;;		___flsub
  7177 ;;		___fltol
  7178 ;;		___fpclassifyf
  7179 ;;		_floorf
  7180 ;;		_isupper
  7181 ;;		_pad
  7182 ;;		_strcpy
  7183 ;;		_tolower
  7184 ;; This function is called by:
  7185 ;;		_vfpfcnvrt
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text13
  7190  0009D6                     __ptext13:
  7191                           	callstack 0
  7192  0009D6                     _efgtoa:
  7193                           	callstack 20
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 332: static int e
      +                          fgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.36\pic\sources\
      +                          c99\common\doprnt.c: 333: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\
      +                          doprnt.c: 334:     char mode, nmode;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c9
      +                          9\common\doprnt.c: 335:     int d, e, i, m, n, ne, p, pp, sign, t, w;;C:\Program Files\M
      +                          icrochip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 336:     long double g, h, l, ou, u;
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;incstack = 0
  7200  0009D6  0101               	movlb	1	; () banked
  7201  0009D8  6BB7               	clrf	efgtoa@sign& (0+255),b
  7202  0009DA  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  7203                           
  7204                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 340:     g = f;
  7205  0009DC  C0C8  F1C9         	movff	efgtoa@f,efgtoa@g
  7206  0009E0  C0C9  F1CA         	movff	efgtoa@f+1,efgtoa@g+1
  7207  0009E4  C0CA  F1CB         	movff	efgtoa@f+2,efgtoa@g+2
  7208  0009E8  C0CB  F1CC         	movff	efgtoa@f+3,efgtoa@g+3
  7209                           
  7210                           ; BSR set to: 1
  7211                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 341:     if (g < 
      +                          0.0) {
  7212  0009EC  AFCC               	btfss	(efgtoa@g+3)& (0+255),7,b
  7213  0009EE  D015               	goto	l8498
  7214                           
  7215                           ; BSR set to: 1
  7216                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 342:         sign
      +                           = 1;
  7217  0009F0  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  7218  0009F2  0E01               	movlw	1
  7219  0009F4  6FB7               	movwf	efgtoa@sign& (0+255),b
  7220                           
  7221                           ; BSR set to: 1
  7222                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 343:         g = 
      +                          -g;
  7223  0009F6  C1C9  F01B         	movff	efgtoa@g,___flneg@f1
  7224  0009FA  C1CA  F01C         	movff	efgtoa@g+1,___flneg@f1+1
  7225  0009FE  C1CB  F01D         	movff	efgtoa@g+2,___flneg@f1+2
  7226  000A02  C1CC  F01E         	movff	efgtoa@g+3,___flneg@f1+3
  7227  000A06  EC12  F01F         	call	___flneg	;wreg free
  7228  000A0A  C01B  F1C9         	movff	?___flneg,efgtoa@g
  7229  000A0E  C01C  F1CA         	movff	?___flneg+1,efgtoa@g+1
  7230  000A12  C01D  F1CB         	movff	?___flneg+2,efgtoa@g+2
  7231  000A16  C01E  F1CC         	movff	?___flneg+3,efgtoa@g+3
  7232  000A1A                     l8498:
  7233                           
  7234                           ; BSR set to: 1
  7235                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 347:     n = 0;
  7236  000A1A  6BCF               	clrf	efgtoa@n& (0+255),b
  7237  000A1C  6BD0               	clrf	(efgtoa@n+1)& (0+255),b
  7238                           
  7239                           ; BSR set to: 1
  7240                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 348:     w = widt
      +                          h;
  7241  000A1E  C02C  F1BB         	movff	_width,efgtoa@w
  7242  000A22  C02D  F1BC         	movff	_width+1,efgtoa@w+1
  7243                           
  7244                           ; BSR set to: 1
  7245                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 349:     if (sign
      +                           || (flags & (1 << 2))) {
  7246  000A26  51B7               	movf	efgtoa@sign& (0+255),w,b
  7247  000A28  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  7248  000A2A  E102               	bnz	u9980
  7249                           
  7250                           ; BSR set to: 1
  7251  000A2C  A430               	btfss	_flags^0,2,c
  7252  000A2E  D010               	goto	l8518
  7253  000A30                     u9980:
  7254                           
  7255                           ; BSR set to: 1
  7256                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 350:         dbuf
      +                          [n] = sign ? '-' : '+';
  7257  000A30  51B7               	movf	efgtoa@sign& (0+255),w,b
  7258  000A32  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  7259  000A34  E103               	bnz	l8510
  7260                           
  7261                           ; BSR set to: 1
  7262  000A36  6BA4               	clrf	(_efgtoa$2403+1)& (0+255),b
  7263  000A38  0E2B               	movlw	43
  7264  000A3A  D002               	goto	L7
  7265  000A3C                     l8510:
  7266                           
  7267                           ; BSR set to: 1
  7268  000A3C  6BA4               	clrf	(_efgtoa$2403+1)& (0+255),b
  7269  000A3E  0E2D               	movlw	45
  7270  000A40                     L7:
  7271  000A40  6FA3               	movwf	_efgtoa$2403& (0+255),b
  7272                           
  7273                           ; BSR set to: 1
  7274  000A42  C1A3  F12D         	movff	_efgtoa$2403,_dbuf
  7275                           
  7276                           ; BSR set to: 1
  7277                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 351:         ++n;
  7278  000A46  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  7279  000A48  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  7280                           
  7281                           ; BSR set to: 1
  7282                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 352:         --w;
  7283  000A4A  07BB               	decf	efgtoa@w& (0+255),f,b
  7284  000A4C  A0D8               	btfss	status,0,c
  7285  000A4E  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7286  000A50                     l8518:
  7287                           
  7288                           ; BSR set to: 1
  7289                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 356:     if (( __
      +                          fpclassifyf(g) == 1 )) {
  7290  000A50  DB3B               	call	PL104	;call to abstracted procedure
  7291  000A52  EC27  F018         	call	___fpclassifyf	;wreg free
  7292  000A56  041B               	decf	?___fpclassifyf^0,w,c
  7293  000A58  101C               	iorwf	(?___fpclassifyf+1)^0,w,c
  7294  000A5A  E12E               	bnz	l8536
  7295                           
  7296                           ; BSR set to: 0
  7297  000A5C  0EBF               	movlw	191
  7298  000A5E  DAB0               	call	PL36	;call to abstracted procedure
  7299  000A60  E10B               	bnz	l8528
  7300  000A62  0E1A               	movlw	26
  7301  000A64  5DCF               	subwf	(??_efgtoa+2)& (0+255),w,b
  7302  000A66  E208               	bc	l8528
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 358:             
      +                          strcpy(&dbuf[n], "INF");
  7306  000A68  DADF               	call	PL50	;call to abstracted procedure
  7307  000A6A  0EE1               	movlw	low STR_31
  7308  000A6C  6E1D               	movwf	strcpy@src^0,c
  7309  000A6E  0E7F               	movlw	high STR_31
  7310  000A70  6E1E               	movwf	(strcpy@src+1)^0,c
  7311  000A72  EC7E  F01C         	call	_strcpy	;wreg free
  7312                           
  7313                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 359:         } el
      +                          se {
  7314  000A76  D007               	goto	l8530
  7315  000A78                     l8528:
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 360:             
      +                          strcpy(&dbuf[n], "inf");
  7319  000A78  DAD7               	call	PL50	;call to abstracted procedure
  7320  000A7A  0EE9               	movlw	low STR_32
  7321  000A7C  6E1D               	movwf	strcpy@src^0,c
  7322  000A7E  0E7F               	movlw	high STR_32
  7323  000A80  6E1E               	movwf	(strcpy@src+1)^0,c
  7324  000A82  EC7E  F01C         	call	_strcpy	;wreg free
  7325  000A86                     l8530:
  7326                           
  7327                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 362:         w -=
      +                           ((sizeof("inf")/sizeof("inf"[0]))-1);
  7328  000A86  0101               	movlb	1	; () banked
  7329  000A88  0EFD               	movlw	253
  7330  000A8A  27BB               	addwf	efgtoa@w& (0+255),f,b
  7331  000A8C  0EFF               	movlw	255
  7332  000A8E  23BC               	addwfc	(efgtoa@w+1)& (0+255),f,b
  7333  000A90                     l8532:
  7334                           
  7335                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 363:         retu
      +                          rn pad(fp, &dbuf[0], w);
  7336  000A90  C0C6  F068         	movff	efgtoa@fp,pad@fp
  7337  000A94  C0C7  F069         	movff	efgtoa@fp+1,pad@fp+1
  7338  000A98  0E2D               	movlw	low _dbuf
  7339  000A9A  0100               	movlb	0	; () banked
  7340  000A9C  6F6A               	movwf	pad@buf& (0+255),b
  7341  000A9E  0E01               	movlw	high _dbuf
  7342  000AA0  6F6B               	movwf	(pad@buf+1)& (0+255),b
  7343  000AA2  C1BB  F06C         	movff	efgtoa@w,pad@p
  7344  000AA6  C1BC  F06D         	movff	efgtoa@w+1,pad@p+1
  7345  000AAA  EC96  F01A         	call	_pad	;wreg free
  7346  000AAE  C068  F0C6         	movff	?_pad,?_efgtoa
  7347  000AB2  C069  F0C7         	movff	?_pad+1,?_efgtoa+1
  7348  000AB6  0012               	return	
  7349  000AB8                     l8536:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 365:     if (( __
      +                          fpclassifyf(g) == 0 )) {
  7353  000AB8  DB07               	call	PL104	;call to abstracted procedure
  7354  000ABA  EC27  F018         	call	___fpclassifyf	;wreg free
  7355  000ABE  501B               	movf	?___fpclassifyf^0,w,c
  7356  000AC0  101C               	iorwf	(?___fpclassifyf+1)^0,w,c
  7357  000AC2  E116               	bnz	l8554
  7358                           
  7359                           ; BSR set to: 0
  7360  000AC4  0EBF               	movlw	191
  7361  000AC6  DA7C               	call	PL36	;call to abstracted procedure
  7362  000AC8  E10B               	bnz	l8546
  7363  000ACA  0E1A               	movlw	26
  7364  000ACC  5DCF               	subwf	(??_efgtoa+2)& (0+255),w,b
  7365  000ACE  E208               	bc	l8546
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 367:             
      +                          strcpy(&dbuf[n], "NAN");
  7369  000AD0  DAAB               	call	PL50	;call to abstracted procedure
  7370  000AD2  0EE5               	movlw	low STR_35
  7371  000AD4  6E1D               	movwf	strcpy@src^0,c
  7372  000AD6  0E7F               	movlw	high STR_35
  7373  000AD8  6E1E               	movwf	(strcpy@src+1)^0,c
  7374  000ADA  EC7E  F01C         	call	_strcpy	;wreg free
  7375                           
  7376                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 368:         } el
      +                          se {
  7377  000ADE  D7D3               	goto	l8530
  7378  000AE0                     l8546:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 369:             
      +                          strcpy(&dbuf[n], "nan");
  7382  000AE0  DAA3               	call	PL50	;call to abstracted procedure
  7383  000AE2  0EED               	movlw	low STR_36
  7384  000AE4  6E1D               	movwf	strcpy@src^0,c
  7385  000AE6  0E7F               	movlw	high STR_36
  7386  000AE8  6E1E               	movwf	(strcpy@src+1)^0,c
  7387  000AEA  EC7E  F01C         	call	_strcpy	;wreg free
  7388  000AEE  D7CB               	goto	l8530
  7389  000AF0                     l8554:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 376:     u = 1.0;
  7393  000AF0  0101               	movlb	1	; () banked
  7394                           
  7395                           ; BSR set to: 1
  7396                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 377:     e = 0;
  7397  000AF2  DB0E               	call	PL118	;call to abstracted procedure
  7398                           
  7399                           ; BSR set to: 1
  7400                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 378:     if (!(g 
      +                          == 0.0)) {
  7401  000AF4  C1C9  F01B         	movff	efgtoa@g,___fleq@ff1
  7402  000AF8  C1CA  F01C         	movff	efgtoa@g+1,___fleq@ff1+1
  7403  000AFC  C1CB  F01D         	movff	efgtoa@g+2,___fleq@ff1+2
  7404  000B00  C1CC  F01E         	movff	efgtoa@g+3,___fleq@ff1+3
  7405  000B04  DB18               	call	PL204	;call to abstracted procedure
  7406  000B06  EC84  F01B         	call	___fleq	;wreg free
  7407  000B0A  E310               	bnc	l8566
  7408  000B0C  D02D               	goto	u10060
  7409  000B0E                     l8562:
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 380:             
      +                          u = u*10.0;
  7413  000B0E  DA9E               	call	PL56	;call to abstracted procedure
  7414  000B10  DAAD               	call	PL62	;call to abstracted procedure
  7415  000B12  EC38  F00F         	call	___flmul	;wreg free
  7416  000B16  C066  F1D1         	movff	?___flmul,efgtoa@u
  7417  000B1A  C067  F1D2         	movff	?___flmul+1,efgtoa@u+1
  7418  000B1E  C068  F1D3         	movff	?___flmul+2,efgtoa@u+2
  7419  000B22  C069  F1D4         	movff	?___flmul+3,efgtoa@u+3
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 381:             
      +                          ++e;
  7423  000B26  0101               	movlb	1	; () banked
  7424  000B28  4BCD               	infsnz	efgtoa@e& (0+255),f,b
  7425  000B2A  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  7426  000B2C                     l8566:
  7427                           
  7428                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 379:         whil
      +                          e (!(g < (u*10.0))) {
  7429  000B2C  DADF               	call	PL112	;call to abstracted procedure
  7430  000B2E  0100               	movlb	0	; () banked
  7431  000B30  DA9D               	call	PL62	;call to abstracted procedure
  7432  000B32  DA8C               	call	PL56	;call to abstracted procedure
  7433  000B34  EC38  F00F         	call	___flmul	;wreg free
  7434  000B38  DAD0               	call	PL108	;call to abstracted procedure
  7435  000B3A  ECC3  F019         	call	___flge	;wreg free
  7436  000B3E  E308               	bnc	l8572
  7437  000B40  D7E6               	goto	l8562
  7438  000B42                     l8568:
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 384:             
      +                          u = u/10.0;
  7442  000B42  DA0D               	call	PL18	;call to abstracted procedure
  7443  000B44  EC4D  F010         	call	___fldiv	;wreg free
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 385:             
      +                          --e;
  7447  000B48  DA77               	call	PL52	;call to abstracted procedure
  7448  000B4A  07CD               	decf	efgtoa@e& (0+255),f,b
  7449  000B4C  A0D8               	btfss	status,0,c
  7450  000B4E  07CE               	decf	(efgtoa@e+1)& (0+255),f,b
  7451  000B50                     l8572:
  7452                           
  7453                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 383:         whil
      +                          e (g < u) {
  7454  000B50  DACD               	call	PL112	;call to abstracted procedure
  7455  000B52  C1D1  F083         	movff	efgtoa@u,___flge@ff2
  7456  000B56  C1D2  F084         	movff	efgtoa@u+1,___flge@ff2+1
  7457  000B5A  C1D3  F085         	movff	efgtoa@u+2,___flge@ff2+2
  7458  000B5E  C1D4  F086         	movff	efgtoa@u+3,___flge@ff2+3
  7459  000B62  ECC3  F019         	call	___flge	;wreg free
  7460  000B66  E3ED               	bnc	l8568
  7461  000B68                     u10060:
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 390:     mode = (
      +                          char)tolower((int)c);
  7465  000B68  C0CC  F021         	movff	efgtoa@c,tolower@c
  7466  000B6C  6A22               	clrf	(tolower@c+1)^0,c
  7467  000B6E  ECE9  F01D         	call	_tolower	;wreg free
  7468  000B72  5021               	movf	?_tolower^0,w,c
  7469  000B74  0101               	movlb	1	; () banked
  7470  000B76  6FBE               	movwf	efgtoa@mode& (0+255),b
  7471                           
  7472                           ; BSR set to: 1
  7473                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 391:     nmode = 
      +                          mode;
  7474  000B78  C1BE  F1BD         	movff	efgtoa@mode,efgtoa@nmode
  7475                           
  7476                           ; BSR set to: 1
  7477                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 392:     if (mode
      +                           == 'g') {
  7478  000B7C  0E67               	movlw	103
  7479  000B7E  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7480  000B80  E116               	bnz	l8588
  7481                           
  7482                           ; BSR set to: 1
  7483                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 393:   if (prec =
      +                          = 0) {
  7484  000B82  502E               	movf	_prec^0,w,c
  7485  000B84  102F               	iorwf	(_prec+1)^0,w,c
  7486  000B86  E104               	bnz	l8584
  7487                           
  7488                           ; BSR set to: 1
  7489                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 394:    prec = 1;
  7490  000B88  0E00               	movlw	0
  7491  000B8A  6E2F               	movwf	(_prec+1)^0,c
  7492  000B8C  0E01               	movlw	1
  7493  000B8E  6E2E               	movwf	_prec^0,c
  7494  000B90                     l8584:
  7495                           
  7496                           ; BSR set to: 1
  7497                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 396:         p = 
      +                          (0 < prec) ? prec : 6;
  7498  000B90  BE2F               	btfsc	(_prec+1)^0,7,c
  7499  000B92  D004               	goto	u10090
  7500  000B94  502F               	movf	(_prec+1)^0,w,c
  7501  000B96  E106               	bnz	l1503
  7502  000B98  042E               	decf	_prec^0,w,c
  7503  000B9A  E204               	bc	l1503
  7504  000B9C                     u10090:
  7505                           
  7506                           ; BSR set to: 1
  7507  000B9C  6BBA               	clrf	(efgtoa@p+1)& (0+255),b
  7508  000B9E  0E06               	movlw	6
  7509  000BA0  6FB9               	movwf	efgtoa@p& (0+255),b
  7510  000BA2  D008               	goto	l8594
  7511  000BA4                     l1503:
  7512                           
  7513                           ; BSR set to: 1
  7514  000BA4  C02E  F1B9         	movff	_prec,efgtoa@p
  7515  000BA8  C02F  F1BA         	movff	_prec+1,efgtoa@p+1
  7516  000BAC  D003               	goto	l8594
  7517  000BAE                     l8588:
  7518                           
  7519                           ; BSR set to: 1
  7520                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 398:         p = 
      +                          (prec < 0) ? 6 : prec;
  7521  000BAE  BE2F               	btfsc	(_prec+1)^0,7,c
  7522  000BB0  D7F5               	goto	u10090
  7523  000BB2  D7F8               	goto	l1503
  7524  000BB4                     l8594:
  7525                           
  7526                           ; BSR set to: 1
  7527                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 402:     if (mode
      +                           == 'g') {
  7528  000BB4  0E67               	movlw	103
  7529  000BB6  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7530  000BB8  E124               	bnz	l8604
  7531                           
  7532                           ; BSR set to: 1
  7533                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 403:         if (
      +                          !(e < -4) && !((p - 1) < e)) {
  7534  000BBA  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  7535  000BBC  D005               	goto	u10120
  7536  000BBE  0EFC               	movlw	252
  7537  000BC0  5DCD               	subwf	efgtoa@e& (0+255),w,b
  7538  000BC2  0EFF               	movlw	255
  7539  000BC4  59CE               	subwfb	(efgtoa@e+1)& (0+255),w,b
  7540  000BC6  E31A               	bnc	l8602
  7541  000BC8                     u10120:
  7542                           
  7543                           ; BSR set to: 1
  7544  000BC8  0100               	movlb	0	; () banked
  7545  000BCA  69CD               	setf	??_efgtoa& (0+255),b
  7546  000BCC  69CE               	setf	(??_efgtoa+1)& (0+255),b
  7547  000BCE  C1B9  F0CF         	movff	efgtoa@p,??_efgtoa+2
  7548  000BD2  C1BA  F0D0         	movff	efgtoa@p+1,??_efgtoa+3
  7549  000BD6  51CD               	movf	??_efgtoa& (0+255),w,b
  7550  000BD8  27CF               	addwf	(??_efgtoa+2)& (0+255),f,b
  7551  000BDA  51CE               	movf	(??_efgtoa+1)& (0+255),w,b
  7552  000BDC  23D0               	addwfc	(??_efgtoa+3)& (0+255),f,b
  7553  000BDE  0101               	movlb	1	; () banked
  7554  000BE0  51CD               	movf	efgtoa@e& (0+255),w,b
  7555  000BE2  0100               	movlb	0	; () banked
  7556  000BE4  5DCF               	subwf	(??_efgtoa+2)& (0+255),w,b
  7557  000BE6  51D0               	movf	(??_efgtoa+3)& (0+255),w,b
  7558  000BE8  0A80               	xorlw	128
  7559  000BEA  6FD1               	movwf	(??_efgtoa+4)& (0+255),b
  7560  000BEC  0101               	movlb	1	; () banked
  7561  000BEE  51CE               	movf	(efgtoa@e+1)& (0+255),w,b
  7562  000BF0  0A80               	xorlw	128
  7563  000BF2  0100               	movlb	0	; () banked
  7564  000BF4  59D1               	subwfb	(??_efgtoa+4)& (0+255),w,b
  7565  000BF6  E302               	bnc	l8602
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 404:             
      +                          nmode = 'f';
  7569  000BF8  0E66               	movlw	102
  7570  000BFA  D001               	goto	L8
  7571  000BFC                     l8602:
  7572                           
  7573                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 406:             
      +                          nmode = 'e';
  7574  000BFC  0E65               	movlw	101
  7575  000BFE                     L8:
  7576  000BFE  0101               	movlb	1	; () banked
  7577  000C00  6FBD               	movwf	efgtoa@nmode& (0+255),b
  7578  000C02                     l8604:
  7579                           
  7580                           ; BSR set to: 1
  7581                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 411:     m = p;
  7582  000C02  C1B9  F1AF         	movff	efgtoa@p,efgtoa@m
  7583  000C06  C1BA  F1B0         	movff	efgtoa@p+1,efgtoa@m+1
  7584                           
  7585                           ; BSR set to: 1
  7586                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 412:     if (!(mo
      +                          de == 'g') || ((nmode == 'f') && (e < 0))) {
  7587  000C0A  0E67               	movlw	103
  7588  000C0C  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7589  000C0E  E105               	bnz	u10160
  7590                           
  7591                           ; BSR set to: 1
  7592  000C10  0E66               	movlw	102
  7593  000C12  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7594  000C14  E104               	bnz	l8614
  7595                           
  7596                           ; BSR set to: 1
  7597  000C16  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  7598  000C18  D002               	goto	l8614
  7599  000C1A                     u10160:
  7600                           
  7601                           ; BSR set to: 1
  7602                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 413:         ++m;
  7603  000C1A  4BAF               	infsnz	efgtoa@m& (0+255),f,b
  7604  000C1C  2BB0               	incf	(efgtoa@m+1)& (0+255),f,b
  7605  000C1E                     l8614:
  7606                           
  7607                           ; BSR set to: 1
  7608                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 417:     if (nmod
      +                          e == 'f') {
  7609  000C1E  0E66               	movlw	102
  7610  000C20  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7611  000C22  E109               	bnz	l8626
  7612                           
  7613                           ; BSR set to: 1
  7614                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 418:         if (
      +                          e < 0) {
  7615  000C24  BFCE               	btfsc	(efgtoa@e+1)& (0+255),7,b
  7616                           
  7617                           ; BSR set to: 1
  7618                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 419:             
      +                          u = 1.0;
  7619                           
  7620                           ; BSR set to: 1
  7621                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 420:             
      +                          e = 0;
  7622  000C26  DA74               	call	PL118	;call to abstracted procedure
  7623  000C28                     l8622:
  7624                           
  7625                           ; BSR set to: 1
  7626                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 422:         if (
      +                          !(mode == 'g')) {
  7627  000C28  0E67               	movlw	103
  7628  000C2A  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7629  000C2C  E004               	bz	l8626
  7630                           
  7631                           ; BSR set to: 1
  7632                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 423:             
      +                          m += e;
  7633  000C2E  51CD               	movf	efgtoa@e& (0+255),w,b
  7634  000C30  27AF               	addwf	efgtoa@m& (0+255),f,b
  7635  000C32  51CE               	movf	(efgtoa@e+1)& (0+255),w,b
  7636  000C34  23B0               	addwfc	(efgtoa@m+1)& (0+255),f,b
  7637  000C36                     l8626:
  7638                           
  7639                           ; BSR set to: 1
  7640                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 428:     i = 0;
  7641  000C36  6BC7               	clrf	efgtoa@i& (0+255),b
  7642  000C38  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  7643                           
  7644                           ; BSR set to: 1
  7645                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 429:     h = g;
  7646  000C3A  C1C9  F1BF         	movff	efgtoa@g,efgtoa@h
  7647  000C3E  C1CA  F1C0         	movff	efgtoa@g+1,efgtoa@h+1
  7648  000C42  C1CB  F1C1         	movff	efgtoa@g+2,efgtoa@h+2
  7649  000C46  C1CC  F1C2         	movff	efgtoa@g+3,efgtoa@h+3
  7650                           
  7651                           ; BSR set to: 1
  7652                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 430:     ou = u;
  7653  000C4A  C1D1  F1B1         	movff	efgtoa@u,efgtoa@ou
  7654  000C4E  C1D2  F1B2         	movff	efgtoa@u+1,efgtoa@ou+1
  7655  000C52  C1D3  F1B3         	movff	efgtoa@u+2,efgtoa@ou+2
  7656  000C56  C1D4  F1B4         	movff	efgtoa@u+3,efgtoa@ou+3
  7657                           
  7658                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  7659  000C5A  D017               	goto	l8640
  7660  000C5C                     l8632:
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 432:         l = 
      +                          floorf(h/u);
  7664  000C5C  D9C3               	call	PL46	;call to abstracted procedure
  7665  000C5E  EC4D  F010         	call	___fldiv	;wreg free
  7666  000C62  DA4D               	call	PL114	;call to abstracted procedure
  7667  000C64  ECF2  F011         	call	_floorf	;wreg free
  7668                           
  7669                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 433:         d = 
      +                          (int)l;
  7670  000C68  D9CE               	call	PL48	;call to abstracted procedure
  7671  000C6A  EC2A  F019         	call	___fltol	;wreg free
  7672  000C6E  DA5E               	call	PL184	;call to abstracted procedure
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 434:         h -=
      +                           l*u;
  7676  000C70  D985               	call	PL20	;call to abstracted procedure
  7677  000C72  EC38  F00F         	call	___flmul	;wreg free
  7678  000C76  DA0D               	call	PL92	;call to abstracted procedure
  7679  000C78  ECCC  F01D         	call	___flsub	;wreg free
  7680  000C7C  D998               	call	PL26	;call to abstracted procedure
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 435:         u = 
      +                          u/10.0;
  7684  000C7E  D96F               	call	PL18	;call to abstracted procedure
  7685  000C80  EC4D  F010         	call	___fldiv	;wreg free
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 436:         ++i;
  7689  000C84  D9D9               	call	PL52	;call to abstracted procedure
  7690  000C86  4BC7               	infsnz	efgtoa@i& (0+255),f,b
  7691  000C88  2BC8               	incf	(efgtoa@i+1)& (0+255),f,b
  7692  000C8A                     l8640:
  7693                           
  7694                           ; BSR set to: 1
  7695                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  7696  000C8A  D9F7               	call	PL76	;call to abstracted procedure
  7697  000C8C  E3E7               	bnc	l8632
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 440:     l = u*5.
      +                          0;
  7701  000C8E  D9DE               	call	PL56	;call to abstracted procedure
  7702  000C90  6B6A               	clrf	___flmul@a& (0+255),b
  7703  000C92  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  7704  000C94  0EA0               	movlw	160
  7705  000C96  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  7706  000C98  0E40               	movlw	64
  7707  000C9A  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  7708  000C9C  EC38  F00F         	call	___flmul	;wreg free
  7709  000CA0  C066  F1C3         	movff	?___flmul,efgtoa@l
  7710  000CA4  C067  F1C4         	movff	?___flmul+1,efgtoa@l+1
  7711  000CA8  C068  F1C5         	movff	?___flmul+2,efgtoa@l+2
  7712  000CAC  C069  F1C6         	movff	?___flmul+3,efgtoa@l+3
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 441:     if (h < 
      +                          l) {
  7716  000CB0  DA02               	call	PL102	;call to abstracted procedure
  7717  000CB2  C1C3  F083         	movff	efgtoa@l,___flge@ff2
  7718  000CB6  C1C4  F084         	movff	efgtoa@l+1,___flge@ff2+1
  7719  000CBA  C1C5  F085         	movff	efgtoa@l+2,___flge@ff2+2
  7720  000CBE  C1C6  F086         	movff	efgtoa@l+3,___flge@ff2+3
  7721  000CC2  ECC3  F019         	call	___flge	;wreg free
  7722  000CC6  E202               	bc	l8648
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 442:         l = 
      +                          0.0;
  7726  000CC8  0101               	movlb	1	; () banked
  7727  000CCA  D016               	goto	u10230
  7728  000CCC                     l8648:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 445:         if (
      +                          (h == l) && !(d % 2)) {
  7732  000CCC  C1BF  F01B         	movff	efgtoa@h,___fleq@ff1
  7733  000CD0  C1C0  F01C         	movff	efgtoa@h+1,___fleq@ff1+1
  7734  000CD4  C1C1  F01D         	movff	efgtoa@h+2,___fleq@ff1+2
  7735  000CD8  C1C2  F01E         	movff	efgtoa@h+3,___fleq@ff1+3
  7736  000CDC  C1C3  F01F         	movff	efgtoa@l,___fleq@ff2
  7737  000CE0  C1C4  F020         	movff	efgtoa@l+1,___fleq@ff2+1
  7738  000CE4  C1C5  F021         	movff	efgtoa@l+2,___fleq@ff2+2
  7739  000CE8  C1C6  F022         	movff	efgtoa@l+3,___fleq@ff2+3
  7740  000CEC  EC84  F01B         	call	___fleq	;wreg free
  7741  000CF0  E307               	bnc	l8654
  7742                           
  7743                           ; BSR set to: 0
  7744  000CF2  0101               	movlb	1	; () banked
  7745  000CF4  B1B5               	btfsc	efgtoa@d& (0+255),0,b
  7746  000CF6  D004               	goto	l8654
  7747  000CF8                     u10230:
  7748                           
  7749                           ; BSR set to: 1
  7750                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 446:             
      +                          l = 0.0;
  7751  000CF8  6BC3               	clrf	efgtoa@l& (0+255),b
  7752  000CFA  6BC4               	clrf	(efgtoa@l+1)& (0+255),b
  7753  000CFC  6BC5               	clrf	(efgtoa@l+2)& (0+255),b
  7754  000CFE  6BC6               	clrf	(efgtoa@l+3)& (0+255),b
  7755  000D00                     l8654:
  7756                           
  7757                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 451:     h = g + 
      +                          l;
  7758  000D00  C1C9  F07F         	movff	efgtoa@g,___fladd@b
  7759  000D04  C1CA  F080         	movff	efgtoa@g+1,___fladd@b+1
  7760  000D08  C1CB  F081         	movff	efgtoa@g+2,___fladd@b+2
  7761  000D0C  C1CC  F082         	movff	efgtoa@g+3,___fladd@b+3
  7762  000D10  C1C3  F083         	movff	efgtoa@l,___fladd@a
  7763  000D14  C1C4  F084         	movff	efgtoa@l+1,___fladd@a+1
  7764  000D18  C1C5  F085         	movff	efgtoa@l+2,___fladd@a+2
  7765  000D1C  C1C6  F086         	movff	efgtoa@l+3,___fladd@a+3
  7766  000D20  EC0A  F00E         	call	___fladd	;wreg free
  7767  000D24  C07F  F1BF         	movff	?___fladd,efgtoa@h
  7768  000D28  C080  F1C0         	movff	?___fladd+1,efgtoa@h+1
  7769  000D2C  C081  F1C1         	movff	?___fladd+2,efgtoa@h+2
  7770  000D30  C082  F1C2         	movff	?___fladd+3,efgtoa@h+3
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 453:  if (h >= (o
      +                          u*10.0)) {
  7774  000D34  D9C0               	call	PL102	;call to abstracted procedure
  7775  000D36  D99A               	call	PL62	;call to abstracted procedure
  7776  000D38  D9B5               	call	PL94	;call to abstracted procedure
  7777  000D3A  EC38  F00F         	call	___flmul	;wreg free
  7778  000D3E  D9CD               	call	PL108	;call to abstracted procedure
  7779  000D40  ECC3  F019         	call	___flge	;wreg free
  7780  000D44  E316               	bnc	l8666
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 454:   e++;
  7784  000D46  0101               	movlb	1	; () banked
  7785  000D48  4BCD               	infsnz	efgtoa@e& (0+255),f,b
  7786  000D4A  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  7787                           
  7788                           ; BSR set to: 1
  7789                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 455:   ou *= 10.0
      +                          ;
  7790  000D4C  D9AB               	call	PL94	;call to abstracted procedure
  7791  000D4E  0100               	movlb	0	; () banked
  7792  000D50  D98D               	call	PL62	;call to abstracted procedure
  7793  000D52  EC38  F00F         	call	___flmul	;wreg free
  7794  000D56  C066  F1B1         	movff	?___flmul,efgtoa@ou
  7795  000D5A  C067  F1B2         	movff	?___flmul+1,efgtoa@ou+1
  7796  000D5E  C068  F1B3         	movff	?___flmul+2,efgtoa@ou+2
  7797  000D62  C069  F1B4         	movff	?___flmul+3,efgtoa@ou+3
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 456:   if (nmode 
      +                          == 'f') {
  7801  000D66  0E66               	movlw	102
  7802  000D68  0101               	movlb	1	; () banked
  7803  000D6A  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7804  000D6C  E102               	bnz	l8666
  7805                           
  7806                           ; BSR set to: 1
  7807                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 458:    m++;
  7808  000D6E  4BAF               	infsnz	efgtoa@m& (0+255),f,b
  7809  000D70  2BB0               	incf	(efgtoa@m+1)& (0+255),f,b
  7810  000D72                     l8666:
  7811                           
  7812                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 463:     u = ou;
  7813  000D72  C1B1  F1D1         	movff	efgtoa@ou,efgtoa@u
  7814  000D76  C1B2  F1D2         	movff	efgtoa@ou+1,efgtoa@u+1
  7815  000D7A  C1B3  F1D3         	movff	efgtoa@ou+2,efgtoa@u+2
  7816  000D7E  C1B4  F1D4         	movff	efgtoa@ou+3,efgtoa@u+3
  7817                           
  7818                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 464:     ne = (nm
      +                          ode == 'e') ? 0 : e;
  7819  000D82  0E65               	movlw	101
  7820  000D84  0101               	movlb	1	; () banked
  7821  000D86  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7822  000D88  E005               	bz	l1529
  7823                           
  7824                           ; BSR set to: 1
  7825  000D8A  C1CD  F1AD         	movff	efgtoa@e,efgtoa@ne
  7826  000D8E  C1CE  F1AE         	movff	efgtoa@e+1,efgtoa@ne+1
  7827  000D92  D002               	goto	l1531
  7828  000D94                     l1529:
  7829                           
  7830                           ; BSR set to: 1
  7831  000D94  6BAD               	clrf	efgtoa@ne& (0+255),b
  7832  000D96  6BAE               	clrf	(efgtoa@ne+1)& (0+255),b
  7833  000D98                     l1531:
  7834                           
  7835                           ; BSR set to: 1
  7836                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 465:     pp = 0;
  7837  000D98  6BAB               	clrf	efgtoa@pp& (0+255),b
  7838  000D9A  6BAC               	clrf	(efgtoa@pp+1)& (0+255),b
  7839                           
  7840                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 466:     t = 0;
  7841  000D9C  6BA9               	clrf	efgtoa@t& (0+255),b
  7842  000D9E  6BAA               	clrf	(efgtoa@t+1)& (0+255),b
  7843                           
  7844                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 467:     i = 0;
  7845  000DA0  6BC7               	clrf	efgtoa@i& (0+255),b
  7846  000DA2  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  7847                           
  7848                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  7849  000DA4  D048               	goto	l8720
  7850  000DA6                     l8672:
  7851                           
  7852                           ; BSR set to: 1
  7853                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 469:         l = 
      +                          floorf(h/u);
  7854  000DA6  D91E               	call	PL46	;call to abstracted procedure
  7855  000DA8  EC4D  F010         	call	___fldiv	;wreg free
  7856  000DAC  D9A8               	call	PL114	;call to abstracted procedure
  7857  000DAE  ECF2  F011         	call	_floorf	;wreg free
  7858                           
  7859                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 470:         d = 
      +                          (int)l;
  7860  000DB2  D929               	call	PL48	;call to abstracted procedure
  7861  000DB4  EC2A  F019         	call	___fltol	;wreg free
  7862  000DB8  D9B9               	call	PL184	;call to abstracted procedure
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 471:         if (
      +                          !(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
  7866  000DBA  B830               	btfsc	_flags^0,4,c
  7867  000DBC  D00C               	goto	l8684
  7868                           
  7869                           ; BSR set to: 0
  7870  000DBE  0101               	movlb	1	; () banked
  7871  000DC0  51B5               	movf	efgtoa@d& (0+255),w,b
  7872  000DC2  11B6               	iorwf	(efgtoa@d+1)& (0+255),w,b
  7873  000DC4  E108               	bnz	l8684
  7874                           
  7875                           ; BSR set to: 1
  7876  000DC6  0E67               	movlw	103
  7877  000DC8  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7878  000DCA  E105               	bnz	l8684
  7879                           
  7880                           ; BSR set to: 1
  7881  000DCC  AFAE               	btfss	(efgtoa@ne+1)& (0+255),7,b
  7882  000DCE  D003               	goto	l8684
  7883                           
  7884                           ; BSR set to: 1
  7885                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 472:             
      +                          ++t;
  7886  000DD0  4BA9               	infsnz	efgtoa@t& (0+255),f,b
  7887  000DD2  2BAA               	incf	(efgtoa@t+1)& (0+255),f,b
  7888                           
  7889                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 473:         } el
      +                          se {
  7890  000DD4  D020               	goto	l8712
  7891  000DD6                     l8684:
  7892                           
  7893                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 474:             
      +                          if (!pp && (ne < 0)) {
  7894  000DD6  0101               	movlb	1	; () banked
  7895  000DD8  51AB               	movf	efgtoa@pp& (0+255),w,b
  7896  000DDA  11AC               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  7897  000DDC  E113               	bnz	l8704
  7898                           
  7899                           ; BSR set to: 1
  7900  000DDE  AFAE               	btfss	(efgtoa@ne+1)& (0+255),7,b
  7901  000DE0  D011               	goto	l8704
  7902                           
  7903                           ; BSR set to: 1
  7904                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 475:             
      +                              dbuf[n++] = '.';
  7905  000DE2  D8F9               	call	PL44	;call to abstracted procedure
  7906  000DE4  0E2E               	movlw	46
  7907                           
  7908                           ; BSR set to: 1
  7909                           
  7910                           ; BSR set to: 1
  7911                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 476:             
      +                              --w;
  7912  000DE6  D99D               	call	PL156	;call to abstracted procedure
  7913  000DE8  A0D8               	btfss	status,0,c
  7914  000DEA  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7915                           
  7916                           ; BSR set to: 1
  7917                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 477:             
      +                              pp = 1;
  7918  000DEC  6BAC               	clrf	(efgtoa@pp+1)& (0+255),b
  7919  000DEE  0E01               	movlw	1
  7920  000DF0  6FAB               	movwf	efgtoa@pp& (0+255),b
  7921  000DF2  D008               	goto	l8704
  7922  000DF4                     l8696:
  7923                           
  7924                           ; BSR set to: 1
  7925                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 480:             
      +                              dbuf[n++] = '0';
  7926  000DF4  D8F0               	call	PL44	;call to abstracted procedure
  7927  000DF6  0E30               	movlw	48
  7928                           
  7929                           ; BSR set to: 1
  7930                           
  7931                           ; BSR set to: 1
  7932                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 481:             
      +                              --w;
  7933  000DF8  D994               	call	PL156	;call to abstracted procedure
  7934  000DFA  A0D8               	btfss	status,0,c
  7935  000DFC  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7936                           
  7937                           ; BSR set to: 1
  7938                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 482:             
      +                              --t;
  7939  000DFE  07A9               	decf	efgtoa@t& (0+255),f,b
  7940  000E00  A0D8               	btfss	status,0,c
  7941  000E02  07AA               	decf	(efgtoa@t+1)& (0+255),f,b
  7942  000E04                     l8704:
  7943                           
  7944                           ; BSR set to: 1
  7945                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 479:             
      +                          while (t) {
  7946  000E04  51A9               	movf	efgtoa@t& (0+255),w,b
  7947  000E06  11AA               	iorwf	(efgtoa@t+1)& (0+255),w,b
  7948  000E08  E1F5               	bnz	l8696
  7949                           
  7950                           ; BSR set to: 1
  7951                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 484:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  7952  000E0A  D8E5               	call	PL44	;call to abstracted procedure
  7953  000E0C  51B5               	movf	efgtoa@d& (0+255),w,b
  7954  000E0E  0F30               	addlw	48
  7955                           
  7956                           ; BSR set to: 1
  7957                           
  7958                           ; BSR set to: 1
  7959                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 485:             
      +                          --w;
  7960  000E10  D988               	call	PL156	;call to abstracted procedure
  7961  000E12  A0D8               	btfss	status,0,c
  7962  000E14  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7963  000E16                     l8712:
  7964                           
  7965                           ; BSR set to: 1
  7966                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 487:         h -=
      +                           l*u;
  7967  000E16  D8B2               	call	PL20	;call to abstracted procedure
  7968  000E18  EC38  F00F         	call	___flmul	;wreg free
  7969  000E1C  D93A               	call	PL92	;call to abstracted procedure
  7970  000E1E  ECCC  F01D         	call	___flsub	;wreg free
  7971  000E22  D8C5               	call	PL26	;call to abstracted procedure
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 488:         u = 
      +                          u/10.0;
  7975  000E24  D89C               	call	PL18	;call to abstracted procedure
  7976  000E26  EC4D  F010         	call	___fldiv	;wreg free
  7977                           
  7978                           ; BSR set to: 0
  7979                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 489:         --ne
      +                          ;
  7980  000E2A  D906               	call	PL52	;call to abstracted procedure
  7981  000E2C  07AD               	decf	efgtoa@ne& (0+255),f,b
  7982  000E2E  A0D8               	btfss	status,0,c
  7983  000E30  07AE               	decf	(efgtoa@ne+1)& (0+255),f,b
  7984                           
  7985                           ; BSR set to: 1
  7986                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 490:         ++i;
  7987  000E32  4BC7               	infsnz	efgtoa@i& (0+255),f,b
  7988  000E34  2BC8               	incf	(efgtoa@i+1)& (0+255),f,b
  7989  000E36                     l8720:
  7990                           
  7991                           ; BSR set to: 1
  7992                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  7993  000E36  D921               	call	PL76	;call to abstracted procedure
  7994  000E38  E208               	bc	u10350
  7995                           
  7996                           ; BSR set to: 0
  7997  000E3A  0101               	movlb	1	; () banked
  7998  000E3C  BFD0               	btfsc	(efgtoa@n+1)& (0+255),7,b
  7999  000E3E  D7B3               	goto	l8672
  8000  000E40  51D0               	movf	(efgtoa@n+1)& (0+255),w,b
  8001  000E42  E103               	bnz	u10350
  8002  000E44  0E4B               	movlw	75
  8003  000E46  5DCF               	subwf	efgtoa@n& (0+255),w,b
  8004  000E48  E3AE               	bnc	l8672
  8005  000E4A                     u10350:
  8006                           
  8007                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 492:     if (!pp 
      +                          && (flags & (1 << 4))) {
  8008  000E4A  0101               	movlb	1	; () banked
  8009  000E4C  51AB               	movf	efgtoa@pp& (0+255),w,b
  8010  000E4E  11AC               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  8011  000E50  E107               	bnz	l8732
  8012                           
  8013                           ; BSR set to: 1
  8014  000E52  A830               	btfss	_flags^0,4,c
  8015  000E54  D005               	goto	l8732
  8016                           
  8017                           ; BSR set to: 1
  8018                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 493:         dbuf
      +                          [n++] = '.';
  8019  000E56  D8BF               	call	PL44	;call to abstracted procedure
  8020  000E58  0E2E               	movlw	46
  8021  000E5A  6EDF               	movwf	indf2,c
  8022                           
  8023                           ; BSR set to: 1
  8024  000E5C  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  8025  000E5E  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  8026  000E60                     l8732:
  8027                           
  8028                           ; BSR set to: 1
  8029                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 495:     dbuf[n] 
      +                          = '\0';
  8030  000E60  D8BA               	call	PL44	;call to abstracted procedure
  8031  000E62  6ADF               	clrf	indf2,c
  8032                           
  8033                           ; BSR set to: 1
  8034                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 498:     if (nmod
      +                          e == 'e') {
  8035  000E64  0E65               	movlw	101
  8036  000E66  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  8037  000E68  E001 D612          	bnz	l8532
  8038                           
  8039                           ; BSR set to: 1
  8040                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 499:         i = 
      +                          sizeof(dbuf) - 1;
  8041  000E6C  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  8042  000E6E  0E4F               	movlw	79
  8043  000E70  6FC7               	movwf	efgtoa@i& (0+255),b
  8044                           
  8045                           ; BSR set to: 1
  8046                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 500:         dbuf
      +                          [i] = '\0';
  8047  000E72  D8F5               	call	PL60	;call to abstracted procedure
  8048  000E74  6ADF               	clrf	indf2,c
  8049                           
  8050                           ; BSR set to: 1
  8051                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 501:         sign
      +                           = 0;
  8052  000E76  6BB7               	clrf	efgtoa@sign& (0+255),b
  8053  000E78  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  8054                           
  8055                           ; BSR set to: 1
  8056                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 502:         if (
      +                          e < 0) {
  8057  000E7A  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  8058  000E7C  D007               	goto	l8748
  8059                           
  8060                           ; BSR set to: 1
  8061                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 503:             
      +                          sign = 1;
  8062  000E7E  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  8063  000E80  0E01               	movlw	1
  8064  000E82  6FB7               	movwf	efgtoa@sign& (0+255),b
  8065                           
  8066                           ; BSR set to: 1
  8067                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 504:             
      +                          e = -e;
  8068  000E84  6DCD               	negf	efgtoa@e& (0+255),b
  8069  000E86  1FCE               	comf	(efgtoa@e+1)& (0+255),f,b
  8070  000E88  B0D8               	btfsc	status,0,c
  8071  000E8A  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  8072  000E8C                     l8748:
  8073                           
  8074                           ; BSR set to: 1
  8075                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 506:         p = 
      +                          2;
  8076  000E8C  6BBA               	clrf	(efgtoa@p+1)& (0+255),b
  8077  000E8E  0E02               	movlw	2
  8078  000E90  6FB9               	movwf	efgtoa@p& (0+255),b
  8079                           
  8080                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  8081  000E92  D023               	goto	l8760
  8082  000E94                     l8750:
  8083                           
  8084                           ; BSR set to: 1
  8085                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 508:             
      +                          --i;
  8086  000E94  07C7               	decf	efgtoa@i& (0+255),f,b
  8087  000E96  A0D8               	btfss	status,0,c
  8088  000E98  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8089                           
  8090                           ; BSR set to: 1
  8091                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 509:             
      +                          dbuf[i] = '0' + (e % 10);
  8092  000E9A  D8E1               	call	PL60	;call to abstracted procedure
  8093  000E9C  C1CD  F01B         	movff	efgtoa@e,___awmod@dividend
  8094  000EA0  C1CE  F01C         	movff	efgtoa@e+1,___awmod@dividend+1
  8095  000EA4  6A1E               	clrf	(___awmod@divisor+1)^0,c
  8096  000EA6  0E0A               	movlw	10
  8097  000EA8  6E1D               	movwf	___awmod@divisor^0,c
  8098  000EAA  EC50  F01B         	call	___awmod	;wreg free
  8099  000EAE  501B               	movf	?___awmod^0,w,c
  8100  000EB0  0F30               	addlw	48
  8101  000EB2  6EDF               	movwf	indf2,c
  8102                           
  8103                           ; BSR set to: 1
  8104                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 510:             
      +                          e = e / 10;
  8105  000EB4  C1CD  F01B         	movff	efgtoa@e,___awdiv@dividend
  8106  000EB8  C1CE  F01C         	movff	efgtoa@e+1,___awdiv@dividend+1
  8107  000EBC  6A1E               	clrf	(___awdiv@divisor+1)^0,c
  8108  000EBE  0E0A               	movlw	10
  8109  000EC0  6E1D               	movwf	___awdiv@divisor^0,c
  8110  000EC2  ECD8  F01A         	call	___awdiv	;wreg free
  8111  000EC6  C01B  F1CD         	movff	?___awdiv,efgtoa@e
  8112  000ECA  C01C  F1CE         	movff	?___awdiv+1,efgtoa@e+1
  8113                           
  8114                           ; BSR set to: 1
  8115                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 511:             
      +                          --p;
  8116  000ECE  07B9               	decf	efgtoa@p& (0+255),f,b
  8117  000ED0  A0D8               	btfss	status,0,c
  8118  000ED2  07BA               	decf	(efgtoa@p+1)& (0+255),f,b
  8119                           
  8120                           ; BSR set to: 1
  8121                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 512:             
      +                          --w;
  8122  000ED4  07BB               	decf	efgtoa@w& (0+255),f,b
  8123  000ED6  A0D8               	btfss	status,0,c
  8124  000ED8  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8125  000EDA                     l8760:
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  8129  000EDA  51CD               	movf	efgtoa@e& (0+255),w,b
  8130  000EDC  11CE               	iorwf	(efgtoa@e+1)& (0+255),w,b
  8131  000EDE  E1DA               	bnz	l8750
  8132                           
  8133                           ; BSR set to: 1
  8134  000EE0  BFBA               	btfsc	(efgtoa@p+1)& (0+255),7,b
  8135  000EE2  D004               	goto	u10410
  8136  000EE4  51BA               	movf	(efgtoa@p+1)& (0+255),w,b
  8137  000EE6  E1D6               	bnz	l8750
  8138  000EE8  05B9               	decf	efgtoa@p& (0+255),w,b
  8139  000EEA  E2D4               	bc	l8750
  8140  000EEC                     u10410:
  8141                           
  8142                           ; BSR set to: 1
  8143                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 514:         --i;
  8144  000EEC  07C7               	decf	efgtoa@i& (0+255),f,b
  8145  000EEE  A0D8               	btfss	status,0,c
  8146  000EF0  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8147                           
  8148                           ; BSR set to: 1
  8149                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 515:         dbuf
      +                          [i] = sign ? '-' : '+';
  8150  000EF2  51B7               	movf	efgtoa@sign& (0+255),w,b
  8151  000EF4  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  8152  000EF6  E103               	bnz	l8770
  8153                           
  8154                           ; BSR set to: 1
  8155  000EF8  6BA6               	clrf	(_efgtoa$2411+1)& (0+255),b
  8156  000EFA  0E2B               	movlw	43
  8157  000EFC  D002               	goto	L9
  8158  000EFE                     l8770:
  8159                           
  8160                           ; BSR set to: 1
  8161  000EFE  6BA6               	clrf	(_efgtoa$2411+1)& (0+255),b
  8162  000F00  0E2D               	movlw	45
  8163  000F02                     L9:
  8164  000F02  6FA5               	movwf	_efgtoa$2411& (0+255),b
  8165                           
  8166                           ; BSR set to: 1
  8167  000F04  D8AC               	call	PL60	;call to abstracted procedure
  8168  000F06  C1A5  FFDF         	movff	_efgtoa$2411,indf2
  8169                           
  8170                           ; BSR set to: 1
  8171                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 516:         --w;
  8172  000F0A  07BB               	decf	efgtoa@w& (0+255),f,b
  8173  000F0C  A0D8               	btfss	status,0,c
  8174  000F0E  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8175                           
  8176                           ; BSR set to: 1
  8177                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 517:         --i;
  8178  000F10  07C7               	decf	efgtoa@i& (0+255),f,b
  8179  000F12  A0D8               	btfss	status,0,c
  8180  000F14  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8181                           
  8182                           ; BSR set to: 1
  8183                           
  8184                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 518:         dbuf
      +                          [i] = (0 && isupper((int)c), ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  8185  000F16  0EBF               	movlw	191
  8186  000F18  0100               	movlb	0	; () banked
  8187  000F1A  D852               	call	PL36	;call to abstracted procedure
  8188  000F1C  E103               	bnz	u10430
  8189  000F1E  0E1A               	movlw	26
  8190  000F20  5DCF               	subwf	(??_efgtoa+2)& (0+255),w,b
  8191  000F22  E304               	bnc	l8784
  8192  000F24                     u10430:
  8193                           
  8194                           ; BSR set to: 0
  8195  000F24  0101               	movlb	1	; () banked
  8196  000F26  6BA8               	clrf	(_efgtoa$2412+1)& (0+255),b
  8197  000F28  0E65               	movlw	101
  8198  000F2A  D003               	goto	L10
  8199  000F2C                     l8784:
  8200                           
  8201                           ; BSR set to: 0
  8202  000F2C  0101               	movlb	1	; () banked
  8203  000F2E  6BA8               	clrf	(_efgtoa$2412+1)& (0+255),b
  8204  000F30  0E45               	movlw	69
  8205  000F32                     L10:
  8206  000F32  6FA7               	movwf	_efgtoa$2412& (0+255),b
  8207                           
  8208                           ; BSR set to: 1
  8209  000F34  D894               	call	PL60	;call to abstracted procedure
  8210  000F36  C1A7  FFDF         	movff	_efgtoa$2412,indf2
  8211                           
  8212                           ; BSR set to: 1
  8213                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 519:         --w;
  8214  000F3A  07BB               	decf	efgtoa@w& (0+255),f,b
  8215  000F3C  A0D8               	btfss	status,0,c
  8216  000F3E  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8217                           
  8218                           ; BSR set to: 1
  8219                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 520:         strc
      +                          py(&dbuf[n], &dbuf[i]);
  8220  000F40  0E2D               	movlw	low _dbuf
  8221  000F42  25CF               	addwf	efgtoa@n& (0+255),w,b
  8222  000F44  6E1B               	movwf	strcpy@dest^0,c
  8223  000F46  0E01               	movlw	high _dbuf
  8224  000F48  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8225  000F4A  6E1C               	movwf	(strcpy@dest+1)^0,c
  8226  000F4C  0E2D               	movlw	low _dbuf
  8227  000F4E  25C7               	addwf	efgtoa@i& (0+255),w,b
  8228  000F50  6E1D               	movwf	strcpy@src^0,c
  8229  000F52  0E01               	movlw	high _dbuf
  8230  000F54  21C8               	addwfc	(efgtoa@i+1)& (0+255),w,b
  8231  000F56  6E1E               	movwf	(strcpy@src+1)^0,c
  8232  000F58  EC7E  F01C         	call	_strcpy	;wreg free
  8233  000F5C  D599               	goto	l8532
  8234  000F5E                     __end_of_efgtoa:
  8235                           	callstack 0
  8236  000F5E                     PL18:
  8237                           	callstack 20
  8238  000F5E  C1D1  F066         	movff	efgtoa@u,___fldiv@b
  8239  000F62  C1D2  F067         	movff	efgtoa@u+1,___fldiv@b+1
  8240  000F66  C1D3  F068         	movff	efgtoa@u+2,___fldiv@b+2
  8241  000F6A  C1D4  F069         	movff	efgtoa@u+3,___fldiv@b+3
  8242  000F6E  6B6A               	clrf	___fldiv@a& (0+255),b
  8243  000F70  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
  8244  000F72  0E20               	movlw	32
  8245  000F74  6F6C               	movwf	(___fldiv@a+2)& (0+255),b
  8246  000F76  0E41               	movlw	65
  8247  000F78  6F6D               	movwf	(___fldiv@a+3)& (0+255),b
  8248  000F7A  0C41               	retlw	65
  8249  000F7C                     __end_ofPL18:
  8250                           	callstack 0
  8251  000F7C                     PL20:
  8252                           	callstack 20
  8253  000F7C  C1BF  F08F         	movff	efgtoa@h,___flsub@b
  8254  000F80  C1C0  F090         	movff	efgtoa@h+1,___flsub@b+1
  8255  000F84  C1C1  F091         	movff	efgtoa@h+2,___flsub@b+2
  8256  000F88  C1C2  F092         	movff	efgtoa@h+3,___flsub@b+3
  8257  000F8C  C1D1  F06A         	movff	efgtoa@u,___flmul@a
  8258  000F90  C1D2  F06B         	movff	efgtoa@u+1,___flmul@a+1
  8259  000F94  C1D3  F06C         	movff	efgtoa@u+2,___flmul@a+2
  8260  000F98  C1D4  F06D         	movff	efgtoa@u+3,___flmul@a+3
  8261  000F9C  C1C3  F066         	movff	efgtoa@l,___flmul@b
  8262  000FA0  C1C4  F067         	movff	efgtoa@l+1,___flmul@b+1
  8263  000FA4  C1C5  F068         	movff	efgtoa@l+2,___flmul@b+2
  8264  000FA8  C1C6  F069         	movff	efgtoa@l+3,___flmul@b+3
  8265  000FAC  0012               	return	
  8266  000FAE                     __end_ofPL20:
  8267                           	callstack 0
  8268  000FAE                     PL26:
  8269                           	callstack 20
  8270  000FAE  C08F  F1BF         	movff	?___flsub,efgtoa@h
  8271  000FB2  C090  F1C0         	movff	?___flsub+1,efgtoa@h+1
  8272  000FB6  C091  F1C1         	movff	?___flsub+2,efgtoa@h+2
  8273  000FBA  C092  F1C2         	movff	?___flsub+3,efgtoa@h+3
  8274  000FBE  0012               	return	
  8275  000FC0                     __end_ofPL26:
  8276                           	callstack 0
  8277  000FC0                     PL36:
  8278                           	callstack 20
  8279  000FC0  6FCD               	movwf	??_efgtoa& (0+255),b
  8280  000FC2  69CE               	setf	(??_efgtoa+1)& (0+255),b
  8281  000FC4  51CC               	movf	efgtoa@c& (0+255),w,b
  8282  000FC6  6FCF               	movwf	(??_efgtoa+2)& (0+255),b
  8283  000FC8  6BD0               	clrf	(??_efgtoa+3)& (0+255),b
  8284  000FCA  51CD               	movf	??_efgtoa& (0+255),w,b
  8285  000FCC  27CF               	addwf	(??_efgtoa+2)& (0+255),f,b
  8286  000FCE  51CE               	movf	(??_efgtoa+1)& (0+255),w,b
  8287  000FD0  23D0               	addwfc	(??_efgtoa+3)& (0+255),f,b
  8288  000FD2  51D0               	movf	(??_efgtoa+3)& (0+255),w,b
  8289  000FD4  0012               	return	
  8290  000FD6                     __end_ofPL36:
  8291                           	callstack 0
  8292  000FD6                     PL44:
  8293                           	callstack 20
  8294  000FD6  0E2D               	movlw	low _dbuf
  8295  000FD8  25CF               	addwf	efgtoa@n& (0+255),w,b
  8296  000FDA  6ED9               	movwf	fsr2l,c
  8297  000FDC  0E01               	movlw	high _dbuf
  8298  000FDE  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8299  000FE0  6EDA               	movwf	fsr2h,c
  8300  000FE2  0012               	return	
  8301  000FE4                     __end_ofPL44:
  8302                           	callstack 0
  8303  000FE4                     PL46:
  8304                           	callstack 20
  8305  000FE4  C1BF  F066         	movff	efgtoa@h,___fldiv@b
  8306  000FE8  C1C0  F067         	movff	efgtoa@h+1,___fldiv@b+1
  8307  000FEC  C1C1  F068         	movff	efgtoa@h+2,___fldiv@b+2
  8308  000FF0  C1C2  F069         	movff	efgtoa@h+3,___fldiv@b+3
  8309  000FF4  C1D1  F06A         	movff	efgtoa@u,___fldiv@a
  8310  000FF8  C1D2  F06B         	movff	efgtoa@u+1,___fldiv@a+1
  8311  000FFC  C1D3  F06C         	movff	efgtoa@u+2,___fldiv@a+2
  8312  001000  C1D4  F06D         	movff	efgtoa@u+3,___fldiv@a+3
  8313  001004  0012               	return	
  8314  001006                     __end_ofPL46:
  8315                           	callstack 0
  8316  001006                     PL48:
  8317                           	callstack 20
  8318  001006  C07F  F1C3         	movff	?_floorf,efgtoa@l
  8319  00100A  C080  F1C4         	movff	?_floorf+1,efgtoa@l+1
  8320  00100E  C081  F1C5         	movff	?_floorf+2,efgtoa@l+2
  8321  001012  C082  F1C6         	movff	?_floorf+3,efgtoa@l+3
  8322  001016  C1C3  F0BC         	movff	efgtoa@l,___fltol@f1
  8323  00101A  C1C4  F0BD         	movff	efgtoa@l+1,___fltol@f1+1
  8324  00101E  C1C5  F0BE         	movff	efgtoa@l+2,___fltol@f1+2
  8325  001022  C1C6  F0BF         	movff	efgtoa@l+3,___fltol@f1+3
  8326  001026  0012               	return	
  8327  001028                     __end_ofPL48:
  8328                           	callstack 0
  8329  001028                     PL50:
  8330                           	callstack 20
  8331  001028  0E2D               	movlw	low _dbuf
  8332  00102A  0101               	movlb	1	; () banked
  8333  00102C  25CF               	addwf	efgtoa@n& (0+255),w,b
  8334  00102E  6E1B               	movwf	strcpy@dest^0,c
  8335  001030  0E01               	movlw	high _dbuf
  8336  001032  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8337  001034  6E1C               	movwf	(strcpy@dest+1)^0,c
  8338  001036  0012               	return	
  8339  001038                     __end_ofPL50:
  8340                           	callstack 0
  8341  001038                     PL52:
  8342                           	callstack 20
  8343  001038  C066  F1D1         	movff	?___fldiv,efgtoa@u
  8344  00103C  C067  F1D2         	movff	?___fldiv+1,efgtoa@u+1
  8345  001040  C068  F1D3         	movff	?___fldiv+2,efgtoa@u+2
  8346  001044  C069  F1D4         	movff	?___fldiv+3,efgtoa@u+3
  8347  001048  0101               	movlb	1	; () banked
  8348  00104A  0012               	return	
  8349  00104C                     __end_ofPL52:
  8350                           	callstack 0
  8351  00104C                     PL56:
  8352                           	callstack 20
  8353  00104C  C1D1  F066         	movff	efgtoa@u,___flmul@b
  8354  001050  C1D2  F067         	movff	efgtoa@u+1,___flmul@b+1
  8355  001054  C1D3  F068         	movff	efgtoa@u+2,___flmul@b+2
  8356  001058  C1D4  F069         	movff	efgtoa@u+3,___flmul@b+3
  8357  00105C  0012               	return	
  8358  00105E                     __end_ofPL56:
  8359                           	callstack 0
  8360  00105E                     PL60:
  8361                           	callstack 20
  8362  00105E  0E2D               	movlw	low _dbuf
  8363  001060  25C7               	addwf	efgtoa@i& (0+255),w,b
  8364  001062  6ED9               	movwf	fsr2l,c
  8365  001064  0E01               	movlw	high _dbuf
  8366  001066  21C8               	addwfc	(efgtoa@i+1)& (0+255),w,b
  8367  001068  6EDA               	movwf	fsr2h,c
  8368  00106A  0012               	return	
  8369  00106C                     __end_ofPL60:
  8370                           	callstack 0
  8371  00106C                     PL62:
  8372                           	callstack 20
  8373  00106C  6B6A               	clrf	___flmul@a& (0+255),b
  8374  00106E  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  8375  001070  0E20               	movlw	32
  8376  001072  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  8377  001074  0E41               	movlw	65
  8378  001076  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  8379  001078  0C41               	retlw	65
  8380  00107A                     __end_ofPL62:
  8381                           	callstack 0
  8382  00107A                     PL76:
  8383                           	callstack 20
  8384  00107A  51AF               	movf	efgtoa@m& (0+255),w,b
  8385  00107C  5DC7               	subwf	efgtoa@i& (0+255),w,b
  8386  00107E  51C8               	movf	(efgtoa@i+1)& (0+255),w,b
  8387  001080  0A80               	xorlw	128
  8388  001082  0100               	movlb	0	; () banked
  8389  001084  6FCD               	movwf	??_efgtoa& (0+255),b
  8390  001086  0101               	movlb	1	; () banked
  8391  001088  51B0               	movf	(efgtoa@m+1)& (0+255),w,b
  8392  00108A  0A80               	xorlw	128
  8393  00108C  0100               	movlb	0	; () banked
  8394  00108E  59CD               	subwfb	??_efgtoa& (0+255),w,b
  8395  001090  0012               	return	
  8396  001092                     __end_ofPL76:
  8397                           	callstack 0
  8398  001092                     PL92:
  8399                           	callstack 20
  8400  001092  C066  F093         	movff	?___flmul,___flsub@a
  8401  001096  C067  F094         	movff	?___flmul+1,___flsub@a+1
  8402  00109A  C068  F095         	movff	?___flmul+2,___flsub@a+2
  8403  00109E  C069  F096         	movff	?___flmul+3,___flsub@a+3
  8404  0010A2  0012               	return	
  8405  0010A4                     __end_ofPL92:
  8406                           	callstack 0
  8407  0010A4                     PL94:
  8408                           	callstack 20
  8409  0010A4  C1B1  F066         	movff	efgtoa@ou,___flmul@b
  8410  0010A8  C1B2  F067         	movff	efgtoa@ou+1,___flmul@b+1
  8411  0010AC  C1B3  F068         	movff	efgtoa@ou+2,___flmul@b+2
  8412  0010B0  C1B4  F069         	movff	efgtoa@ou+3,___flmul@b+3
  8413  0010B4  0012               	return	
  8414  0010B6                     __end_ofPL94:
  8415                           	callstack 0
  8416  0010B6                     PL102:
  8417                           	callstack 20
  8418  0010B6  C1BF  F07F         	movff	efgtoa@h,___flge@ff1
  8419  0010BA  C1C0  F080         	movff	efgtoa@h+1,___flge@ff1+1
  8420  0010BE  C1C1  F081         	movff	efgtoa@h+2,___flge@ff1+2
  8421  0010C2  C1C2  F082         	movff	efgtoa@h+3,___flge@ff1+3
  8422  0010C6  0012               	return	
  8423  0010C8                     __end_ofPL102:
  8424                           	callstack 0
  8425  0010C8                     PL104:
  8426                           	callstack 20
  8427  0010C8  C1C9  F01B         	movff	efgtoa@g,___fpclassifyf@x
  8428  0010CC  C1CA  F01C         	movff	efgtoa@g+1,___fpclassifyf@x+1
  8429  0010D0  C1CB  F01D         	movff	efgtoa@g+2,___fpclassifyf@x+2
  8430  0010D4  C1CC  F01E         	movff	efgtoa@g+3,___fpclassifyf@x+3
  8431  0010D8  0012               	return	
  8432  0010DA                     __end_ofPL104:
  8433                           	callstack 0
  8434  0010DA                     PL108:
  8435                           	callstack 20
  8436  0010DA  C066  F083         	movff	?___flmul,___flge@ff2
  8437  0010DE  C067  F084         	movff	?___flmul+1,___flge@ff2+1
  8438  0010E2  C068  F085         	movff	?___flmul+2,___flge@ff2+2
  8439  0010E6  C069  F086         	movff	?___flmul+3,___flge@ff2+3
  8440  0010EA  0012               	return	
  8441  0010EC                     __end_ofPL108:
  8442                           	callstack 0
  8443  0010EC                     PL112:
  8444                           	callstack 20
  8445  0010EC  C1C9  F07F         	movff	efgtoa@g,___flge@ff1
  8446  0010F0  C1CA  F080         	movff	efgtoa@g+1,___flge@ff1+1
  8447  0010F4  C1CB  F081         	movff	efgtoa@g+2,___flge@ff1+2
  8448  0010F8  C1CC  F082         	movff	efgtoa@g+3,___flge@ff1+3
  8449  0010FC  0012               	return	
  8450  0010FE                     __end_ofPL112:
  8451                           	callstack 0
  8452  0010FE                     PL114:
  8453                           	callstack 20
  8454  0010FE  C066  F07F         	movff	?___fldiv,floorf@x
  8455  001102  C067  F080         	movff	?___fldiv+1,floorf@x+1
  8456  001106  C068  F081         	movff	?___fldiv+2,floorf@x+2
  8457  00110A  C069  F082         	movff	?___fldiv+3,floorf@x+3
  8458  00110E  0012               	return	
  8459  001110                     __end_ofPL114:
  8460                           	callstack 0
  8461  001110                     PL118:
  8462                           	callstack 20
  8463  001110  6BD1               	clrf	efgtoa@u& (0+255),b
  8464  001112  6BD2               	clrf	(efgtoa@u+1)& (0+255),b
  8465  001114  0E80               	movlw	128
  8466  001116  6FD3               	movwf	(efgtoa@u+2)& (0+255),b
  8467  001118  0E3F               	movlw	63
  8468  00111A  6FD4               	movwf	(efgtoa@u+3)& (0+255),b
  8469  00111C  6BCD               	clrf	efgtoa@e& (0+255),b
  8470  00111E  6BCE               	clrf	(efgtoa@e+1)& (0+255),b
  8471  001120  0012               	return	
  8472  001122                     __end_ofPL118:
  8473                           	callstack 0
  8474  001122                     PL156:
  8475                           	callstack 20
  8476  001122  6EDF               	movwf	indf2,c
  8477  001124  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  8478  001126  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  8479  001128  07BB               	decf	efgtoa@w& (0+255),f,b
  8480  00112A  0012               	return	
  8481  00112C                     __end_ofPL156:
  8482                           	callstack 0
  8483  00112C                     PL184:
  8484                           	callstack 20
  8485  00112C  C0BC  F1B5         	movff	?___fltol,efgtoa@d
  8486  001130  C0BD  F1B6         	movff	?___fltol+1,efgtoa@d+1
  8487  001134  0012               	return	
  8488  001136                     __end_ofPL184:
  8489                           	callstack 0
  8490  001136                     PL204:
  8491                           	callstack 23
  8492  001136  6A1F               	clrf	___fleq@ff2^0,c
  8493  001138  6A20               	clrf	(___fleq@ff2+1)^0,c
  8494  00113A  6A21               	clrf	(___fleq@ff2+2)^0,c
  8495  00113C  6A22               	clrf	(___fleq@ff2+3)^0,c
  8496  00113E  0012               	return	
  8497  001140                     __end_ofPL204:
  8498                           	callstack 0
  8499                           
  8500 ;; *************** function _tolower *****************
  8501 ;; Defined at:
  8502 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\tolower.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  c               2   32[COMRAM] int 
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;		None
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  2   32[COMRAM] int 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0
  8511 ;; Tracked objects:
  8512 ;;		On entry : 3F/0
  8513 ;;		On exit  : 3F/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8516 ;;      Params:         2       0       0       0       0       0       0
  8517 ;;      Locals:         0       0       0       0       0       0       0
  8518 ;;      Temps:          0       4       0       0       0       0       0
  8519 ;;      Totals:         2       4       0       0       0       0       0
  8520 ;;Total ram usage:        6 bytes
  8521 ;; Hardware stack levels used: 1
  8522 ;; Hardware stack levels required when called: 4
  8523 ;; This function calls:
  8524 ;;		_isupper
  8525 ;; This function is called by:
  8526 ;;		_efgtoa
  8527 ;;		_vfpfcnvrt
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text14
  8532  003BD2                     __ptext14:
  8533                           	callstack 0
  8534  003BD2                     _tolower:
  8535                           	callstack 23
  8536                           
  8537                           ; BSR set to: 0
  8538                           
  8539                           ; BSR set to: 0
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;incstack = 0
  8543  003BD2  0EBF               	movlw	191
  8544  003BD4  6F60               	movwf	??_tolower& (0+255),b
  8545  003BD6  6961               	setf	(??_tolower+1)& (0+255),b
  8546  003BD8  C021  F062         	movff	tolower@c,??_tolower+2
  8547  003BDC  C022  F063         	movff	tolower@c+1,??_tolower+3
  8548  003BE0  5160               	movf	??_tolower& (0+255),w,b
  8549  003BE2  2762               	addwf	(??_tolower+2)& (0+255),f,b
  8550  003BE4  5161               	movf	(??_tolower+1)& (0+255),w,b
  8551  003BE6  2363               	addwfc	(??_tolower+3)& (0+255),f,b
  8552  003BE8  5163               	movf	(??_tolower+3)& (0+255),w,b
  8553  003BEA  E109               	bnz	l1802
  8554  003BEC  0E1A               	movlw	26
  8555  003BEE  5D62               	subwf	(??_tolower+2)& (0+255),w,b
  8556  003BF0  E206               	bc	l1802
  8557                           
  8558                           ; BSR set to: 0
  8559  003BF2  0E20               	movlw	32
  8560  003BF4  1021               	iorwf	tolower@c^0,w,c
  8561  003BF6  6E21               	movwf	?_tolower^0,c
  8562  003BF8  5022               	movf	(tolower@c+1)^0,w,c
  8563  003BFA  6E22               	movwf	(?_tolower+1)^0,c
  8564  003BFC  0012               	return	
  8565  003BFE                     l1802:
  8566                           
  8567                           ; BSR set to: 0
  8568  003BFE  C021  F021         	movff	tolower@c,?_tolower
  8569  003C02  C022  F022         	movff	tolower@c+1,?_tolower+1
  8570                           
  8571                           ; BSR set to: 0
  8572  003C06  0012               	return		;funcret
  8573  003C08                     __end_of_tolower:
  8574                           	callstack 0
  8575                           
  8576 ;; *************** function _isupper *****************
  8577 ;; Defined at:
  8578 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isupper.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  c               2   26[COMRAM] int 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;		None
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  2   26[COMRAM] int 
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8592 ;;      Params:         2       0       0       0       0       0       0
  8593 ;;      Locals:         0       0       0       0       0       0       0
  8594 ;;      Temps:          4       0       0       0       0       0       0
  8595 ;;      Totals:         6       0       0       0       0       0       0
  8596 ;;Total ram usage:        6 bytes
  8597 ;; Hardware stack levels used: 1
  8598 ;; Hardware stack levels required when called: 3
  8599 ;; This function calls:
  8600 ;;		Nothing
  8601 ;; This function is called by:
  8602 ;;		_efgtoa
  8603 ;;		_vfpfcnvrt
  8604 ;;		_tolower
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text15
  8609  003D08                     __ptext15:
  8610                           	callstack 0
  8611  003D08                     _isupper:
  8612                           	callstack 23
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;incstack = 0
  8616  003D08  0EBF               	movlw	191
  8617  003D0A  6E1D               	movwf	??_isupper^0,c
  8618  003D0C  681E               	setf	(??_isupper+1)^0,c
  8619  003D0E  C01B  F01F         	movff	isupper@c,??_isupper+2
  8620  003D12  C01C  F020         	movff	isupper@c+1,??_isupper+3
  8621  003D16  501D               	movf	??_isupper^0,w,c
  8622  003D18  261F               	addwf	(??_isupper+2)^0,f,c
  8623  003D1A  501E               	movf	(??_isupper+1)^0,w,c
  8624  003D1C  2220               	addwfc	(??_isupper+3)^0,f,c
  8625  003D1E  5020               	movf	(??_isupper+3)^0,w,c
  8626  003D20  E105               	bnz	u8780
  8627  003D22  0E1A               	movlw	26
  8628  003D24  5C1F               	subwf	(??_isupper+2)^0,w,c
  8629  003D26  E202               	bc	u8780
  8630  003D28  0E01               	movlw	1
  8631  003D2A  D001               	goto	u8790
  8632  003D2C                     u8780:
  8633  003D2C  0E00               	movlw	0
  8634  003D2E                     u8790:
  8635  003D2E  6E1B               	movwf	?_isupper^0,c
  8636  003D30  6A1C               	clrf	(?_isupper+1)^0,c
  8637  003D32  0012               	return		;funcret
  8638  003D34                     __end_of_isupper:
  8639                           	callstack 0
  8640                           
  8641 ;; *************** function _strcpy *****************
  8642 ;; Defined at:
  8643 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strcpy.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  dest            2   26[COMRAM] PTR unsigned char 
  8646 ;;		 -> dbuf(80), 
  8647 ;;  src             2   28[COMRAM] PTR const unsigned char 
  8648 ;;		 -> STR_36(4), STR_35(4), STR_32(4), STR_31(4), 
  8649 ;;		 -> dbuf(80), 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  d               2    2[BANK0 ] PTR unsigned char 
  8652 ;;		 -> dbuf(80), 
  8653 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8654 ;;		 -> STR_36(4), STR_35(4), STR_32(4), STR_31(4), 
  8655 ;;		 -> dbuf(80), 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  2   26[COMRAM] PTR unsigned char 
  8658 ;; Registers used:
  8659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8660 ;; Tracked objects:
  8661 ;;		On entry : 3F/1
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8665 ;;      Params:         4       0       0       0       0       0       0
  8666 ;;      Locals:         0       4       0       0       0       0       0
  8667 ;;      Temps:          2       0       0       0       0       0       0
  8668 ;;      Totals:         6       4       0       0       0       0       0
  8669 ;;Total ram usage:       10 bytes
  8670 ;; Hardware stack levels used: 1
  8671 ;; Hardware stack levels required when called: 3
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_efgtoa
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text16
  8680  0038FC                     __ptext16:
  8681                           	callstack 0
  8682  0038FC                     _strcpy:
  8683                           	callstack 23
  8684                           
  8685                           ; BSR set to: 1
  8686                           
  8687                           ;incstack = 0
  8688  0038FC  C01D  F060         	movff	strcpy@src,strcpy@s
  8689  003900  C01E  F061         	movff	strcpy@src+1,strcpy@s+1
  8690  003904  C01B  F062         	movff	strcpy@dest,strcpy@d
  8691  003908  C01C  F063         	movff	strcpy@dest+1,strcpy@d+1
  8692  00390C                     l8402:
  8693  00390C  0100               	movlb	0	; () banked
  8694  00390E  5160               	movf	strcpy@s& (0+255),w,b
  8695  003910  6E1F               	movwf	??_strcpy^0,c
  8696  003912  5161               	movf	(strcpy@s+1)& (0+255),w,b
  8697  003914  6E20               	movwf	(??_strcpy+1)^0,c
  8698  003916  4B60               	infsnz	strcpy@s& (0+255),f,b
  8699  003918  2B61               	incf	(strcpy@s+1)& (0+255),f,b
  8700  00391A  C01F  FFF6         	movff	??_strcpy,tblptrl
  8701  00391E  C020  FFF7         	movff	??_strcpy+1,tblptrh
  8702  003922  6AF8               	clrf	tblptru,c
  8703  003924  C062  FFD9         	movff	strcpy@d,fsr2l
  8704  003928  C063  FFDA         	movff	strcpy@d+1,fsr2h
  8705  00392C  4B62               	infsnz	strcpy@d& (0+255),f,b
  8706  00392E  2B63               	incf	(strcpy@d+1)& (0+255),f,b
  8707  003930  0E05               	movlw	(high __ramtop+-1)
  8708  003932  64F7               	cpfsgt	tblptrh,c
  8709  003934  D003               	bra	u9667
  8710  003936  0008               	tblrd		*
  8711  003938  50F5               	movf	tablat,w,c
  8712  00393A  D002               	bra	u9660
  8713  00393C                     u9667:
  8714  00393C  EC4A  F017         	call	PL16	;call to abstracted procedure
  8715  003940                     u9660:
  8716  003940  6EDF               	movwf	indf2,c
  8717  003942  50DF               	movf	indf2,w,c
  8718  003944  E1E3               	bnz	l8402
  8719  003946  0012               	return		;funcret
  8720  003948                     __end_of_strcpy:
  8721                           	callstack 0
  8722                           
  8723 ;; *************** function _pad *****************
  8724 ;; Defined at:
  8725 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  8728 ;;		 -> sprintf@f(11), 
  8729 ;;  buf             2   10[BANK0 ] PTR unsigned char 
  8730 ;;		 -> dbuf(80), 
  8731 ;;  p               2   12[BANK0 ] int 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;  w               2   17[BANK0 ] int 
  8734 ;;  i               2   15[BANK0 ] int 
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  2    8[BANK0 ] int 
  8737 ;; Registers used:
  8738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 3F/0
  8741 ;;		On exit  : 3F/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8744 ;;      Params:         0       6       0       0       0       0       0
  8745 ;;      Locals:         0       4       0       0       0       0       0
  8746 ;;      Temps:          0       1       0       0       0       0       0
  8747 ;;      Totals:         0      11       0       0       0       0       0
  8748 ;;Total ram usage:       11 bytes
  8749 ;; Hardware stack levels used: 1
  8750 ;; Hardware stack levels required when called: 6
  8751 ;; This function calls:
  8752 ;;		_fputc
  8753 ;;		_fputs
  8754 ;;		_strlen
  8755 ;; This function is called by:
  8756 ;;		_efgtoa
  8757 ;;		_utoa
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text17
  8762  00352C                     __ptext17:
  8763                           	callstack 0
  8764  00352C                     _pad:
  8765                           	callstack 20
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  8769                           
  8770                           ;incstack = 0
  8771  00352C  A030               	btfss	_flags^0,0,c
  8772  00352E  D003               	goto	l8362
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  8776  003530  D836               	call	PL100	;call to abstracted procedure
  8777  003532  EC1F  F01E         	call	_fputs	;wreg free
  8778  003536                     l8362:
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  8782  003536  BF6D               	btfsc	(pad@p+1)& (0+255),7,b
  8783  003538  D005               	goto	l1448
  8784                           
  8785                           ; BSR set to: 0
  8786  00353A  C06C  F071         	movff	pad@p,pad@w
  8787  00353E  C06D  F072         	movff	pad@p+1,pad@w+1
  8788  003542  D002               	goto	l1450
  8789  003544                     l1448:
  8790                           
  8791                           ; BSR set to: 0
  8792  003544  6B71               	clrf	pad@w& (0+255),b
  8793  003546  6B72               	clrf	(pad@w+1)& (0+255),b
  8794  003548                     l1450:
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  8798  003548  6B6F               	clrf	pad@i& (0+255),b
  8799  00354A  6B70               	clrf	(pad@i+1)& (0+255),b
  8800                           
  8801                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  8802  00354C  D00C               	goto	l8370
  8803  00354E                     l8366:
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  8807  00354E  6A1D               	clrf	(fputc@c+1)^0,c
  8808  003550  0E20               	movlw	32
  8809  003552  6E1C               	movwf	fputc@c^0,c
  8810  003554  C068  F01E         	movff	pad@fp,fputc@fp
  8811  003558  C069  F01F         	movff	pad@fp+1,fputc@fp+1
  8812  00355C  EC0A  F01A         	call	_fputc	;wreg free
  8813                           
  8814                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  8815  003560  0100               	movlb	0	; () banked
  8816  003562  4B6F               	infsnz	pad@i& (0+255),f,b
  8817  003564  2B70               	incf	(pad@i+1)& (0+255),f,b
  8818  003566                     l8370:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  8822  003566  5171               	movf	pad@w& (0+255),w,b
  8823  003568  5D6F               	subwf	pad@i& (0+255),w,b
  8824  00356A  5170               	movf	(pad@i+1)& (0+255),w,b
  8825  00356C  0A80               	xorlw	128
  8826  00356E  6F6E               	movwf	??_pad& (0+255),b
  8827  003570  5172               	movf	(pad@w+1)& (0+255),w,b
  8828  003572  0A80               	xorlw	128
  8829  003574  596E               	subwfb	??_pad& (0+255),w,b
  8830  003576  E3EB               	bnc	l8366
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  8834  003578  B030               	btfsc	_flags^0,0,c
  8835  00357A  D003               	goto	l8374
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  8839  00357C  D810               	call	PL100	;call to abstracted procedure
  8840  00357E  EC1F  F01E         	call	_fputs	;wreg free
  8841  003582                     l8374:
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  8845  003582  C06A  F01B         	movff	pad@buf,strlen@s
  8846  003586  C06B  F01C         	movff	pad@buf+1,strlen@s+1
  8847  00358A  ECAF  F01D         	call	_strlen	;wreg free
  8848  00358E  0100               	movlb	0	; () banked
  8849  003590  5171               	movf	pad@w& (0+255),w,b
  8850  003592  241B               	addwf	?_strlen^0,w,c
  8851  003594  6F68               	movwf	?_pad& (0+255),b
  8852  003596  5172               	movf	(pad@w+1)& (0+255),w,b
  8853  003598  201C               	addwfc	(?_strlen+1)^0,w,c
  8854  00359A  6F69               	movwf	(?_pad+1)& (0+255),b
  8855                           
  8856                           ; BSR set to: 0
  8857  00359C  0012               	return		;funcret
  8858  00359E                     __end_of_pad:
  8859                           	callstack 0
  8860  00359E                     PL100:
  8861                           	callstack 20
  8862  00359E  C06A  F020         	movff	pad@buf,fputs@s
  8863  0035A2  C06B  F021         	movff	pad@buf+1,fputs@s+1
  8864  0035A6  C068  F022         	movff	pad@fp,fputs@fp
  8865  0035AA  C069  F023         	movff	pad@fp+1,fputs@fp+1
  8866  0035AE  0012               	return	
  8867  0035B0                     __end_ofPL100:
  8868                           	callstack 0
  8869                           
  8870 ;; *************** function _strlen *****************
  8871 ;; Defined at:
  8872 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  s               2   26[COMRAM] PTR const unsigned char 
  8875 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), STR_20(4), 
  8876 ;;		 -> STR_19(3), U_real(2), compile_time(9), compile_date(12), 
  8877 ;;		 -> STR_3(9), 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  a               2   28[COMRAM] PTR const unsigned char 
  8880 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), STR_20(4), 
  8881 ;;		 -> STR_19(3), U_real(2), compile_time(9), compile_date(12), 
  8882 ;;		 -> STR_3(9), 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  2   26[COMRAM] unsigned int 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  8887 ;; Tracked objects:
  8888 ;;		On entry : 3F/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8892 ;;      Params:         2       0       0       0       0       0       0
  8893 ;;      Locals:         2       0       0       0       0       0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0
  8895 ;;      Totals:         4       0       0       0       0       0       0
  8896 ;;Total ram usage:        4 bytes
  8897 ;; Hardware stack levels used: 1
  8898 ;; Hardware stack levels required when called: 3
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_pad
  8903 ;;		_stoa
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text18
  8908  003B5E                     __ptext18:
  8909                           	callstack 0
  8910  003B5E                     _strlen:
  8911                           	callstack 22
  8912                           
  8913                           ; BSR set to: 0
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;incstack = 0
  8917  003B5E  C01B  F01D         	movff	strlen@s,strlen@a
  8918  003B62  C01C  F01E         	movff	strlen@s+1,strlen@a+1
  8919  003B66  D002               	goto	l7898
  8920  003B68                     l7896:
  8921  003B68  4A1B               	infsnz	strlen@s^0,f,c
  8922  003B6A  2A1C               	incf	(strlen@s+1)^0,f,c
  8923  003B6C                     l7898:
  8924  003B6C  C01B  FFF6         	movff	strlen@s,tblptrl
  8925  003B70  C01C  FFF7         	movff	strlen@s+1,tblptrh
  8926  003B74  6AF8               	clrf	tblptru,c
  8927  003B76  0E05               	movlw	(high __ramtop+-1)
  8928  003B78  64F7               	cpfsgt	tblptrh,c
  8929  003B7A  D003               	bra	u8767
  8930  003B7C  0008               	tblrd		*
  8931  003B7E  50F5               	movf	tablat,w,c
  8932  003B80  D002               	bra	u8760
  8933  003B82                     u8767:
  8934  003B82  EC4A  F017         	call	PL16	;call to abstracted procedure
  8935  003B86                     u8760:
  8936  003B86  0900               	iorlw	0
  8937  003B88  E1EF               	bnz	l7896
  8938  003B8A  501D               	movf	strlen@a^0,w,c
  8939  003B8C  5C1B               	subwf	strlen@s^0,w,c
  8940  003B8E  6E1B               	movwf	?_strlen^0,c
  8941  003B90  501E               	movf	(strlen@a+1)^0,w,c
  8942  003B92  581C               	subwfb	(strlen@s+1)^0,w,c
  8943  003B94  6E1C               	movwf	(?_strlen+1)^0,c
  8944  003B96  0012               	return		;funcret
  8945  003B98                     __end_of_strlen:
  8946                           	callstack 0
  8947                           
  8948 ;; *************** function _fputs *****************
  8949 ;; Defined at:
  8950 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  s               2   31[COMRAM] PTR const unsigned char 
  8953 ;;		 -> dbuf(80), 
  8954 ;;  fp              2   33[COMRAM] PTR struct _IO_FILE
  8955 ;;		 -> sprintf@f(11), 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  i               2    6[BANK0 ] int 
  8958 ;;  c               1    5[BANK0 ] unsigned char 
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  2   31[COMRAM] int 
  8961 ;; Registers used:
  8962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : 3F/0
  8965 ;;		On exit  : 3F/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8968 ;;      Params:         4       0       0       0       0       0       0
  8969 ;;      Locals:         0       3       0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0
  8971 ;;      Totals:         4       3       0       0       0       0       0
  8972 ;;Total ram usage:        7 bytes
  8973 ;; Hardware stack levels used: 1
  8974 ;; Hardware stack levels required when called: 5
  8975 ;; This function calls:
  8976 ;;		_fputc
  8977 ;; This function is called by:
  8978 ;;		_pad
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text19
  8983  003C3E                     __ptext19:
  8984                           	callstack 0
  8985  003C3E                     _fputs:
  8986                           	callstack 20
  8987                           
  8988                           ; BSR set to: 0
  8989                           
  8990                           ;incstack = 0
  8991  003C3E  6B66               	clrf	fputs@i& (0+255),b
  8992  003C40  6B67               	clrf	(fputs@i+1)& (0+255),b
  8993  003C42  D00C               	goto	l7892
  8994  003C44                     l7888:
  8995                           
  8996                           ; BSR set to: 0
  8997  003C44  C065  F01C         	movff	fputs@c,fputc@c
  8998  003C48  6A1D               	clrf	(fputc@c+1)^0,c
  8999  003C4A  C022  F01E         	movff	fputs@fp,fputc@fp
  9000  003C4E  C023  F01F         	movff	fputs@fp+1,fputc@fp+1
  9001  003C52  EC0A  F01A         	call	_fputc	;wreg free
  9002  003C56  0100               	movlb	0	; () banked
  9003  003C58  4B66               	infsnz	fputs@i& (0+255),f,b
  9004  003C5A  2B67               	incf	(fputs@i+1)& (0+255),f,b
  9005  003C5C                     l7892:
  9006                           
  9007                           ; BSR set to: 0
  9008  003C5C  5166               	movf	fputs@i& (0+255),w,b
  9009  003C5E  2420               	addwf	fputs@s^0,w,c
  9010  003C60  6ED9               	movwf	fsr2l,c
  9011  003C62  5167               	movf	(fputs@i+1)& (0+255),w,b
  9012  003C64  2021               	addwfc	(fputs@s+1)^0,w,c
  9013  003C66  6EDA               	movwf	fsr2h,c
  9014  003C68  50DF               	movf	indf2,w,c
  9015  003C6A  6F65               	movwf	fputs@c& (0+255),b
  9016  003C6C  5165               	movf	fputs@c& (0+255),w,b
  9017  003C6E  E1EA               	bnz	l7888
  9018                           
  9019                           ; BSR set to: 0
  9020  003C70  0012               	return		;funcret
  9021  003C72                     __end_of_fputs:
  9022                           	callstack 0
  9023                           
  9024 ;; *************** function _floorf *****************
  9025 ;; Defined at:
  9026 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\floorf.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  x               4   31[BANK0 ] float 
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;  u               4   47[BANK0 ] struct .
  9031 ;;  m               4   41[BANK0 ] unsigned long 
  9032 ;;  e               2   45[BANK0 ] int 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  4   31[BANK0 ] float 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0
  9037 ;; Tracked objects:
  9038 ;;		On entry : 3F/0
  9039 ;;		On exit  : 3F/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9042 ;;      Params:         0       4       0       0       0       0       0
  9043 ;;      Locals:         0      10       0       0       0       0       0
  9044 ;;      Temps:          0       6       0       0       0       0       0
  9045 ;;      Totals:         0      20       0       0       0       0       0
  9046 ;;Total ram usage:       20 bytes
  9047 ;; Hardware stack levels used: 1
  9048 ;; Hardware stack levels required when called: 3
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_efgtoa
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text20
  9057  0023E4                     __ptext20:
  9058                           	callstack 0
  9059  0023E4                     _floorf:
  9060                           	callstack 23
  9061                           
  9062                           ; BSR set to: 0
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;incstack = 0
  9066  0023E4  C100  F08F         	movff	floorf@F526,floorf@u
  9067  0023E8  C101  F090         	movff	floorf@F526+1,floorf@u+1
  9068  0023EC  C102  F091         	movff	floorf@F526+2,floorf@u+2
  9069  0023F0  C103  F092         	movff	floorf@F526+3,floorf@u+3
  9070  0023F4  C07F  F08F         	movff	floorf@x,floorf@u
  9071  0023F8  C080  F090         	movff	floorf@x+1,floorf@u+1
  9072  0023FC  C081  F091         	movff	floorf@x+2,floorf@u+2
  9073  002400  C082  F092         	movff	floorf@x+3,floorf@u+3
  9074                           
  9075                           ; BSR set to: 0
  9076  002404  0E81               	movlw	129
  9077  002406  6F83               	movwf	??_floorf& (0+255),b
  9078  002408  6984               	setf	(??_floorf+1)& (0+255),b
  9079  00240A  C08F  F085         	movff	floorf@u,??_floorf+2
  9080  00240E  C090  F086         	movff	floorf@u+1,??_floorf+3
  9081  002412  C091  F087         	movff	floorf@u+2,??_floorf+4
  9082  002416  C092  F088         	movff	floorf@u+3,??_floorf+5
  9083  00241A  0E18               	movlw	24
  9084  00241C  D005               	goto	u9690
  9085  00241E                     u9695:
  9086  00241E  90D8               	bcf	status,0,c
  9087  002420  3388               	rrcf	(??_floorf+5)& (0+255),f,b
  9088  002422  3387               	rrcf	(??_floorf+4)& (0+255),f,b
  9089  002424  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9090  002426  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9091  002428                     u9690:
  9092  002428  2EE8               	decfsz	wreg,f,c
  9093  00242A  D7F9               	goto	u9695
  9094  00242C  5185               	movf	(??_floorf+2)& (0+255),w,b
  9095  00242E  2583               	addwf	??_floorf& (0+255),w,b
  9096  002430  6F8D               	movwf	floorf@e& (0+255),b
  9097  002432  0E00               	movlw	0
  9098  002434  2184               	addwfc	(??_floorf+1)& (0+255),w,b
  9099  002436  6F8E               	movwf	(floorf@e+1)& (0+255),b
  9100  002438  BF8E               	btfsc	(floorf@e+1)& (0+255),7,b
  9101  00243A  D00E               	goto	l8420
  9102  00243C  518E               	movf	(floorf@e+1)& (0+255),w,b
  9103  00243E  E103               	bnz	u9700
  9104  002440  0E17               	movlw	23
  9105  002442  5D8D               	subwf	floorf@e& (0+255),w,b
  9106  002444  E309               	bnc	l8420
  9107  002446                     u9700:
  9108                           
  9109                           ; BSR set to: 0
  9110  002446  C07F  F07F         	movff	floorf@x,?_floorf
  9111  00244A  C080  F080         	movff	floorf@x+1,?_floorf+1
  9112  00244E  C081  F081         	movff	floorf@x+2,?_floorf+2
  9113  002452  C082  F082         	movff	floorf@x+3,?_floorf+3
  9114  002456  0012               	return	
  9115  002458                     l8420:
  9116                           
  9117                           ; BSR set to: 0
  9118  002458  BF8E               	btfsc	(floorf@e+1)& (0+255),7,b
  9119  00245A  D048               	goto	l8430
  9120                           
  9121                           ; BSR set to: 0
  9122  00245C  C08D  F083         	movff	floorf@e,??_floorf
  9123  002460  6984               	setf	(??_floorf+1)& (0+255),b
  9124  002462  6985               	setf	(??_floorf+2)& (0+255),b
  9125  002464  0E7F               	movlw	127
  9126  002466  6F86               	movwf	(??_floorf+3)& (0+255),b
  9127  002468  0E00               	movlw	0
  9128  00246A  6F87               	movwf	(??_floorf+4)& (0+255),b
  9129  00246C                     u9725:
  9130  00246C  6783               	tstfsz	??_floorf& (0+255),b
  9131  00246E  D001               	goto	u9726
  9132  002470  D007               	goto	u9727
  9133  002472                     u9726:
  9134  002472  3587               	rlcf	(??_floorf+4)& (0+255),w,b
  9135  002474  3387               	rrcf	(??_floorf+4)& (0+255),f,b
  9136  002476  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9137  002478  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9138  00247A  3384               	rrcf	(??_floorf+1)& (0+255),f,b
  9139  00247C  2F83               	decfsz	??_floorf& (0+255),f,b
  9140  00247E  D7F6               	goto	u9725
  9141  002480                     u9727:
  9142  002480  C084  F089         	movff	??_floorf+1,floorf@m
  9143  002484  C085  F08A         	movff	??_floorf+2,floorf@m+1
  9144  002488  C086  F08B         	movff	??_floorf+3,floorf@m+2
  9145  00248C  C087  F08C         	movff	??_floorf+4,floorf@m+3
  9146  002490  0100               	movlb	0	; () banked
  9147  002492  5189               	movf	floorf@m& (0+255),w,b
  9148  002494  158F               	andwf	floorf@u& (0+255),w,b
  9149  002496  6F83               	movwf	??_floorf& (0+255),b
  9150  002498  518A               	movf	(floorf@m+1)& (0+255),w,b
  9151  00249A  1590               	andwf	(floorf@u+1)& (0+255),w,b
  9152  00249C  6F84               	movwf	(??_floorf+1)& (0+255),b
  9153  00249E  518B               	movf	(floorf@m+2)& (0+255),w,b
  9154  0024A0  1591               	andwf	(floorf@u+2)& (0+255),w,b
  9155  0024A2  6F85               	movwf	(??_floorf+2)& (0+255),b
  9156  0024A4  518C               	movf	(floorf@m+3)& (0+255),w,b
  9157  0024A6  1592               	andwf	(floorf@u+3)& (0+255),w,b
  9158  0024A8  D855               	call	PL166	;call to abstracted procedure
  9159  0024AA  E0CD               	bz	u9700
  9160                           
  9161                           ; BSR set to: 0
  9162  0024AC  D844               	call	PL82	;call to abstracted procedure
  9163  0024AE  D001               	goto	u9740
  9164  0024B0                     u9745:
  9165  0024B0  D84B               	call	PL164	;call to abstracted procedure
  9166  0024B2                     u9740:
  9167  0024B2  2EE8               	decfsz	wreg,f,c
  9168  0024B4  D7FD               	goto	u9745
  9169  0024B6  5183               	movf	??_floorf& (0+255),w,b
  9170  0024B8  E008               	bz	l1697
  9171                           
  9172                           ; BSR set to: 0
  9173  0024BA  5189               	movf	floorf@m& (0+255),w,b
  9174  0024BC  278F               	addwf	floorf@u& (0+255),f,b
  9175  0024BE  518A               	movf	(floorf@m+1)& (0+255),w,b
  9176  0024C0  2390               	addwfc	(floorf@u+1)& (0+255),f,b
  9177  0024C2  518B               	movf	(floorf@m+2)& (0+255),w,b
  9178  0024C4  2391               	addwfc	(floorf@u+2)& (0+255),f,b
  9179  0024C6  518C               	movf	(floorf@m+3)& (0+255),w,b
  9180  0024C8  2392               	addwfc	(floorf@u+3)& (0+255),f,b
  9181  0024CA                     l1697:
  9182                           
  9183                           ; BSR set to: 0
  9184  0024CA  1D89               	comf	floorf@m& (0+255),w,b
  9185  0024CC  6F83               	movwf	??_floorf& (0+255),b
  9186  0024CE  1D8A               	comf	(floorf@m+1)& (0+255),w,b
  9187  0024D0  6F84               	movwf	(??_floorf+1)& (0+255),b
  9188  0024D2  1D8B               	comf	(floorf@m+2)& (0+255),w,b
  9189  0024D4  6F85               	movwf	(??_floorf+2)& (0+255),b
  9190  0024D6  1D8C               	comf	(floorf@m+3)& (0+255),w,b
  9191  0024D8  6F86               	movwf	(??_floorf+3)& (0+255),b
  9192  0024DA  5183               	movf	??_floorf& (0+255),w,b
  9193  0024DC  178F               	andwf	floorf@u& (0+255),f,b
  9194  0024DE  5184               	movf	(??_floorf+1)& (0+255),w,b
  9195  0024E0  1790               	andwf	(floorf@u+1)& (0+255),f,b
  9196  0024E2  5185               	movf	(??_floorf+2)& (0+255),w,b
  9197  0024E4  1791               	andwf	(floorf@u+2)& (0+255),f,b
  9198  0024E6  5186               	movf	(??_floorf+3)& (0+255),w,b
  9199  0024E8  1792               	andwf	(floorf@u+3)& (0+255),f,b
  9200  0024EA  D01C               	goto	l8438
  9201  0024EC                     l8430:
  9202                           
  9203                           ; BSR set to: 0
  9204  0024EC  D824               	call	PL82	;call to abstracted procedure
  9205  0024EE  D001               	goto	u9760
  9206  0024F0                     u9765:
  9207  0024F0  D82B               	call	PL164	;call to abstracted procedure
  9208  0024F2                     u9760:
  9209  0024F2  2EE8               	decfsz	wreg,f,c
  9210  0024F4  D7FD               	goto	u9765
  9211  0024F6  6783               	tstfsz	??_floorf& (0+255),b
  9212  0024F8  D005               	goto	l8434
  9213                           
  9214                           ; BSR set to: 0
  9215  0024FA  6B8F               	clrf	floorf@u& (0+255),b
  9216  0024FC  6B90               	clrf	(floorf@u+1)& (0+255),b
  9217  0024FE  6B91               	clrf	(floorf@u+2)& (0+255),b
  9218  002500  6B92               	clrf	(floorf@u+3)& (0+255),b
  9219  002502  D010               	goto	l8438
  9220  002504                     l8434:
  9221                           
  9222                           ; BSR set to: 0
  9223  002504  90D8               	bcf	status,0,c
  9224  002506  358F               	rlcf	floorf@u& (0+255),w,b
  9225  002508  6F83               	movwf	??_floorf& (0+255),b
  9226  00250A  3590               	rlcf	(floorf@u+1)& (0+255),w,b
  9227  00250C  6F84               	movwf	(??_floorf+1)& (0+255),b
  9228  00250E  3591               	rlcf	(floorf@u+2)& (0+255),w,b
  9229  002510  6F85               	movwf	(??_floorf+2)& (0+255),b
  9230  002512  3592               	rlcf	(floorf@u+3)& (0+255),w,b
  9231  002514  D81F               	call	PL166	;call to abstracted procedure
  9232  002516  E006               	bz	l8438
  9233                           
  9234                           ; BSR set to: 0
  9235  002518  6B8F               	clrf	floorf@u& (0+255),b
  9236  00251A  6B90               	clrf	(floorf@u+1)& (0+255),b
  9237  00251C  0E80               	movlw	128
  9238  00251E  6F91               	movwf	(floorf@u+2)& (0+255),b
  9239  002520  0EBF               	movlw	191
  9240  002522  6F92               	movwf	(floorf@u+3)& (0+255),b
  9241  002524                     l8438:
  9242                           
  9243                           ; BSR set to: 0
  9244  002524  C08F  F07F         	movff	floorf@u,?_floorf
  9245  002528  C090  F080         	movff	floorf@u+1,?_floorf+1
  9246  00252C  C091  F081         	movff	floorf@u+2,?_floorf+2
  9247  002530  C092  F082         	movff	floorf@u+3,?_floorf+3
  9248                           
  9249                           ; BSR set to: 0
  9250  002534  0012               	return		;funcret
  9251  002536                     __end_of_floorf:
  9252                           	callstack 0
  9253  002536                     PL82:
  9254                           	callstack 23
  9255  002536  C08F  F083         	movff	floorf@u,??_floorf
  9256  00253A  C090  F084         	movff	floorf@u+1,??_floorf+1
  9257  00253E  C091  F085         	movff	floorf@u+2,??_floorf+2
  9258  002542  C092  F086         	movff	floorf@u+3,??_floorf+3
  9259  002546  0C20               	retlw	32
  9260  002548                     __end_ofPL82:
  9261                           	callstack 0
  9262  002548                     PL164:
  9263                           	callstack 23
  9264  002548  90D8               	bcf	status,0,c
  9265  00254A  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9266  00254C  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9267  00254E  3384               	rrcf	(??_floorf+1)& (0+255),f,b
  9268  002550  3383               	rrcf	??_floorf& (0+255),f,b
  9269  002552  0012               	return	
  9270  002554                     __end_ofPL164:
  9271                           	callstack 0
  9272  002554                     PL166:
  9273                           	callstack 23
  9274  002554  6F86               	movwf	(??_floorf+3)& (0+255),b
  9275  002556  5183               	movf	??_floorf& (0+255),w,b
  9276  002558  1184               	iorwf	(??_floorf+1)& (0+255),w,b
  9277  00255A  1185               	iorwf	(??_floorf+2)& (0+255),w,b
  9278  00255C  1186               	iorwf	(??_floorf+3)& (0+255),w,b
  9279  00255E  0012               	return	
  9280  002560                     __end_ofPL166:
  9281                           	callstack 0
  9282                           
  9283 ;; *************** function ___fpclassifyf *****************
  9284 ;; Defined at:
  9285 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__fpclassifyf.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  x               4   26[COMRAM] float 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  u               4    2[BANK0 ] struct .
  9290 ;;  e               2    0[BANK0 ] int 
  9291 ;; Return value:  Size  Location     Type
  9292 ;;                  2   26[COMRAM] int 
  9293 ;; Registers used:
  9294 ;;		wreg, status,2, status,0
  9295 ;; Tracked objects:
  9296 ;;		On entry : 3E/1
  9297 ;;		On exit  : 3F/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9300 ;;      Params:         4       0       0       0       0       0       0
  9301 ;;      Locals:         0       6       0       0       0       0       0
  9302 ;;      Temps:          4       0       0       0       0       0       0
  9303 ;;      Totals:         8       6       0       0       0       0       0
  9304 ;;Total ram usage:       14 bytes
  9305 ;; Hardware stack levels used: 1
  9306 ;; Hardware stack levels required when called: 3
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		_efgtoa
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text21
  9315  00304E                     __ptext21:
  9316                           	callstack 0
  9317  00304E                     ___fpclassifyf:
  9318                           	callstack 23
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;incstack = 0
  9322  00304E  C024  F062         	movff	___fpclassifyf@F465,___fpclassifyf@u
  9323  003052  C025  F063         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  9324  003056  C026  F064         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  9325  00305A  C027  F065         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  9326  00305E  C01B  F062         	movff	___fpclassifyf@x,___fpclassifyf@u
  9327  003062  C01C  F063         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  9328  003066  C01D  F064         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  9329  00306A  C01E  F065         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  9330  00306E  D83A               	call	PL96	;call to abstracted procedure
  9331  003070  0E18               	movlw	24
  9332  003072  D005               	goto	u9590
  9333  003074                     u9595:
  9334  003074  90D8               	bcf	status,0,c
  9335  003076  3222               	rrcf	(??___fpclassifyf+3)^0,f,c
  9336  003078  3221               	rrcf	(??___fpclassifyf+2)^0,f,c
  9337  00307A  3220               	rrcf	(??___fpclassifyf+1)^0,f,c
  9338  00307C  321F               	rrcf	??___fpclassifyf^0,f,c
  9339  00307E                     u9590:
  9340  00307E  2EE8               	decfsz	wreg,f,c
  9341  003080  D7F9               	goto	u9595
  9342  003082  501F               	movf	??___fpclassifyf^0,w,c
  9343  003084  0100               	movlb	0	; () banked
  9344  003086  6F60               	movwf	___fpclassifyf@e& (0+255),b
  9345  003088  6B61               	clrf	(___fpclassifyf@e+1)& (0+255),b
  9346  00308A  5160               	movf	___fpclassifyf@e& (0+255),w,b
  9347  00308C  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  9348  00308E  E113               	bnz	l8390
  9349                           
  9350                           ; BSR set to: 0
  9351  003090  90D8               	bcf	status,0,c
  9352  003092  3562               	rlcf	___fpclassifyf@u& (0+255),w,b
  9353  003094  6E1F               	movwf	??___fpclassifyf^0,c
  9354  003096  3563               	rlcf	(___fpclassifyf@u+1)& (0+255),w,b
  9355  003098  6E20               	movwf	(??___fpclassifyf+1)^0,c
  9356  00309A  3564               	rlcf	(___fpclassifyf@u+2)& (0+255),w,b
  9357  00309C  6E21               	movwf	(??___fpclassifyf+2)^0,c
  9358  00309E  3565               	rlcf	(___fpclassifyf@u+3)& (0+255),w,b
  9359  0030A0  6E22               	movwf	(??___fpclassifyf+3)^0,c
  9360  0030A2  D829               	call	PL188	;call to abstracted procedure
  9361  0030A4  E104               	bnz	l8386
  9362                           
  9363                           ; BSR set to: 0
  9364  0030A6  6A1C               	clrf	(?___fpclassifyf+1)^0,c
  9365  0030A8  0E02               	movlw	2
  9366  0030AA  6E1B               	movwf	?___fpclassifyf^0,c
  9367  0030AC  0C02               	retlw	2
  9368  0030AE                     l8386:
  9369                           
  9370                           ; BSR set to: 0
  9371  0030AE  6A1C               	clrf	(?___fpclassifyf+1)^0,c
  9372  0030B0  0E03               	movlw	3
  9373  0030B2  6E1B               	movwf	?___fpclassifyf^0,c
  9374  0030B4  0C03               	retlw	3
  9375  0030B6                     l8390:
  9376                           
  9377                           ; BSR set to: 0
  9378  0030B6  2960               	incf	___fpclassifyf@e& (0+255),w,b
  9379  0030B8  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  9380  0030BA  E110               	bnz	l8396
  9381                           
  9382                           ; BSR set to: 0
  9383  0030BC  D813               	call	PL96	;call to abstracted procedure
  9384  0030BE  0E09               	movlw	9
  9385  0030C0                     u9635:
  9386  0030C0  90D8               	bcf	status,0,c
  9387  0030C2  361F               	rlcf	??___fpclassifyf^0,f,c
  9388  0030C4  3620               	rlcf	(??___fpclassifyf+1)^0,f,c
  9389  0030C6  3621               	rlcf	(??___fpclassifyf+2)^0,f,c
  9390  0030C8  3622               	rlcf	(??___fpclassifyf+3)^0,f,c
  9391  0030CA  2EE8               	decfsz	wreg,f,c
  9392  0030CC  D7F9               	goto	u9635
  9393  0030CE  D813               	call	PL188	;call to abstracted procedure
  9394  0030D0  0E01               	movlw	1
  9395  0030D2  A4D8               	btfss	status,2,c
  9396  0030D4  0E00               	movlw	0
  9397  0030D6  6E1B               	movwf	?___fpclassifyf^0,c
  9398  0030D8  6A1C               	clrf	(?___fpclassifyf+1)^0,c
  9399  0030DA  0012               	return	
  9400  0030DC                     l8396:
  9401                           
  9402                           ; BSR set to: 0
  9403  0030DC  6A1C               	clrf	(?___fpclassifyf+1)^0,c
  9404  0030DE  0E04               	movlw	4
  9405  0030E0  6E1B               	movwf	?___fpclassifyf^0,c
  9406                           
  9407                           ; BSR set to: 0
  9408  0030E2  0C04               	retlw	4	;funcret
  9409  0030E4                     __end_of___fpclassifyf:
  9410                           	callstack 0
  9411  0030E4                     PL96:
  9412                           	callstack 23
  9413  0030E4  C062  F01F         	movff	___fpclassifyf@u,??___fpclassifyf
  9414  0030E8  C063  F020         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  9415  0030EC  C064  F021         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  9416  0030F0  C065  F022         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  9417  0030F4  0012               	return	
  9418  0030F6                     __end_ofPL96:
  9419                           	callstack 0
  9420  0030F6                     PL188:
  9421                           	callstack 23
  9422  0030F6  501F               	movf	??___fpclassifyf^0,w,c
  9423  0030F8  1020               	iorwf	(??___fpclassifyf+1)^0,w,c
  9424  0030FA  1021               	iorwf	(??___fpclassifyf+2)^0,w,c
  9425  0030FC  1022               	iorwf	(??___fpclassifyf+3)^0,w,c
  9426  0030FE  0012               	return	
  9427  003100                     __end_ofPL188:
  9428                           	callstack 0
  9429                           
  9430 ;; *************** function ___fltol *****************
  9431 ;; Defined at:
  9432 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fltol.c"
  9433 ;; Parameters:    Size  Location     Type
  9434 ;;  f1              4   92[BANK0 ] int 
  9435 ;; Auto vars:     Size  Location     Type
  9436 ;;  exp1            1  101[BANK0 ] unsigned char 
  9437 ;;  sign1           1  100[BANK0 ] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  4   92[BANK0 ] long 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : 3F/0
  9444 ;;		On exit  : 3F/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9447 ;;      Params:         0       4       0       0       0       0       0
  9448 ;;      Locals:         0       2       0       0       0       0       0
  9449 ;;      Temps:          0       4       0       0       0       0       0
  9450 ;;      Totals:         0      10       0       0       0       0       0
  9451 ;;Total ram usage:       10 bytes
  9452 ;; Hardware stack levels used: 1
  9453 ;; Hardware stack levels required when called: 3
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_main
  9458 ;;		_efgtoa
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text22
  9463  003254                     __ptext22:
  9464                           	callstack 0
  9465  003254                     ___fltol:
  9466                           	callstack 23
  9467                           
  9468                           ; BSR set to: 0
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;incstack = 0
  9472  003254  35BE               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9473  003256  35BF               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9474  003258  6FC5               	movwf	___fltol@exp1& (0+255),b
  9475  00325A  51C5               	movf	___fltol@exp1& (0+255),w,b
  9476  00325C  E105               	bnz	l8286
  9477  00325E                     u9420:
  9478                           
  9479                           ; BSR set to: 0
  9480  00325E  6BBC               	clrf	?___fltol& (0+255),b
  9481  003260  6BBD               	clrf	(?___fltol+1)& (0+255),b
  9482  003262  6BBE               	clrf	(?___fltol+2)& (0+255),b
  9483  003264  6BBF               	clrf	(?___fltol+3)& (0+255),b
  9484  003266  0012               	return	
  9485  003268                     l8286:
  9486                           
  9487                           ; BSR set to: 0
  9488  003268  C0BC  F0C0         	movff	___fltol@f1,??___fltol
  9489  00326C  C0BD  F0C1         	movff	___fltol@f1+1,??___fltol+1
  9490  003270  C0BE  F0C2         	movff	___fltol@f1+2,??___fltol+2
  9491  003274  C0BF  F0C3         	movff	___fltol@f1+3,??___fltol+3
  9492  003278  0E20               	movlw	32
  9493  00327A  D005               	goto	u9430
  9494  00327C                     u9435:
  9495  00327C  90D8               	bcf	status,0,c
  9496  00327E  33C3               	rrcf	(??___fltol+3)& (0+255),f,b
  9497  003280  33C2               	rrcf	(??___fltol+2)& (0+255),f,b
  9498  003282  33C1               	rrcf	(??___fltol+1)& (0+255),f,b
  9499  003284  33C0               	rrcf	??___fltol& (0+255),f,b
  9500  003286                     u9430:
  9501  003286  2EE8               	decfsz	wreg,f,c
  9502  003288  D7F9               	goto	u9435
  9503  00328A  51C0               	movf	??___fltol& (0+255),w,b
  9504  00328C  6FC4               	movwf	___fltol@sign1& (0+255),b
  9505                           
  9506                           ; BSR set to: 0
  9507  00328E  8FBE               	bsf	(___fltol@f1+2)& (0+255),7,b
  9508                           
  9509                           ; BSR set to: 0
  9510  003290  6BBF               	clrf	(___fltol@f1+3)& (0+255),b
  9511                           
  9512                           ; BSR set to: 0
  9513  003292  0E96               	movlw	150
  9514  003294  5FC5               	subwf	___fltol@exp1& (0+255),f,b
  9515                           
  9516                           ; BSR set to: 0
  9517  003296  AFC5               	btfss	___fltol@exp1& (0+255),7,b
  9518  003298  D00C               	goto	l8304
  9519                           
  9520                           ; BSR set to: 0
  9521  00329A  51C5               	movf	___fltol@exp1& (0+255),w,b
  9522  00329C  0A80               	xorlw	128
  9523  00329E  0F97               	addlw	151
  9524  0032A0  E3DE               	bnc	u9420
  9525  0032A2                     l8300:
  9526                           
  9527                           ; BSR set to: 0
  9528  0032A2  90D8               	bcf	status,0,c
  9529  0032A4  33BF               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9530  0032A6  33BE               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9531  0032A8  33BD               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9532  0032AA  33BC               	rrcf	___fltol@f1& (0+255),f,b
  9533                           
  9534                           ; BSR set to: 0
  9535  0032AC  3FC5               	incfsz	___fltol@exp1& (0+255),f,b
  9536  0032AE  D7F9               	goto	l8300
  9537  0032B0  D00C               	goto	u9470
  9538  0032B2                     l8304:
  9539                           
  9540                           ; BSR set to: 0
  9541  0032B2  0E1F               	movlw	31
  9542  0032B4  65C5               	cpfsgt	___fltol@exp1& (0+255),b
  9543  0032B6  D007               	goto	l8310
  9544  0032B8  D7D2               	goto	u9420
  9545  0032BA                     l8308:
  9546                           
  9547                           ; BSR set to: 0
  9548  0032BA  90D8               	bcf	status,0,c
  9549  0032BC  37BC               	rlcf	___fltol@f1& (0+255),f,b
  9550  0032BE  37BD               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9551  0032C0  37BE               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9552  0032C2  37BF               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9553  0032C4  07C5               	decf	___fltol@exp1& (0+255),f,b
  9554  0032C6                     l8310:
  9555                           
  9556                           ; BSR set to: 0
  9557  0032C6  51C5               	movf	___fltol@exp1& (0+255),w,b
  9558  0032C8  E1F8               	bnz	l8308
  9559  0032CA                     u9470:
  9560                           
  9561                           ; BSR set to: 0
  9562  0032CA  51C4               	movf	___fltol@sign1& (0+255),w,b
  9563  0032CC  E008               	bz	l8316
  9564                           
  9565                           ; BSR set to: 0
  9566  0032CE  1FBF               	comf	(___fltol@f1+3)& (0+255),f,b
  9567  0032D0  1FBE               	comf	(___fltol@f1+2)& (0+255),f,b
  9568  0032D2  1FBD               	comf	(___fltol@f1+1)& (0+255),f,b
  9569  0032D4  6DBC               	negf	___fltol@f1& (0+255),b
  9570  0032D6  0E00               	movlw	0
  9571  0032D8  23BD               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9572  0032DA  23BE               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9573  0032DC  23BF               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9574  0032DE                     l8316:
  9575                           
  9576                           ; BSR set to: 0
  9577  0032DE  C0BC  F0BC         	movff	___fltol@f1,?___fltol
  9578  0032E2  C0BD  F0BD         	movff	___fltol@f1+1,?___fltol+1
  9579  0032E6  C0BE  F0BE         	movff	___fltol@f1+2,?___fltol+2
  9580  0032EA  C0BF  F0BF         	movff	___fltol@f1+3,?___fltol+3
  9581                           
  9582                           ; BSR set to: 0
  9583  0032EE  0012               	return		;funcret
  9584  0032F0                     __end_of___fltol:
  9585                           	callstack 0
  9586                           
  9587 ;; *************** function ___flsub *****************
  9588 ;; Defined at:
  9589 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;  b               4   47[BANK0 ] long 
  9592 ;;  a               4   51[BANK0 ] long 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  4   47[BANK0 ] long 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 3F/0
  9601 ;;		On exit  : 3F/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9604 ;;      Params:         0       8       0       0       0       0       0
  9605 ;;      Locals:         0       0       0       0       0       0       0
  9606 ;;      Temps:          0       0       0       0       0       0       0
  9607 ;;      Totals:         0       8       0       0       0       0       0
  9608 ;;Total ram usage:        8 bytes
  9609 ;; Hardware stack levels used: 1
  9610 ;; Hardware stack levels required when called: 4
  9611 ;; This function calls:
  9612 ;;		___fladd
  9613 ;; This function is called by:
  9614 ;;		_efgtoa
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text23
  9619  003B98                     __ptext23:
  9620                           	callstack 0
  9621  003B98                     ___flsub:
  9622                           	callstack 22
  9623                           
  9624                           ; BSR set to: 0
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;incstack = 0
  9628  003B98  0E80               	movlw	128
  9629  003B9A  1B96               	xorwf	(___flsub@a+3)& (0+255),f,b
  9630                           
  9631                           ; BSR set to: 0
  9632  003B9C  C08F  F07F         	movff	___flsub@b,___fladd@b
  9633  003BA0  C090  F080         	movff	___flsub@b+1,___fladd@b+1
  9634  003BA4  C091  F081         	movff	___flsub@b+2,___fladd@b+2
  9635  003BA8  C092  F082         	movff	___flsub@b+3,___fladd@b+3
  9636  003BAC  C093  F083         	movff	___flsub@a,___fladd@a
  9637  003BB0  C094  F084         	movff	___flsub@a+1,___fladd@a+1
  9638  003BB4  C095  F085         	movff	___flsub@a+2,___fladd@a+2
  9639  003BB8  C096  F086         	movff	___flsub@a+3,___fladd@a+3
  9640  003BBC  EC0A  F00E         	call	___fladd	;wreg free
  9641  003BC0  C07F  F08F         	movff	?___fladd,?___flsub
  9642  003BC4  C080  F090         	movff	?___fladd+1,?___flsub+1
  9643  003BC8  C081  F091         	movff	?___fladd+2,?___flsub+2
  9644  003BCC  C082  F092         	movff	?___fladd+3,?___flsub+3
  9645                           
  9646                           ; BSR set to: 0
  9647  003BD0  0012               	return		;funcret
  9648  003BD2                     __end_of___flsub:
  9649                           	callstack 0
  9650                           
  9651 ;; *************** function ___fladd *****************
  9652 ;; Defined at:
  9653 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;  b               4   31[BANK0 ] long 
  9656 ;;  a               4   35[BANK0 ] long 
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;  grs             1   46[BANK0 ] unsigned char 
  9659 ;;  bexp            1   45[BANK0 ] unsigned char 
  9660 ;;  aexp            1   44[BANK0 ] unsigned char 
  9661 ;;  signs           1   43[BANK0 ] unsigned char 
  9662 ;; Return value:  Size  Location     Type
  9663 ;;                  4   31[BANK0 ] unsigned char 
  9664 ;; Registers used:
  9665 ;;		wreg, status,2, status,0
  9666 ;; Tracked objects:
  9667 ;;		On entry : 3E/0
  9668 ;;		On exit  : 3F/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9671 ;;      Params:         0       8       0       0       0       0       0
  9672 ;;      Locals:         0       4       0       0       0       0       0
  9673 ;;      Temps:          0       4       0       0       0       0       0
  9674 ;;      Totals:         0      16       0       0       0       0       0
  9675 ;;Total ram usage:       16 bytes
  9676 ;; Hardware stack levels used: 1
  9677 ;; Hardware stack levels required when called: 3
  9678 ;; This function calls:
  9679 ;;		Nothing
  9680 ;; This function is called by:
  9681 ;;		_main
  9682 ;;		___flsub
  9683 ;;		_efgtoa
  9684 ;;		_sqrtf
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text24
  9689  001C14                     __ptext24:
  9690                           	callstack 0
  9691  001C14                     ___fladd:
  9692                           	callstack 26
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;incstack = 0
  9696  001C14  0100               	movlb	0	; () banked
  9697  001C16  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9698  001C18  0B80               	andlw	128
  9699  001C1A  6F8B               	movwf	___fladd@signs& (0+255),b
  9700  001C1C  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9701  001C1E  2582               	addwf	(___fladd@b+3)& (0+255),w,b
  9702  001C20  6F8D               	movwf	___fladd@bexp& (0+255),b
  9703                           
  9704                           ; BSR set to: 0
  9705  001C22  BF81               	btfsc	(___fladd@b+2)& (0+255),7,b
  9706                           
  9707                           ; BSR set to: 0
  9708  001C24  818D               	bsf	___fladd@bexp& (0+255),0,b
  9709                           
  9710                           ; BSR set to: 0
  9711  001C26  518D               	movf	___fladd@bexp& (0+255),w,b
  9712  001C28  E005               	bz	l1248
  9713                           
  9714                           ; BSR set to: 0
  9715  001C2A  298D               	incf	___fladd@bexp& (0+255),w,b
  9716  001C2C  E101               	bnz	l7714
  9717                           
  9718                           ; BSR set to: 0
  9719  001C2E  D906               	call	PL154	;call to abstracted procedure
  9720  001C30                     l7714:
  9721                           
  9722                           ; BSR set to: 0
  9723  001C30  8F81               	bsf	(___fladd@b+2)& (0+255),7,b
  9724  001C32  D003               	goto	L11
  9725  001C34                     l1248:
  9726                           
  9727                           ; BSR set to: 0
  9728  001C34  6B7F               	clrf	___fladd@b& (0+255),b
  9729  001C36  6B80               	clrf	(___fladd@b+1)& (0+255),b
  9730  001C38  6B81               	clrf	(___fladd@b+2)& (0+255),b
  9731  001C3A                     L11:
  9732  001C3A  6B82               	clrf	(___fladd@b+3)& (0+255),b
  9733                           
  9734                           ; BSR set to: 0
  9735  001C3C  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9736  001C3E  0B80               	andlw	128
  9737  001C40  6F8C               	movwf	___fladd@aexp& (0+255),b
  9738  001C42  198B               	xorwf	___fladd@signs& (0+255),w,b
  9739  001C44  E001               	bz	l7722
  9740                           
  9741                           ; BSR set to: 0
  9742  001C46  8D8B               	bsf	___fladd@signs& (0+255),6,b
  9743  001C48                     l7722:
  9744                           
  9745                           ; BSR set to: 0
  9746  001C48  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9747  001C4A  2586               	addwf	(___fladd@a+3)& (0+255),w,b
  9748  001C4C  6F8C               	movwf	___fladd@aexp& (0+255),b
  9749                           
  9750                           ; BSR set to: 0
  9751  001C4E  BF85               	btfsc	(___fladd@a+2)& (0+255),7,b
  9752                           
  9753                           ; BSR set to: 0
  9754  001C50  818C               	bsf	___fladd@aexp& (0+255),0,b
  9755                           
  9756                           ; BSR set to: 0
  9757  001C52  518C               	movf	___fladd@aexp& (0+255),w,b
  9758  001C54  E008               	bz	l1253
  9759                           
  9760                           ; BSR set to: 0
  9761  001C56  298C               	incf	___fladd@aexp& (0+255),w,b
  9762  001C58  E104               	bnz	l7734
  9763                           
  9764                           ; BSR set to: 0
  9765  001C5A  6B83               	clrf	___fladd@a& (0+255),b
  9766  001C5C  6B84               	clrf	(___fladd@a+1)& (0+255),b
  9767  001C5E  6B85               	clrf	(___fladd@a+2)& (0+255),b
  9768  001C60  6B86               	clrf	(___fladd@a+3)& (0+255),b
  9769  001C62                     l7734:
  9770                           
  9771                           ; BSR set to: 0
  9772  001C62  8F85               	bsf	(___fladd@a+2)& (0+255),7,b
  9773  001C64  D003               	goto	L12
  9774  001C66                     l1253:
  9775                           
  9776                           ; BSR set to: 0
  9777  001C66  6B83               	clrf	___fladd@a& (0+255),b
  9778  001C68  6B84               	clrf	(___fladd@a+1)& (0+255),b
  9779  001C6A  6B85               	clrf	(___fladd@a+2)& (0+255),b
  9780  001C6C                     L12:
  9781  001C6C  6B86               	clrf	(___fladd@a+3)& (0+255),b
  9782                           
  9783                           ; BSR set to: 0
  9784  001C6E  518D               	movf	___fladd@bexp& (0+255),w,b
  9785  001C70  5D8C               	subwf	___fladd@aexp& (0+255),w,b
  9786  001C72  E222               	bc	l7774
  9787                           
  9788                           ; BSR set to: 0
  9789  001C74  AD8B               	btfss	___fladd@signs& (0+255),6,b
  9790  001C76  D002               	goto	l7744
  9791                           
  9792                           ; BSR set to: 0
  9793  001C78  0E80               	movlw	128
  9794  001C7A  1B8B               	xorwf	___fladd@signs& (0+255),f,b
  9795  001C7C                     l7744:
  9796                           
  9797                           ; BSR set to: 0
  9798  001C7C  C08D  F08E         	movff	___fladd@bexp,___fladd@grs
  9799                           
  9800                           ; BSR set to: 0
  9801  001C80  C08C  F08D         	movff	___fladd@aexp,___fladd@bexp
  9802                           
  9803                           ; BSR set to: 0
  9804  001C84  C08E  F08C         	movff	___fladd@grs,___fladd@aexp
  9805                           
  9806                           ; BSR set to: 0
  9807  001C88  C07F  F08E         	movff	___fladd@b,___fladd@grs
  9808                           
  9809                           ; BSR set to: 0
  9810  001C8C  C083  F07F         	movff	___fladd@a,___fladd@b
  9811                           
  9812                           ; BSR set to: 0
  9813  001C90  C08E  F083         	movff	___fladd@grs,___fladd@a
  9814                           
  9815                           ; BSR set to: 0
  9816  001C94  C080  F08E         	movff	___fladd@b+1,___fladd@grs
  9817                           
  9818                           ; BSR set to: 0
  9819  001C98  C084  F080         	movff	___fladd@a+1,___fladd@b+1
  9820                           
  9821                           ; BSR set to: 0
  9822  001C9C  C08E  F084         	movff	___fladd@grs,___fladd@a+1
  9823                           
  9824                           ; BSR set to: 0
  9825  001CA0  C081  F08E         	movff	___fladd@b+2,___fladd@grs
  9826                           
  9827                           ; BSR set to: 0
  9828  001CA4  C085  F081         	movff	___fladd@a+2,___fladd@b+2
  9829                           
  9830                           ; BSR set to: 0
  9831  001CA8  C08E  F085         	movff	___fladd@grs,___fladd@a+2
  9832                           
  9833                           ; BSR set to: 0
  9834  001CAC  C082  F08E         	movff	___fladd@b+3,___fladd@grs
  9835                           
  9836                           ; BSR set to: 0
  9837  001CB0  C086  F082         	movff	___fladd@a+3,___fladd@b+3
  9838                           
  9839                           ; BSR set to: 0
  9840  001CB4  C08E  F086         	movff	___fladd@grs,___fladd@a+3
  9841  001CB8                     l7774:
  9842                           
  9843                           ; BSR set to: 0
  9844  001CB8  6B8E               	clrf	___fladd@grs& (0+255),b
  9845  001CBA  518D               	movf	___fladd@bexp& (0+255),w,b
  9846  001CBC  C08C  F087         	movff	___fladd@aexp,??___fladd
  9847  001CC0  6B88               	clrf	(??___fladd+1)& (0+255),b
  9848  001CC2  5F87               	subwf	??___fladd& (0+255),f,b
  9849  001CC4  0E00               	movlw	0
  9850  001CC6  5B88               	subwfb	(??___fladd+1)& (0+255),f,b
  9851  001CC8  BF88               	btfsc	(??___fladd+1)& (0+255),7,b
  9852  001CCA  D015               	goto	l1260
  9853  001CCC  5188               	movf	(??___fladd+1)& (0+255),w,b
  9854  001CCE  E103               	bnz	u8450
  9855  001CD0  0E1A               	movlw	26
  9856  001CD2  5D87               	subwf	??___fladd& (0+255),w,b
  9857  001CD4  E310               	bnc	l1260
  9858  001CD6                     u8450:
  9859                           
  9860                           ; BSR set to: 0
  9861  001CD6  D8C7               	call	PL196	;call to abstracted procedure
  9862  001CD8  0E01               	movlw	1
  9863  001CDA  B4D8               	btfsc	status,2,c
  9864  001CDC  0E00               	movlw	0
  9865  001CDE  6F8E               	movwf	___fladd@grs& (0+255),b
  9866                           
  9867                           ; BSR set to: 0
  9868  001CE0  D8AD               	call	PL154	;call to abstracted procedure
  9869                           
  9870                           ; BSR set to: 0
  9871  001CE2  C08C  F08D         	movff	___fladd@aexp,___fladd@bexp
  9872  001CE6  D00A               	goto	u8500
  9873  001CE8                     l1261:
  9874                           
  9875                           ; BSR set to: 0
  9876  001CE8  A18E               	btfss	___fladd@grs& (0+255),0,b
  9877  001CEA  D002               	goto	l7784
  9878                           
  9879                           ; BSR set to: 0
  9880  001CEC  D8B7               	call	PL192	;call to abstracted procedure
  9881  001CEE  D002               	goto	l7786
  9882  001CF0                     l7784:
  9883                           
  9884                           ; BSR set to: 0
  9885  001CF0  90D8               	bcf	status,0,c
  9886  001CF2  338E               	rrcf	___fladd@grs& (0+255),f,b
  9887  001CF4                     l7786:
  9888                           
  9889                           ; BSR set to: 0
  9890                           
  9891                           ; BSR set to: 0
  9892                           
  9893                           ; BSR set to: 0
  9894                           
  9895                           ; BSR set to: 0
  9896  001CF4  D89A               	call	PL120	;call to abstracted procedure
  9897  001CF6                     l1260:
  9898                           
  9899                           ; BSR set to: 0
  9900  001CF6  518C               	movf	___fladd@aexp& (0+255),w,b
  9901  001CF8  5D8D               	subwf	___fladd@bexp& (0+255),w,b
  9902  001CFA  E3F6               	bnc	l1261
  9903  001CFC                     u8500:
  9904                           
  9905                           ; BSR set to: 0
  9906  001CFC  BD8B               	btfsc	___fladd@signs& (0+255),6,b
  9907  001CFE  D015               	goto	l7816
  9908                           
  9909                           ; BSR set to: 0
  9910  001D00  518D               	movf	___fladd@bexp& (0+255),w,b
  9911  001D02  E101               	bnz	l7798
  9912                           
  9913                           ; BSR set to: 0
  9914  001D04  D0A6               	goto	PL172	;call to abstracted procedure
  9915  001D06                     l7798:
  9916                           
  9917                           ; BSR set to: 0
  9918  001D06  5183               	movf	___fladd@a& (0+255),w,b
  9919  001D08  277F               	addwf	___fladd@b& (0+255),f,b
  9920  001D0A  5184               	movf	(___fladd@a+1)& (0+255),w,b
  9921  001D0C  2380               	addwfc	(___fladd@b+1)& (0+255),f,b
  9922  001D0E  5185               	movf	(___fladd@a+2)& (0+255),w,b
  9923  001D10  2381               	addwfc	(___fladd@b+2)& (0+255),f,b
  9924  001D12  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9925  001D14  2382               	addwfc	(___fladd@b+3)& (0+255),f,b
  9926                           
  9927                           ; BSR set to: 0
  9928  001D16  A182               	btfss	(___fladd@b+3)& (0+255),0,b
  9929  001D18  D053               	goto	u8630
  9930                           
  9931                           ; BSR set to: 0
  9932  001D1A  A18E               	btfss	___fladd@grs& (0+255),0,b
  9933  001D1C  D002               	goto	l7806
  9934                           
  9935                           ; BSR set to: 0
  9936  001D1E  D89E               	call	PL192	;call to abstracted procedure
  9937  001D20  D002               	goto	l7808
  9938  001D22                     l7806:
  9939                           
  9940                           ; BSR set to: 0
  9941  001D22  90D8               	bcf	status,0,c
  9942  001D24  338E               	rrcf	___fladd@grs& (0+255),f,b
  9943  001D26                     l7808:
  9944                           
  9945                           ; BSR set to: 0
  9946                           
  9947                           ; BSR set to: 0
  9948                           
  9949                           ; BSR set to: 0
  9950                           
  9951                           ; BSR set to: 0
  9952  001D26  D881               	call	PL120	;call to abstracted procedure
  9953  001D28  D04B               	goto	u8630
  9954  001D2A                     l7816:
  9955                           
  9956                           ; BSR set to: 0
  9957  001D2A  5183               	movf	___fladd@a& (0+255),w,b
  9958  001D2C  5D7F               	subwf	___fladd@b& (0+255),w,b
  9959  001D2E  5184               	movf	(___fladd@a+1)& (0+255),w,b
  9960  001D30  5980               	subwfb	(___fladd@b+1)& (0+255),w,b
  9961  001D32  5185               	movf	(___fladd@a+2)& (0+255),w,b
  9962  001D34  5981               	subwfb	(___fladd@b+2)& (0+255),w,b
  9963  001D36  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9964  001D38  0A80               	xorlw	128
  9965  001D3A  6F87               	movwf	??___fladd& (0+255),b
  9966  001D3C  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9967  001D3E  0A80               	xorlw	128
  9968  001D40  5987               	subwfb	??___fladd& (0+255),w,b
  9969  001D42  E21F               	bc	l7826
  9970                           
  9971                           ; BSR set to: 0
  9972  001D44  517F               	movf	___fladd@b& (0+255),w,b
  9973  001D46  5D83               	subwf	___fladd@a& (0+255),w,b
  9974  001D48  6F87               	movwf	??___fladd& (0+255),b
  9975  001D4A  5180               	movf	(___fladd@b+1)& (0+255),w,b
  9976  001D4C  5984               	subwfb	(___fladd@a+1)& (0+255),w,b
  9977  001D4E  6F88               	movwf	(??___fladd+1)& (0+255),b
  9978  001D50  5181               	movf	(___fladd@b+2)& (0+255),w,b
  9979  001D52  5985               	subwfb	(___fladd@a+2)& (0+255),w,b
  9980  001D54  6F89               	movwf	(??___fladd+2)& (0+255),b
  9981  001D56  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9982  001D58  5986               	subwfb	(___fladd@a+3)& (0+255),w,b
  9983  001D5A  6F8A               	movwf	(??___fladd+3)& (0+255),b
  9984  001D5C  0EFF               	movlw	255
  9985  001D5E  2587               	addwf	??___fladd& (0+255),w,b
  9986  001D60  6F7F               	movwf	___fladd@b& (0+255),b
  9987  001D62  0EFF               	movlw	255
  9988  001D64  2188               	addwfc	(??___fladd+1)& (0+255),w,b
  9989  001D66  6F80               	movwf	(___fladd@b+1)& (0+255),b
  9990  001D68  0EFF               	movlw	255
  9991  001D6A  2189               	addwfc	(??___fladd+2)& (0+255),w,b
  9992  001D6C  6F81               	movwf	(___fladd@b+2)& (0+255),b
  9993  001D6E  0EFF               	movlw	255
  9994  001D70  218A               	addwfc	(??___fladd+3)& (0+255),w,b
  9995  001D72  6F82               	movwf	(___fladd@b+3)& (0+255),b
  9996  001D74  0E80               	movlw	128
  9997  001D76  1B8B               	xorwf	___fladd@signs& (0+255),f,b
  9998                           
  9999                           ; BSR set to: 0
 10000  001D78  6D8E               	negf	___fladd@grs& (0+255),b
 10001                           
 10002                           ; BSR set to: 0
 10003  001D7A  518E               	movf	___fladd@grs& (0+255),w,b
 10004  001D7C  E10A               	bnz	l1276
 10005                           
 10006                           ; BSR set to: 0
 10007  001D7E  D863               	call	PL168	;call to abstracted procedure
 10008  001D80  D008               	goto	l1276
 10009  001D82                     l7826:
 10010                           
 10011                           ; BSR set to: 0
 10012  001D82  5183               	movf	___fladd@a& (0+255),w,b
 10013  001D84  5F7F               	subwf	___fladd@b& (0+255),f,b
 10014  001D86  5184               	movf	(___fladd@a+1)& (0+255),w,b
 10015  001D88  5B80               	subwfb	(___fladd@b+1)& (0+255),f,b
 10016  001D8A  5185               	movf	(___fladd@a+2)& (0+255),w,b
 10017  001D8C  5B81               	subwfb	(___fladd@b+2)& (0+255),f,b
 10018  001D8E  5186               	movf	(___fladd@a+3)& (0+255),w,b
 10019  001D90  5B82               	subwfb	(___fladd@b+3)& (0+255),f,b
 10020  001D92                     l1276:
 10021                           
 10022                           ; BSR set to: 0
 10023  001D92  D869               	call	PL196	;call to abstracted procedure
 10024  001D94  E113               	bnz	l7848
 10025                           
 10026                           ; BSR set to: 0
 10027  001D96  518E               	movf	___fladd@grs& (0+255),w,b
 10028  001D98  E111               	bnz	l7848
 10029                           
 10030                           ; BSR set to: 0
 10031  001D9A  D05B               	goto	PL172	;call to abstracted procedure
 10032  001D9C                     l7832:
 10033                           
 10034                           ; BSR set to: 0
 10035  001D9C  90D8               	bcf	status,0,c
 10036  001D9E  377F               	rlcf	___fladd@b& (0+255),f,b
 10037  001DA0  3780               	rlcf	(___fladd@b+1)& (0+255),f,b
 10038  001DA2  3781               	rlcf	(___fladd@b+2)& (0+255),f,b
 10039  001DA4  3782               	rlcf	(___fladd@b+3)& (0+255),f,b
 10040                           
 10041                           ; BSR set to: 0
 10042  001DA6  BF8E               	btfsc	___fladd@grs& (0+255),7,b
 10043                           
 10044                           ; BSR set to: 0
 10045  001DA8  817F               	bsf	___fladd@b& (0+255),0,b
 10046                           
 10047                           ; BSR set to: 0
 10048  001DAA  A18E               	btfss	___fladd@grs& (0+255),0,b
 10049  001DAC  D002               	goto	l7842
 10050                           
 10051                           ; BSR set to: 0
 10052  001DAE  80D8               	bsf	status,0,c
 10053  001DB0  D001               	goto	L13
 10054  001DB2                     l7842:
 10055                           
 10056                           ; BSR set to: 0
 10057  001DB2  90D8               	bcf	status,0,c
 10058  001DB4                     L13:
 10059  001DB4  378E               	rlcf	___fladd@grs& (0+255),f,b
 10060                           
 10061                           ; BSR set to: 0
 10062  001DB6  518D               	movf	___fladd@bexp& (0+255),w,b
 10063  001DB8  E001               	bz	l7848
 10064                           
 10065                           ; BSR set to: 0
 10066  001DBA  078D               	decf	___fladd@bexp& (0+255),f,b
 10067  001DBC                     l7848:
 10068                           
 10069                           ; BSR set to: 0
 10070  001DBC  AF81               	btfss	(___fladd@b+2)& (0+255),7,b
 10071  001DBE  D7EE               	goto	l7832
 10072  001DC0                     u8630:
 10073                           
 10074                           ; BSR set to: 0
 10075  001DC0  6B8C               	clrf	___fladd@aexp& (0+255),b
 10076  001DC2  AF8E               	btfss	___fladd@grs& (0+255),7,b
 10077  001DC4  D00A               	goto	l1285
 10078                           
 10079                           ; BSR set to: 0
 10080  001DC6  C08E  F087         	movff	___fladd@grs,??___fladd
 10081  001DCA  0E7F               	movlw	127
 10082  001DCC  1787               	andwf	??___fladd& (0+255),f,b
 10083  001DCE  E003               	bz	l1286
 10084  001DD0                     u8650:
 10085                           
 10086                           ; BSR set to: 0
 10087  001DD0  0E01               	movlw	1
 10088  001DD2  6F8C               	movwf	___fladd@aexp& (0+255),b
 10089  001DD4  D002               	goto	l1285
 10090  001DD6                     l1286:
 10091                           
 10092                           ; BSR set to: 0
 10093  001DD6  B17F               	btfsc	___fladd@b& (0+255),0,b
 10094  001DD8  D7FB               	goto	u8650
 10095  001DDA                     l1285:
 10096                           
 10097                           ; BSR set to: 0
 10098  001DDA  518C               	movf	___fladd@aexp& (0+255),w,b
 10099  001DDC  E00B               	bz	l7864
 10100                           
 10101                           ; BSR set to: 0
 10102  001DDE  D833               	call	PL168	;call to abstracted procedure
 10103                           
 10104                           ; BSR set to: 0
 10105  001DE0  A182               	btfss	(___fladd@b+3)& (0+255),0,b
 10106  001DE2  D008               	goto	l7864
 10107                           
 10108                           ; BSR set to: 0
 10109  001DE4  3582               	rlcf	(___fladd@b+3)& (0+255),w,b
 10110  001DE6  3382               	rrcf	(___fladd@b+3)& (0+255),f,b
 10111  001DE8  3381               	rrcf	(___fladd@b+2)& (0+255),f,b
 10112  001DEA  3380               	rrcf	(___fladd@b+1)& (0+255),f,b
 10113  001DEC  337F               	rrcf	___fladd@b& (0+255),f,b
 10114  001DEE  298D               	incf	___fladd@bexp& (0+255),w,b
 10115  001DF0  E001               	bz	l7864
 10116                           
 10117                           ; BSR set to: 0
 10118  001DF2  2B8D               	incf	___fladd@bexp& (0+255),f,b
 10119  001DF4                     l7864:
 10120                           
 10121                           ; BSR set to: 0
 10122  001DF4  298D               	incf	___fladd@bexp& (0+255),w,b
 10123  001DF6  E002               	bz	u8710
 10124                           
 10125                           ; BSR set to: 0
 10126  001DF8  518D               	movf	___fladd@bexp& (0+255),w,b
 10127  001DFA  E104               	bnz	l1292
 10128  001DFC                     u8710:
 10129                           
 10130                           ; BSR set to: 0
 10131  001DFC  D81F               	call	PL154	;call to abstracted procedure
 10132                           
 10133                           ; BSR set to: 0
 10134  001DFE  518D               	movf	___fladd@bexp& (0+255),w,b
 10135  001E00  E101               	bnz	l1292
 10136                           
 10137                           ; BSR set to: 0
 10138  001E02  6B8B               	clrf	___fladd@signs& (0+255),b
 10139  001E04                     l1292:
 10140                           
 10141                           ; BSR set to: 0
 10142  001E04  A18D               	btfss	___fladd@bexp& (0+255),0,b
 10143  001E06  D002               	goto	l7874
 10144                           
 10145                           ; BSR set to: 0
 10146  001E08  8F81               	bsf	(___fladd@b+2)& (0+255),7,b
 10147  001E0A  D001               	goto	l7876
 10148  001E0C                     l7874:
 10149                           
 10150                           ; BSR set to: 0
 10151  001E0C  9F81               	bcf	(___fladd@b+2)& (0+255),7,b
 10152  001E0E                     l7876:
 10153                           
 10154                           ; BSR set to: 0
 10155  001E0E  90D8               	bcf	status,0,c
 10156  001E10  318D               	rrcf	___fladd@bexp& (0+255),w,b
 10157  001E12  6F82               	movwf	(___fladd@b+3)& (0+255),b
 10158                           
 10159                           ; BSR set to: 0
 10160  001E14  BF8B               	btfsc	___fladd@signs& (0+255),7,b
 10161                           
 10162                           ; BSR set to: 0
 10163  001E16  8F82               	bsf	(___fladd@b+3)& (0+255),7,b
 10164                           
 10165                           ; BSR set to: 0
 10166  001E18  C07F  F07F         	movff	___fladd@b,?___fladd
 10167  001E1C  C080  F080         	movff	___fladd@b+1,?___fladd+1
 10168  001E20  C081  F081         	movff	___fladd@b+2,?___fladd+2
 10169  001E24  C082  F082         	movff	___fladd@b+3,?___fladd+3
 10170                           
 10171                           ; BSR set to: 0
 10172  001E28  0012               	return		;funcret
 10173  001E2A                     __end_of___fladd:
 10174                           	callstack 0
 10175  001E2A                     PL120:
 10176                           	callstack 26
 10177  001E2A  B17F               	btfsc	___fladd@b& (0+255),0,b
 10178  001E2C  8F8E               	bsf	___fladd@grs& (0+255),7,b
 10179  001E2E  3582               	rlcf	(___fladd@b+3)& (0+255),w,b
 10180  001E30  3382               	rrcf	(___fladd@b+3)& (0+255),f,b
 10181  001E32  3381               	rrcf	(___fladd@b+2)& (0+255),f,b
 10182  001E34  3380               	rrcf	(___fladd@b+1)& (0+255),f,b
 10183  001E36  337F               	rrcf	___fladd@b& (0+255),f,b
 10184  001E38  2B8D               	incf	___fladd@bexp& (0+255),f,b
 10185  001E3A  0012               	return	
 10186  001E3C                     __end_ofPL120:
 10187                           	callstack 0
 10188  001E3C                     PL154:
 10189                           	callstack 26
 10190  001E3C  6B7F               	clrf	___fladd@b& (0+255),b
 10191  001E3E  6B80               	clrf	(___fladd@b+1)& (0+255),b
 10192  001E40  6B81               	clrf	(___fladd@b+2)& (0+255),b
 10193  001E42  6B82               	clrf	(___fladd@b+3)& (0+255),b
 10194  001E44  0012               	return	
 10195  001E46                     __end_ofPL154:
 10196                           	callstack 0
 10197  001E46                     PL168:
 10198                           	callstack 26
 10199  001E46  2B7F               	incf	___fladd@b& (0+255),f,b
 10200  001E48  0E00               	movlw	0
 10201  001E4A  2380               	addwfc	(___fladd@b+1)& (0+255),f,b
 10202  001E4C  2381               	addwfc	(___fladd@b+2)& (0+255),f,b
 10203  001E4E  2382               	addwfc	(___fladd@b+3)& (0+255),f,b
 10204  001E50  0C00               	retlw	0
 10205  001E52                     __end_ofPL168:
 10206                           	callstack 0
 10207  001E52                     PL172:
 10208                           	callstack 26
 10209  001E52  6B7F               	clrf	?___fladd& (0+255),b
 10210  001E54  6B80               	clrf	(?___fladd+1)& (0+255),b
 10211  001E56  6B81               	clrf	(?___fladd+2)& (0+255),b
 10212  001E58  6B82               	clrf	(?___fladd+3)& (0+255),b
 10213  001E5A  0012               	return	
 10214  001E5C                     __end_ofPL172:
 10215                           	callstack 0
 10216  001E5C                     PL192:
 10217                           	callstack 26
 10218  001E5C  90D8               	bcf	status,0,c
 10219  001E5E  318E               	rrcf	___fladd@grs& (0+255),w,b
 10220  001E60  0901               	iorlw	1
 10221  001E62  6F8E               	movwf	___fladd@grs& (0+255),b
 10222  001E64  0012               	return	
 10223  001E66                     __end_ofPL192:
 10224                           	callstack 0
 10225  001E66                     PL196:
 10226                           	callstack 26
 10227  001E66  517F               	movf	___fladd@b& (0+255),w,b
 10228  001E68  1180               	iorwf	(___fladd@b+1)& (0+255),w,b
 10229  001E6A  1181               	iorwf	(___fladd@b+2)& (0+255),w,b
 10230  001E6C  1182               	iorwf	(___fladd@b+3)& (0+255),w,b
 10231  001E6E  0012               	return	
 10232  001E70                     __end_ofPL196:
 10233                           	callstack 0
 10234                           
 10235 ;; *************** function ___flneg *****************
 10236 ;; Defined at:
 10237 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flneg.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;  f1              4   26[COMRAM] unsigned char 
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;		None
 10242 ;; Return value:  Size  Location     Type
 10243 ;;                  4   26[COMRAM] unsigned char 
 10244 ;; Registers used:
 10245 ;;		wreg, status,2, status,0
 10246 ;; Tracked objects:
 10247 ;;		On entry : 3F/1
 10248 ;;		On exit  : 3F/1
 10249 ;;		Unchanged: 3F/0
 10250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10251 ;;      Params:         4       0       0       0       0       0       0
 10252 ;;      Locals:         0       0       0       0       0       0       0
 10253 ;;      Temps:          0       0       0       0       0       0       0
 10254 ;;      Totals:         4       0       0       0       0       0       0
 10255 ;;Total ram usage:        4 bytes
 10256 ;; Hardware stack levels used: 1
 10257 ;; Hardware stack levels required when called: 3
 10258 ;; This function calls:
 10259 ;;		Nothing
 10260 ;; This function is called by:
 10261 ;;		_efgtoa
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           	psect	text25
 10266  003E24                     __ptext25:
 10267                           	callstack 0
 10268  003E24                     ___flneg:
 10269                           	callstack 23
 10270                           
 10271                           ; BSR set to: 1
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;incstack = 0
 10275  003E24  501B               	movf	___flneg@f1^0,w,c
 10276  003E26  101C               	iorwf	(___flneg@f1+1)^0,w,c
 10277  003E28  101D               	iorwf	(___flneg@f1+2)^0,w,c
 10278  003E2A  101E               	iorwf	(___flneg@f1+3)^0,w,c
 10279  003E2C  E002               	bz	l8278
 10280                           
 10281                           ; BSR set to: 1
 10282  003E2E  0E80               	movlw	128
 10283  003E30  1A1E               	xorwf	(___flneg@f1+3)^0,f,c
 10284  003E32                     l8278:
 10285                           
 10286                           ; BSR set to: 1
 10287  003E32  C01B  F01B         	movff	___flneg@f1,?___flneg
 10288  003E36  C01C  F01C         	movff	___flneg@f1+1,?___flneg+1
 10289  003E3A  C01D  F01D         	movff	___flneg@f1+2,?___flneg+2
 10290  003E3E  C01E  F01E         	movff	___flneg@f1+3,?___flneg+3
 10291                           
 10292                           ; BSR set to: 1
 10293  003E42  0012               	return		;funcret
 10294  003E44                     __end_of___flneg:
 10295                           	callstack 0
 10296                           
 10297 ;; *************** function ___flmul *****************
 10298 ;; Defined at:
 10299 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcmul.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  b               4    6[BANK0 ] unsigned char 
 10302 ;;  a               4   10[BANK0 ] unsigned char 
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  prod            4   25[BANK0 ] struct .
 10305 ;;  grs             4   21[BANK0 ] unsigned long 
 10306 ;;  temp            2   29[BANK0 ] struct .
 10307 ;;  bexp            1   20[BANK0 ] unsigned char 
 10308 ;;  aexp            1   19[BANK0 ] unsigned char 
 10309 ;;  sign            1   18[BANK0 ] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  4    6[BANK0 ] unsigned char 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, prodl, prodh
 10314 ;; Tracked objects:
 10315 ;;		On entry : 3E/0
 10316 ;;		On exit  : 3F/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10319 ;;      Params:         0       8       0       0       0       0       0
 10320 ;;      Locals:         0      13       0       0       0       0       0
 10321 ;;      Temps:          0       4       0       0       0       0       0
 10322 ;;      Totals:         0      25       0       0       0       0       0
 10323 ;;Total ram usage:       25 bytes
 10324 ;; Hardware stack levels used: 1
 10325 ;; Hardware stack levels required when called: 3
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		_main
 10330 ;;		_efgtoa
 10331 ;;		_sqrtf
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           	psect	text26
 10336  001E70                     __ptext26:
 10337                           	callstack 0
 10338  001E70                     ___flmul:
 10339                           	callstack 26
 10340                           
 10341                           ; BSR set to: 1
 10342                           ;incstack = 0
 10343  001E70  0100               	movlb	0	; () banked
 10344  001E72  5169               	movf	(___flmul@b+3)& (0+255),w,b
 10345  001E74  0B80               	andlw	128
 10346  001E76  6F72               	movwf	___flmul@sign& (0+255),b
 10347  001E78  5169               	movf	(___flmul@b+3)& (0+255),w,b
 10348  001E7A  2569               	addwf	(___flmul@b+3)& (0+255),w,b
 10349  001E7C  6F74               	movwf	___flmul@bexp& (0+255),b
 10350                           
 10351                           ; BSR set to: 0
 10352  001E7E  BF68               	btfsc	(___flmul@b+2)& (0+255),7,b
 10353                           
 10354                           ; BSR set to: 0
 10355  001E80  8174               	bsf	___flmul@bexp& (0+255),0,b
 10356                           
 10357                           ; BSR set to: 0
 10358  001E82  5174               	movf	___flmul@bexp& (0+255),w,b
 10359  001E84  E005               	bz	l1339
 10360                           
 10361                           ; BSR set to: 0
 10362  001E86  2974               	incf	___flmul@bexp& (0+255),w,b
 10363  001E88  E101               	bnz	l8046
 10364                           
 10365                           ; BSR set to: 0
 10366  001E8A  D902               	call	PL200	;call to abstracted procedure
 10367  001E8C                     l8046:
 10368                           
 10369                           ; BSR set to: 0
 10370  001E8C  8F68               	bsf	(___flmul@b+2)& (0+255),7,b
 10371  001E8E  D001               	goto	l8048
 10372  001E90                     l1339:
 10373                           
 10374                           ; BSR set to: 0
 10375  001E90  D8FF               	call	PL200	;call to abstracted procedure
 10376  001E92                     l8048:
 10377                           
 10378                           ; BSR set to: 0
 10379  001E92  516D               	movf	(___flmul@a+3)& (0+255),w,b
 10380  001E94  0B80               	andlw	128
 10381  001E96  1B72               	xorwf	___flmul@sign& (0+255),f,b
 10382  001E98  516D               	movf	(___flmul@a+3)& (0+255),w,b
 10383  001E9A  256D               	addwf	(___flmul@a+3)& (0+255),w,b
 10384  001E9C  6F73               	movwf	___flmul@aexp& (0+255),b
 10385                           
 10386                           ; BSR set to: 0
 10387  001E9E  BF6C               	btfsc	(___flmul@a+2)& (0+255),7,b
 10388                           
 10389                           ; BSR set to: 0
 10390  001EA0  8173               	bsf	___flmul@aexp& (0+255),0,b
 10391                           
 10392                           ; BSR set to: 0
 10393  001EA2  5173               	movf	___flmul@aexp& (0+255),w,b
 10394  001EA4  E005               	bz	l1343
 10395                           
 10396                           ; BSR set to: 0
 10397  001EA6  2973               	incf	___flmul@aexp& (0+255),w,b
 10398  001EA8  E101               	bnz	l8060
 10399                           
 10400                           ; BSR set to: 0
 10401  001EAA  D8ED               	call	PL194	;call to abstracted procedure
 10402  001EAC                     l8060:
 10403                           
 10404                           ; BSR set to: 0
 10405  001EAC  8F6C               	bsf	(___flmul@a+2)& (0+255),7,b
 10406  001EAE  D001               	goto	l8062
 10407  001EB0                     l1343:
 10408                           
 10409                           ; BSR set to: 0
 10410  001EB0  D8EA               	call	PL194	;call to abstracted procedure
 10411  001EB2                     l8062:
 10412                           
 10413                           ; BSR set to: 0
 10414  001EB2  5173               	movf	___flmul@aexp& (0+255),w,b
 10415  001EB4  E002               	bz	u9100
 10416                           
 10417                           ; BSR set to: 0
 10418  001EB6  5174               	movf	___flmul@bexp& (0+255),w,b
 10419  001EB8  E105               	bnz	l8066
 10420  001EBA                     u9100:
 10421                           
 10422                           ; BSR set to: 0
 10423  001EBA  6B66               	clrf	?___flmul& (0+255),b
 10424  001EBC  6B67               	clrf	(?___flmul+1)& (0+255),b
 10425  001EBE  6B68               	clrf	(?___flmul+2)& (0+255),b
 10426  001EC0  6B69               	clrf	(?___flmul+3)& (0+255),b
 10427  001EC2  0012               	return	
 10428  001EC4                     l8066:
 10429                           
 10430                           ; BSR set to: 0
 10431  001EC4  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10432  001EC6  0366               	mulwf	___flmul@b& (0+255),b
 10433                           
 10434                           ; BSR set to: 0
 10435  001EC8  D8B1               	call	PL24	;call to abstracted procedure
 10436  001ECA  6F75               	movwf	___flmul@grs& (0+255),b
 10437  001ECC  6B76               	clrf	(___flmul@grs+1)& (0+255),b
 10438  001ECE  6B77               	clrf	(___flmul@grs+2)& (0+255),b
 10439  001ED0  6B78               	clrf	(___flmul@grs+3)& (0+255),b
 10440                           
 10441                           ; BSR set to: 0
 10442  001ED2  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10443  001ED4  6F79               	movwf	___flmul@prod& (0+255),b
 10444  001ED6  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10445  001ED8  6B7B               	clrf	(___flmul@prod+2)& (0+255),b
 10446  001EDA  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10447  001EDC  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10448  001EDE  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10449                           
 10450                           ; BSR set to: 0
 10451  001EE0  D8A5               	call	PL24	;call to abstracted procedure
 10452                           
 10453                           ; BSR set to: 0
 10454  001EE2  D8B2               	call	PL74	;call to abstracted procedure
 10455  001EE4  516A               	movf	___flmul@a& (0+255),w,b
 10456  001EE6  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10457                           
 10458                           ; BSR set to: 0
 10459  001EE8  D8A1               	call	PL24	;call to abstracted procedure
 10460                           
 10461                           ; BSR set to: 0
 10462  001EEA  D8AE               	call	PL74	;call to abstracted procedure
 10463                           
 10464                           ; BSR set to: 0
 10465  001EEC  D8A5               	call	PL66	;call to abstracted procedure
 10466                           
 10467                           ; BSR set to: 0
 10468  001EEE  516A               	movf	___flmul@a& (0+255),w,b
 10469  001EF0  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10470                           
 10471                           ; BSR set to: 0
 10472  001EF2  D89C               	call	PL24	;call to abstracted procedure
 10473  001EF4  D8B5               	call	PL80	;call to abstracted procedure
 10474                           
 10475                           ; BSR set to: 0
 10476  001EF6  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10477  001EF8  0366               	mulwf	___flmul@b& (0+255),b
 10478                           
 10479                           ; BSR set to: 0
 10480  001EFA  D898               	call	PL24	;call to abstracted procedure
 10481  001EFC  D8B1               	call	PL80	;call to abstracted procedure
 10482                           
 10483                           ; BSR set to: 0
 10484  001EFE  D89C               	call	PL66	;call to abstracted procedure
 10485  001F00  516A               	movf	___flmul@a& (0+255),w,b
 10486  001F02  0366               	mulwf	___flmul@b& (0+255),b
 10487                           
 10488                           ; BSR set to: 0
 10489  001F04  D893               	call	PL24	;call to abstracted procedure
 10490  001F06  D8AC               	call	PL80	;call to abstracted procedure
 10491                           
 10492                           ; BSR set to: 0
 10493  001F08  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10494  001F0A  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10495  001F0C  D88F               	call	PL24	;call to abstracted procedure
 10496  001F0E  D8B4               	call	PL150	;call to abstracted procedure
 10497                           
 10498                           ; BSR set to: 0
 10499  001F10  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10500  001F12  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10501                           
 10502                           ; BSR set to: 0
 10503  001F14  D88B               	call	PL24	;call to abstracted procedure
 10504  001F16  D8B0               	call	PL150	;call to abstracted procedure
 10505  001F18  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10506  001F1A  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10507                           
 10508                           ; BSR set to: 0
 10509  001F1C  D887               	call	PL24	;call to abstracted procedure
 10510  001F1E  6F6E               	movwf	??___flmul& (0+255),b
 10511  001F20  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10512  001F22  6F6F               	movwf	(??___flmul+1)& (0+255),b
 10513  001F24  6B70               	clrf	(??___flmul+2)& (0+255),b
 10514  001F26  6B71               	clrf	(??___flmul+3)& (0+255),b
 10515  001F28  C070  F071         	movff	??___flmul+2,??___flmul+3
 10516  001F2C  C06F  F070         	movff	??___flmul+1,??___flmul+2
 10517  001F30  C06E  F06F         	movff	??___flmul,??___flmul+1
 10518  001F34  6B6E               	clrf	??___flmul& (0+255),b
 10519  001F36  516E               	movf	??___flmul& (0+255),w,b
 10520  001F38  2779               	addwf	___flmul@prod& (0+255),f,b
 10521  001F3A  516F               	movf	(??___flmul+1)& (0+255),w,b
 10522  001F3C  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10523  001F3E  5170               	movf	(??___flmul+2)& (0+255),w,b
 10524  001F40  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10525  001F42  5171               	movf	(??___flmul+3)& (0+255),w,b
 10526  001F44  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10527                           
 10528                           ; BSR set to: 0
 10529  001F46  5178               	movf	(___flmul@grs+3)& (0+255),w,b
 10530  001F48  2779               	addwf	___flmul@prod& (0+255),f,b
 10531  001F4A  D891               	call	PL138	;call to abstracted procedure
 10532                           
 10533                           ; BSR set to: 0
 10534  001F4C  D875               	call	PL66	;call to abstracted procedure
 10535                           
 10536                           ; BSR set to: 0
 10537  001F4E  5173               	movf	___flmul@aexp& (0+255),w,b
 10538  001F50  C074  F06E         	movff	___flmul@bexp,??___flmul
 10539  001F54  6B6F               	clrf	(??___flmul+1)& (0+255),b
 10540  001F56  276E               	addwf	??___flmul& (0+255),f,b
 10541  001F58  0E00               	movlw	0
 10542  001F5A  236F               	addwfc	(??___flmul+1)& (0+255),f,b
 10543  001F5C  0E82               	movlw	130
 10544  001F5E  256E               	addwf	??___flmul& (0+255),w,b
 10545  001F60  6F7D               	movwf	___flmul@temp& (0+255),b
 10546  001F62  0EFF               	movlw	255
 10547  001F64  216F               	addwfc	(??___flmul+1)& (0+255),w,b
 10548  001F66  6F7E               	movwf	(___flmul@temp+1)& (0+255),b
 10549  001F68  D00F               	goto	l8114
 10550  001F6A                     l8108:
 10551                           
 10552                           ; BSR set to: 0
 10553  001F6A  90D8               	bcf	status,0,c
 10554  001F6C  3779               	rlcf	___flmul@prod& (0+255),f,b
 10555  001F6E  377A               	rlcf	(___flmul@prod+1)& (0+255),f,b
 10556  001F70  377B               	rlcf	(___flmul@prod+2)& (0+255),f,b
 10557  001F72  377C               	rlcf	(___flmul@prod+3)& (0+255),f,b
 10558                           
 10559                           ; BSR set to: 0
 10560  001F74  BF78               	btfsc	(___flmul@grs+3)& (0+255),7,b
 10561                           
 10562                           ; BSR set to: 0
 10563  001F76  8179               	bsf	___flmul@prod& (0+255),0,b
 10564                           
 10565                           ; BSR set to: 0
 10566  001F78  90D8               	bcf	status,0,c
 10567  001F7A  3775               	rlcf	___flmul@grs& (0+255),f,b
 10568  001F7C  3776               	rlcf	(___flmul@grs+1)& (0+255),f,b
 10569  001F7E  3777               	rlcf	(___flmul@grs+2)& (0+255),f,b
 10570  001F80  3778               	rlcf	(___flmul@grs+3)& (0+255),f,b
 10571  001F82  077D               	decf	___flmul@temp& (0+255),f,b
 10572  001F84  A0D8               	btfss	status,0,c
 10573  001F86  077E               	decf	(___flmul@temp+1)& (0+255),f,b
 10574  001F88                     l8114:
 10575                           
 10576                           ; BSR set to: 0
 10577  001F88  AF7B               	btfss	(___flmul@prod+2)& (0+255),7,b
 10578  001F8A  D7EF               	goto	l8108
 10579                           
 10580                           ; BSR set to: 0
 10581  001F8C  6B73               	clrf	___flmul@aexp& (0+255),b
 10582  001F8E  AF78               	btfss	(___flmul@grs+3)& (0+255),7,b
 10583  001F90  D013               	goto	l1354
 10584                           
 10585                           ; BSR set to: 0
 10586  001F92  5175               	movf	___flmul@grs& (0+255),w,b
 10587  001F94  6F6E               	movwf	??___flmul& (0+255),b
 10588  001F96  5176               	movf	(___flmul@grs+1)& (0+255),w,b
 10589  001F98  6F6F               	movwf	(??___flmul+1)& (0+255),b
 10590  001F9A  5177               	movf	(___flmul@grs+2)& (0+255),w,b
 10591  001F9C  6F70               	movwf	(??___flmul+2)& (0+255),b
 10592  001F9E  0E7F               	movlw	127
 10593  001FA0  1578               	andwf	(___flmul@grs+3)& (0+255),w,b
 10594  001FA2  6F71               	movwf	(??___flmul+3)& (0+255),b
 10595  001FA4  516E               	movf	??___flmul& (0+255),w,b
 10596  001FA6  116F               	iorwf	(??___flmul+1)& (0+255),w,b
 10597  001FA8  1170               	iorwf	(??___flmul+2)& (0+255),w,b
 10598  001FAA  1171               	iorwf	(??___flmul+3)& (0+255),w,b
 10599  001FAC  E003               	bz	l1355
 10600  001FAE                     u9140:
 10601                           
 10602                           ; BSR set to: 0
 10603  001FAE  0E01               	movlw	1
 10604  001FB0  6F73               	movwf	___flmul@aexp& (0+255),b
 10605  001FB2  D002               	goto	l1354
 10606  001FB4                     l1355:
 10607                           
 10608                           ; BSR set to: 0
 10609  001FB4  B179               	btfsc	___flmul@prod& (0+255),0,b
 10610  001FB6  D7FB               	goto	u9140
 10611  001FB8                     l1354:
 10612                           
 10613                           ; BSR set to: 0
 10614  001FB8  5173               	movf	___flmul@aexp& (0+255),w,b
 10615  001FBA  E00B               	bz	l8130
 10616                           
 10617                           ; BSR set to: 0
 10618  001FBC  2B79               	incf	___flmul@prod& (0+255),f,b
 10619  001FBE  D857               	call	PL138	;call to abstracted procedure
 10620                           
 10621                           ; BSR set to: 0
 10622  001FC0  A17C               	btfss	(___flmul@prod+3)& (0+255),0,b
 10623  001FC2  D007               	goto	l8130
 10624                           
 10625                           ; BSR set to: 0
 10626  001FC4  357C               	rlcf	(___flmul@prod+3)& (0+255),w,b
 10627  001FC6  337C               	rrcf	(___flmul@prod+3)& (0+255),f,b
 10628  001FC8  337B               	rrcf	(___flmul@prod+2)& (0+255),f,b
 10629  001FCA  337A               	rrcf	(___flmul@prod+1)& (0+255),f,b
 10630  001FCC  3379               	rrcf	___flmul@prod& (0+255),f,b
 10631                           
 10632                           ; BSR set to: 0
 10633  001FCE  4B7D               	infsnz	___flmul@temp& (0+255),f,b
 10634  001FD0  2B7E               	incf	(___flmul@temp+1)& (0+255),f,b
 10635  001FD2                     l8130:
 10636                           
 10637                           ; BSR set to: 0
 10638  001FD2  BF7E               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10639  001FD4  D00A               	goto	l8134
 10640  001FD6  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10641  001FD8  E102               	bnz	u9180
 10642  001FDA  297D               	incf	___flmul@temp& (0+255),w,b
 10643  001FDC  E306               	bnc	l8134
 10644  001FDE                     u9180:
 10645                           
 10646                           ; BSR set to: 0
 10647  001FDE  6B79               	clrf	___flmul@prod& (0+255),b
 10648  001FE0  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10649  001FE2  0E80               	movlw	128
 10650  001FE4  6F7B               	movwf	(___flmul@prod+2)& (0+255),b
 10651  001FE6  0E7F               	movlw	127
 10652  001FE8  D015               	goto	L14
 10653  001FEA                     l8134:
 10654                           
 10655                           ; BSR set to: 0
 10656  001FEA  BF7E               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10657  001FEC  D004               	goto	u9190
 10658  001FEE  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10659  001FF0  E108               	bnz	l1362
 10660  001FF2  057D               	decf	___flmul@temp& (0+255),w,b
 10661  001FF4  E206               	bc	l1362
 10662  001FF6                     u9190:
 10663                           
 10664                           ; BSR set to: 0
 10665  001FF6  6B79               	clrf	___flmul@prod& (0+255),b
 10666  001FF8  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10667  001FFA  6B7B               	clrf	(___flmul@prod+2)& (0+255),b
 10668  001FFC  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10669  001FFE  6B72               	clrf	___flmul@sign& (0+255),b
 10670  002000  D00A               	goto	l8146
 10671  002002                     l1362:
 10672                           
 10673                           ; BSR set to: 0
 10674  002002  C07D  F074         	movff	___flmul@temp,___flmul@bexp
 10675                           
 10676                           ; BSR set to: 0
 10677  002006  0E7F               	movlw	127
 10678  002008  177B               	andwf	(___flmul@prod+2)& (0+255),f,b
 10679  00200A  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10680                           
 10681                           ; BSR set to: 0
 10682  00200C  B174               	btfsc	___flmul@bexp& (0+255),0,b
 10683                           
 10684                           ; BSR set to: 0
 10685  00200E  8F7B               	bsf	(___flmul@prod+2)& (0+255),7,b
 10686                           
 10687                           ; BSR set to: 0
 10688  002010  90D8               	bcf	status,0,c
 10689  002012  3174               	rrcf	___flmul@bexp& (0+255),w,b
 10690  002014                     L14:
 10691  002014  6F7C               	movwf	(___flmul@prod+3)& (0+255),b
 10692  002016                     l8146:
 10693                           
 10694                           ; BSR set to: 0
 10695  002016  5172               	movf	___flmul@sign& (0+255),w,b
 10696  002018  137C               	iorwf	(___flmul@prod+3)& (0+255),f,b
 10697                           
 10698                           ; BSR set to: 0
 10699  00201A  C079  F066         	movff	___flmul@prod,?___flmul
 10700  00201E  C07A  F067         	movff	___flmul@prod+1,?___flmul+1
 10701  002022  C07B  F068         	movff	___flmul@prod+2,?___flmul+2
 10702  002026  C07C  F069         	movff	___flmul@prod+3,?___flmul+3
 10703                           
 10704                           ; BSR set to: 0
 10705  00202A  0012               	return		;funcret
 10706  00202C                     __end_of___flmul:
 10707                           	callstack 0
 10708  00202C                     PL24:
 10709                           	callstack 26
 10710  00202C  CFF3 F07D          	movff	prodl,___flmul@temp
 10711  002030  CFF4 F07E          	movff	prodh,___flmul@temp+1
 10712  002034  517D               	movf	___flmul@temp& (0+255),w,b
 10713  002036  0012               	return	
 10714  002038                     __end_ofPL24:
 10715                           	callstack 0
 10716  002038                     PL66:
 10717                           	callstack 26
 10718  002038  C077  F078         	movff	___flmul@grs+2,___flmul@grs+3
 10719  00203C  C076  F077         	movff	___flmul@grs+1,___flmul@grs+2
 10720  002040  C075  F076         	movff	___flmul@grs,___flmul@grs+1
 10721  002044  6B75               	clrf	___flmul@grs& (0+255),b
 10722  002046  0012               	return	
 10723  002048                     __end_ofPL66:
 10724                           	callstack 0
 10725  002048                     PL74:
 10726                           	callstack 26
 10727  002048  2775               	addwf	___flmul@grs& (0+255),f,b
 10728  00204A  0E00               	movlw	0
 10729  00204C  2376               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10730  00204E  2377               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10731  002050  2378               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10732  002052  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10733  002054  2779               	addwf	___flmul@prod& (0+255),f,b
 10734  002056  0E00               	movlw	0
 10735  002058  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10736  00205A  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10737  00205C  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10738  00205E  0C00               	retlw	0
 10739  002060                     __end_ofPL74:
 10740                           	callstack 0
 10741  002060                     PL80:
 10742                           	callstack 26
 10743  002060  2775               	addwf	___flmul@grs& (0+255),f,b
 10744  002062  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10745  002064  2376               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10746  002066  0E00               	movlw	0
 10747  002068  2377               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10748  00206A  2378               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10749  00206C  0C00               	retlw	0
 10750  00206E                     __end_ofPL80:
 10751                           	callstack 0
 10752  00206E                     PL138:
 10753                           	callstack 26
 10754  00206E  0E00               	movlw	0
 10755  002070  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10756  002072  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10757  002074  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10758  002076  0C00               	retlw	0
 10759  002078                     __end_ofPL138:
 10760                           	callstack 0
 10761  002078                     PL150:
 10762                           	callstack 26
 10763  002078  2779               	addwf	___flmul@prod& (0+255),f,b
 10764  00207A  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10765  00207C  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10766  00207E  0E00               	movlw	0
 10767  002080  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10768  002082  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10769  002084  0C00               	retlw	0
 10770  002086                     __end_ofPL150:
 10771                           	callstack 0
 10772  002086                     PL194:
 10773                           	callstack 26
 10774  002086  6B6A               	clrf	___flmul@a& (0+255),b
 10775  002088  6B6B               	clrf	(___flmul@a+1)& (0+255),b
 10776  00208A  6B6C               	clrf	(___flmul@a+2)& (0+255),b
 10777  00208C  6B6D               	clrf	(___flmul@a+3)& (0+255),b
 10778  00208E  0012               	return	
 10779  002090                     __end_ofPL194:
 10780                           	callstack 0
 10781  002090                     PL200:
 10782                           	callstack 26
 10783  002090  6B66               	clrf	___flmul@b& (0+255),b
 10784  002092  6B67               	clrf	(___flmul@b+1)& (0+255),b
 10785  002094  6B68               	clrf	(___flmul@b+2)& (0+255),b
 10786  002096  6B69               	clrf	(___flmul@b+3)& (0+255),b
 10787  002098  0012               	return	
 10788  00209A                     __end_ofPL200:
 10789                           	callstack 0
 10790                           
 10791 ;; *************** function ___flge *****************
 10792 ;; Defined at:
 10793 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flge.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  ff1             4   31[BANK0 ] unsigned char 
 10796 ;;  ff2             4   35[BANK0 ] unsigned char 
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;		None
 10799 ;; Return value:  Size  Location     Type
 10800 ;;		None               void
 10801 ;; Registers used:
 10802 ;;		wreg, status,2, status,0
 10803 ;; Tracked objects:
 10804 ;;		On entry : 3E/0
 10805 ;;		On exit  : 3F/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10808 ;;      Params:         0       8       0       0       0       0       0
 10809 ;;      Locals:         0       0       0       0       0       0       0
 10810 ;;      Temps:          0       4       0       0       0       0       0
 10811 ;;      Totals:         0      12       0       0       0       0       0
 10812 ;;Total ram usage:       12 bytes
 10813 ;; Hardware stack levels used: 1
 10814 ;; Hardware stack levels required when called: 3
 10815 ;; This function calls:
 10816 ;;		Nothing
 10817 ;; This function is called by:
 10818 ;;		_efgtoa
 10819 ;;		_sqrtf
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           	psect	text27
 10824  003386                     __ptext27:
 10825                           	callstack 0
 10826  003386                     ___flge:
 10827                           	callstack 26
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;incstack = 0
 10831  003386  0100               	movlb	0	; () banked
 10832  003388  6B87               	clrf	??___flge& (0+255),b
 10833  00338A  6B88               	clrf	(??___flge+1)& (0+255),b
 10834  00338C  0E80               	movlw	128
 10835  00338E  1581               	andwf	(___flge@ff1+2)& (0+255),w,b
 10836  003390  6F89               	movwf	(??___flge+2)& (0+255),b
 10837  003392  0E7F               	movlw	127
 10838  003394  1582               	andwf	(___flge@ff1+3)& (0+255),w,b
 10839  003396  D838               	call	PL178	;call to abstracted procedure
 10840  003398  E104               	bnz	l8258
 10841                           
 10842                           ; BSR set to: 0
 10843  00339A  6B7F               	clrf	___flge@ff1& (0+255),b
 10844  00339C  6B80               	clrf	(___flge@ff1+1)& (0+255),b
 10845  00339E  6B81               	clrf	(___flge@ff1+2)& (0+255),b
 10846  0033A0  6B82               	clrf	(___flge@ff1+3)& (0+255),b
 10847  0033A2                     l8258:
 10848                           
 10849                           ; BSR set to: 0
 10850  0033A2  6B87               	clrf	??___flge& (0+255),b
 10851  0033A4  6B88               	clrf	(??___flge+1)& (0+255),b
 10852  0033A6  0E80               	movlw	128
 10853  0033A8  1585               	andwf	(___flge@ff2+2)& (0+255),w,b
 10854  0033AA  6F89               	movwf	(??___flge+2)& (0+255),b
 10855  0033AC  0E7F               	movlw	127
 10856  0033AE  1586               	andwf	(___flge@ff2+3)& (0+255),w,b
 10857  0033B0  D82B               	call	PL178	;call to abstracted procedure
 10858  0033B2  E104               	bnz	l994
 10859                           
 10860                           ; BSR set to: 0
 10861  0033B4  6B83               	clrf	___flge@ff2& (0+255),b
 10862  0033B6  6B84               	clrf	(___flge@ff2+1)& (0+255),b
 10863  0033B8  6B85               	clrf	(___flge@ff2+2)& (0+255),b
 10864  0033BA  6B86               	clrf	(___flge@ff2+3)& (0+255),b
 10865  0033BC                     l994:
 10866                           
 10867                           ; BSR set to: 0
 10868  0033BC  AF82               	btfss	(___flge@ff1+3)& (0+255),7,b
 10869  0033BE  D009               	goto	l8264
 10870                           
 10871                           ; BSR set to: 0
 10872  0033C0  6D7F               	negf	___flge@ff1& (0+255),b
 10873  0033C2  1F80               	comf	(___flge@ff1+1)& (0+255),f,b
 10874  0033C4  B0D8               	btfsc	status,0,c
 10875  0033C6  2B80               	incf	(___flge@ff1+1)& (0+255),f,b
 10876  0033C8  1F81               	comf	(___flge@ff1+2)& (0+255),f,b
 10877  0033CA  B0D8               	btfsc	status,0,c
 10878  0033CC  2B81               	incf	(___flge@ff1+2)& (0+255),f,b
 10879  0033CE  0E80               	movlw	128
 10880  0033D0  5782               	subfwb	(___flge@ff1+3)& (0+255),f,b
 10881  0033D2                     l8264:
 10882                           
 10883                           ; BSR set to: 0
 10884  0033D2  AF86               	btfss	(___flge@ff2+3)& (0+255),7,b
 10885  0033D4  D009               	goto	l996
 10886                           
 10887                           ; BSR set to: 0
 10888  0033D6  6D83               	negf	___flge@ff2& (0+255),b
 10889  0033D8  1F84               	comf	(___flge@ff2+1)& (0+255),f,b
 10890  0033DA  B0D8               	btfsc	status,0,c
 10891  0033DC  2B84               	incf	(___flge@ff2+1)& (0+255),f,b
 10892  0033DE  1F85               	comf	(___flge@ff2+2)& (0+255),f,b
 10893  0033E0  B0D8               	btfsc	status,0,c
 10894  0033E2  2B85               	incf	(___flge@ff2+2)& (0+255),f,b
 10895  0033E4  0E80               	movlw	128
 10896  0033E6  5786               	subfwb	(___flge@ff2+3)& (0+255),f,b
 10897  0033E8                     l996:
 10898                           
 10899                           ; BSR set to: 0
 10900  0033E8  0E80               	movlw	128
 10901  0033EA  1B82               	xorwf	(___flge@ff1+3)& (0+255),f,b
 10902  0033EC  1B86               	xorwf	(___flge@ff2+3)& (0+255),f,b
 10903  0033EE  5183               	movf	___flge@ff2& (0+255),w,b
 10904  0033F0  5D7F               	subwf	___flge@ff1& (0+255),w,b
 10905  0033F2  5184               	movf	(___flge@ff2+1)& (0+255),w,b
 10906  0033F4  5980               	subwfb	(___flge@ff1+1)& (0+255),w,b
 10907  0033F6  5185               	movf	(___flge@ff2+2)& (0+255),w,b
 10908  0033F8  5981               	subwfb	(___flge@ff1+2)& (0+255),w,b
 10909  0033FA  5186               	movf	(___flge@ff2+3)& (0+255),w,b
 10910  0033FC  5982               	subwfb	(___flge@ff1+3)& (0+255),w,b
 10911  0033FE  E202               	bc	l8270
 10912                           
 10913                           ; BSR set to: 0
 10914  003400  90D8               	bcf	status,0,c
 10915  003402  0012               	return	
 10916  003404                     l8270:
 10917                           
 10918                           ; BSR set to: 0
 10919  003404  80D8               	bsf	status,0,c
 10920                           
 10921                           ; BSR set to: 0
 10922  003406  0012               	return		;funcret
 10923  003408                     __end_of___flge:
 10924                           	callstack 0
 10925  003408                     PL178:
 10926                           	callstack 26
 10927  003408  6F8A               	movwf	(??___flge+3)& (0+255),b
 10928  00340A  5187               	movf	??___flge& (0+255),w,b
 10929  00340C  1188               	iorwf	(??___flge+1)& (0+255),w,b
 10930  00340E  1189               	iorwf	(??___flge+2)& (0+255),w,b
 10931  003410  118A               	iorwf	(??___flge+3)& (0+255),w,b
 10932  003412  0012               	return	
 10933  003414                     __end_ofPL178:
 10934                           	callstack 0
 10935                           
 10936 ;; *************** function ___fleq *****************
 10937 ;; Defined at:
 10938 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fleq.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  ff1             4   26[COMRAM] unsigned char 
 10941 ;;  ff2             4   30[COMRAM] unsigned char 
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;		None
 10944 ;; Return value:  Size  Location     Type
 10945 ;;		None               void
 10946 ;; Registers used:
 10947 ;;		wreg, status,2, status,0
 10948 ;; Tracked objects:
 10949 ;;		On entry : 3E/1
 10950 ;;		On exit  : 3F/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10953 ;;      Params:         8       0       0       0       0       0       0
 10954 ;;      Locals:         0       0       0       0       0       0       0
 10955 ;;      Temps:          0       4       0       0       0       0       0
 10956 ;;      Totals:         8       4       0       0       0       0       0
 10957 ;;Total ram usage:       12 bytes
 10958 ;; Hardware stack levels used: 1
 10959 ;; Hardware stack levels required when called: 3
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_efgtoa
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text28
 10968  003708                     __ptext28:
 10969                           	callstack 0
 10970  003708                     ___fleq:
 10971                           	callstack 23
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;incstack = 0
 10975  003708  0100               	movlb	0	; () banked
 10976  00370A  6B60               	clrf	??___fleq& (0+255),b
 10977  00370C  6B61               	clrf	(??___fleq+1)& (0+255),b
 10978  00370E  0E80               	movlw	128
 10979  003710  141D               	andwf	(___fleq@ff1+2)^0,w,c
 10980  003712  6F62               	movwf	(??___fleq+2)& (0+255),b
 10981  003714  0E7F               	movlw	127
 10982  003716  141E               	andwf	(___fleq@ff1+3)^0,w,c
 10983  003718  D820               	call	PL170	;call to abstracted procedure
 10984  00371A  E104               	bnz	l8242
 10985                           
 10986                           ; BSR set to: 0
 10987  00371C  6A1B               	clrf	___fleq@ff1^0,c
 10988  00371E  6A1C               	clrf	(___fleq@ff1+1)^0,c
 10989  003720  6A1D               	clrf	(___fleq@ff1+2)^0,c
 10990  003722  6A1E               	clrf	(___fleq@ff1+3)^0,c
 10991  003724                     l8242:
 10992                           
 10993                           ; BSR set to: 0
 10994  003724  6B60               	clrf	??___fleq& (0+255),b
 10995  003726  6B61               	clrf	(??___fleq+1)& (0+255),b
 10996  003728  0E80               	movlw	128
 10997  00372A  1421               	andwf	(___fleq@ff2+2)^0,w,c
 10998  00372C  6F62               	movwf	(??___fleq+2)& (0+255),b
 10999  00372E  0E7F               	movlw	127
 11000  003730  1422               	andwf	(___fleq@ff2+3)^0,w,c
 11001  003732  D813               	call	PL170	;call to abstracted procedure
 11002  003734  E102               	bnz	l8246
 11003                           
 11004                           ; BSR set to: 0
 11005  003736  EC9B  F008         	call	PL204	;call to abstracted procedure
 11006  00373A                     l8246:
 11007                           
 11008                           ; BSR set to: 0
 11009  00373A  501F               	movf	___fleq@ff2^0,w,c
 11010  00373C  181B               	xorwf	___fleq@ff1^0,w,c
 11011  00373E  E109               	bnz	u9350
 11012  003740  5020               	movf	(___fleq@ff2+1)^0,w,c
 11013  003742  181C               	xorwf	(___fleq@ff1+1)^0,w,c
 11014  003744  E106               	bnz	u9350
 11015  003746  5021               	movf	(___fleq@ff2+2)^0,w,c
 11016  003748  181D               	xorwf	(___fleq@ff1+2)^0,w,c
 11017  00374A  E103               	bnz	u9350
 11018  00374C  5022               	movf	(___fleq@ff2+3)^0,w,c
 11019  00374E  181E               	xorwf	(___fleq@ff1+3)^0,w,c
 11020  003750  E002               	bz	l8250
 11021  003752                     u9350:
 11022                           
 11023                           ; BSR set to: 0
 11024  003752  90D8               	bcf	status,0,c
 11025  003754  0012               	return	
 11026  003756                     l8250:
 11027                           
 11028                           ; BSR set to: 0
 11029  003756  80D8               	bsf	status,0,c
 11030                           
 11031                           ; BSR set to: 0
 11032  003758  0012               	return		;funcret
 11033  00375A                     __end_of___fleq:
 11034                           	callstack 0
 11035  00375A                     PL170:
 11036                           	callstack 23
 11037  00375A  6F63               	movwf	(??___fleq+3)& (0+255),b
 11038  00375C  5160               	movf	??___fleq& (0+255),w,b
 11039  00375E  1161               	iorwf	(??___fleq+1)& (0+255),w,b
 11040  003760  1162               	iorwf	(??___fleq+2)& (0+255),w,b
 11041  003762  1163               	iorwf	(??___fleq+3)& (0+255),w,b
 11042  003764  0012               	return	
 11043  003766                     __end_ofPL170:
 11044                           	callstack 0
 11045                           
 11046 ;; *************** function ___fldiv *****************
 11047 ;; Defined at:
 11048 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcdiv.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  b               4    6[BANK0 ] unsigned char 
 11051 ;;  a               4   10[BANK0 ] unsigned char 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  grs             4   25[BANK0 ] unsigned long 
 11054 ;;  rem             4   18[BANK0 ] unsigned long 
 11055 ;;  new_exp         2   23[BANK0 ] short 
 11056 ;;  aexp            1   30[BANK0 ] unsigned char 
 11057 ;;  bexp            1   29[BANK0 ] unsigned char 
 11058 ;;  sign            1   22[BANK0 ] unsigned char 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  4    6[BANK0 ] unsigned char 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0
 11063 ;; Tracked objects:
 11064 ;;		On entry : 3E/0
 11065 ;;		On exit  : 3F/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11068 ;;      Params:         0       8       0       0       0       0       0
 11069 ;;      Locals:         0      13       0       0       0       0       0
 11070 ;;      Temps:          0       4       0       0       0       0       0
 11071 ;;      Totals:         0      25       0       0       0       0       0
 11072 ;;Total ram usage:       25 bytes
 11073 ;; Hardware stack levels used: 1
 11074 ;; Hardware stack levels required when called: 3
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_main
 11079 ;;		_efgtoa
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           	psect	text29
 11084  00209A                     __ptext29:
 11085                           	callstack 0
 11086  00209A                     ___fldiv:
 11087                           	callstack 23
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;incstack = 0
 11091  00209A  0100               	movlb	0	; () banked
 11092  00209C  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 11093  00209E  0B80               	andlw	128
 11094  0020A0  6F76               	movwf	___fldiv@sign& (0+255),b
 11095  0020A2  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 11096  0020A4  2569               	addwf	(___fldiv@b+3)& (0+255),w,b
 11097  0020A6  6F7D               	movwf	___fldiv@bexp& (0+255),b
 11098                           
 11099                           ; BSR set to: 0
 11100  0020A8  BF68               	btfsc	(___fldiv@b+2)& (0+255),7,b
 11101                           
 11102                           ; BSR set to: 0
 11103  0020AA  817D               	bsf	___fldiv@bexp& (0+255),0,b
 11104                           
 11105                           ; BSR set to: 0
 11106  0020AC  517D               	movf	___fldiv@bexp& (0+255),w,b
 11107  0020AE  E005               	bz	l1305
 11108                           
 11109                           ; BSR set to: 0
 11110  0020B0  297D               	incf	___fldiv@bexp& (0+255),w,b
 11111  0020B2  E101               	bnz	l7926
 11112                           
 11113                           ; BSR set to: 0
 11114  0020B4  D8D0               	call	PL86	;call to abstracted procedure
 11115  0020B6                     l7926:
 11116                           
 11117                           ; BSR set to: 0
 11118  0020B6  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 11119  0020B8  D003               	goto	L15
 11120  0020BA                     l1305:
 11121                           
 11122                           ; BSR set to: 0
 11123  0020BA  6B66               	clrf	___fldiv@b& (0+255),b
 11124  0020BC  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 11125  0020BE  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 11126  0020C0                     L15:
 11127  0020C0  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 11128                           
 11129                           ; BSR set to: 0
 11130  0020C2  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11131  0020C4  0B80               	andlw	128
 11132  0020C6  1B76               	xorwf	___fldiv@sign& (0+255),f,b
 11133  0020C8  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11134  0020CA  256D               	addwf	(___fldiv@a+3)& (0+255),w,b
 11135  0020CC  6F7E               	movwf	___fldiv@aexp& (0+255),b
 11136                           
 11137                           ; BSR set to: 0
 11138  0020CE  BF6C               	btfsc	(___fldiv@a+2)& (0+255),7,b
 11139                           
 11140                           ; BSR set to: 0
 11141  0020D0  817E               	bsf	___fldiv@aexp& (0+255),0,b
 11142                           
 11143                           ; BSR set to: 0
 11144  0020D2  517E               	movf	___fldiv@aexp& (0+255),w,b
 11145  0020D4  E008               	bz	l1309
 11146                           
 11147                           ; BSR set to: 0
 11148  0020D6  297E               	incf	___fldiv@aexp& (0+255),w,b
 11149  0020D8  E104               	bnz	l7942
 11150                           
 11151                           ; BSR set to: 0
 11152  0020DA  6B6A               	clrf	___fldiv@a& (0+255),b
 11153  0020DC  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 11154  0020DE  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 11155  0020E0  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 11156  0020E2                     l7942:
 11157                           
 11158                           ; BSR set to: 0
 11159  0020E2  8F6C               	bsf	(___fldiv@a+2)& (0+255),7,b
 11160  0020E4  D003               	goto	L16
 11161  0020E6                     l1309:
 11162                           
 11163                           ; BSR set to: 0
 11164  0020E6  6B6A               	clrf	___fldiv@a& (0+255),b
 11165  0020E8  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 11166  0020EA  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 11167  0020EC                     L16:
 11168  0020EC  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 11169                           
 11170                           ; BSR set to: 0
 11171  0020EE  516A               	movf	___fldiv@a& (0+255),w,b
 11172  0020F0  116B               	iorwf	(___fldiv@a+1)& (0+255),w,b
 11173  0020F2  116C               	iorwf	(___fldiv@a+2)& (0+255),w,b
 11174  0020F4  116D               	iorwf	(___fldiv@a+3)& (0+255),w,b
 11175  0020F6  E110               	bnz	l7956
 11176                           
 11177                           ; BSR set to: 0
 11178  0020F8  D8AE               	call	PL86	;call to abstracted procedure
 11179                           
 11180                           ; BSR set to: 0
 11181  0020FA  0E80               	movlw	128
 11182  0020FC  1368               	iorwf	(___fldiv@b+2)& (0+255),f,b
 11183  0020FE  0E7F               	movlw	127
 11184  002100  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11185  002102  5176               	movf	___fldiv@sign& (0+255),w,b
 11186  002104  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11187                           
 11188                           ; BSR set to: 0
 11189  002106  C066  F066         	movff	___fldiv@b,?___fldiv
 11190  00210A  C067  F067         	movff	___fldiv@b+1,?___fldiv+1
 11191  00210E  C068  F068         	movff	___fldiv@b+2,?___fldiv+2
 11192  002112  C069  F069         	movff	___fldiv@b+3,?___fldiv+3
 11193  002116  0012               	return	
 11194  002118                     l7956:
 11195                           
 11196                           ; BSR set to: 0
 11197  002118  517D               	movf	___fldiv@bexp& (0+255),w,b
 11198  00211A  E105               	bnz	l7960
 11199                           
 11200                           ; BSR set to: 0
 11201  00211C  6B66               	clrf	?___fldiv& (0+255),b
 11202  00211E  6B67               	clrf	(?___fldiv+1)& (0+255),b
 11203  002120  6B68               	clrf	(?___fldiv+2)& (0+255),b
 11204  002122  6B69               	clrf	(?___fldiv+3)& (0+255),b
 11205  002124  0012               	return	
 11206  002126                     l7960:
 11207                           
 11208                           ; BSR set to: 0
 11209  002126  517E               	movf	___fldiv@aexp& (0+255),w,b
 11210  002128  C07D  F06E         	movff	___fldiv@bexp,??___fldiv
 11211  00212C  6B6F               	clrf	(??___fldiv+1)& (0+255),b
 11212  00212E  5F6E               	subwf	??___fldiv& (0+255),f,b
 11213  002130  0E00               	movlw	0
 11214  002132  5B6F               	subwfb	(??___fldiv+1)& (0+255),f,b
 11215  002134  0E7F               	movlw	127
 11216  002136  256E               	addwf	??___fldiv& (0+255),w,b
 11217  002138  6F77               	movwf	___fldiv@new_exp& (0+255),b
 11218  00213A  0E00               	movlw	0
 11219  00213C  216F               	addwfc	(??___fldiv+1)& (0+255),w,b
 11220  00213E  6F78               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11221                           
 11222                           ; BSR set to: 0
 11223  002140  C066  F072         	movff	___fldiv@b,___fldiv@rem
 11224  002144  C067  F073         	movff	___fldiv@b+1,___fldiv@rem+1
 11225  002148  C068  F074         	movff	___fldiv@b+2,___fldiv@rem+2
 11226  00214C  C069  F075         	movff	___fldiv@b+3,___fldiv@rem+3
 11227                           
 11228                           ; BSR set to: 0
 11229  002150  D882               	call	PL86	;call to abstracted procedure
 11230                           
 11231                           ; BSR set to: 0
 11232  002152  6B79               	clrf	___fldiv@grs& (0+255),b
 11233  002154  6B7A               	clrf	(___fldiv@grs+1)& (0+255),b
 11234  002156  6B7B               	clrf	(___fldiv@grs+2)& (0+255),b
 11235  002158  6B7C               	clrf	(___fldiv@grs+3)& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238  00215A  6B7E               	clrf	___fldiv@aexp& (0+255),b
 11239  00215C  D01B               	goto	l1315
 11240  00215E                     l7970:
 11241                           
 11242                           ; BSR set to: 0
 11243  00215E  517E               	movf	___fldiv@aexp& (0+255),w,b
 11244  002160  E006               	bz	l7978
 11245                           
 11246                           ; BSR set to: 0
 11247  002162  90D8               	bcf	status,0,c
 11248  002164  3772               	rlcf	___fldiv@rem& (0+255),f,b
 11249  002166  3773               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 11250  002168  3774               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 11251  00216A  3775               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 11252                           
 11253                           ; BSR set to: 0
 11254                           
 11255                           ; BSR set to: 0
 11256                           
 11257                           ; BSR set to: 0
 11258  00216C  D867               	call	PL64	;call to abstracted procedure
 11259  00216E                     l7978:
 11260                           
 11261                           ; BSR set to: 0
 11262  00216E  516A               	movf	___fldiv@a& (0+255),w,b
 11263  002170  5D72               	subwf	___fldiv@rem& (0+255),w,b
 11264  002172  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 11265  002174  5973               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 11266  002176  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 11267  002178  5974               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 11268  00217A  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11269  00217C  5975               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 11270  00217E  E309               	bnc	l7984
 11271                           
 11272                           ; BSR set to: 0
 11273  002180  8D7C               	bsf	(___fldiv@grs+3)& (0+255),6,b
 11274                           
 11275                           ; BSR set to: 0
 11276  002182  516A               	movf	___fldiv@a& (0+255),w,b
 11277  002184  5F72               	subwf	___fldiv@rem& (0+255),f,b
 11278  002186  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 11279  002188  5B73               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 11280  00218A  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 11281  00218C  5B74               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 11282  00218E  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11283  002190  5B75               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 11284  002192                     l7984:
 11285                           
 11286                           ; BSR set to: 0
 11287  002192  2B7E               	incf	___fldiv@aexp& (0+255),f,b
 11288  002194                     l1315:
 11289                           
 11290                           ; BSR set to: 0
 11291  002194  0E19               	movlw	25
 11292  002196  657E               	cpfsgt	___fldiv@aexp& (0+255),b
 11293  002198  D7E2               	goto	l7970
 11294                           
 11295                           ; BSR set to: 0
 11296  00219A  5172               	movf	___fldiv@rem& (0+255),w,b
 11297  00219C  1173               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 11298  00219E  1174               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 11299  0021A0  1175               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 11300  0021A2  E006               	bz	l7996
 11301                           
 11302                           ; BSR set to: 0
 11303  0021A4  8179               	bsf	___fldiv@grs& (0+255),0,b
 11304  0021A6  D004               	goto	l7996
 11305  0021A8                     l7990:
 11306                           
 11307                           ; BSR set to: 0
 11308                           
 11309                           ; BSR set to: 0
 11310                           
 11311                           ; BSR set to: 0
 11312                           
 11313                           ; BSR set to: 0
 11314  0021A8  D849               	call	PL64	;call to abstracted procedure
 11315  0021AA  0777               	decf	___fldiv@new_exp& (0+255),f,b
 11316  0021AC  A0D8               	btfss	status,0,c
 11317  0021AE  0778               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 11318  0021B0                     l7996:
 11319                           
 11320                           ; BSR set to: 0
 11321  0021B0  AF68               	btfss	(___fldiv@b+2)& (0+255),7,b
 11322  0021B2  D7FA               	goto	l7990
 11323                           
 11324                           ; BSR set to: 0
 11325  0021B4  6B7E               	clrf	___fldiv@aexp& (0+255),b
 11326  0021B6  AF7C               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11327  0021B8  D013               	goto	l1326
 11328                           
 11329                           ; BSR set to: 0
 11330  0021BA  5179               	movf	___fldiv@grs& (0+255),w,b
 11331  0021BC  6F6E               	movwf	??___fldiv& (0+255),b
 11332  0021BE  517A               	movf	(___fldiv@grs+1)& (0+255),w,b
 11333  0021C0  6F6F               	movwf	(??___fldiv+1)& (0+255),b
 11334  0021C2  517B               	movf	(___fldiv@grs+2)& (0+255),w,b
 11335  0021C4  6F70               	movwf	(??___fldiv+2)& (0+255),b
 11336  0021C6  0E7F               	movlw	127
 11337  0021C8  157C               	andwf	(___fldiv@grs+3)& (0+255),w,b
 11338  0021CA  6F71               	movwf	(??___fldiv+3)& (0+255),b
 11339  0021CC  516E               	movf	??___fldiv& (0+255),w,b
 11340  0021CE  116F               	iorwf	(??___fldiv+1)& (0+255),w,b
 11341  0021D0  1170               	iorwf	(??___fldiv+2)& (0+255),w,b
 11342  0021D2  1171               	iorwf	(??___fldiv+3)& (0+255),w,b
 11343  0021D4  E003               	bz	l1327
 11344  0021D6                     u8960:
 11345                           
 11346                           ; BSR set to: 0
 11347  0021D6  0E01               	movlw	1
 11348  0021D8  6F7E               	movwf	___fldiv@aexp& (0+255),b
 11349  0021DA  D002               	goto	l1326
 11350  0021DC                     l1327:
 11351                           
 11352                           ; BSR set to: 0
 11353  0021DC  B166               	btfsc	___fldiv@b& (0+255),0,b
 11354  0021DE  D7FB               	goto	u8960
 11355  0021E0                     l1326:
 11356                           
 11357                           ; BSR set to: 0
 11358  0021E0  517E               	movf	___fldiv@aexp& (0+255),w,b
 11359  0021E2  E00E               	bz	l8012
 11360                           
 11361                           ; BSR set to: 0
 11362  0021E4  2B66               	incf	___fldiv@b& (0+255),f,b
 11363  0021E6  0E00               	movlw	0
 11364  0021E8  2367               	addwfc	(___fldiv@b+1)& (0+255),f,b
 11365  0021EA  2368               	addwfc	(___fldiv@b+2)& (0+255),f,b
 11366  0021EC  2369               	addwfc	(___fldiv@b+3)& (0+255),f,b
 11367                           
 11368                           ; BSR set to: 0
 11369  0021EE  A169               	btfss	(___fldiv@b+3)& (0+255),0,b
 11370  0021F0  D007               	goto	l8012
 11371                           
 11372                           ; BSR set to: 0
 11373  0021F2  3569               	rlcf	(___fldiv@b+3)& (0+255),w,b
 11374  0021F4  3369               	rrcf	(___fldiv@b+3)& (0+255),f,b
 11375  0021F6  3368               	rrcf	(___fldiv@b+2)& (0+255),f,b
 11376  0021F8  3367               	rrcf	(___fldiv@b+1)& (0+255),f,b
 11377  0021FA  3366               	rrcf	___fldiv@b& (0+255),f,b
 11378                           
 11379                           ; BSR set to: 0
 11380  0021FC  4B77               	infsnz	___fldiv@new_exp& (0+255),f,b
 11381  0021FE  2B78               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 11382  002200                     l8012:
 11383                           
 11384                           ; BSR set to: 0
 11385  002200  BF78               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11386  002202  D007               	goto	l8018
 11387  002204  5178               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11388  002206  E102               	bnz	u9000
 11389  002208  2977               	incf	___fldiv@new_exp& (0+255),w,b
 11390  00220A  E303               	bnc	l8018
 11391  00220C                     u9000:
 11392                           
 11393                           ; BSR set to: 0
 11394  00220C  6B78               	clrf	(___fldiv@new_exp+1)& (0+255),b
 11395  00220E  6977               	setf	___fldiv@new_exp& (0+255),b
 11396                           
 11397                           ; BSR set to: 0
 11398  002210  D822               	call	PL86	;call to abstracted procedure
 11399  002212                     l8018:
 11400                           
 11401                           ; BSR set to: 0
 11402  002212  BF78               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11403  002214  D004               	goto	u9010
 11404  002216  5178               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11405  002218  E106               	bnz	l1333
 11406  00221A  0577               	decf	___fldiv@new_exp& (0+255),w,b
 11407  00221C  E204               	bc	l1333
 11408  00221E                     u9010:
 11409                           
 11410                           ; BSR set to: 0
 11411  00221E  6B77               	clrf	___fldiv@new_exp& (0+255),b
 11412  002220  6B78               	clrf	(___fldiv@new_exp+1)& (0+255),b
 11413  002222  D819               	call	PL86	;call to abstracted procedure
 11414  002224  6B76               	clrf	___fldiv@sign& (0+255),b
 11415  002226                     l1333:
 11416                           
 11417                           ; BSR set to: 0
 11418  002226  C077  F07D         	movff	___fldiv@new_exp,___fldiv@bexp
 11419  00222A  A17D               	btfss	___fldiv@bexp& (0+255),0,b
 11420  00222C  D002               	goto	l8024
 11421                           
 11422                           ; BSR set to: 0
 11423  00222E  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 11424  002230  D001               	goto	l8026
 11425  002232                     l8024:
 11426                           
 11427                           ; BSR set to: 0
 11428  002232  9F68               	bcf	(___fldiv@b+2)& (0+255),7,b
 11429  002234                     l8026:
 11430                           
 11431                           ; BSR set to: 0
 11432  002234  90D8               	bcf	status,0,c
 11433  002236  317D               	rrcf	___fldiv@bexp& (0+255),w,b
 11434  002238  6F69               	movwf	(___fldiv@b+3)& (0+255),b
 11435  00223A  D763               	goto	L17
 11436  00223C                     __end_of___fldiv:
 11437                           	callstack 0
 11438  00223C                     PL64:
 11439                           	callstack 23
 11440  00223C  90D8               	bcf	status,0,c
 11441  00223E  3766               	rlcf	___fldiv@b& (0+255),f,b
 11442  002240  3767               	rlcf	(___fldiv@b+1)& (0+255),f,b
 11443  002242  3768               	rlcf	(___fldiv@b+2)& (0+255),f,b
 11444  002244  3769               	rlcf	(___fldiv@b+3)& (0+255),f,b
 11445  002246  BF7C               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 11446  002248  8166               	bsf	___fldiv@b& (0+255),0,b
 11447  00224A  90D8               	bcf	status,0,c
 11448  00224C  3779               	rlcf	___fldiv@grs& (0+255),f,b
 11449  00224E  377A               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 11450  002250  377B               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 11451  002252  377C               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 11452  002254  0012               	return	
 11453  002256                     __end_ofPL64:
 11454                           	callstack 0
 11455  002256                     PL86:
 11456                           	callstack 23
 11457  002256  6B66               	clrf	___fldiv@b& (0+255),b
 11458  002258  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 11459  00225A  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 11460  00225C  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 11461  00225E  0012               	return	
 11462  002260                     __end_ofPL86:
 11463                           	callstack 0
 11464                           
 11465 ;; *************** function ___awmod *****************
 11466 ;; Defined at:
 11467 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  dividend        2   26[COMRAM] int 
 11470 ;;  divisor         2   28[COMRAM] int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  sign            1   31[COMRAM] unsigned char 
 11473 ;;  counter         1   30[COMRAM] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  2   26[COMRAM] int 
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 3F/1
 11480 ;;		On exit  : 3F/1
 11481 ;;		Unchanged: 3F/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11483 ;;      Params:         4       0       0       0       0       0       0
 11484 ;;      Locals:         2       0       0       0       0       0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0
 11486 ;;      Totals:         6       0       0       0       0       0       0
 11487 ;;Total ram usage:        6 bytes
 11488 ;; Hardware stack levels used: 1
 11489 ;; Hardware stack levels required when called: 3
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_efgtoa
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text30
 11498  0036A0                     __ptext30:
 11499                           	callstack 0
 11500  0036A0                     ___awmod:
 11501                           	callstack 23
 11502                           
 11503                           ; BSR set to: 1
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;incstack = 0
 11507  0036A0  6A20               	clrf	___awmod@sign^0,c
 11508                           
 11509                           ; BSR set to: 1
 11510  0036A2  AE1C               	btfss	(___awmod@dividend+1)^0,7,c
 11511  0036A4  D006               	goto	l8210
 11512                           
 11513                           ; BSR set to: 1
 11514  0036A6  6C1B               	negf	___awmod@dividend^0,c
 11515  0036A8  1E1C               	comf	(___awmod@dividend+1)^0,f,c
 11516  0036AA  B0D8               	btfsc	status,0,c
 11517  0036AC  2A1C               	incf	(___awmod@dividend+1)^0,f,c
 11518                           
 11519                           ; BSR set to: 1
 11520  0036AE  0E01               	movlw	1
 11521  0036B0  6E20               	movwf	___awmod@sign^0,c
 11522  0036B2                     l8210:
 11523                           
 11524                           ; BSR set to: 1
 11525  0036B2  AE1E               	btfss	(___awmod@divisor+1)^0,7,c
 11526  0036B4  D004               	goto	l8214
 11527                           
 11528                           ; BSR set to: 1
 11529  0036B6  6C1D               	negf	___awmod@divisor^0,c
 11530  0036B8  1E1E               	comf	(___awmod@divisor+1)^0,f,c
 11531  0036BA  B0D8               	btfsc	status,0,c
 11532  0036BC  2A1E               	incf	(___awmod@divisor+1)^0,f,c
 11533  0036BE                     l8214:
 11534                           
 11535                           ; BSR set to: 1
 11536  0036BE  501D               	movf	___awmod@divisor^0,w,c
 11537  0036C0  101E               	iorwf	(___awmod@divisor+1)^0,w,c
 11538  0036C2  E017               	bz	l8230
 11539                           
 11540                           ; BSR set to: 1
 11541  0036C4  0E01               	movlw	1
 11542  0036C6  6E1F               	movwf	___awmod@counter^0,c
 11543  0036C8  D004               	goto	l8220
 11544  0036CA                     l8218:
 11545                           
 11546                           ; BSR set to: 1
 11547  0036CA  90D8               	bcf	status,0,c
 11548  0036CC  361D               	rlcf	___awmod@divisor^0,f,c
 11549  0036CE  361E               	rlcf	(___awmod@divisor+1)^0,f,c
 11550  0036D0  2A1F               	incf	___awmod@counter^0,f,c
 11551  0036D2                     l8220:
 11552                           
 11553                           ; BSR set to: 1
 11554  0036D2  AE1E               	btfss	(___awmod@divisor+1)^0,7,c
 11555  0036D4  D7FA               	goto	l8218
 11556  0036D6                     u9300:
 11557                           
 11558                           ; BSR set to: 1
 11559  0036D6  501D               	movf	___awmod@divisor^0,w,c
 11560  0036D8  5C1B               	subwf	___awmod@dividend^0,w,c
 11561  0036DA  501E               	movf	(___awmod@divisor+1)^0,w,c
 11562  0036DC  581C               	subwfb	(___awmod@dividend+1)^0,w,c
 11563  0036DE  E304               	bnc	l8226
 11564                           
 11565                           ; BSR set to: 1
 11566  0036E0  501D               	movf	___awmod@divisor^0,w,c
 11567  0036E2  5E1B               	subwf	___awmod@dividend^0,f,c
 11568  0036E4  501E               	movf	(___awmod@divisor+1)^0,w,c
 11569  0036E6  5A1C               	subwfb	(___awmod@dividend+1)^0,f,c
 11570  0036E8                     l8226:
 11571                           
 11572                           ; BSR set to: 1
 11573  0036E8  90D8               	bcf	status,0,c
 11574  0036EA  321E               	rrcf	(___awmod@divisor+1)^0,f,c
 11575  0036EC  321D               	rrcf	___awmod@divisor^0,f,c
 11576                           
 11577                           ; BSR set to: 1
 11578  0036EE  2E1F               	decfsz	___awmod@counter^0,f,c
 11579  0036F0  D7F2               	goto	u9300
 11580  0036F2                     l8230:
 11581                           
 11582                           ; BSR set to: 1
 11583  0036F2  5020               	movf	___awmod@sign^0,w,c
 11584  0036F4  E004               	bz	l8234
 11585                           
 11586                           ; BSR set to: 1
 11587  0036F6  6C1B               	negf	___awmod@dividend^0,c
 11588  0036F8  1E1C               	comf	(___awmod@dividend+1)^0,f,c
 11589  0036FA  B0D8               	btfsc	status,0,c
 11590  0036FC  2A1C               	incf	(___awmod@dividend+1)^0,f,c
 11591  0036FE                     l8234:
 11592                           
 11593                           ; BSR set to: 1
 11594  0036FE  C01B  F01B         	movff	___awmod@dividend,?___awmod
 11595  003702  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
 11596                           
 11597                           ; BSR set to: 1
 11598  003706  0012               	return		;funcret
 11599  003708                     __end_of___awmod:
 11600                           	callstack 0
 11601                           
 11602 ;; *************** function ___awdiv *****************
 11603 ;; Defined at:
 11604 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;  dividend        2   26[COMRAM] int 
 11607 ;;  divisor         2   28[COMRAM] int 
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;  quotient        2   32[COMRAM] int 
 11610 ;;  sign            1   31[COMRAM] unsigned char 
 11611 ;;  counter         1   30[COMRAM] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  2   26[COMRAM] int 
 11614 ;; Registers used:
 11615 ;;		wreg, status,2, status,0
 11616 ;; Tracked objects:
 11617 ;;		On entry : 3F/1
 11618 ;;		On exit  : 3F/1
 11619 ;;		Unchanged: 3F/0
 11620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11621 ;;      Params:         4       0       0       0       0       0       0
 11622 ;;      Locals:         4       0       0       0       0       0       0
 11623 ;;      Temps:          0       0       0       0       0       0       0
 11624 ;;      Totals:         8       0       0       0       0       0       0
 11625 ;;Total ram usage:        8 bytes
 11626 ;; Hardware stack levels used: 1
 11627 ;; Hardware stack levels required when called: 3
 11628 ;; This function calls:
 11629 ;;		Nothing
 11630 ;; This function is called by:
 11631 ;;		_efgtoa
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           	psect	text31
 11636  0035B0                     __ptext31:
 11637                           	callstack 0
 11638  0035B0                     ___awdiv:
 11639                           	callstack 23
 11640                           
 11641                           ; BSR set to: 1
 11642                           
 11643                           ; BSR set to: 1
 11644                           ;incstack = 0
 11645  0035B0  6A20               	clrf	___awdiv@sign^0,c
 11646                           
 11647                           ; BSR set to: 1
 11648  0035B2  AE1E               	btfss	(___awdiv@divisor+1)^0,7,c
 11649  0035B4  D006               	goto	l8166
 11650                           
 11651                           ; BSR set to: 1
 11652  0035B6  6C1D               	negf	___awdiv@divisor^0,c
 11653  0035B8  1E1E               	comf	(___awdiv@divisor+1)^0,f,c
 11654  0035BA  B0D8               	btfsc	status,0,c
 11655  0035BC  2A1E               	incf	(___awdiv@divisor+1)^0,f,c
 11656                           
 11657                           ; BSR set to: 1
 11658  0035BE  0E01               	movlw	1
 11659  0035C0  6E20               	movwf	___awdiv@sign^0,c
 11660  0035C2                     l8166:
 11661                           
 11662                           ; BSR set to: 1
 11663  0035C2  AE1C               	btfss	(___awdiv@dividend+1)^0,7,c
 11664  0035C4  D006               	goto	l8172
 11665                           
 11666                           ; BSR set to: 1
 11667  0035C6  6C1B               	negf	___awdiv@dividend^0,c
 11668  0035C8  1E1C               	comf	(___awdiv@dividend+1)^0,f,c
 11669  0035CA  B0D8               	btfsc	status,0,c
 11670  0035CC  2A1C               	incf	(___awdiv@dividend+1)^0,f,c
 11671                           
 11672                           ; BSR set to: 1
 11673  0035CE  0E01               	movlw	1
 11674  0035D0  1A20               	xorwf	___awdiv@sign^0,f,c
 11675  0035D2                     l8172:
 11676                           
 11677                           ; BSR set to: 1
 11678  0035D2  6A21               	clrf	___awdiv@quotient^0,c
 11679  0035D4  6A22               	clrf	(___awdiv@quotient+1)^0,c
 11680                           
 11681                           ; BSR set to: 1
 11682  0035D6  501D               	movf	___awdiv@divisor^0,w,c
 11683  0035D8  101E               	iorwf	(___awdiv@divisor+1)^0,w,c
 11684  0035DA  E01B               	bz	l8194
 11685                           
 11686                           ; BSR set to: 1
 11687  0035DC  0E01               	movlw	1
 11688  0035DE  6E1F               	movwf	___awdiv@counter^0,c
 11689  0035E0  D004               	goto	l8180
 11690  0035E2                     l8178:
 11691                           
 11692                           ; BSR set to: 1
 11693  0035E2  90D8               	bcf	status,0,c
 11694  0035E4  361D               	rlcf	___awdiv@divisor^0,f,c
 11695  0035E6  361E               	rlcf	(___awdiv@divisor+1)^0,f,c
 11696  0035E8  2A1F               	incf	___awdiv@counter^0,f,c
 11697  0035EA                     l8180:
 11698                           
 11699                           ; BSR set to: 1
 11700  0035EA  AE1E               	btfss	(___awdiv@divisor+1)^0,7,c
 11701  0035EC  D7FA               	goto	l8178
 11702  0035EE                     u9240:
 11703                           
 11704                           ; BSR set to: 1
 11705  0035EE  90D8               	bcf	status,0,c
 11706  0035F0  3621               	rlcf	___awdiv@quotient^0,f,c
 11707  0035F2  3622               	rlcf	(___awdiv@quotient+1)^0,f,c
 11708                           
 11709                           ; BSR set to: 1
 11710  0035F4  501D               	movf	___awdiv@divisor^0,w,c
 11711  0035F6  5C1B               	subwf	___awdiv@dividend^0,w,c
 11712  0035F8  501E               	movf	(___awdiv@divisor+1)^0,w,c
 11713  0035FA  581C               	subwfb	(___awdiv@dividend+1)^0,w,c
 11714  0035FC  E305               	bnc	l8190
 11715                           
 11716                           ; BSR set to: 1
 11717  0035FE  501D               	movf	___awdiv@divisor^0,w,c
 11718  003600  5E1B               	subwf	___awdiv@dividend^0,f,c
 11719  003602  501E               	movf	(___awdiv@divisor+1)^0,w,c
 11720  003604  5A1C               	subwfb	(___awdiv@dividend+1)^0,f,c
 11721                           
 11722                           ; BSR set to: 1
 11723  003606  8021               	bsf	___awdiv@quotient^0,0,c
 11724  003608                     l8190:
 11725                           
 11726                           ; BSR set to: 1
 11727  003608  90D8               	bcf	status,0,c
 11728  00360A  321E               	rrcf	(___awdiv@divisor+1)^0,f,c
 11729  00360C  321D               	rrcf	___awdiv@divisor^0,f,c
 11730                           
 11731                           ; BSR set to: 1
 11732  00360E  2E1F               	decfsz	___awdiv@counter^0,f,c
 11733  003610  D7EE               	goto	u9240
 11734  003612                     l8194:
 11735                           
 11736                           ; BSR set to: 1
 11737  003612  5020               	movf	___awdiv@sign^0,w,c
 11738  003614  E004               	bz	l8198
 11739                           
 11740                           ; BSR set to: 1
 11741  003616  6C21               	negf	___awdiv@quotient^0,c
 11742  003618  1E22               	comf	(___awdiv@quotient+1)^0,f,c
 11743  00361A  B0D8               	btfsc	status,0,c
 11744  00361C  2A22               	incf	(___awdiv@quotient+1)^0,f,c
 11745  00361E                     l8198:
 11746                           
 11747                           ; BSR set to: 1
 11748  00361E  C021  F01B         	movff	___awdiv@quotient,?___awdiv
 11749  003622  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
 11750                           
 11751                           ; BSR set to: 1
 11752  003626  0012               	return		;funcret
 11753  003628                     __end_of___awdiv:
 11754                           	callstack 0
 11755                           
 11756 ;; *************** function _ctoa *****************
 11757 ;; Defined at:
 11758 ;;		line 259 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
 11761 ;;		 -> sprintf@f(11), 
 11762 ;;  c               1   33[COMRAM] unsigned char 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;  w               2    7[BANK0 ] int 
 11765 ;;  l               2    5[BANK0 ] int 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  2   31[COMRAM] int 
 11768 ;; Registers used:
 11769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 3F/0
 11772 ;;		On exit  : 3F/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11775 ;;      Params:         3       0       0       0       0       0       0
 11776 ;;      Locals:         0       4       0       0       0       0       0
 11777 ;;      Temps:          1       0       0       0       0       0       0
 11778 ;;      Totals:         4       4       0       0       0       0       0
 11779 ;;Total ram usage:        8 bytes
 11780 ;; Hardware stack levels used: 1
 11781 ;; Hardware stack levels required when called: 5
 11782 ;; This function calls:
 11783 ;;		_fputc
 11784 ;; This function is called by:
 11785 ;;		_vfpfcnvrt
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           	psect	text32
 11790  0034A2                     __ptext32:
 11791                           	callstack 0
 11792  0034A2                     _ctoa:
 11793                           	callstack 22
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 259: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt
      +                          .c: 260: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 261:   
      +                            int l, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 264:  
      +                             w = width ? width - 1 : width;
 11797                           
 11798                           ; BSR set to: 1
 11799                           ;incstack = 0
 11800  0034A2  502C               	movf	_width^0,w,c
 11801  0034A4  102D               	iorwf	(_width+1)^0,w,c
 11802  0034A6  E105               	bnz	l8468
 11803                           
 11804                           ; BSR set to: 0
 11805  0034A8  C02C  F067         	movff	_width,ctoa@w
 11806  0034AC  C02D  F068         	movff	_width+1,ctoa@w+1
 11807  0034B0  D006               	goto	l8470
 11808  0034B2                     l8468:
 11809                           
 11810                           ; BSR set to: 0
 11811  0034B2  0EFF               	movlw	255
 11812  0034B4  242C               	addwf	_width^0,w,c
 11813  0034B6  6F67               	movwf	ctoa@w& (0+255),b
 11814  0034B8  0EFF               	movlw	255
 11815  0034BA  202D               	addwfc	(_width+1)^0,w,c
 11816  0034BC  6F68               	movwf	(ctoa@w+1)& (0+255),b
 11817  0034BE                     l8470:
 11818                           
 11819                           ; BSR set to: 0
 11820                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 267:     if (flag
      +                          s & (1 << 0)) {
 11821  0034BE  A030               	btfss	_flags^0,0,c
 11822  0034C0  D003               	goto	l8474
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 268:         fput
      +                          c(c, fp);
 11826  0034C2  D82C               	call	PL134	;call to abstracted procedure
 11827  0034C4  EC0A  F01A         	call	_fputc	;wreg free
 11828  0034C8                     l8474:
 11829                           
 11830                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 271:     w = (w <
      +                           0) ? 0 : w;
 11831  0034C8  0100               	movlb	0	; () banked
 11832  0034CA  AF68               	btfss	(ctoa@w+1)& (0+255),7,b
 11833  0034CC  D002               	goto	l1466
 11834                           
 11835                           ; BSR set to: 0
 11836  0034CE  6B67               	clrf	ctoa@w& (0+255),b
 11837  0034D0  6B68               	clrf	(ctoa@w+1)& (0+255),b
 11838  0034D2                     l1466:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 272:     l = 0;
 11842  0034D2  6B65               	clrf	ctoa@l& (0+255),b
 11843  0034D4  6B66               	clrf	(ctoa@l+1)& (0+255),b
 11844                           
 11845                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 11846  0034D6  D00C               	goto	l8482
 11847  0034D8                     l8478:
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 274:         fput
      +                          c(' ', fp);
 11851  0034D8  6A1D               	clrf	(fputc@c+1)^0,c
 11852  0034DA  0E20               	movlw	32
 11853  0034DC  6E1C               	movwf	fputc@c^0,c
 11854  0034DE  C020  F01E         	movff	ctoa@fp,fputc@fp
 11855  0034E2  C021  F01F         	movff	ctoa@fp+1,fputc@fp+1
 11856  0034E6  EC0A  F01A         	call	_fputc	;wreg free
 11857                           
 11858                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 275:         ++l;
 11859  0034EA  0100               	movlb	0	; () banked
 11860  0034EC  4B65               	infsnz	ctoa@l& (0+255),f,b
 11861  0034EE  2B66               	incf	(ctoa@l+1)& (0+255),f,b
 11862  0034F0                     l8482:
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 11866  0034F0  5167               	movf	ctoa@w& (0+255),w,b
 11867  0034F2  5D65               	subwf	ctoa@l& (0+255),w,b
 11868  0034F4  5166               	movf	(ctoa@l+1)& (0+255),w,b
 11869  0034F6  0A80               	xorlw	128
 11870  0034F8  6E23               	movwf	??_ctoa^0,c
 11871  0034FA  5168               	movf	(ctoa@w+1)& (0+255),w,b
 11872  0034FC  0A80               	xorlw	128
 11873  0034FE  5823               	subwfb	??_ctoa^0,w,c
 11874  003500  E3EB               	bnc	l8478
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 278:     if (!(fl
      +                          ags & (1 << 0))) {
 11878  003502  B030               	btfsc	_flags^0,0,c
 11879  003504  D003               	goto	l8486
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 279:         fput
      +                          c(c, fp);
 11883  003506  D80A               	call	PL134	;call to abstracted procedure
 11884  003508  EC0A  F01A         	call	_fputc	;wreg free
 11885  00350C                     l8486:
 11886                           
 11887                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 282:     return l
      +                          +1;
 11888  00350C  0E01               	movlw	1
 11889  00350E  0100               	movlb	0	; () banked
 11890  003510  2565               	addwf	ctoa@l& (0+255),w,b
 11891  003512  6E20               	movwf	?_ctoa^0,c
 11892  003514  0E00               	movlw	0
 11893  003516  2166               	addwfc	(ctoa@l+1)& (0+255),w,b
 11894  003518  6E21               	movwf	(?_ctoa+1)^0,c
 11895                           
 11896                           ; BSR set to: 0
 11897  00351A  0012               	return		;funcret
 11898  00351C                     __end_of_ctoa:
 11899                           	callstack 0
 11900  00351C                     PL134:
 11901                           	callstack 22
 11902  00351C  C022  F01C         	movff	ctoa@c,fputc@c
 11903  003520  6A1D               	clrf	(fputc@c+1)^0,c
 11904  003522  C020  F01E         	movff	ctoa@fp,fputc@fp
 11905  003526  C021  F01F         	movff	ctoa@fp+1,fputc@fp+1
 11906  00352A  0012               	return	
 11907  00352C                     __end_ofPL134:
 11908                           	callstack 0
 11909                           
 11910 ;; *************** function _fputc *****************
 11911 ;; Defined at:
 11912 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  c               2   27[COMRAM] int 
 11915 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
 11916 ;;		 -> sprintf@f(11), 
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  2   27[COMRAM] int 
 11921 ;; Registers used:
 11922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11928 ;;      Params:         4       0       0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0
 11930 ;;      Temps:          0       5       0       0       0       0       0
 11931 ;;      Totals:         4       5       0       0       0       0       0
 11932 ;;Total ram usage:        9 bytes
 11933 ;; Hardware stack levels used: 1
 11934 ;; Hardware stack levels required when called: 4
 11935 ;; This function calls:
 11936 ;;		_putch
 11937 ;; This function is called by:
 11938 ;;		_pad
 11939 ;;		_ctoa
 11940 ;;		_stoa
 11941 ;;		_vfpfcnvrt
 11942 ;;		_fputs
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           	psect	text33
 11947  003414                     __ptext33:
 11948                           	callstack 0
 11949  003414                     _fputc:
 11950                           	callstack 20
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;incstack = 0
 11954  003414  501E               	movf	fputc@fp^0,w,c
 11955  003416  101F               	iorwf	(fputc@fp+1)^0,w,c
 11956  003418  E003               	bz	u8330
 11957  00341A  501E               	movf	fputc@fp^0,w,c
 11958  00341C  101F               	iorwf	(fputc@fp+1)^0,w,c
 11959  00341E  E103               	bnz	l7694
 11960  003420                     u8330:
 11961  003420  501C               	movf	fputc@c^0,w,c
 11962  003422  EF53  F01F         	goto	_putch
 11963  003426                     l7694:
 11964  003426  EE20 F009          	lfsr	2,9
 11965  00342A  D836               	call	PL136	;call to abstracted procedure
 11966  00342C  50DE               	movf	postinc2,w,c
 11967  00342E  10DE               	iorwf	postinc2,w,c
 11968  003430  E014               	bz	u8350
 11969  003432  EE20 F009          	lfsr	2,9
 11970  003436  D830               	call	PL136	;call to abstracted procedure
 11971  003438  EE10 F003          	lfsr	1,3
 11972  00343C  501E               	movf	fputc@fp^0,w,c
 11973  00343E  26E1               	addwf	fsr1l,f,c
 11974  003440  501F               	movf	(fputc@fp+1)^0,w,c
 11975  003442  22E2               	addwfc	fsr1h,f,c
 11976  003444  50DE               	movf	postinc2,w,c
 11977  003446  5CE6               	subwf	postinc1,w,c
 11978  003448  50E6               	movf	postinc1,w,c
 11979  00344A  0A80               	xorlw	128
 11980  00344C  0100               	movlb	0	; () banked
 11981  00344E  6F64               	movwf	(??_fputc+4)& (0+255),b
 11982  003450  50DE               	movf	postinc2,w,c
 11983  003452  0A80               	xorlw	128
 11984  003454  5964               	subwfb	(??_fputc+4)& (0+255),w,b
 11985  003456  B0D8               	btfsc	status,0,c
 11986  003458  0012               	return	
 11987  00345A                     u8350:
 11988  00345A  EE20 F003          	lfsr	2,3
 11989  00345E  D81C               	call	PL136	;call to abstracted procedure
 11990  003460  CFDE F060          	movff	postinc2,??_fputc
 11991  003464  CFDD F061          	movff	postdec2,??_fputc+1
 11992  003468  C01E  FFD9         	movff	fputc@fp,fsr2l
 11993  00346C  C01F  FFDA         	movff	fputc@fp+1,fsr2h
 11994  003470  CFDE F062          	movff	postinc2,??_fputc+2
 11995  003474  CFDD F063          	movff	postdec2,??_fputc+3
 11996  003478  0100               	movlb	0	; () banked
 11997  00347A  5160               	movf	??_fputc& (0+255),w,b
 11998  00347C  2562               	addwf	(??_fputc+2)& (0+255),w,b
 11999  00347E  6ED9               	movwf	fsr2l,c
 12000  003480  5161               	movf	(??_fputc+1)& (0+255),w,b
 12001  003482  2163               	addwfc	(??_fputc+3)& (0+255),w,b
 12002  003484  6EDA               	movwf	fsr2h,c
 12003  003486  C01C  FFDF         	movff	fputc@c,indf2
 12004  00348A  EE20 F003          	lfsr	2,3
 12005  00348E  D804               	call	PL136	;call to abstracted procedure
 12006  003490  2ADE               	incf	postinc2,f,c
 12007  003492  0E00               	movlw	0
 12008  003494  22DD               	addwfc	postdec2,f,c
 12009  003496  0C00               	retlw	0	;funcret
 12010  003498                     __end_of_fputc:
 12011                           	callstack 0
 12012  003498                     PL136:
 12013                           	callstack 20
 12014  003498  501E               	movf	fputc@fp^0,w,c
 12015  00349A  26D9               	addwf	fsr2l,f,c
 12016  00349C  501F               	movf	(fputc@fp+1)^0,w,c
 12017  00349E  22DA               	addwfc	fsr2h,f,c
 12018  0034A0  0012               	return	
 12019  0034A2                     __end_ofPL136:
 12020                           	callstack 0
 12021                           
 12022 ;; *************** function _putch *****************
 12023 ;; Defined at:
 12024 ;;		line 20 in file "eusart.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  data            1    wreg     unsigned char 
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;  data            1   26[COMRAM] unsigned char 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12038 ;;      Params:         0       0       0       0       0       0       0
 12039 ;;      Locals:         1       0       0       0       0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0
 12041 ;;      Totals:         1       0       0       0       0       0       0
 12042 ;;Total ram usage:        1 bytes
 12043 ;; Hardware stack levels used: 1
 12044 ;; Hardware stack levels required when called: 3
 12045 ;; This function calls:
 12046 ;;		Nothing
 12047 ;; This function is called by:
 12048 ;;		_fputc
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           	psect	text34
 12053  003EA6                     __ptext34:
 12054                           	callstack 0
 12055  003EA6                     _putch:
 12056                           	callstack 20
 12057                           
 12058                           ;incstack = 0
 12059                           ;putch@data stored from wreg
 12060  003EA6  6E1B               	movwf	putch@data^0,c
 12061  003EA8                     
 12062                           ;eusart.c: 22:  while( ! TXIF)
 12063                           
 12064                           ;eusart.c: 20: void putch(char data);eusart.c: 21: {;eusart.c: 22:  while( ! TXIF)
 12065  003EA8  A89E               	btfss	3998,4,c	;volatile
 12066  003EAA  D7FE               	goto	l7684
 12067                           
 12068                           ;eusart.c: 24:  TXREG = data;
 12069  003EAC  C01B  FFAD         	movff	putch@data,4013	;volatile
 12070  003EB0  0012               	return		;funcret
 12071  003EB2                     __end_of_putch:
 12072                           	callstack 0
 12073                           
 12074 ;; *************** function _atoi *****************
 12075 ;; Defined at:
 12076 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;  s               2   10[BANK0 ] PTR const unsigned char 
 12079 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
 12080 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
 12081 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
 12082 ;;		 -> STR_2(15), 
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;  n               2   18[BANK0 ] int 
 12085 ;;  neg             2   16[BANK0 ] int 
 12086 ;; Return value:  Size  Location     Type
 12087 ;;                  2   10[BANK0 ] int 
 12088 ;; Registers used:
 12089 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12090 ;; Tracked objects:
 12091 ;;		On entry : 3F/0
 12092 ;;		On exit  : 3F/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12095 ;;      Params:         0       2       0       0       0       0       0
 12096 ;;      Locals:         0       4       0       0       0       0       0
 12097 ;;      Temps:          0       4       0       0       0       0       0
 12098 ;;      Totals:         0      10       0       0       0       0       0
 12099 ;;Total ram usage:       10 bytes
 12100 ;; Hardware stack levels used: 1
 12101 ;; Hardware stack levels required when called: 4
 12102 ;; This function calls:
 12103 ;;		___wmul
 12104 ;;		_isdigit
 12105 ;;		_isspace
 12106 ;; This function is called by:
 12107 ;;		_vfpfcnvrt
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text35
 12112  002F82                     __ptext35:
 12113                           	callstack 0
 12114  002F82                     _atoi:
 12115                           	callstack 23
 12116                           
 12117                           ; BSR set to: 0
 12118                           
 12119                           ;incstack = 0
 12120  002F82  6B72               	clrf	atoi@n& (0+255),b
 12121  002F84  6B73               	clrf	(atoi@n+1)& (0+255),b
 12122  002F86  6B70               	clrf	atoi@neg& (0+255),b
 12123  002F88  6B71               	clrf	(atoi@neg+1)& (0+255),b
 12124  002F8A  D002               	goto	l8878
 12125  002F8C                     l8874:
 12126                           
 12127                           ; BSR set to: 0
 12128  002F8C  4B6A               	infsnz	atoi@s& (0+255),f,b
 12129  002F8E  2B6B               	incf	(atoi@s+1)& (0+255),f,b
 12130  002F90                     l8878:
 12131                           
 12132                           ; BSR set to: 0
 12133  002F90  D84F               	call	PL40	;call to abstracted procedure
 12134  002F92  0A20               	xorlw	32
 12135  002F94  E0FB               	bz	l8874
 12136                           
 12137                           ; BSR set to: 0
 12138  002F96  0EF7               	movlw	247
 12139  002F98  6F6C               	movwf	??_atoi& (0+255),b
 12140  002F9A  696D               	setf	(??_atoi+1)& (0+255),b
 12141  002F9C  D849               	call	PL40	;call to abstracted procedure
 12142  002F9E  D84F               	call	PL140	;call to abstracted procedure
 12143  002FA0  E10A               	bnz	l8886
 12144  002FA2  0E05               	movlw	5
 12145  002FA4  5D6E               	subwf	(??_atoi+2)& (0+255),w,b
 12146  002FA6  E207               	bc	l8886
 12147  002FA8  D7F1               	goto	l8874
 12148  002FAA                     l8882:
 12149                           
 12150                           ; BSR set to: 0
 12151  002FAA  6B71               	clrf	(atoi@neg+1)& (0+255),b
 12152  002FAC  0E01               	movlw	1
 12153  002FAE  6F70               	movwf	atoi@neg& (0+255),b
 12154  002FB0                     l8884:
 12155                           
 12156                           ; BSR set to: 0
 12157  002FB0  4B6A               	infsnz	atoi@s& (0+255),f,b
 12158  002FB2  2B6B               	incf	(atoi@s+1)& (0+255),f,b
 12159  002FB4  D01F               	goto	l8894
 12160  002FB6                     l8886:
 12161                           
 12162                           ; BSR set to: 0
 12163  002FB6  D83C               	call	PL40	;call to abstracted procedure
 12164  002FB8  6F6C               	movwf	??_atoi& (0+255),b
 12165  002FBA  6B6D               	clrf	(??_atoi+1)& (0+255),b
 12166                           
 12167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12168                           ; Switch size 1, requested type "space"
 12169                           ; Number of cases is 1, Range of values is 0 to 0
 12170                           ; switch strategies available:
 12171                           ; Name         Instructions Cycles
 12172                           ; simple_byte            4     3 (average)
 12173                           ;	Chosen strategy is simple_byte
 12174  002FBC  516D               	movf	(??_atoi+1)& (0+255),w,b
 12175  002FBE  E11A               	bnz	l8894
 12176                           
 12177                           ; BSR set to: 0
 12178                           ; Switch size 1, requested type "space"
 12179                           ; Number of cases is 2, Range of values is 43 to 45
 12180                           ; switch strategies available:
 12181                           ; Name         Instructions Cycles
 12182                           ; simple_byte            7     4 (average)
 12183                           ;	Chosen strategy is simple_byte
 12184  002FC0  516C               	movf	??_atoi& (0+255),w,b
 12185  002FC2  0A2B               	xorlw	43	; case 43
 12186  002FC4  E0F5               	bz	l8884
 12187  002FC6  0A06               	xorlw	6	; case 45
 12188  002FC8  E0F0               	bz	l8882
 12189  002FCA  D014               	goto	l8894
 12190  002FCC                     l8888:
 12191                           
 12192                           ; BSR set to: 0
 12193  002FCC  C072  F064         	movff	atoi@n,___wmul@multiplier
 12194  002FD0  C073  F065         	movff	atoi@n+1,___wmul@multiplier+1
 12195  002FD4  6B67               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12196  002FD6  0E0A               	movlw	10
 12197  002FD8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12198  002FDA  ECDA  F01E         	call	___wmul	;wreg free
 12199  002FDE  D828               	call	PL40	;call to abstracted procedure
 12200  002FE0  5F64               	subwf	?___wmul& (0+255),f,b
 12201  002FE2  0E00               	movlw	0
 12202  002FE4  5B65               	subwfb	(?___wmul+1)& (0+255),f,b
 12203  002FE6  0E30               	movlw	48
 12204  002FE8  2564               	addwf	?___wmul& (0+255),w,b
 12205  002FEA  6F72               	movwf	atoi@n& (0+255),b
 12206  002FEC  0E00               	movlw	0
 12207  002FEE  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12208  002FF0  6F73               	movwf	(atoi@n+1)& (0+255),b
 12209  002FF2  D7DE               	goto	l8884
 12210  002FF4                     l8894:
 12211                           
 12212                           ; BSR set to: 0
 12213  002FF4  0ED0               	movlw	208
 12214  002FF6  6F6C               	movwf	??_atoi& (0+255),b
 12215  002FF8  696D               	setf	(??_atoi+1)& (0+255),b
 12216  002FFA  D81A               	call	PL40	;call to abstracted procedure
 12217  002FFC  D820               	call	PL140	;call to abstracted procedure
 12218  002FFE  E103               	bnz	u10630
 12219  003000  0E0A               	movlw	10
 12220  003002  5D6E               	subwf	(??_atoi+2)& (0+255),w,b
 12221  003004  E3E3               	bnc	l8888
 12222  003006                     u10630:
 12223                           
 12224                           ; BSR set to: 0
 12225  003006  5170               	movf	atoi@neg& (0+255),w,b
 12226  003008  1171               	iorwf	(atoi@neg+1)& (0+255),w,b
 12227  00300A  E10D               	bnz	l1685
 12228                           
 12229                           ; BSR set to: 0
 12230  00300C  C072  F06C         	movff	atoi@n,??_atoi
 12231  003010  C073  F06D         	movff	atoi@n+1,??_atoi+1
 12232  003014  1F6C               	comf	??_atoi& (0+255),f,b
 12233  003016  1F6D               	comf	(??_atoi+1)& (0+255),f,b
 12234  003018  4B6C               	infsnz	??_atoi& (0+255),f,b
 12235  00301A  2B6D               	incf	(??_atoi+1)& (0+255),f,b
 12236  00301C  C06C  F06A         	movff	??_atoi,?_atoi
 12237  003020  C06D  F06B         	movff	??_atoi+1,?_atoi+1
 12238  003024  0012               	return	
 12239  003026                     l1685:
 12240                           
 12241                           ; BSR set to: 0
 12242  003026  C072  F06A         	movff	atoi@n,?_atoi
 12243  00302A  C073  F06B         	movff	atoi@n+1,?_atoi+1
 12244                           
 12245                           ; BSR set to: 0
 12246  00302E  0012               	return		;funcret
 12247  003030                     __end_of_atoi:
 12248                           	callstack 0
 12249  003030                     PL40:
 12250                           	callstack 23
 12251  003030  C06A  FFF6         	movff	atoi@s,tblptrl
 12252  003034  C06B  FFF7         	movff	atoi@s+1,tblptrh
 12253  003038                     	if	0	;tblptru may be non-zero
 12254  003038                     	endif
 12255  003038                     	if	0	;tblptru may be non-zero
 12256  003038                     	endif
 12257  003038  0008               	tblrd		*
 12258  00303A  50F5               	movf	tablat,w,c
 12259  00303C  0012               	return	
 12260  00303E                     __end_ofPL40:
 12261                           	callstack 0
 12262  00303E                     PL140:
 12263                           	callstack 23
 12264  00303E  6F6E               	movwf	(??_atoi+2)& (0+255),b
 12265  003040  6B6F               	clrf	(??_atoi+3)& (0+255),b
 12266  003042  516C               	movf	??_atoi& (0+255),w,b
 12267  003044  276E               	addwf	(??_atoi+2)& (0+255),f,b
 12268  003046  516D               	movf	(??_atoi+1)& (0+255),w,b
 12269  003048  236F               	addwfc	(??_atoi+3)& (0+255),f,b
 12270  00304A  516F               	movf	(??_atoi+3)& (0+255),w,b
 12271  00304C  0012               	return	
 12272  00304E                     __end_ofPL140:
 12273                           	callstack 0
 12274                           
 12275 ;; *************** function _isspace *****************
 12276 ;; Defined at:
 12277 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;  c               2   26[COMRAM] int 
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;		None
 12282 ;; Return value:  Size  Location     Type
 12283 ;;                  2   26[COMRAM] int 
 12284 ;; Registers used:
 12285 ;;		wreg, status,2, status,0
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12291 ;;      Params:         2       0       0       0       0       0       0
 12292 ;;      Locals:         1       0       0       0       0       0       0
 12293 ;;      Temps:          4       0       0       0       0       0       0
 12294 ;;      Totals:         7       0       0       0       0       0       0
 12295 ;;Total ram usage:        7 bytes
 12296 ;; Hardware stack levels used: 1
 12297 ;; Hardware stack levels required when called: 3
 12298 ;; This function calls:
 12299 ;;		Nothing
 12300 ;; This function is called by:
 12301 ;;		_atoi
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           	psect	text36
 12306  003C08                     __ptext36:
 12307                           	callstack 0
 12308  003C08                     _isspace:
 12309                           	callstack 23
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;incstack = 0
 12313  003C08  0E01               	movlw	1
 12314  003C0A  6E21               	movwf	_isspace$2517^0,c
 12315  003C0C  0E20               	movlw	32
 12316  003C0E  181B               	xorwf	isspace@c^0,w,c
 12317  003C10  101C               	iorwf	(isspace@c+1)^0,w,c
 12318  003C12  E011               	bz	l1711
 12319  003C14  0EF7               	movlw	247
 12320  003C16  6E1D               	movwf	??_isspace^0,c
 12321  003C18  681E               	setf	(??_isspace+1)^0,c
 12322  003C1A  C01B  F01F         	movff	isspace@c,??_isspace+2
 12323  003C1E  C01C  F020         	movff	isspace@c+1,??_isspace+3
 12324  003C22  501D               	movf	??_isspace^0,w,c
 12325  003C24  261F               	addwf	(??_isspace+2)^0,f,c
 12326  003C26  501E               	movf	(??_isspace+1)^0,w,c
 12327  003C28  2220               	addwfc	(??_isspace+3)^0,f,c
 12328  003C2A  5020               	movf	(??_isspace+3)^0,w,c
 12329  003C2C  E103               	bnz	u9820
 12330  003C2E  0E05               	movlw	5
 12331  003C30  5C1F               	subwf	(??_isspace+2)^0,w,c
 12332  003C32  E301               	bnc	l1711
 12333  003C34                     u9820:
 12334  003C34  6A21               	clrf	_isspace$2517^0,c
 12335  003C36                     l1711:
 12336  003C36  C021  F01B         	movff	_isspace$2517,?_isspace
 12337  003C3A  6A1C               	clrf	(?_isspace+1)^0,c
 12338  003C3C  0012               	return		;funcret
 12339  003C3E                     __end_of_isspace:
 12340                           	callstack 0
 12341                           
 12342 ;; *************** function _isdigit *****************
 12343 ;; Defined at:
 12344 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;  c               2   26[COMRAM] int 
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;		None
 12349 ;; Return value:  Size  Location     Type
 12350 ;;                  2   26[COMRAM] int 
 12351 ;; Registers used:
 12352 ;;		wreg, status,2, status,0
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12358 ;;      Params:         2       0       0       0       0       0       0
 12359 ;;      Locals:         0       0       0       0       0       0       0
 12360 ;;      Temps:          4       0       0       0       0       0       0
 12361 ;;      Totals:         6       0       0       0       0       0       0
 12362 ;;Total ram usage:        6 bytes
 12363 ;; Hardware stack levels used: 1
 12364 ;; Hardware stack levels required when called: 3
 12365 ;; This function calls:
 12366 ;;		Nothing
 12367 ;; This function is called by:
 12368 ;;		_vfpfcnvrt
 12369 ;;		_atoi
 12370 ;; This function uses a non-reentrant model
 12371 ;;
 12372                           
 12373                           	psect	text37
 12374  003D34                     __ptext37:
 12375                           	callstack 0
 12376  003D34                     _isdigit:
 12377                           	callstack 24
 12378                           
 12379                           ;incstack = 0
 12380  003D34  0ED0               	movlw	208
 12381  003D36  6E1D               	movwf	??_isdigit^0,c
 12382  003D38  681E               	setf	(??_isdigit+1)^0,c
 12383  003D3A  C01B  F01F         	movff	isdigit@c,??_isdigit+2
 12384  003D3E  C01C  F020         	movff	isdigit@c+1,??_isdigit+3
 12385  003D42  501D               	movf	??_isdigit^0,w,c
 12386  003D44  261F               	addwf	(??_isdigit+2)^0,f,c
 12387  003D46  501E               	movf	(??_isdigit+1)^0,w,c
 12388  003D48  2220               	addwfc	(??_isdigit+3)^0,f,c
 12389  003D4A  5020               	movf	(??_isdigit+3)^0,w,c
 12390  003D4C  E105               	bnz	u9790
 12391  003D4E  0E0A               	movlw	10
 12392  003D50  5C1F               	subwf	(??_isdigit+2)^0,w,c
 12393  003D52  E202               	bc	u9790
 12394  003D54  0E01               	movlw	1
 12395  003D56  D001               	goto	u9800
 12396  003D58                     u9790:
 12397  003D58  0E00               	movlw	0
 12398  003D5A                     u9800:
 12399  003D5A  6E1B               	movwf	?_isdigit^0,c
 12400  003D5C  6A1C               	clrf	(?_isdigit+1)^0,c
 12401  003D5E  0012               	return		;funcret
 12402  003D60                     __end_of_isdigit:
 12403                           	callstack 0
 12404                           
 12405 ;; *************** function _lcd_putc *****************
 12406 ;; Defined at:
 12407 ;;		line 112 in file "hd44780.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;  c               1    wreg     unsigned char 
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;  c               1   30[COMRAM] unsigned char 
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      void 
 12414 ;; Registers used:
 12415 ;;		wreg, status,2, status,0, cstack
 12416 ;; Tracked objects:
 12417 ;;		On entry : 0/1
 12418 ;;		On exit  : 0/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12421 ;;      Params:         0       0       0       0       0       0       0
 12422 ;;      Locals:         1       0       0       0       0       0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0
 12424 ;;      Totals:         1       0       0       0       0       0       0
 12425 ;;Total ram usage:        1 bytes
 12426 ;; Hardware stack levels used: 1
 12427 ;; Hardware stack levels required when called: 5
 12428 ;; This function calls:
 12429 ;;		_lcdWrite
 12430 ;; This function is called by:
 12431 ;;		_main
 12432 ;;		_show_lcd_main
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text38
 12437  003EB2                     __ptext38:
 12438                           	callstack 0
 12439  003EB2                     _lcd_putc:
 12440                           	callstack 24
 12441                           
 12442                           ;incstack = 0
 12443                           ;lcd_putc@c stored from wreg
 12444  003EB2  6E1F               	movwf	lcd_putc@c^0,c
 12445                           
 12446                           ;hd44780.c: 114:             lcdWrite(c, DATA);
 12447  003EB4  0E01               	movlw	1
 12448  003EB6  6E1D               	movwf	lcdWrite@type^0,c
 12449  003EB8  501F               	movf	lcd_putc@c^0,w,c
 12450  003EBA  EF52  F01E         	goto	_lcdWrite
 12451  003EBE                     __end_of_lcd_putc:
 12452                           	callstack 0
 12453                           
 12454 ;; *************** function _lcdPrint *****************
 12455 ;; Defined at:
 12456 ;;		line 118 in file "hd44780.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  t               2    0[BANK0 ] PTR const unsigned char 
 12459 ;;		 -> STR_23(11), STR_22(11), STR_16(19), STR_15(19), 
 12460 ;;		 -> STR_13(21), STR_12(15), STR_11(20), STR_10(19), 
 12461 ;;		 -> STR_9(22), STR_8(21), STR_7(21), STR_6(21), 
 12462 ;;		 -> STR_5(21), TxtBuf(21), STR_1(21), 
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;		None
 12465 ;; Return value:  Size  Location     Type
 12466 ;;                  1    wreg      void 
 12467 ;; Registers used:
 12468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 3F/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12474 ;;      Params:         0       2       0       0       0       0       0
 12475 ;;      Locals:         0       0       0       0       0       0       0
 12476 ;;      Temps:          0       4       0       0       0       0       0
 12477 ;;      Totals:         0       6       0       0       0       0       0
 12478 ;;Total ram usage:        6 bytes
 12479 ;; Hardware stack levels used: 1
 12480 ;; Hardware stack levels required when called: 6
 12481 ;; This function calls:
 12482 ;;		_lcdWrite
 12483 ;;		_lcd_gotoxy
 12484 ;; This function is called by:
 12485 ;;		_main
 12486 ;;		_show_lcd_main
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           	psect	text39
 12491  002DB2                     __ptext39:
 12492                           	callstack 0
 12493  002DB2                     _lcdPrint:
 12494                           	callstack 23
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;hd44780.c: 119:     while(*t != '\0'){
 12498                           
 12499                           ;incstack = 0
 12500  002DB2  D066               	goto	l9312
 12501  002DB4                     l9292:
 12502                           
 12503                           ; BSR set to: 0
 12504                           ;hd44780.c: 122:             lcdWrite(1, COMMAND);
 12505  002DB4  D87C               	call	PL210	;call to abstracted procedure
 12506  002DB6  EC52  F01E         	call	_lcdWrite
 12507                           
 12508                           ;hd44780.c: 123:             _delay((unsigned long)((2)*(64000000/4000.0)));
 12509  002DBA  0E2A               	movlw	42
 12510  002DBC  0100               	movlb	0	; () banked
 12511  002DBE  6F62               	movwf	??_lcdPrint& (0+255),b
 12512  002DC0  0E8D               	movlw	141
 12513  002DC2                     u12157:
 12514  002DC2  2EE8               	decfsz	wreg,f,c
 12515  002DC4  D7FE               	bra	u12157
 12516  002DC6  2F62               	decfsz	??_lcdPrint& (0+255),f,b
 12517  002DC8  D7FC               	bra	u12157
 12518  002DCA  F000 F000          	nop2	
 12519                           
 12520                           ;hd44780.c: 124:             break;
 12521  002DCE  D055               	goto	l9310
 12522  002DD0                     l9296:
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;hd44780.c: 127:             lcd_gotoxy(1, 2);
 12526  002DD0  ECD0  F004         	call	PL130	;call to abstracted procedure
 12527  002DD4  EC12  F01D         	call	_lcd_gotoxy
 12528                           
 12529                           ;hd44780.c: 128:             break;
 12530  002DD8  D050               	goto	l9310
 12531  002DDA                     l9298:
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;hd44780.c: 131:             lcdWrite(0x10, COMMAND);
 12535  002DDA  0E00               	movlw	0
 12536  002DDC  6E1D               	movwf	lcdWrite@type^0,c
 12537  002DDE  0E10               	movlw	16
 12538  002DE0  EC52  F01E         	call	_lcdWrite
 12539                           
 12540                           ;hd44780.c: 132:             break;
 12541  002DE4  D04A               	goto	l9310
 12542  002DE6                     l9300:
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;hd44780.c: 135:                 if (*t < 0xC0) {
 12546  002DE6  D85C               	call	PL42	;call to abstracted procedure
 12547  002DE8  64F7               	cpfsgt	tblptrh,c
 12548  002DEA  D003               	bra	u11097
 12549  002DEC  0008               	tblrd		*
 12550  002DEE  50F5               	movf	tablat,w,c
 12551  002DF0  D001               	bra	u11090
 12552  002DF2                     u11097:
 12553  002DF2  D850               	call	PL16	;call to abstracted procedure
 12554  002DF4                     u11090:
 12555  002DF4  0100               	movlb	0	; () banked
 12556  002DF6  6F62               	movwf	??_lcdPrint& (0+255),b
 12557  002DF8  0EC0               	movlw	192
 12558  002DFA  6162               	cpfslt	??_lcdPrint& (0+255),b
 12559  002DFC  D00C               	goto	l9304
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;hd44780.c: 136:                     lcdWrite(*t, DATA);
 12563  002DFE  0E01               	movlw	1
 12564  002E00  6E1D               	movwf	lcdWrite@type^0,c
 12565  002E02  D84E               	call	PL42	;call to abstracted procedure
 12566  002E04  64F7               	cpfsgt	tblptrh,c
 12567  002E06  D003               	bra	u11117
 12568  002E08  0008               	tblrd		*
 12569  002E0A  50F5               	movf	tablat,w,c
 12570  002E0C  D001               	bra	u11110
 12571  002E0E                     u11117:
 12572  002E0E  D842               	call	PL16	;call to abstracted procedure
 12573  002E10                     u11110:
 12574  002E10  EC52  F01E         	call	_lcdWrite
 12575                           
 12576                           ;hd44780.c: 137:                 } else {
 12577  002E14  D032               	goto	l9310
 12578  002E16                     l9304:
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;hd44780.c: 138:                     lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], 
      +                          DATA);
 12582  002E16  0E01               	movlw	1
 12583  002E18  6E1D               	movwf	lcdWrite@type^0,c
 12584  002E1A  0E40               	movlw	64
 12585  002E1C  6F62               	movwf	??_lcdPrint& (0+255),b
 12586  002E1E  6963               	setf	(??_lcdPrint+1)& (0+255),b
 12587  002E20  D83F               	call	PL42	;call to abstracted procedure
 12588  002E22  64F7               	cpfsgt	tblptrh,c
 12589  002E24  D003               	bra	u11127
 12590  002E26  0008               	tblrd		*
 12591  002E28  50F5               	movf	tablat,w,c
 12592  002E2A  D001               	bra	u11120
 12593  002E2C                     u11127:
 12594  002E2C  D833               	call	PL16	;call to abstracted procedure
 12595  002E2E                     u11120:
 12596  002E2E  0100               	movlb	0	; () banked
 12597  002E30  6F64               	movwf	(??_lcdPrint+2)& (0+255),b
 12598  002E32  6B65               	clrf	(??_lcdPrint+3)& (0+255),b
 12599  002E34  5162               	movf	??_lcdPrint& (0+255),w,b
 12600  002E36  2764               	addwf	(??_lcdPrint+2)& (0+255),f,b
 12601  002E38  5163               	movf	(??_lcdPrint+1)& (0+255),w,b
 12602  002E3A  2365               	addwfc	(??_lcdPrint+3)& (0+255),f,b
 12603  002E3C  0EAD               	movlw	low _HD44780_CYR
 12604  002E3E  2564               	addwf	(??_lcdPrint+2)& (0+255),w,b
 12605  002E40  6EF6               	movwf	tblptrl,c
 12606  002E42  0E7D               	movlw	high _HD44780_CYR
 12607  002E44  2165               	addwfc	(??_lcdPrint+3)& (0+255),w,b
 12608  002E46  6EF7               	movwf	tblptrh,c
 12609  002E48                     	if	0	;There are less than 3 active tblptr bytes
 12610  002E48                     	endif
 12611  002E48  0008               	tblrd		*
 12612  002E4A  50F5               	movf	tablat,w,c
 12613  002E4C  EC52  F01E         	call	_lcdWrite
 12614  002E50  D014               	goto	l9310
 12615  002E52                     l9308:
 12616  002E52  D826               	call	PL42	;call to abstracted procedure
 12617  002E54  64F7               	cpfsgt	tblptrh,c
 12618  002E56  D003               	bra	u11137
 12619  002E58  0008               	tblrd		*
 12620  002E5A  50F5               	movf	tablat,w,c
 12621  002E5C  D001               	bra	u11130
 12622  002E5E                     u11137:
 12623  002E5E  D81A               	call	PL16	;call to abstracted procedure
 12624  002E60                     u11130:
 12625  002E60  0100               	movlb	0	; () banked
 12626  002E62  6F62               	movwf	??_lcdPrint& (0+255),b
 12627  002E64  6B63               	clrf	(??_lcdPrint+1)& (0+255),b
 12628                           
 12629                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12630                           ; Switch size 1, requested type "space"
 12631                           ; Number of cases is 1, Range of values is 0 to 0
 12632                           ; switch strategies available:
 12633                           ; Name         Instructions Cycles
 12634                           ; simple_byte            4     3 (average)
 12635                           ;	Chosen strategy is simple_byte
 12636  002E66  5163               	movf	(??_lcdPrint+1)& (0+255),w,b
 12637  002E68  E1BE               	bnz	l9300
 12638                           
 12639                           ; BSR set to: 0
 12640                           ; Switch size 1, requested type "space"
 12641                           ; Number of cases is 3, Range of values is 8 to 12
 12642                           ; switch strategies available:
 12643                           ; Name         Instructions Cycles
 12644                           ; simple_byte           10     6 (average)
 12645                           ;	Chosen strategy is simple_byte
 12646  002E6A  5162               	movf	??_lcdPrint& (0+255),w,b
 12647  002E6C  0A08               	xorlw	8	; case 8
 12648  002E6E  E0B5               	bz	l9298
 12649  002E70  0A02               	xorlw	2	; case 10
 12650  002E72  E0AE               	bz	l9296
 12651  002E74  0A06               	xorlw	6	; case 12
 12652  002E76  E09E               	bz	l9292
 12653  002E78  D7B6               	goto	l9300
 12654  002E7A                     l9310:
 12655                           
 12656                           ;hd44780.c: 143:         *t++;
 12657  002E7A  0100               	movlb	0	; () banked
 12658  002E7C  4B60               	infsnz	lcdPrint@t& (0+255),f,b
 12659  002E7E  2B61               	incf	(lcdPrint@t+1)& (0+255),f,b
 12660  002E80                     l9312:
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;hd44780.c: 119:     while(*t != '\0'){
 12664  002E80  D80F               	call	PL42	;call to abstracted procedure
 12665  002E82  64F7               	cpfsgt	tblptrh,c
 12666  002E84  D003               	bra	u11147
 12667  002E86  0008               	tblrd		*
 12668  002E88  50F5               	movf	tablat,w,c
 12669  002E8A  D001               	bra	u11140
 12670  002E8C                     u11147:
 12671  002E8C  D803               	call	PL16	;call to abstracted procedure
 12672  002E8E                     u11140:
 12673  002E8E  0900               	iorlw	0
 12674  002E90  E1E0               	bnz	l9308
 12675  002E92  0012               	return		;funcret
 12676  002E94                     __end_of_lcdPrint:
 12677                           	callstack 0
 12678  002E94                     PL16:
 12679                           	callstack 24
 12680  002E94  CFF6 FFE1          	movff	tblptrl,fsr1l
 12681  002E98  CFF7 FFE2          	movff	tblptrh,fsr1h
 12682  002E9C  50E7               	movf	indf1,w,c
 12683  002E9E  0012               	return	
 12684  002EA0                     __end_ofPL16:
 12685                           	callstack 0
 12686  002EA0                     PL42:
 12687                           	callstack 23
 12688  002EA0  C060  FFF6         	movff	lcdPrint@t,tblptrl
 12689  002EA4  C061  FFF7         	movff	lcdPrint@t+1,tblptrh
 12690  002EA8  6AF8               	clrf	tblptru,c
 12691  002EAA  0E05               	movlw	(high __ramtop+-1)
 12692  002EAC  0012               	return	
 12693  002EAE                     __end_ofPL42:
 12694                           	callstack 0
 12695  002EAE                     PL210:
 12696                           	callstack 23
 12697  002EAE  0E00               	movlw	0
 12698  002EB0  6E1D               	movwf	lcdWrite@type^0,c
 12699  002EB2  0C01               	retlw	1
 12700  002EB4                     __end_ofPL210:
 12701                           	callstack 0
 12702                           
 12703 ;; *************** function _lcd_gotoxy *****************
 12704 ;; Defined at:
 12705 ;;		line 76 in file "hd44780.c"
 12706 ;; Parameters:    Size  Location     Type
 12707 ;;  x               1    wreg     unsigned char 
 12708 ;;  y               1   30[COMRAM] unsigned char 
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;  x               1   33[COMRAM] unsigned char 
 12711 ;;  address         1   34[COMRAM] unsigned char 
 12712 ;; Return value:  Size  Location     Type
 12713 ;;                  1    wreg      void 
 12714 ;; Registers used:
 12715 ;;		wreg, status,2, status,0, cstack
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/1
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12721 ;;      Params:         1       0       0       0       0       0       0
 12722 ;;      Locals:         2       0       0       0       0       0       0
 12723 ;;      Temps:          2       0       0       0       0       0       0
 12724 ;;      Totals:         5       0       0       0       0       0       0
 12725 ;;Total ram usage:        5 bytes
 12726 ;; Hardware stack levels used: 1
 12727 ;; Hardware stack levels required when called: 5
 12728 ;; This function calls:
 12729 ;;		_lcdWrite
 12730 ;; This function is called by:
 12731 ;;		_lcdPrint
 12732 ;;		_main
 12733 ;;		_show_lcd_main
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text40
 12738  003A24                     __ptext40:
 12739                           	callstack 0
 12740  003A24                     _lcd_gotoxy:
 12741                           	callstack 24
 12742                           
 12743                           ;incstack = 0
 12744                           ;lcd_gotoxy@x stored from wreg
 12745  003A24  6E22               	movwf	lcd_gotoxy@x^0,c
 12746                           
 12747                           ;hd44780.c: 77:     uint8_t address;;hd44780.c: 82: switch(y)
 12748  003A26  D009               	goto	l9134
 12749  003A28                     l125:
 12750                           
 12751                           ;hd44780.c: 85:      address = 0x00;
 12752  003A28  6A23               	clrf	lcd_gotoxy@address^0,c
 12753                           
 12754                           ;hd44780.c: 86:      break;
 12755  003A2A  D016               	goto	l9136
 12756  003A2C                     l9126:
 12757                           
 12758                           ;hd44780.c: 89:      address = 0x40;
 12759  003A2C  0E40               	movlw	64
 12760  003A2E  D003               	goto	L19
 12761  003A30                     l9128:
 12762                           
 12763                           ;hd44780.c: 93:      address = 0x14;
 12764  003A30  0E14               	movlw	20
 12765  003A32  D001               	goto	L19
 12766  003A34                     l9130:
 12767                           
 12768                           ;hd44780.c: 97:      address = 0x54;
 12769  003A34  0E54               	movlw	84
 12770  003A36                     L19:
 12771  003A36  6E23               	movwf	lcd_gotoxy@address^0,c
 12772                           
 12773                           ;hd44780.c: 98:      break;
 12774  003A38  D00F               	goto	l9136
 12775  003A3A                     l9134:
 12776  003A3A  501F               	movf	lcd_gotoxy@y^0,w,c
 12777  003A3C  6E20               	movwf	??_lcd_gotoxy^0,c
 12778  003A3E  6A21               	clrf	(??_lcd_gotoxy+1)^0,c
 12779                           
 12780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12781                           ; Switch size 1, requested type "space"
 12782                           ; Number of cases is 1, Range of values is 0 to 0
 12783                           ; switch strategies available:
 12784                           ; Name         Instructions Cycles
 12785                           ; simple_byte            4     3 (average)
 12786                           ;	Chosen strategy is simple_byte
 12787  003A40  5021               	movf	(??_lcd_gotoxy+1)^0,w,c
 12788  003A42  E1F2               	bnz	l125
 12789                           
 12790                           ; Switch size 1, requested type "space"
 12791                           ; Number of cases is 4, Range of values is 1 to 4
 12792                           ; switch strategies available:
 12793                           ; Name         Instructions Cycles
 12794                           ; simple_byte           13     7 (average)
 12795                           ;	Chosen strategy is simple_byte
 12796  003A44  5020               	movf	??_lcd_gotoxy^0,w,c
 12797  003A46  0A01               	xorlw	1	; case 1
 12798  003A48  E0EF               	bz	l125
 12799  003A4A  0A03               	xorlw	3	; case 2
 12800  003A4C  E0EF               	bz	l9126
 12801  003A4E  0A01               	xorlw	1	; case 3
 12802  003A50  E0EF               	bz	l9128
 12803  003A52  0A07               	xorlw	7	; case 4
 12804  003A54  E0EF               	bz	l9130
 12805  003A56  D7E8               	goto	l125
 12806  003A58                     l9136:
 12807                           
 12808                           ;hd44780.c: 106:     address += x - 1;
 12809  003A58  0422               	decf	lcd_gotoxy@x^0,w,c
 12810  003A5A  2623               	addwf	lcd_gotoxy@address^0,f,c
 12811                           
 12812                           ;hd44780.c: 107:     lcdWrite(0x80 | address, COMMAND);
 12813  003A5C  6A1D               	clrf	lcdWrite@type^0,c
 12814  003A5E  5023               	movf	lcd_gotoxy@address^0,w,c
 12815  003A60  0980               	iorlw	128
 12816  003A62  EF52  F01E         	goto	_lcdWrite
 12817  003A66                     __end_of_lcd_gotoxy:
 12818                           	callstack 0
 12819                           
 12820 ;; *************** function _calc_power *****************
 12821 ;; Defined at:
 12822 ;;		line 710 in file "main.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;  pwr             1    wreg     unsigned char 
 12825 ;;  res             4   10[BANK0 ] unsigned long 
 12826 ;;  u_rl            2   14[BANK0 ] unsigned short 
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;  pwr             1   28[BANK0 ] unsigned char 
 12829 ;;  tt              4   18[BANK0 ] unsigned long 
 12830 ;;  p_w             2   29[BANK0 ] unsigned short 
 12831 ;; Return value:  Size  Location     Type
 12832 ;;                  2   10[BANK0 ] unsigned short 
 12833 ;; Registers used:
 12834 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12835 ;; Tracked objects:
 12836 ;;		On entry : 3E/0
 12837 ;;		On exit  : 3F/0
 12838 ;;		Unchanged: 0/0
 12839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12840 ;;      Params:         0       6       0       0       0       0       0
 12841 ;;      Locals:         0      13       0       0       0       0       0
 12842 ;;      Temps:          0       2       0       0       0       0       0
 12843 ;;      Totals:         0      21       0       0       0       0       0
 12844 ;;Total ram usage:       21 bytes
 12845 ;; Hardware stack levels used: 1
 12846 ;; Hardware stack levels required when called: 4
 12847 ;; This function calls:
 12848 ;;		___lldiv
 12849 ;;		___lmul
 12850 ;;		___lwdiv
 12851 ;;		___lwmod
 12852 ;;		___wmul
 12853 ;; This function is called by:
 12854 ;;		_main
 12855 ;;		_show_lcd_main
 12856 ;; This function uses a non-reentrant model
 12857 ;;
 12858                           
 12859                           	psect	text41
 12860  0026C2                     __ptext41:
 12861                           	callstack 0
 12862  0026C2                     _calc_power:
 12863                           	callstack 25
 12864                           
 12865                           ;incstack = 0
 12866                           ;calc_power@pwr stored from wreg
 12867  0026C2  0100               	movlb	0	; () banked
 12868  0026C4  6F7C               	movwf	calc_power@pwr& (0+255),b
 12869                           
 12870                           ;main.c: 711:     uint32_t tt;;main.c: 712:     uint16_t p_w;;main.c: 714:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 12871  0026C6  C06E  F01B         	movff	calc_power@u_rl,___lmul@multiplier
 12872  0026CA  C06F  F01C         	movff	calc_power@u_rl+1,___lmul@multiplier+1
 12873  0026CE  6A1D               	clrf	(___lmul@multiplier+2)^0,c
 12874  0026D0  6A1E               	clrf	(___lmul@multiplier+3)^0,c
 12875  0026D2  C06E  F01F         	movff	calc_power@u_rl,___lmul@multiplicand
 12876  0026D6  C06F  F020         	movff	calc_power@u_rl+1,___lmul@multiplicand+1
 12877  0026DA  6A21               	clrf	(___lmul@multiplicand+2)^0,c
 12878  0026DC  6A22               	clrf	(___lmul@multiplicand+3)^0,c
 12879  0026DE  EC08  F01C         	call	___lmul	;wreg free
 12880  0026E2  C01B  F076         	movff	?___lmul,_calc_power$2869
 12881  0026E6  C01C  F077         	movff	?___lmul+1,_calc_power$2869+1
 12882  0026EA  C01D  F078         	movff	?___lmul+2,_calc_power$2869+2
 12883  0026EE  C01E  F079         	movff	?___lmul+3,_calc_power$2869+3
 12884                           
 12885                           ;main.c: 711:     uint32_t tt;;main.c: 712:     uint16_t p_w;;main.c: 714:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 12886  0026F2  C076  F01B         	movff	_calc_power$2869,___lmul@multiplier
 12887  0026F6  C077  F01C         	movff	_calc_power$2869+1,___lmul@multiplier+1
 12888  0026FA  C078  F01D         	movff	_calc_power$2869+2,___lmul@multiplier+2
 12889  0026FE  C079  F01E         	movff	_calc_power$2869+3,___lmul@multiplier+3
 12890  002702  0EE8               	movlw	232
 12891  002704  6E1F               	movwf	___lmul@multiplicand^0,c
 12892  002706  0E03               	movlw	3
 12893  002708  6E20               	movwf	(___lmul@multiplicand+1)^0,c
 12894  00270A  6A21               	clrf	(___lmul@multiplicand+2)^0,c
 12895  00270C  6A22               	clrf	(___lmul@multiplicand+3)^0,c
 12896  00270E  EC08  F01C         	call	___lmul	;wreg free
 12897  002712  C01B  F072         	movff	?___lmul,calc_power@tt
 12898  002716  C01C  F073         	movff	?___lmul+1,calc_power@tt+1
 12899  00271A  C01D  F074         	movff	?___lmul+2,calc_power@tt+2
 12900  00271E  C01E  F075         	movff	?___lmul+3,calc_power@tt+3
 12901                           
 12902                           ;main.c: 715:     p_w = tt / res;
 12903  002722  C072  F01B         	movff	calc_power@tt,___lldiv@dividend
 12904  002726  C073  F01C         	movff	calc_power@tt+1,___lldiv@dividend+1
 12905  00272A  C074  F01D         	movff	calc_power@tt+2,___lldiv@dividend+2
 12906  00272E  C075  F01E         	movff	calc_power@tt+3,___lldiv@dividend+3
 12907  002732  C06A  F01F         	movff	calc_power@res,___lldiv@divisor
 12908  002736  C06B  F020         	movff	calc_power@res+1,___lldiv@divisor+1
 12909  00273A  C06C  F021         	movff	calc_power@res+2,___lldiv@divisor+2
 12910  00273E  C06D  F022         	movff	calc_power@res+3,___lldiv@divisor+3
 12911  002742  EC14  F01B         	call	___lldiv	;wreg free
 12912  002746  C01B  F07D         	movff	?___lldiv,calc_power@p_w
 12913  00274A  C01C  F07E         	movff	?___lldiv+1,calc_power@p_w+1
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;main.c: 717:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 12917  00274E  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
 12918  002750  0E0A               	movlw	10
 12919  002752  6E1D               	movwf	___lwdiv@divisor^0,c
 12920  002754  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
 12921  002756  0E64               	movlw	100
 12922  002758  D853               	call	PL158	;call to abstracted procedure
 12923  00275A  EC53  F01D         	call	___lwmod	;wreg free
 12924  00275E  C060  F01B         	movff	?___lwmod,___lwdiv@dividend
 12925  002762  C061  F01C         	movff	?___lwmod+1,___lwdiv@dividend+1
 12926  002766  ECCA  F01C         	call	___lwdiv	;wreg free
 12927  00276A  D841               	call	PL98	;call to abstracted procedure
 12928  00276C  ECDA  F01E         	call	___wmul	;wreg free
 12929  002770  C064  F07A         	movff	?___wmul,_calc_power$2870
 12930  002774  C065  F07B         	movff	?___wmul+1,_calc_power$2870+1
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;main.c: 717:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 12934  002778  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
 12935  00277A  0E64               	movlw	100
 12936  00277C  6E1D               	movwf	___lwdiv@divisor^0,c
 12937  00277E  C07D  F01B         	movff	calc_power@p_w,___lwdiv@dividend
 12938  002782  C07E  F01C         	movff	calc_power@p_w+1,___lwdiv@dividend+1
 12939  002786  ECCA  F01C         	call	___lwdiv	;wreg free
 12940  00278A  D831               	call	PL98	;call to abstracted procedure
 12941  00278C  ECDA  F01E         	call	___wmul	;wreg free
 12942  002790  C064  F070         	movff	?___wmul,??_calc_power
 12943  002794  C065  F071         	movff	?___wmul+1,??_calc_power+1
 12944  002798  C07A  F01B         	movff	_calc_power$2870,___lwdiv@dividend
 12945  00279C  C07B  F01C         	movff	_calc_power$2870+1,___lwdiv@dividend+1
 12946  0027A0  D835               	call	PL208	;call to abstracted procedure
 12947  0027A2  ECCA  F01C         	call	___lwdiv	;wreg free
 12948  0027A6  501B               	movf	?___lwdiv^0,w,c
 12949  0027A8  0100               	movlb	0	; () banked
 12950  0027AA  2770               	addwf	??_calc_power& (0+255),f,b
 12951  0027AC  501C               	movf	(?___lwdiv+1)^0,w,c
 12952  0027AE  2371               	addwfc	(??_calc_power+1)& (0+255),f,b
 12953  0027B0  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
 12954  0027B2  0E0A               	movlw	10
 12955  0027B4  D825               	call	PL158	;call to abstracted procedure
 12956  0027B6  EC53  F01D         	call	___lwmod	;wreg free
 12957  0027BA  C060  F064         	movff	?___lwmod,___wmul@multiplier
 12958  0027BE  C061  F065         	movff	?___lwmod+1,___wmul@multiplier+1
 12959  0027C2  C07C  F066         	movff	calc_power@pwr,___wmul@multiplicand
 12960  0027C6  6B67               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12961  0027C8  ECDA  F01E         	call	___wmul	;wreg free
 12962  0027CC  C064  F01B         	movff	?___wmul,___lwdiv@dividend
 12963  0027D0  C065  F01C         	movff	?___wmul+1,___lwdiv@dividend+1
 12964  0027D4  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
 12965  0027D6  0E64               	movlw	100
 12966  0027D8  6E1D               	movwf	___lwdiv@divisor^0,c
 12967  0027DA  ECCA  F01C         	call	___lwdiv	;wreg free
 12968  0027DE  501B               	movf	?___lwdiv^0,w,c
 12969  0027E0  0100               	movlb	0	; () banked
 12970  0027E2  2570               	addwf	??_calc_power& (0+255),w,b
 12971  0027E4  6F6A               	movwf	?_calc_power& (0+255),b
 12972  0027E6  501C               	movf	(?___lwdiv+1)^0,w,c
 12973  0027E8  2171               	addwfc	(??_calc_power+1)& (0+255),w,b
 12974  0027EA  6F6B               	movwf	(?_calc_power+1)& (0+255),b
 12975                           
 12976                           ; BSR set to: 0
 12977  0027EC  0012               	return		;funcret
 12978  0027EE                     __end_of_calc_power:
 12979                           	callstack 0
 12980  0027EE                     PL98:
 12981                           	callstack 25
 12982  0027EE  C01B  F064         	movff	?___lwdiv,___wmul@multiplier
 12983  0027F2  C01C  F065         	movff	?___lwdiv+1,___wmul@multiplier+1
 12984  0027F6  C07C  F066         	movff	calc_power@pwr,___wmul@multiplicand
 12985  0027FA  0100               	movlb	0	; () banked
 12986  0027FC  6B67               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12987  0027FE  0012               	return	
 12988  002800                     __end_ofPL98:
 12989                           	callstack 0
 12990  002800                     PL158:
 12991                           	callstack 25
 12992  002800  6F62               	movwf	___lwmod@divisor& (0+255),b
 12993  002802  C07D  F060         	movff	calc_power@p_w,___lwmod@dividend
 12994  002806  C07E  F061         	movff	calc_power@p_w+1,___lwmod@dividend+1
 12995  00280A  0012               	return	
 12996  00280C                     __end_ofPL158:
 12997                           	callstack 0
 12998  00280C                     PL208:
 12999                           	callstack 19
 13000  00280C  6A1E               	clrf	(___lwdiv@divisor+1)^0,c
 13001  00280E  0E0A               	movlw	10
 13002  002810  6E1D               	movwf	___lwdiv@divisor^0,c
 13003  002812  0C0A               	retlw	10
 13004  002814                     __end_ofPL208:
 13005                           	callstack 0
 13006                           
 13007 ;; *************** function ___wmul *****************
 13008 ;; Defined at:
 13009 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  multiplier      2    4[BANK0 ] unsigned int 
 13012 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  product         2    8[BANK0 ] unsigned int 
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  2    4[BANK0 ] unsigned int 
 13017 ;; Registers used:
 13018 ;;		wreg, status,2, status,0, prodl, prodh
 13019 ;; Tracked objects:
 13020 ;;		On entry : 3F/0
 13021 ;;		On exit  : 3F/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13024 ;;      Params:         0       4       0       0       0       0       0
 13025 ;;      Locals:         0       2       0       0       0       0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0
 13027 ;;      Totals:         0       6       0       0       0       0       0
 13028 ;;Total ram usage:        6 bytes
 13029 ;; Hardware stack levels used: 1
 13030 ;; Hardware stack levels required when called: 3
 13031 ;; This function calls:
 13032 ;;		Nothing
 13033 ;; This function is called by:
 13034 ;;		_calc_power
 13035 ;;		_atoi
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           	psect	text42
 13040  003DB4                     __ptext42:
 13041                           	callstack 0
 13042  003DB4                     ___wmul:
 13043                           	callstack 23
 13044                           
 13045                           ; BSR set to: 0
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;incstack = 0
 13049  003DB4  5164               	movf	___wmul@multiplier& (0+255),w,b
 13050  003DB6  0366               	mulwf	___wmul@multiplicand& (0+255),b
 13051  003DB8  CFF3 F068          	movff	prodl,___wmul@product
 13052  003DBC  CFF4 F069          	movff	prodh,___wmul@product+1
 13053  003DC0  5164               	movf	___wmul@multiplier& (0+255),w,b
 13054  003DC2  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13055  003DC4  50F3               	movf	243,w,c
 13056  003DC6  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 13057  003DC8  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13058  003DCA  0366               	mulwf	___wmul@multiplicand& (0+255),b
 13059  003DCC  50F3               	movf	243,w,c
 13060  003DCE  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 13061                           
 13062                           ; BSR set to: 0
 13063  003DD0  C068  F064         	movff	___wmul@product,?___wmul
 13064  003DD4  C069  F065         	movff	___wmul@product+1,?___wmul+1
 13065                           
 13066                           ; BSR set to: 0
 13067  003DD8  0012               	return		;funcret
 13068  003DDA                     __end_of___wmul:
 13069                           	callstack 0
 13070                           
 13071 ;; *************** function ___lwmod *****************
 13072 ;; Defined at:
 13073 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;  dividend        2    0[BANK0 ] unsigned int 
 13076 ;;  divisor         2    2[BANK0 ] unsigned int 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  counter         1   33[COMRAM] unsigned char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  2    0[BANK0 ] unsigned int 
 13081 ;; Registers used:
 13082 ;;		wreg, status,2, status,0
 13083 ;; Tracked objects:
 13084 ;;		On entry : 3F/0
 13085 ;;		On exit  : 3F/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13088 ;;      Params:         0       4       0       0       0       0       0
 13089 ;;      Locals:         1       0       0       0       0       0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0
 13091 ;;      Totals:         1       4       0       0       0       0       0
 13092 ;;Total ram usage:        5 bytes
 13093 ;; Hardware stack levels used: 1
 13094 ;; Hardware stack levels required when called: 3
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_show_lcd_main
 13099 ;;		_calc_power
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           	psect	text43
 13104  003AA6                     __ptext43:
 13105                           	callstack 0
 13106  003AA6                     ___lwmod:
 13107                           	callstack 25
 13108                           
 13109                           ; BSR set to: 0
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;incstack = 0
 13113  003AA6  5162               	movf	___lwmod@divisor& (0+255),w,b
 13114  003AA8  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13115  003AAA  E017               	bz	l1232
 13116                           
 13117                           ; BSR set to: 0
 13118  003AAC  0E01               	movlw	1
 13119  003AAE  6E22               	movwf	___lwmod@counter^0,c
 13120  003AB0  D004               	goto	l9240
 13121  003AB2                     l9238:
 13122                           
 13123                           ; BSR set to: 0
 13124  003AB2  90D8               	bcf	status,0,c
 13125  003AB4  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 13126  003AB6  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13127  003AB8  2A22               	incf	___lwmod@counter^0,f,c
 13128  003ABA                     l9240:
 13129                           
 13130                           ; BSR set to: 0
 13131  003ABA  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13132  003ABC  D7FA               	goto	l9238
 13133  003ABE                     u11060:
 13134                           
 13135                           ; BSR set to: 0
 13136  003ABE  5162               	movf	___lwmod@divisor& (0+255),w,b
 13137  003AC0  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 13138  003AC2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13139  003AC4  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13140  003AC6  E304               	bnc	l9246
 13141                           
 13142                           ; BSR set to: 0
 13143  003AC8  5162               	movf	___lwmod@divisor& (0+255),w,b
 13144  003ACA  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 13145  003ACC  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13146  003ACE  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13147  003AD0                     l9246:
 13148                           
 13149                           ; BSR set to: 0
 13150  003AD0  90D8               	bcf	status,0,c
 13151  003AD2  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13152  003AD4  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 0
 13155  003AD6  2E22               	decfsz	___lwmod@counter^0,f,c
 13156  003AD8  D7F2               	goto	u11060
 13157  003ADA                     l1232:
 13158                           
 13159                           ; BSR set to: 0
 13160  003ADA  C060  F060         	movff	___lwmod@dividend,?___lwmod
 13161  003ADE  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 13162                           
 13163                           ; BSR set to: 0
 13164  003AE2  0012               	return		;funcret
 13165  003AE4                     __end_of___lwmod:
 13166                           	callstack 0
 13167                           
 13168 ;; *************** function ___lwdiv *****************
 13169 ;; Defined at:
 13170 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  dividend        2   26[COMRAM] unsigned int 
 13173 ;;  divisor         2   28[COMRAM] unsigned int 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  quotient        2   31[COMRAM] unsigned int 
 13176 ;;  counter         1   30[COMRAM] unsigned char 
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  2   26[COMRAM] unsigned int 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13186 ;;      Params:         4       0       0       0       0       0       0
 13187 ;;      Locals:         3       0       0       0       0       0       0
 13188 ;;      Temps:          0       0       0       0       0       0       0
 13189 ;;      Totals:         7       0       0       0       0       0       0
 13190 ;;Total ram usage:        7 bytes
 13191 ;; Hardware stack levels used: 1
 13192 ;; Hardware stack levels required when called: 3
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_main
 13197 ;;		_show_lcd_main
 13198 ;;		_calc_power
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           	psect	text44
 13203  003994                     __ptext44:
 13204                           	callstack 0
 13205  003994                     ___lwdiv:
 13206                           	callstack 25
 13207                           
 13208                           ; BSR set to: 0
 13209                           ;incstack = 0
 13210  003994  6A20               	clrf	___lwdiv@quotient^0,c
 13211  003996  6A21               	clrf	(___lwdiv@quotient+1)^0,c
 13212  003998  501D               	movf	___lwdiv@divisor^0,w,c
 13213  00399A  101E               	iorwf	(___lwdiv@divisor+1)^0,w,c
 13214  00399C  E01B               	bz	l1222
 13215  00399E  0E01               	movlw	1
 13216  0039A0  6E1F               	movwf	___lwdiv@counter^0,c
 13217  0039A2  D004               	goto	l9220
 13218  0039A4                     l9218:
 13219  0039A4  90D8               	bcf	status,0,c
 13220  0039A6  361D               	rlcf	___lwdiv@divisor^0,f,c
 13221  0039A8  361E               	rlcf	(___lwdiv@divisor+1)^0,f,c
 13222  0039AA  2A1F               	incf	___lwdiv@counter^0,f,c
 13223  0039AC                     l9220:
 13224  0039AC  AE1E               	btfss	(___lwdiv@divisor+1)^0,7,c
 13225  0039AE  D7FA               	goto	l9218
 13226  0039B0                     u11030:
 13227  0039B0  90D8               	bcf	status,0,c
 13228  0039B2  3620               	rlcf	___lwdiv@quotient^0,f,c
 13229  0039B4  3621               	rlcf	(___lwdiv@quotient+1)^0,f,c
 13230  0039B6  501D               	movf	___lwdiv@divisor^0,w,c
 13231  0039B8  5C1B               	subwf	___lwdiv@dividend^0,w,c
 13232  0039BA  501E               	movf	(___lwdiv@divisor+1)^0,w,c
 13233  0039BC  581C               	subwfb	(___lwdiv@dividend+1)^0,w,c
 13234  0039BE  E305               	bnc	l9230
 13235  0039C0  501D               	movf	___lwdiv@divisor^0,w,c
 13236  0039C2  5E1B               	subwf	___lwdiv@dividend^0,f,c
 13237  0039C4  501E               	movf	(___lwdiv@divisor+1)^0,w,c
 13238  0039C6  5A1C               	subwfb	(___lwdiv@dividend+1)^0,f,c
 13239  0039C8  8020               	bsf	___lwdiv@quotient^0,0,c
 13240  0039CA                     l9230:
 13241  0039CA  90D8               	bcf	status,0,c
 13242  0039CC  321E               	rrcf	(___lwdiv@divisor+1)^0,f,c
 13243  0039CE  321D               	rrcf	___lwdiv@divisor^0,f,c
 13244  0039D0  2E1F               	decfsz	___lwdiv@counter^0,f,c
 13245  0039D2  D7EE               	goto	u11030
 13246  0039D4                     l1222:
 13247  0039D4  C020  F01B         	movff	___lwdiv@quotient,?___lwdiv
 13248  0039D8  C021  F01C         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13249  0039DC  0012               	return		;funcret
 13250  0039DE                     __end_of___lwdiv:
 13251                           	callstack 0
 13252                           
 13253 ;; *************** function ___lmul *****************
 13254 ;; Defined at:
 13255 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;  multiplier      4   26[COMRAM] unsigned long 
 13258 ;;  multiplicand    4   30[COMRAM] unsigned long 
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;  product         4    0[BANK0 ] unsigned long 
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  4   26[COMRAM] unsigned long 
 13263 ;; Registers used:
 13264 ;;		wreg, status,2, status,0
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/1
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13270 ;;      Params:         8       0       0       0       0       0       0
 13271 ;;      Locals:         0       4       0       0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0
 13273 ;;      Totals:         8       4       0       0       0       0       0
 13274 ;;Total ram usage:       12 bytes
 13275 ;; Hardware stack levels used: 1
 13276 ;; Hardware stack levels required when called: 3
 13277 ;; This function calls:
 13278 ;;		Nothing
 13279 ;; This function is called by:
 13280 ;;		_main
 13281 ;;		_calc_power
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text45
 13286  003810                     __ptext45:
 13287                           	callstack 0
 13288  003810                     ___lmul:
 13289                           	callstack 25
 13290                           
 13291                           ;incstack = 0
 13292  003810  0100               	movlb	0	; () banked
 13293  003812  6B60               	clrf	___lmul@product& (0+255),b
 13294  003814  6B61               	clrf	(___lmul@product+1)& (0+255),b
 13295  003816  6B62               	clrf	(___lmul@product+2)& (0+255),b
 13296  003818  6B63               	clrf	(___lmul@product+3)& (0+255),b
 13297  00381A                     l740:
 13298  00381A  A01B               	btfss	___lmul@multiplier^0,0,c
 13299  00381C  D009               	goto	l9186
 13300  00381E  501F               	movf	___lmul@multiplicand^0,w,c
 13301  003820  0100               	movlb	0	; () banked
 13302  003822  2760               	addwf	___lmul@product& (0+255),f,b
 13303  003824  5020               	movf	(___lmul@multiplicand+1)^0,w,c
 13304  003826  2361               	addwfc	(___lmul@product+1)& (0+255),f,b
 13305  003828  5021               	movf	(___lmul@multiplicand+2)^0,w,c
 13306  00382A  2362               	addwfc	(___lmul@product+2)& (0+255),f,b
 13307  00382C  5022               	movf	(___lmul@multiplicand+3)^0,w,c
 13308  00382E  2363               	addwfc	(___lmul@product+3)& (0+255),f,b
 13309  003830                     l9186:
 13310  003830  90D8               	bcf	status,0,c
 13311  003832  361F               	rlcf	___lmul@multiplicand^0,f,c
 13312  003834  3620               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13313  003836  3621               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13314  003838  3622               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13315  00383A  90D8               	bcf	status,0,c
 13316  00383C  321E               	rrcf	(___lmul@multiplier+3)^0,f,c
 13317  00383E  321D               	rrcf	(___lmul@multiplier+2)^0,f,c
 13318  003840  321C               	rrcf	(___lmul@multiplier+1)^0,f,c
 13319  003842  321B               	rrcf	___lmul@multiplier^0,f,c
 13320  003844  501B               	movf	___lmul@multiplier^0,w,c
 13321  003846  101C               	iorwf	(___lmul@multiplier+1)^0,w,c
 13322  003848  101D               	iorwf	(___lmul@multiplier+2)^0,w,c
 13323  00384A  101E               	iorwf	(___lmul@multiplier+3)^0,w,c
 13324  00384C  E1E6               	bnz	l740
 13325  00384E  C060  F01B         	movff	___lmul@product,?___lmul
 13326  003852  C061  F01C         	movff	___lmul@product+1,?___lmul+1
 13327  003856  C062  F01D         	movff	___lmul@product+2,?___lmul+2
 13328  00385A  C063  F01E         	movff	___lmul@product+3,?___lmul+3
 13329  00385E  0012               	return		;funcret
 13330  003860                     __end_of___lmul:
 13331                           	callstack 0
 13332                           
 13333 ;; *************** function ___lldiv *****************
 13334 ;; Defined at:
 13335 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  dividend        4   26[COMRAM] unsigned long 
 13338 ;;  divisor         4   30[COMRAM] unsigned long 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  quotient        4    0[BANK0 ] unsigned long 
 13341 ;;  counter         1    4[BANK0 ] unsigned char 
 13342 ;; Return value:  Size  Location     Type
 13343 ;;                  4   26[COMRAM] unsigned long 
 13344 ;; Registers used:
 13345 ;;		wreg, status,2, status,0
 13346 ;; Tracked objects:
 13347 ;;		On entry : 0/1
 13348 ;;		On exit  : 3F/0
 13349 ;;		Unchanged: 0/0
 13350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13351 ;;      Params:         8       0       0       0       0       0       0
 13352 ;;      Locals:         0       5       0       0       0       0       0
 13353 ;;      Temps:          0       0       0       0       0       0       0
 13354 ;;      Totals:         8       5       0       0       0       0       0
 13355 ;;Total ram usage:       13 bytes
 13356 ;; Hardware stack levels used: 1
 13357 ;; Hardware stack levels required when called: 3
 13358 ;; This function calls:
 13359 ;;		Nothing
 13360 ;; This function is called by:
 13361 ;;		_main
 13362 ;;		_calc_power
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           	psect	text46
 13367  003628                     __ptext46:
 13368                           	callstack 0
 13369  003628                     ___lldiv:
 13370                           	callstack 25
 13371                           
 13372                           ;incstack = 0
 13373  003628  0100               	movlb	0	; () banked
 13374  00362A  6B60               	clrf	___lldiv@quotient& (0+255),b
 13375  00362C  6B61               	clrf	(___lldiv@quotient+1)& (0+255),b
 13376  00362E  6B62               	clrf	(___lldiv@quotient+2)& (0+255),b
 13377  003630  6B63               	clrf	(___lldiv@quotient+3)& (0+255),b
 13378                           
 13379                           ; BSR set to: 0
 13380  003632  501F               	movf	___lldiv@divisor^0,w,c
 13381  003634  1020               	iorwf	(___lldiv@divisor+1)^0,w,c
 13382  003636  1021               	iorwf	(___lldiv@divisor+2)^0,w,c
 13383  003638  1022               	iorwf	(___lldiv@divisor+3)^0,w,c
 13384  00363A  E029               	bz	l758
 13385                           
 13386                           ; BSR set to: 0
 13387  00363C  0E01               	movlw	1
 13388  00363E  6F64               	movwf	___lldiv@counter& (0+255),b
 13389  003640  D006               	goto	l9198
 13390  003642                     l9196:
 13391                           
 13392                           ; BSR set to: 0
 13393  003642  90D8               	bcf	status,0,c
 13394  003644  361F               	rlcf	___lldiv@divisor^0,f,c
 13395  003646  3620               	rlcf	(___lldiv@divisor+1)^0,f,c
 13396  003648  3621               	rlcf	(___lldiv@divisor+2)^0,f,c
 13397  00364A  3622               	rlcf	(___lldiv@divisor+3)^0,f,c
 13398  00364C  2B64               	incf	___lldiv@counter& (0+255),f,b
 13399  00364E                     l9198:
 13400                           
 13401                           ; BSR set to: 0
 13402  00364E  AE22               	btfss	(___lldiv@divisor+3)^0,7,c
 13403  003650  D7F8               	goto	l9196
 13404  003652                     u11000:
 13405                           
 13406                           ; BSR set to: 0
 13407  003652  90D8               	bcf	status,0,c
 13408  003654  3760               	rlcf	___lldiv@quotient& (0+255),f,b
 13409  003656  3761               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13410  003658  3762               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13411  00365A  3763               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13412                           
 13413                           ; BSR set to: 0
 13414  00365C  501F               	movf	___lldiv@divisor^0,w,c
 13415  00365E  5C1B               	subwf	___lldiv@dividend^0,w,c
 13416  003660  5020               	movf	(___lldiv@divisor+1)^0,w,c
 13417  003662  581C               	subwfb	(___lldiv@dividend+1)^0,w,c
 13418  003664  5021               	movf	(___lldiv@divisor+2)^0,w,c
 13419  003666  581D               	subwfb	(___lldiv@dividend+2)^0,w,c
 13420  003668  5022               	movf	(___lldiv@divisor+3)^0,w,c
 13421  00366A  581E               	subwfb	(___lldiv@dividend+3)^0,w,c
 13422  00366C  E309               	bnc	l9208
 13423                           
 13424                           ; BSR set to: 0
 13425  00366E  501F               	movf	___lldiv@divisor^0,w,c
 13426  003670  5E1B               	subwf	___lldiv@dividend^0,f,c
 13427  003672  5020               	movf	(___lldiv@divisor+1)^0,w,c
 13428  003674  5A1C               	subwfb	(___lldiv@dividend+1)^0,f,c
 13429  003676  5021               	movf	(___lldiv@divisor+2)^0,w,c
 13430  003678  5A1D               	subwfb	(___lldiv@dividend+2)^0,f,c
 13431  00367A  5022               	movf	(___lldiv@divisor+3)^0,w,c
 13432  00367C  5A1E               	subwfb	(___lldiv@dividend+3)^0,f,c
 13433                           
 13434                           ; BSR set to: 0
 13435  00367E  8160               	bsf	___lldiv@quotient& (0+255),0,b
 13436  003680                     l9208:
 13437                           
 13438                           ; BSR set to: 0
 13439  003680  90D8               	bcf	status,0,c
 13440  003682  3222               	rrcf	(___lldiv@divisor+3)^0,f,c
 13441  003684  3221               	rrcf	(___lldiv@divisor+2)^0,f,c
 13442  003686  3220               	rrcf	(___lldiv@divisor+1)^0,f,c
 13443  003688  321F               	rrcf	___lldiv@divisor^0,f,c
 13444                           
 13445                           ; BSR set to: 0
 13446  00368A  2F64               	decfsz	___lldiv@counter& (0+255),f,b
 13447  00368C  D7E2               	goto	u11000
 13448  00368E                     l758:
 13449                           
 13450                           ; BSR set to: 0
 13451  00368E  C060  F01B         	movff	___lldiv@quotient,?___lldiv
 13452  003692  C061  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
 13453  003696  C062  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
 13454  00369A  C063  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
 13455                           
 13456                           ; BSR set to: 0
 13457  00369E  0012               	return		;funcret
 13458  0036A0                     __end_of___lldiv:
 13459                           	callstack 0
 13460                           
 13461 ;; *************** function _read_eep *****************
 13462 ;; Defined at:
 13463 ;;		line 25 in file "eeprom.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  address         2   26[COMRAM] unsigned short 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;		None
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      unsigned char 
 13470 ;; Registers used:
 13471 ;;		wreg, status,2
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/1
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13477 ;;      Params:         2       0       0       0       0       0       0
 13478 ;;      Locals:         0       0       0       0       0       0       0
 13479 ;;      Temps:          0       0       0       0       0       0       0
 13480 ;;      Totals:         2       0       0       0       0       0       0
 13481 ;;Total ram usage:        2 bytes
 13482 ;; Hardware stack levels used: 1
 13483 ;; Hardware stack levels required when called: 3
 13484 ;; This function calls:
 13485 ;;		Nothing
 13486 ;; This function is called by:
 13487 ;;		_main
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           	psect	text47
 13492  003E94                     __ptext47:
 13493                           	callstack 0
 13494  003E94                     _read_eep:
 13495                           	callstack 27
 13496                           
 13497                           ;eeprom.c: 27:     while( EECON1bits.WR )
 13498                           
 13499                           ;eeprom.c: 28:     {}
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;incstack = 0
 13503  003E94  B2A6               	btfsc	166,1,c	;volsfr
 13504  003E96  D7FE               	goto	__ptext47
 13505                           
 13506                           ;eeprom.c: 30:     EEADR = address;
 13507  003E98  C01B  FFA9         	movff	read_eep@address,4009	;volatile
 13508                           
 13509                           ;eeprom.c: 31:     EECON1bits.EEPGD = 0;
 13510  003E9C  9EA6               	bcf	166,7,c	;volsfr
 13511                           
 13512                           ;eeprom.c: 32:     EECON1bits.CFGS = 0;
 13513  003E9E  9CA6               	bcf	166,6,c	;volsfr
 13514                           
 13515                           ;eeprom.c: 33:     EECON1bits.RD = 1;
 13516  003EA0  80A6               	bsf	166,0,c	;volsfr
 13517                           
 13518                           ;eeprom.c: 34:     return( EEDATA );
 13519  003EA2  50A8               	movf	168,w,c	;volatile
 13520  003EA4  0012               	return		;funcret
 13521  003EA6                     __end_of_read_eep:
 13522                           	callstack 0
 13523                           
 13524 ;; *************** function _readTemp_Single *****************
 13525 ;; Defined at:
 13526 ;;		line 45 in file "ds18b20.c"
 13527 ;; Parameters:    Size  Location     Type
 13528 ;;  buf             2    0[BANK0 ] PTR unsigned short 
 13529 ;;		 -> temperature(2), 
 13530 ;;  minus           2    2[BANK0 ] PTR unsigned char 
 13531 ;;		 -> minus(1), 
 13532 ;;  time_flag       2    4[BANK0 ] PTR unsigned char 
 13533 ;;		 -> time_flag(1), 
 13534 ;;  timer_val       2    6[BANK0 ] PTR unsigned char 
 13535 ;;		 -> timer_val(2), 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  temp            2   13[BANK0 ] unsigned short 
 13538 ;;  i               1   12[BANK0 ] unsigned char 
 13539 ;;  tmp             1   11[BANK0 ] unsigned char 
 13540 ;;  fptmp           1    0        unsigned char 
 13541 ;; Return value:  Size  Location     Type
 13542 ;;                  1    wreg      unsigned char 
 13543 ;; Registers used:
 13544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13545 ;; Tracked objects:
 13546 ;;		On entry : 3F/0
 13547 ;;		On exit  : 0/0
 13548 ;;		Unchanged: 0/0
 13549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13550 ;;      Params:         0       8       0       0       0       0       0
 13551 ;;      Locals:         0       4       0       0       0       0       0
 13552 ;;      Temps:          0       3       0       0       0       0       0
 13553 ;;      Totals:         0      15       0       0       0       0       0
 13554 ;;Total ram usage:       15 bytes
 13555 ;; Hardware stack levels used: 1
 13556 ;; Hardware stack levels required when called: 5
 13557 ;; This function calls:
 13558 ;;		_ds18b20_crc8
 13559 ;;		_ow_reset
 13560 ;;		_read_byte
 13561 ;;		_write_byte
 13562 ;; This function is called by:
 13563 ;;		_main
 13564 ;; This function uses a non-reentrant model
 13565 ;;
 13566                           
 13567                           	psect	text48
 13568  00294E                     __ptext48:
 13569                           	callstack 0
 13570  00294E                     _readTemp_Single:
 13571                           	callstack 0
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;ds18b20.c: 48:     uint8_t i, tmp, fptmp;;ds18b20.c: 49:     *minus = '+';
 13575                           
 13576                           ; BSR set to: 0
 13577                           
 13578                           ;incstack = 0
 13579  00294E  D893               	call	PL180	;call to abstracted procedure
 13580  002950  0E2B               	movlw	43
 13581  002952  6EDF               	movwf	indf2,c
 13582                           
 13583                           ;ds18b20.c: 51:     switch (*time_flag) {
 13584  002954  D07B               	goto	l9606
 13585  002956                     l9526:
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;ds18b20.c: 53:             if (!ow_reset())
 13589  002956  EC57  F01C         	call	_ow_reset	;wreg free
 13590  00295A  0900               	iorlw	0
 13591  00295C  A4D8               	btfss	status,2,c
 13592  00295E  0C03               	retlw	3
 13593                           
 13594                           ;ds18b20.c: 54:             {;ds18b20.c: 55:                 write_byte(0xCC);
 13595  002960  0ECC               	movlw	204
 13596  002962  EC72  F01D         	call	_write_byte
 13597                           
 13598                           ;ds18b20.c: 56:                 write_byte(0x44);
 13599  002966  0E44               	movlw	68
 13600  002968  EC72  F01D         	call	_write_byte
 13601                           
 13602                           ;ds18b20.c: 57:                 *timer_val = 0;
 13603  00296C  C066  FFD9         	movff	readTemp_Single@timer_val,fsr2l
 13604  002970  C067  FFDA         	movff	readTemp_Single@timer_val+1,fsr2h
 13605  002974  6ADF               	clrf	indf2,c
 13606                           
 13607                           ;ds18b20.c: 58:                 *time_flag = 2;
 13608  002976  D87A               	call	PL152	;call to abstracted procedure
 13609  002978  0E02               	movlw	2
 13610  00297A  6EDF               	movwf	indf2,c
 13611                           
 13612                           ;ds18b20.c: 59:                 TMR2ON = 1;
 13613  00297C  84CA               	bsf	4042,2,c	;volatile
 13614                           
 13615                           ;ds18b20.c: 61:                 return 0;
 13616  00297E  0C00               	retlw	0
 13617  002980                     l9546:
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;ds18b20.c: 67:             ow_reset();
 13621  002980  EC57  F01C         	call	_ow_reset	;wreg free
 13622                           
 13623                           ;ds18b20.c: 68:             write_byte(0xCC);
 13624  002984  0ECC               	movlw	204
 13625  002986  EC72  F01D         	call	_write_byte
 13626                           
 13627                           ;ds18b20.c: 69:             write_byte(0xBE);
 13628  00298A  0EBE               	movlw	190
 13629  00298C  EC72  F01D         	call	_write_byte
 13630                           
 13631                           ;ds18b20.c: 70:             for (i = 0; i < 9; i++)
 13632  002990  0100               	movlb	0	; () banked
 13633  002992  6B6C               	clrf	readTemp_Single@i& (0+255),b
 13634  002994                     l9558:
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;ds18b20.c: 71:             {;ds18b20.c: 72:                 scratch[i] = read_byte();
 13638  002994  0E92               	movlw	low _scratch
 13639  002996  256C               	addwf	readTemp_Single@i& (0+255),w,b
 13640  002998  6ED9               	movwf	fsr2l,c
 13641  00299A  6ADA               	clrf	fsr2h,c
 13642  00299C  0E01               	movlw	high _scratch
 13643  00299E  22DA               	addwfc	fsr2h,f,c
 13644  0029A0  EC33  F01D         	call	_read_byte	;wreg free
 13645  0029A4  6EDF               	movwf	indf2,c
 13646                           
 13647                           ;ds18b20.c: 73:             }
 13648  0029A6  0100               	movlb	0	; () banked
 13649  0029A8  2B6C               	incf	readTemp_Single@i& (0+255),f,b
 13650                           
 13651                           ; BSR set to: 0
 13652  0029AA  0E08               	movlw	8
 13653  0029AC  656C               	cpfsgt	readTemp_Single@i& (0+255),b
 13654  0029AE  D7F2               	goto	l9558
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;ds18b20.c: 75:             if (ds18b20_crc8(scratch, 9)) {
 13658  0029B0  0E92               	movlw	low _scratch
 13659  0029B2  6E1B               	movwf	ds18b20_crc8@data_in^0,c
 13660  0029B4  0E01               	movlw	high _scratch
 13661  0029B6  6E1C               	movwf	(ds18b20_crc8@data_in+1)^0,c
 13662  0029B8  0E09               	movlw	9
 13663  0029BA  6E1D               	movwf	ds18b20_crc8@num_bytes^0,c
 13664  0029BC  EC30  F01C         	call	_ds18b20_crc8	;wreg free
 13665  0029C0  0900               	iorlw	0
 13666  0029C2  E001               	bz	l9570
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;ds18b20.c: 76:                 return 5;
 13670  0029C4  0C05               	retlw	5
 13671  0029C6                     l9570:
 13672                           
 13673                           ; BSR set to: 0
 13674                           ;ds18b20.c: 79:             temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[
      +                          0]);
 13675  0029C6  0101               	movlb	1	; () banked
 13676  0029C8  5193               	movf	(_scratch+1)& (0+255),w,b
 13677  0029CA  0100               	movlb	0	; () banked
 13678  0029CC  6F68               	movwf	??_readTemp_Single& (0+255),b
 13679  0029CE  0101               	movlb	1	; () banked
 13680  0029D0  5192               	movf	_scratch& (0+255),w,b
 13681  0029D2  0100               	movlb	0	; () banked
 13682  0029D4  6F6D               	movwf	readTemp_Single@temp& (0+255),b
 13683  0029D6  C068  F06E         	movff	??_readTemp_Single,readTemp_Single@temp+1
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;ds18b20.c: 82:             if (temp & 0x8000) {
 13687  0029DA  AF6E               	btfss	(readTemp_Single@temp+1)& (0+255),7,b
 13688  0029DC  D007               	goto	l9578
 13689                           
 13690                           ; BSR set to: 0
 13691                           ;ds18b20.c: 83:                 temp = -temp;
 13692  0029DE  6D6D               	negf	readTemp_Single@temp& (0+255),b
 13693  0029E0  1F6E               	comf	(readTemp_Single@temp+1)& (0+255),f,b
 13694  0029E2  B0D8               	btfsc	status,0,c
 13695  0029E4  2B6E               	incf	(readTemp_Single@temp+1)& (0+255),f,b
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;ds18b20.c: 84:                 *minus = '-';
 13699  0029E6  D847               	call	PL180	;call to abstracted procedure
 13700  0029E8  0E2D               	movlw	45
 13701  0029EA  6EDF               	movwf	indf2,c
 13702  0029EC                     l9578:
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;ds18b20.c: 87:             tmp = temp & 0x0f;
 13706  0029EC  516D               	movf	readTemp_Single@temp& (0+255),w,b
 13707  0029EE  0B0F               	andlw	15
 13708  0029F0  6F6B               	movwf	readTemp_Single@tmp& (0+255),b
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;ds18b20.c: 88:             tmp = fract[tmp];
 13712  0029F2  0EFD               	movlw	low _fract
 13713  0029F4  256B               	addwf	readTemp_Single@tmp& (0+255),w,b
 13714  0029F6  6EF6               	movwf	tblptrl,c
 13715  0029F8  6AF7               	clrf	tblptrh,c
 13716  0029FA  0E7D               	movlw	high _fract
 13717  0029FC  22F7               	addwfc	tblptrh,f,c
 13718  0029FE                     	if	0	;There are less than 3 active tblptr bytes
 13719  0029FE                     	endif
 13720  0029FE  0008               	tblrd		*
 13721  002A00  CFF5 F06B          	movff	tablat,readTemp_Single@tmp
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;ds18b20.c: 89:             temp = temp >> 4;
 13725  002A04  C06D  F068         	movff	readTemp_Single@temp,??_readTemp_Single
 13726  002A08  C06E  F069         	movff	readTemp_Single@temp+1,??_readTemp_Single+1
 13727  002A0C  0E04               	movlw	4
 13728  002A0E  6F6A               	movwf	(??_readTemp_Single+2)& (0+255),b
 13729  002A10                     u11295:
 13730  002A10  90D8               	bcf	status,0,c
 13731  002A12  3369               	rrcf	(??_readTemp_Single+1)& (0+255),f,b
 13732  002A14  3368               	rrcf	??_readTemp_Single& (0+255),f,b
 13733  002A16  2F6A               	decfsz	(??_readTemp_Single+2)& (0+255),f,b
 13734  002A18  D7FB               	goto	u11295
 13735  002A1A  C068  F06D         	movff	??_readTemp_Single,readTemp_Single@temp
 13736  002A1E  C069  F06E         	movff	??_readTemp_Single+1,readTemp_Single@temp+1
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;ds18b20.c: 90:             temp = (temp & 0x00ff) * 10;
 13740  002A22  516D               	movf	readTemp_Single@temp& (0+255),w,b
 13741  002A24  0D0A               	mullw	10
 13742  002A26  CFF3 F06D          	movff	prodl,readTemp_Single@temp
 13743  002A2A  CFF4 F06E          	movff	prodh,readTemp_Single@temp+1
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;ds18b20.c: 91:             temp = temp + tmp;
 13747  002A2E  516B               	movf	readTemp_Single@tmp& (0+255),w,b
 13748  002A30  276D               	addwf	readTemp_Single@temp& (0+255),f,b
 13749  002A32  0E00               	movlw	0
 13750  002A34  236E               	addwfc	(readTemp_Single@temp+1)& (0+255),f,b
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;ds18b20.c: 103:             *buf = temp;
 13754  002A36  C060  FFD9         	movff	readTemp_Single@buf,fsr2l
 13755  002A3A  C061  FFDA         	movff	readTemp_Single@buf+1,fsr2h
 13756  002A3E  C06D  FFDE         	movff	readTemp_Single@temp,postinc2
 13757  002A42  C06E  FFDD         	movff	readTemp_Single@temp+1,postdec2
 13758                           
 13759                           ; BSR set to: 0
 13760                           ;ds18b20.c: 104:             *time_flag = 0;
 13761  002A46  D812               	call	PL152	;call to abstracted procedure
 13762  002A48  6ADF               	clrf	indf2,c
 13763                           
 13764                           ; BSR set to: 0
 13765                           ;ds18b20.c: 105:             return 1;
 13766  002A4A  0C01               	retlw	1
 13767  002A4C                     l9606:
 13768                           
 13769                           ; BSR set to: 0
 13770  002A4C  D80F               	call	PL152	;call to abstracted procedure
 13771  002A4E  50DF               	movf	indf2,w,c
 13772  002A50  6F68               	movwf	??_readTemp_Single& (0+255),b
 13773  002A52  6B69               	clrf	(??_readTemp_Single+1)& (0+255),b
 13774                           
 13775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13776                           ; Switch size 1, requested type "space"
 13777                           ; Number of cases is 1, Range of values is 0 to 0
 13778                           ; switch strategies available:
 13779                           ; Name         Instructions Cycles
 13780                           ; simple_byte            4     3 (average)
 13781                           ;	Chosen strategy is simple_byte
 13782  002A54  5169               	movf	(??_readTemp_Single+1)& (0+255),w,b
 13783  002A56  A4D8               	btfss	status,2,c
 13784  002A58  0012               	return	
 13785                           
 13786                           ; BSR set to: 0
 13787                           ; Switch size 1, requested type "space"
 13788                           ; Number of cases is 3, Range of values is 0 to 2
 13789                           ; switch strategies available:
 13790                           ; Name         Instructions Cycles
 13791                           ; simple_byte           10     6 (average)
 13792                           ;	Chosen strategy is simple_byte
 13793  002A5A  5168               	movf	??_readTemp_Single& (0+255),w,b
 13794  002A5C  E101 D77B          	bz	l9526
 13795  002A60  0A01               	xorlw	1	; case 1
 13796  002A62  E08E               	bz	l9546
 13797  002A64  0A03               	xorlw	3	; case 2
 13798  002A66  B4D8               	btfsc	status,2,c
 13799  002A68  0C00               	retlw	0
 13800  002A6A  0012               	return		;funcret
 13801  002A6C                     __end_of_readTemp_Single:
 13802                           	callstack 0
 13803  002A6C                     PL152:
 13804                           	callstack 25
 13805  002A6C  C064  FFD9         	movff	readTemp_Single@time_flag,fsr2l
 13806  002A70  C065  FFDA         	movff	readTemp_Single@time_flag+1,fsr2h
 13807  002A74  0012               	return	
 13808  002A76                     __end_ofPL152:
 13809                           	callstack 0
 13810  002A76                     PL180:
 13811                           	callstack 25
 13812  002A76  C062  FFD9         	movff	readTemp_Single@minus,fsr2l
 13813  002A7A  C063  FFDA         	movff	readTemp_Single@minus+1,fsr2h
 13814  002A7E  0012               	return	
 13815  002A80                     __end_ofPL180:
 13816                           	callstack 0
 13817                           
 13818 ;; *************** function _read_byte *****************
 13819 ;; Defined at:
 13820 ;;		line 50 in file "onewire.c"
 13821 ;; Parameters:    Size  Location     Type
 13822 ;;		None
 13823 ;; Auto vars:     Size  Location     Type
 13824 ;;  i               1   29[COMRAM] unsigned char 
 13825 ;;  val             1   28[COMRAM] unsigned char 
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      unsigned char 
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0, cstack
 13830 ;; Tracked objects:
 13831 ;;		On entry : 3F/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13835 ;;      Params:         0       0       0       0       0       0       0
 13836 ;;      Locals:         2       0       0       0       0       0       0
 13837 ;;      Temps:          2       0       0       0       0       0       0
 13838 ;;      Totals:         4       0       0       0       0       0       0
 13839 ;;Total ram usage:        4 bytes
 13840 ;; Hardware stack levels used: 1
 13841 ;; Hardware stack levels required when called: 4
 13842 ;; This function calls:
 13843 ;;		_read_bit
 13844 ;; This function is called by:
 13845 ;;		_readTemp_Single
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text49
 13850  003A66                     __ptext49:
 13851                           	callstack 0
 13852  003A66                     _read_byte:
 13853                           	callstack 25
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;onewire.c: 52:    uint8_t i;;onewire.c: 53:    uint8_t val = 0;
 13857                           
 13858                           ;incstack = 0
 13859  003A66  6A1D               	clrf	read_byte@val^0,c
 13860                           
 13861                           ;onewire.c: 55:    for(i=0;i<8;i++)
 13862  003A68  6A1E               	clrf	read_byte@i^0,c
 13863  003A6A                     l9366:
 13864                           
 13865                           ;onewire.c: 56:    {;onewire.c: 57:       if(read_bit()) val |= (0x01 << i);
 13866  003A6A  EC30  F01F         	call	_read_bit	;wreg free
 13867  003A6E  0900               	iorlw	0
 13868  003A70  E00C               	bz	l9370
 13869  003A72  C01E  F01B         	movff	read_byte@i,??_read_byte
 13870  003A76  0E01               	movlw	1
 13871  003A78  6E1C               	movwf	(??_read_byte+1)^0,c
 13872  003A7A  2A1B               	incf	??_read_byte^0,f,c
 13873  003A7C  D002               	goto	u11194
 13874  003A7E                     u11195:
 13875  003A7E  90D8               	bcf	status,0,c
 13876  003A80  361C               	rlcf	(??_read_byte+1)^0,f,c
 13877  003A82                     u11194:
 13878  003A82  2E1B               	decfsz	??_read_byte^0,f,c
 13879  003A84  D7FC               	goto	u11195
 13880  003A86  501C               	movf	(??_read_byte+1)^0,w,c
 13881  003A88  121D               	iorwf	read_byte@val^0,f,c
 13882  003A8A                     l9370:
 13883                           
 13884                           ;onewire.c: 58:       _delay((unsigned long)((120)*(64000000/4000000.0)));
 13885  003A8A  0E03               	movlw	3
 13886  003A8C  6E1B               	movwf	??_read_byte^0,c
 13887  003A8E  0E7D               	movlw	125
 13888  003A90                     u12167:
 13889  003A90  2EE8               	decfsz	wreg,f,c
 13890  003A92  D7FE               	bra	u12167
 13891  003A94  2E1B               	decfsz	??_read_byte^0,f,c
 13892  003A96  D7FC               	bra	u12167
 13893  003A98  F000               	nop	
 13894                           
 13895                           ;onewire.c: 59:    }
 13896  003A9A  2A1E               	incf	read_byte@i^0,f,c
 13897  003A9C  0E07               	movlw	7
 13898  003A9E  641E               	cpfsgt	read_byte@i^0,c
 13899  003AA0  D7E4               	goto	l9366
 13900                           
 13901                           ;onewire.c: 61:    return val;
 13902  003AA2  501D               	movf	read_byte@val^0,w,c
 13903  003AA4  0012               	return		;funcret
 13904  003AA6                     __end_of_read_byte:
 13905                           	callstack 0
 13906                           
 13907 ;; *************** function _read_bit *****************
 13908 ;; Defined at:
 13909 ;;		line 22 in file "onewire.c"
 13910 ;; Parameters:    Size  Location     Type
 13911 ;;		None
 13912 ;; Auto vars:     Size  Location     Type
 13913 ;;		None
 13914 ;; Return value:  Size  Location     Type
 13915 ;;                  1    wreg      unsigned char 
 13916 ;; Registers used:
 13917 ;;		wreg
 13918 ;; Tracked objects:
 13919 ;;		On entry : 0/0
 13920 ;;		On exit  : 0/0
 13921 ;;		Unchanged: 0/0
 13922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13923 ;;      Params:         0       0       0       0       0       0       0
 13924 ;;      Locals:         0       0       0       0       0       0       0
 13925 ;;      Temps:          0       0       0       0       0       0       0
 13926 ;;      Totals:         0       0       0       0       0       0       0
 13927 ;;Total ram usage:        0 bytes
 13928 ;; Hardware stack levels used: 1
 13929 ;; Hardware stack levels required when called: 3
 13930 ;; This function calls:
 13931 ;;		Nothing
 13932 ;; This function is called by:
 13933 ;;		_read_byte
 13934 ;; This function uses a non-reentrant model
 13935 ;;
 13936                           
 13937                           	psect	text50
 13938  003E60                     __ptext50:
 13939                           	callstack 0
 13940  003E60                     _read_bit:
 13941                           	callstack 25
 13942                           
 13943                           ;onewire.c: 24:     PORTBbits.RB7 = 0;
 13944                           
 13945                           ;incstack = 0
 13946  003E60  9E81               	bcf	129,7,c	;volatile
 13947                           
 13948                           ;onewire.c: 25:     TRISBbits.TRISB7 = 0;
 13949  003E62  9E93               	bcf	147,7,c	;volatile
 13950                           
 13951                           ;onewire.c: 26:     _delay((unsigned long)((1)*(64000000/4000000.0)));
 13952  003E64  0E05               	movlw	5
 13953  003E66                     u12177:
 13954  003E66  2EE8               	decfsz	wreg,f,c
 13955  003E68  D7FE               	bra	u12177
 13956  003E6A  F000               	nop	
 13957                           
 13958                           ;onewire.c: 27:     PORTBbits.RB7 = 1;
 13959  003E6C  8E81               	bsf	129,7,c	;volatile
 13960                           
 13961                           ;onewire.c: 28:     TRISBbits.TRISB7 = 1;
 13962  003E6E  8E93               	bsf	147,7,c	;volatile
 13963                           
 13964                           ;onewire.c: 29:     _delay((unsigned long)((6)*(64000000/4000000.0)));
 13965  003E70  0E20               	movlw	32
 13966  003E72                     u12187:
 13967  003E72  2EE8               	decfsz	wreg,f,c
 13968  003E74  D7FE               	bra	u12187
 13969                           
 13970                           ;onewire.c: 30:    return(PORTBbits.RB7);
 13971  003E76  BE81               	btfsc	129,7,c	;volatile
 13972  003E78  0C01               	retlw	1
 13973  003E7A  0C00               	retlw	0	;funcret
 13974  003E7C                     __end_of_read_bit:
 13975                           	callstack 0
 13976                           
 13977 ;; *************** function _ds18b20_crc8 *****************
 13978 ;; Defined at:
 13979 ;;		line 228 in file "ds18b20.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;  data_in         2   26[COMRAM] PTR unsigned char 
 13982 ;;		 -> scratch(9), 
 13983 ;;  num_bytes       1   28[COMRAM] unsigned char 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;  crc             1   33[COMRAM] unsigned char 
 13986 ;;  loop_count      1   32[COMRAM] unsigned char 
 13987 ;;  feedback_bit    1   31[COMRAM] unsigned char 
 13988 ;;  data            1   30[COMRAM] unsigned char 
 13989 ;;  bit_counter     1   29[COMRAM] unsigned char 
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  1    wreg      unsigned char 
 13992 ;; Registers used:
 13993 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13994 ;; Tracked objects:
 13995 ;;		On entry : 3F/0
 13996 ;;		On exit  : 3F/0
 13997 ;;		Unchanged: 3F/0
 13998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13999 ;;      Params:         3       0       0       0       0       0       0
 14000 ;;      Locals:         5       0       0       0       0       0       0
 14001 ;;      Temps:          0       0       0       0       0       0       0
 14002 ;;      Totals:         8       0       0       0       0       0       0
 14003 ;;Total ram usage:        8 bytes
 14004 ;; Hardware stack levels used: 1
 14005 ;; Hardware stack levels required when called: 3
 14006 ;; This function calls:
 14007 ;;		Nothing
 14008 ;; This function is called by:
 14009 ;;		_readTemp_Single
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           	psect	text51
 14014  003860                     __ptext51:
 14015                           	callstack 0
 14016  003860                     _ds18b20_crc8:
 14017                           	callstack 26
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;ds18b20.c: 229:     uint8_t crc;;ds18b20.c: 230:     uint8_t loop_count;;ds18b20.c: 231
      +                          :     uint8_t bit_counter;;ds18b20.c: 232:     uint8_t data;;ds18b20.c: 233:     uint8_t
      +                           feedback_bit;;ds18b20.c: 235:     crc = 0x00;
 14021                           
 14022                           ;incstack = 0
 14023  003860  6A22               	clrf	ds18b20_crc8@crc^0,c
 14024                           
 14025                           ;ds18b20.c: 237:     for (loop_count = 0; loop_count != num_bytes; loop_count++) {
 14026  003862  6A21               	clrf	ds18b20_crc8@loop_count^0,c
 14027  003864  D01F               	goto	l9400
 14028  003866                     l9380:
 14029                           
 14030                           ; BSR set to: 0
 14031                           ;ds18b20.c: 238:         data = data_in[loop_count];
 14032  003866  5021               	movf	ds18b20_crc8@loop_count^0,w,c
 14033  003868  241B               	addwf	ds18b20_crc8@data_in^0,w,c
 14034  00386A  6ED9               	movwf	fsr2l,c
 14035  00386C  0E00               	movlw	0
 14036  00386E  201C               	addwfc	(ds18b20_crc8@data_in+1)^0,w,c
 14037  003870  6EDA               	movwf	fsr2h,c
 14038  003872  50DF               	movf	indf2,w,c
 14039  003874  6E1F               	movwf	ds18b20_crc8@data^0,c
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;ds18b20.c: 240:         bit_counter = 8;
 14043  003876  0E08               	movlw	8
 14044  003878  6E1E               	movwf	ds18b20_crc8@bit_counter^0,c
 14045  00387A                     l9384:
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;ds18b20.c: 242:             feedback_bit = (crc ^ data) & 0x01;
 14049  00387A  5022               	movf	ds18b20_crc8@crc^0,w,c
 14050  00387C  181F               	xorwf	ds18b20_crc8@data^0,w,c
 14051  00387E  0B01               	andlw	1
 14052  003880  6E20               	movwf	ds18b20_crc8@feedback_bit^0,c
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;ds18b20.c: 244:             if (feedback_bit == 0x01) {
 14056  003882  0420               	decf	ds18b20_crc8@feedback_bit^0,w,c
 14057  003884  E102               	bnz	l690
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;ds18b20.c: 245:                 crc = crc ^ 0x18;
 14061  003886  0E18               	movlw	24
 14062  003888  1A22               	xorwf	ds18b20_crc8@crc^0,f,c
 14063  00388A                     l690:
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;ds18b20.c: 247:             crc = (crc >> 1) & 0x7F;
 14067  00388A  90D8               	bcf	status,0,c
 14068  00388C  3022               	rrcf	ds18b20_crc8@crc^0,w,c
 14069  00388E  0B7F               	andlw	127
 14070  003890  6E22               	movwf	ds18b20_crc8@crc^0,c
 14071                           
 14072                           ;ds18b20.c: 248:             if (feedback_bit == 0x01) {
 14073  003892  0420               	decf	ds18b20_crc8@feedback_bit^0,w,c
 14074  003894  E101               	bnz	l9392
 14075                           
 14076                           ; BSR set to: 0
 14077                           ;ds18b20.c: 249:                 crc = crc | 0x80;
 14078  003896  8E22               	bsf	ds18b20_crc8@crc^0,7,c
 14079  003898                     l9392:
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;ds18b20.c: 252:             data = data >> 1;
 14083  003898  90D8               	bcf	status,0,c
 14084  00389A  321F               	rrcf	ds18b20_crc8@data^0,f,c
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;ds18b20.c: 253:             bit_counter--;
 14088  00389C  061E               	decf	ds18b20_crc8@bit_counter^0,f,c
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;ds18b20.c: 255:         } while (bit_counter > 0);
 14092  00389E  501E               	movf	ds18b20_crc8@bit_counter^0,w,c
 14093  0038A0  E1EC               	bnz	l9384
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;ds18b20.c: 256:     }
 14097  0038A2  2A21               	incf	ds18b20_crc8@loop_count^0,f,c
 14098  0038A4                     l9400:
 14099                           
 14100                           ; BSR set to: 0
 14101  0038A4  501D               	movf	ds18b20_crc8@num_bytes^0,w,c
 14102  0038A6  1821               	xorwf	ds18b20_crc8@loop_count^0,w,c
 14103  0038A8  E1DE               	bnz	l9380
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;ds18b20.c: 258:     return crc;
 14107  0038AA  5022               	movf	ds18b20_crc8@crc^0,w,c
 14108                           
 14109                           ; BSR set to: 0
 14110  0038AC  0012               	return		;funcret
 14111  0038AE                     __end_of_ds18b20_crc8:
 14112                           	callstack 0
 14113                           
 14114 ;; *************** function _key_press *****************
 14115 ;; Defined at:
 14116 ;;		line 5 in file "key.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;		None
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  key             1   26[COMRAM] unsigned char 
 14121 ;; Return value:  Size  Location     Type
 14122 ;;                  1    wreg      void 
 14123 ;; Registers used:
 14124 ;;		wreg, status,2, status,0
 14125 ;; Tracked objects:
 14126 ;;		On entry : 3F/1
 14127 ;;		On exit  : 3F/1
 14128 ;;		Unchanged: 3F/0
 14129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14130 ;;      Params:         0       0       0       0       0       0       0
 14131 ;;      Locals:         1       0       0       0       0       0       0
 14132 ;;      Temps:          0       0       0       0       0       0       0
 14133 ;;      Totals:         1       0       0       0       0       0       0
 14134 ;;Total ram usage:        1 bytes
 14135 ;; Hardware stack levels used: 1
 14136 ;; Hardware stack levels required when called: 3
 14137 ;; This function calls:
 14138 ;;		Nothing
 14139 ;; This function is called by:
 14140 ;;		_main
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           	psect	text52
 14145  003B22                     __ptext52:
 14146                           	callstack 0
 14147  003B22                     _key_press:
 14148                           	callstack 27
 14149                           
 14150                           ; BSR set to: 1
 14151                           ;key.c: 7:     static uint16_t count = 0;;key.c: 8:     uint8_t key;;key.c: 10:     if (
      +                          (PORTB & (1 << 3)) == 0)
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;incstack = 0
 14155  003B22  B681               	btfsc	129,3,c	;volatile
 14156  003B24  D003               	goto	l640
 14157                           
 14158                           ; BSR set to: 1
 14159                           ;key.c: 11:         key = 1;
 14160  003B26  0E01               	movlw	1
 14161  003B28  6E1B               	movwf	key_press@key^0,c
 14162  003B2A  D001               	goto	l6624
 14163  003B2C                     l640:
 14164                           
 14165                           ; BSR set to: 1
 14166                           ;key.c: 13:         key = 0;
 14167  003B2C  6A1B               	clrf	key_press@key^0,c
 14168  003B2E                     l6624:
 14169                           
 14170                           ; BSR set to: 1
 14171                           ;key.c: 16:     if (key) {
 14172  003B2E  501B               	movf	key_press@key^0,w,c
 14173  003B30  E013               	bz	l642
 14174                           
 14175                           ; BSR set to: 1
 14176                           ;key.c: 17:         if (count == 50) {
 14177  003B32  0E32               	movlw	50
 14178  003B34  1832               	xorwf	key_press@count^0,w,c
 14179  003B36  1033               	iorwf	(key_press@count+1)^0,w,c
 14180  003B38  E106               	bnz	l6634
 14181                           
 14182                           ; BSR set to: 1
 14183                           ;key.c: 18:             count = 50 + 10;
 14184  003B3A  6A33               	clrf	(key_press@count+1)^0,c
 14185  003B3C  0E3C               	movlw	60
 14186  003B3E  6E32               	movwf	key_press@count^0,c
 14187                           
 14188                           ;key.c: 19:             key_pressed = 2;
 14189  003B40  0E02               	movlw	2
 14190  003B42  6E3C               	movwf	_key_pressed^0,c	;volatile
 14191  003B44  0C02               	retlw	2
 14192  003B46                     l6634:
 14193                           
 14194                           ; BSR set to: 1
 14195  003B46  4A32               	infsnz	key_press@count^0,f,c
 14196  003B48  2A33               	incf	(key_press@count+1)^0,f,c
 14197                           
 14198                           ; BSR set to: 1
 14199                           ;key.c: 23:         if (count == 7) {
 14200  003B4A  0E07               	movlw	7
 14201  003B4C  1832               	xorwf	key_press@count^0,w,c
 14202  003B4E  1033               	iorwf	(key_press@count+1)^0,w,c
 14203  003B50  B4D8               	btfsc	status,2,c
 14204                           
 14205                           ; BSR set to: 1
 14206                           ;key.c: 24:             key_pressed = key;
 14207  003B52  C01B  F03C         	movff	key_press@key,_key_pressed	;volatile
 14208                           
 14209                           ;key.c: 25:             return;
 14210  003B56  0012               	return	
 14211  003B58                     l642:
 14212                           
 14213                           ; BSR set to: 1
 14214                           ;key.c: 28:         count = 0;
 14215  003B58  6A32               	clrf	key_press@count^0,c
 14216  003B5A  6A33               	clrf	(key_press@count+1)^0,c
 14217                           
 14218                           ; BSR set to: 1
 14219  003B5C  0012               	return		;funcret
 14220  003B5E                     __end_of_key_press:
 14221                           	callstack 0
 14222                           
 14223 ;; *************** function _key_GetKey *****************
 14224 ;; Defined at:
 14225 ;;		line 46 in file "key.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;		None
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;  key             1   26[COMRAM] unsigned char 
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      unsigned char 
 14232 ;; Registers used:
 14233 ;;		wreg, status,2
 14234 ;; Tracked objects:
 14235 ;;		On entry : 3F/1
 14236 ;;		On exit  : 3F/1
 14237 ;;		Unchanged: 3F/0
 14238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14239 ;;      Params:         0       0       0       0       0       0       0
 14240 ;;      Locals:         1       0       0       0       0       0       0
 14241 ;;      Temps:          0       0       0       0       0       0       0
 14242 ;;      Totals:         1       0       0       0       0       0       0
 14243 ;;Total ram usage:        1 bytes
 14244 ;; Hardware stack levels used: 1
 14245 ;; Hardware stack levels required when called: 3
 14246 ;; This function calls:
 14247 ;;		Nothing
 14248 ;; This function is called by:
 14249 ;;		_main
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           	psect	text53
 14254  003EBE                     __ptext53:
 14255                           	callstack 0
 14256  003EBE                     _key_GetKey:
 14257                           	callstack 27
 14258                           
 14259                           ; BSR set to: 1
 14260                           ;key.c: 48:   uint8_t key = key_pressed;
 14261                           
 14262                           ; BSR set to: 1
 14263                           ;incstack = 0
 14264  003EBE  C03C  F01B         	movff	_key_pressed,key_GetKey@key	;volatile
 14265                           
 14266                           ;key.c: 50:   key_pressed = 0;
 14267  003EC2  6A3C               	clrf	_key_pressed^0,c	;volatile
 14268                           
 14269                           ; BSR set to: 1
 14270                           ;key.c: 51:   return key;
 14271  003EC4  501B               	movf	key_GetKey@key^0,w,c
 14272                           
 14273                           ; BSR set to: 1
 14274  003EC6  0012               	return		;funcret
 14275  003EC8                     __end_of_key_GetKey:
 14276                           	callstack 0
 14277                           
 14278 ;; *************** function _init_cpu *****************
 14279 ;; Defined at:
 14280 ;;		line 450 in file "main.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;		None
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;		None
 14285 ;; Return value:  Size  Location     Type
 14286 ;;                  1    wreg      void 
 14287 ;; Registers used:
 14288 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14294 ;;      Params:         0       0       0       0       0       0       0
 14295 ;;      Locals:         0       0       0       0       0       0       0
 14296 ;;      Temps:          0       2       0       0       0       0       0
 14297 ;;      Totals:         0       2       0       0       0       0       0
 14298 ;;Total ram usage:        2 bytes
 14299 ;; Hardware stack levels used: 1
 14300 ;; Hardware stack levels required when called: 7
 14301 ;; This function calls:
 14302 ;;		_cgrom_char
 14303 ;;		_initLCD
 14304 ;;		_init_ds18b20
 14305 ;; This function is called by:
 14306 ;;		_main
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text54
 14311  002814                     __ptext54:
 14312                           	callstack 0
 14313  002814                     _init_cpu:
 14314                           	callstack 23
 14315                           
 14316                           ;main.c: 451:     OSCCONbits.SCS = 0b00;
 14317                           
 14318                           ; BSR set to: 1
 14319                           ;incstack = 0
 14320  002814  0EFC               	movlw	-4
 14321  002816  16D3               	andwf	211,f,c	;volatile
 14322                           
 14323                           ;main.c: 452:     OSCCONbits.IRCF = 0b111;
 14324  002818  0E70               	movlw	112
 14325  00281A  12D3               	iorwf	211,f,c	;volatile
 14326                           
 14327                           ;main.c: 453:     OSCTUNEbits.PLLEN = 1;
 14328  00281C  8C9B               	bsf	155,6,c	;volatile
 14329                           
 14330                           ;main.c: 454:     TRISA = 0b00010111;
 14331  00281E  0E17               	movlw	23
 14332  002820  6E92               	movwf	146,c	;volatile
 14333                           
 14334                           ;main.c: 455:     PORTA = 0;
 14335  002822  6A80               	clrf	128,c	;volatile
 14336                           
 14337                           ;main.c: 456:     LATA = 0;
 14338  002824  6A89               	clrf	137,c	;volatile
 14339                           
 14340                           ;main.c: 458:     PORTC = 0;
 14341  002826  6A82               	clrf	130,c	;volatile
 14342                           
 14343                           ;main.c: 459:     LATC = 0;
 14344  002828  6A8B               	clrf	139,c	;volatile
 14345                           
 14346                           ;main.c: 460:     TRISC = 0b00000000;
 14347  00282A  6A94               	clrf	148,c	;volatile
 14348                           
 14349                           ;main.c: 461:     LATCbits.LATC4 = 0;
 14350  00282C  988B               	bcf	139,4,c	;volatile
 14351                           
 14352                           ;main.c: 462:     LATCbits.LATC5 = 0;
 14353  00282E  9A8B               	bcf	139,5,c	;volatile
 14354                           
 14355                           ;main.c: 464:     RBPU = 0;
 14356  002830  9EF1               	bcf	4081,7,c	;volatile
 14357                           
 14358                           ;main.c: 467:     WPUB = 0b00111000;
 14359  002832  0E38               	movlw	56
 14360  002834  6E7C               	movwf	124,c	;volatile
 14361                           
 14362                           ;main.c: 472:     PORTB = 0;
 14363  002836  6A81               	clrf	129,c	;volatile
 14364                           
 14365                           ;main.c: 473:     LATB = 0;
 14366  002838  6A8A               	clrf	138,c	;volatile
 14367                           
 14368                           ;main.c: 474:     TRISB = 0b00111111;
 14369  00283A  0E3F               	movlw	63
 14370  00283C  6E93               	movwf	147,c	;volatile
 14371                           
 14372                           ;main.c: 477:     T0CONbits.T0PS = 0b011;
 14373  00283E  50D5               	movf	213,w,c	;volatile
 14374  002840  0BF8               	andlw	-8
 14375  002842  0903               	iorlw	3
 14376  002844  6ED5               	movwf	213,c	;volatile
 14377                           
 14378                           ;main.c: 478:     T0CONbits.PSA = 0;
 14379  002846  96D5               	bcf	213,3,c	;volatile
 14380                           
 14381                           ;main.c: 480:     T0CONbits.T0CS = 0;
 14382  002848  9AD5               	bcf	213,5,c	;volatile
 14383                           
 14384                           ;main.c: 481:     T0CONbits.T08BIT = 1;
 14385  00284A  8CD5               	bsf	213,6,c	;volatile
 14386                           
 14387                           ;main.c: 482:     T0CONbits.TMR0ON = 1;
 14388  00284C  8ED5               	bsf	213,7,c	;volatile
 14389                           
 14390                           ;main.c: 483:     INTCON2bits.TMR0IP = 0;
 14391  00284E  94F1               	bcf	241,2,c	;volatile
 14392                           
 14393                           ;main.c: 484:     TMR0L = 57;
 14394  002850  0E39               	movlw	57
 14395  002852  6ED6               	movwf	214,c	;volatile
 14396                           
 14397                           ;main.c: 487:     ADCON2bits.ADCS = 0b110;
 14398  002854  50C0               	movf	192,w,c	;volatile
 14399  002856  0BF8               	andlw	-8
 14400  002858  0906               	iorlw	6
 14401  00285A  6EC0               	movwf	192,c	;volatile
 14402                           
 14403                           ;main.c: 488:     ADCON2bits.ACQT = 0;
 14404  00285C  0EC7               	movlw	-57
 14405  00285E  16C0               	andwf	192,f,c	;volatile
 14406                           
 14407                           ;main.c: 489:     ADCON2bits.ADFM = 1;
 14408  002860  8EC0               	bsf	192,7,c	;volatile
 14409                           
 14410                           ;main.c: 491:     ADCON1 = 0;
 14411  002862  6AC1               	clrf	193,c	;volatile
 14412                           
 14413                           ;main.c: 493:     ADCON0bits.ADON = 1;
 14414  002864  80C2               	bsf	194,0,c	;volatile
 14415                           
 14416                           ;main.c: 494:     ADCON0bits.CHS = 0b0000;
 14417  002866  0EC3               	movlw	-61
 14418  002868  16C2               	andwf	194,f,c	;volatile
 14419                           
 14420                           ;main.c: 495:     ANSELbits.ANS0 = 1;
 14421  00286A  807E               	bsf	126,0,c	;volatile
 14422                           
 14423                           ;main.c: 496:     IPR1bits.ADIP = 1;
 14424  00286C  8C9F               	bsf	159,6,c	;volatile
 14425                           
 14426                           ;main.c: 497:     PIE1bits.ADIE = 1;
 14427  00286E  8C9D               	bsf	157,6,c	;volatile
 14428                           
 14429                           ;main.c: 500:     TMR1CS = 0;
 14430  002870  92CD               	bcf	4045,1,c	;volatile
 14431                           
 14432                           ;main.c: 501:     T1OSCEN = 0;
 14433  002872  96CD               	bcf	4045,3,c	;volatile
 14434                           
 14435                           ;main.c: 502:     T1CONbits.T1CKPS = 0b11;
 14436  002874  0E30               	movlw	48
 14437  002876  12CD               	iorwf	205,f,c	;volatile
 14438                           
 14439                           ;main.c: 503:     T1CONbits.RD16 = 1;
 14440  002878  8ECD               	bsf	205,7,c	;volatile
 14441                           
 14442                           ;main.c: 504:     TMR1IE = 1;
 14443  00287A  809D               	bsf	3997,0,c	;volatile
 14444                           
 14445                           ;main.c: 505:     TMR1IP = 0;
 14446  00287C  909F               	bcf	3999,0,c	;volatile
 14447                           
 14448                           ;main.c: 506:     TMR1ON = 1;
 14449  00287E  80CD               	bsf	4045,0,c	;volatile
 14450                           
 14451                           ;main.c: 509:     T3CONbits.RD16 = 1;
 14452  002880  8EB1               	bsf	177,7,c	;volatile
 14453                           
 14454                           ;main.c: 511:     T3CONbits.T3CCP2 = 1;
 14455  002882  8CB1               	bsf	177,6,c	;volatile
 14456                           
 14457                           ;main.c: 515:     T3CONbits.TMR3CS = 0;
 14458  002884  92B1               	bcf	177,1,c	;volatile
 14459                           
 14460                           ;main.c: 518:     T3CONbits.T3CKPS = 0b000;
 14461  002886  0ECF               	movlw	-49
 14462  002888  16B1               	andwf	177,f,c	;volatile
 14463                           
 14464                           ;main.c: 522:     TMR3IP = 1;
 14465  00288A  82A2               	bsf	4002,1,c	;volatile
 14466                           
 14467                           ;main.c: 523:     TMR3IE = 1;
 14468  00288C  82A0               	bsf	4000,1,c	;volatile
 14469                           
 14470                           ;main.c: 527:     T2CONbits.T2CKPS = 0b10;
 14471  00288E  50CA               	movf	202,w,c	;volatile
 14472  002890  0BFC               	andlw	-4
 14473  002892  0902               	iorlw	2
 14474  002894  6ECA               	movwf	202,c	;volatile
 14475                           
 14476                           ;main.c: 528:     T2CONbits.T2OUTPS = 0b1111;
 14477  002896  0E78               	movlw	120
 14478  002898  12CA               	iorwf	202,f,c	;volatile
 14479                           
 14480                           ;main.c: 529:     TMR2ON = 0;
 14481  00289A  94CA               	bcf	4042,2,c	;volatile
 14482                           
 14483                           ;main.c: 530:     IPR1bits.TMR2IP = 0;
 14484  00289C  929F               	bcf	159,1,c	;volatile
 14485                           
 14486                           ;main.c: 531:     PIE1bits.TMR2IE = 1;
 14487  00289E  829D               	bsf	157,1,c	;volatile
 14488                           
 14489                           ;main.c: 532:     PR2 = 64;
 14490  0028A0  0E40               	movlw	64
 14491  0028A2  6ECB               	movwf	203,c	;volatile
 14492                           
 14493                           ;main.c: 535:     INT0IE = 1;
 14494  0028A4  88F2               	bsf	4082,4,c	;volatile
 14495                           
 14496                           ;main.c: 536:     INTCON2bits.INTEDG0 = 0;
 14497  0028A6  9CF1               	bcf	241,6,c	;volatile
 14498                           
 14499                           ;main.c: 537:     INT0IF = 0;
 14500  0028A8  92F2               	bcf	4082,1,c	;volatile
 14501                           
 14502                           ;main.c: 540:     RCONbits.IPEN = 1;
 14503  0028AA  8ED0               	bsf	208,7,c	;volatile
 14504                           
 14505                           ;main.c: 541:     INTCONbits.TMR0IE = 1;
 14506  0028AC  8AF2               	bsf	242,5,c	;volatile
 14507                           
 14508                           ;main.c: 542:     INTCONbits.GIEL = 1;
 14509  0028AE  8CF2               	bsf	242,6,c	;volatile
 14510                           
 14511                           ;main.c: 544:     (INTCONbits.GIE = 1);
 14512  0028B0  8EF2               	bsf	242,7,c	;volatile
 14513                           
 14514                           ;main.c: 545:     _delay((unsigned long)((50)*(64000000/4000.0)));
 14515  0028B2  0E05               	movlw	5
 14516  0028B4  0100               	movlb	0	; () banked
 14517  0028B6  6F61               	movwf	(??_init_cpu+1)& (0+255),b
 14518  0028B8  0E0F               	movlw	15
 14519  0028BA  6F60               	movwf	??_init_cpu& (0+255),b
 14520  0028BC  0EF1               	movlw	241
 14521  0028BE                     u12197:
 14522  0028BE  2EE8               	decfsz	wreg,f,c
 14523  0028C0  D7FE               	bra	u12197
 14524  0028C2  2F60               	decfsz	??_init_cpu& (0+255),f,b
 14525  0028C4  D7FC               	bra	u12197
 14526  0028C6  2F61               	decfsz	(??_init_cpu+1)& (0+255),f,b
 14527  0028C8  D7FA               	bra	u12197
 14528                           
 14529                           ;main.c: 547:     initLCD();
 14530  0028CA  ECCB  F015         	call	_initLCD	;wreg free
 14531                           
 14532                           ;main.c: 549:     PORTBbits.RB7 = 1;
 14533  0028CE  8E81               	bsf	129,7,c	;volatile
 14534                           
 14535                           ;main.c: 551:     init_ds18b20();
 14536  0028D0  ECC6  F01E         	call	_init_ds18b20	;wreg free
 14537                           
 14538                           ;main.c: 553:     is_power = 1;
 14539  0028D4  8A43               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
 14540                           
 14541                           ;main.c: 554:     power_100 = 0;
 14542  0028D6  9643               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
 14543                           
 14544                           ;main.c: 555:     cgrom_char(symbol_1, 1);
 14545  0028D8  0E52               	movlw	low _symbol_1
 14546  0028DA  6E1F               	movwf	cgrom_char@symbol^0,c
 14547  0028DC  0E7E               	movlw	high _symbol_1
 14548  0028DE  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14549  0028E0  0E01               	movlw	1
 14550  0028E2  6E21               	movwf	cgrom_char@address^0,c
 14551  0028E4  EC39  F01E         	call	_cgrom_char	;wreg free
 14552                           
 14553                           ;main.c: 556:     cgrom_char(symbol_2, 2);
 14554  0028E8  0E4A               	movlw	low _symbol_2
 14555  0028EA  6E1F               	movwf	cgrom_char@symbol^0,c
 14556  0028EC  0E7E               	movlw	high _symbol_2
 14557  0028EE  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14558  0028F0  0E02               	movlw	2
 14559  0028F2  6E21               	movwf	cgrom_char@address^0,c
 14560  0028F4  EC39  F01E         	call	_cgrom_char	;wreg free
 14561                           
 14562                           ;main.c: 557:     cgrom_char(symbol_3, 3);
 14563  0028F8  0E42               	movlw	low _symbol_3
 14564  0028FA  6E1F               	movwf	cgrom_char@symbol^0,c
 14565  0028FC  0E7E               	movlw	high _symbol_3
 14566  0028FE  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14567  002900  0E03               	movlw	3
 14568  002902  6E21               	movwf	cgrom_char@address^0,c
 14569  002904  EC39  F01E         	call	_cgrom_char	;wreg free
 14570                           
 14571                           ;main.c: 558:     cgrom_char(symbol_4, 4);
 14572  002908  0E3A               	movlw	low _symbol_4
 14573  00290A  6E1F               	movwf	cgrom_char@symbol^0,c
 14574  00290C  0E7E               	movlw	high _symbol_4
 14575  00290E  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14576  002910  0E04               	movlw	4
 14577  002912  6E21               	movwf	cgrom_char@address^0,c
 14578  002914  EC39  F01E         	call	_cgrom_char	;wreg free
 14579                           
 14580                           ;main.c: 559:     cgrom_char(symbol_5, 5);
 14581  002918  0E32               	movlw	low _symbol_5
 14582  00291A  6E1F               	movwf	cgrom_char@symbol^0,c
 14583  00291C  0E7E               	movlw	high _symbol_5
 14584  00291E  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14585  002920  0E05               	movlw	5
 14586  002922  6E21               	movwf	cgrom_char@address^0,c
 14587  002924  EC39  F01E         	call	_cgrom_char	;wreg free
 14588                           
 14589                           ;main.c: 560:     cgrom_char(symbol_6, 6);
 14590  002928  0E2A               	movlw	low _symbol_6
 14591  00292A  6E1F               	movwf	cgrom_char@symbol^0,c
 14592  00292C  0E7E               	movlw	high _symbol_6
 14593  00292E  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14594  002930  0E06               	movlw	6
 14595  002932  6E21               	movwf	cgrom_char@address^0,c
 14596  002934  EC39  F01E         	call	_cgrom_char	;wreg free
 14597                           
 14598                           ;main.c: 561:     cgrom_char(symbol_7, 7);
 14599  002938  0E22               	movlw	low _symbol_7
 14600  00293A  6E1F               	movwf	cgrom_char@symbol^0,c
 14601  00293C  0E7E               	movlw	high _symbol_7
 14602  00293E  6E20               	movwf	(cgrom_char@symbol+1)^0,c
 14603  002940  0E07               	movlw	7
 14604  002942  6E21               	movwf	cgrom_char@address^0,c
 14605  002944  EC39  F01E         	call	_cgrom_char	;wreg free
 14606                           
 14607                           ;main.c: 562:     getU = 1;
 14608  002948  0E01               	movlw	1
 14609  00294A  6E3F               	movwf	_getU^0,c
 14610  00294C  0C01               	retlw	1	;funcret
 14611  00294E                     __end_of_init_cpu:
 14612                           	callstack 0
 14613                           
 14614 ;; *************** function _init_ds18b20 *****************
 14615 ;; Defined at:
 14616 ;;		line 18 in file "ds18b20.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		wreg, status,2, status,0, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 0/0
 14627 ;;		On exit  : 0/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14630 ;;      Params:         0       0       0       0       0       0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used: 1
 14636 ;; Hardware stack levels required when called: 5
 14637 ;; This function calls:
 14638 ;;		_ow_reset
 14639 ;;		_write_byte
 14640 ;; This function is called by:
 14641 ;;		_init_cpu
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text55
 14646  003D8C                     __ptext55:
 14647                           	callstack 0
 14648  003D8C                     _init_ds18b20:
 14649                           	callstack 24
 14650                           
 14651                           ;ds18b20.c: 20:     if (!ow_reset())
 14652                           
 14653                           ;incstack = 0
 14654  003D8C  EC57  F01C         	call	_ow_reset	;wreg free
 14655  003D90  0900               	iorlw	0
 14656  003D92  A4D8               	btfss	status,2,c
 14657  003D94  0012               	return	
 14658                           
 14659                           ;ds18b20.c: 21:     {;ds18b20.c: 23:         write_byte(0xCC);
 14660  003D96  0ECC               	movlw	204
 14661  003D98  EC72  F01D         	call	_write_byte
 14662                           
 14663                           ;ds18b20.c: 24:         write_byte(0x4E);
 14664  003D9C  0E4E               	movlw	78
 14665  003D9E  EC72  F01D         	call	_write_byte
 14666                           
 14667                           ;ds18b20.c: 25:         write_byte(0x00);
 14668  003DA2  0E00               	movlw	0
 14669  003DA4  EC72  F01D         	call	_write_byte
 14670                           
 14671                           ;ds18b20.c: 26:         write_byte(0x00);
 14672  003DA8  0E00               	movlw	0
 14673  003DAA  EC72  F01D         	call	_write_byte
 14674                           
 14675                           ;ds18b20.c: 27:         write_byte(0x7F);
 14676  003DAE  0E7F               	movlw	127
 14677  003DB0  EF72  F01D         	goto	_write_byte
 14678  003DB4                     __end_of_init_ds18b20:
 14679                           	callstack 0
 14680                           
 14681 ;; *************** function _write_byte *****************
 14682 ;; Defined at:
 14683 ;;		line 66 in file "onewire.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;  val             1    wreg     unsigned char 
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;  val             1   29[COMRAM] unsigned char 
 14688 ;;  i               1   31[COMRAM] unsigned char 
 14689 ;;  temp            1   30[COMRAM] unsigned char 
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  1    wreg      void 
 14692 ;; Registers used:
 14693 ;;		wreg, status,2, status,0, cstack
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14699 ;;      Params:         0       0       0       0       0       0       0
 14700 ;;      Locals:         3       0       0       0       0       0       0
 14701 ;;      Temps:          2       0       0       0       0       0       0
 14702 ;;      Totals:         5       0       0       0       0       0       0
 14703 ;;Total ram usage:        5 bytes
 14704 ;; Hardware stack levels used: 1
 14705 ;; Hardware stack levels required when called: 4
 14706 ;; This function calls:
 14707 ;;		_write_bit
 14708 ;; This function is called by:
 14709 ;;		_init_ds18b20
 14710 ;;		_readTemp_Single
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           	psect	text56
 14715  003AE4                     __ptext56:
 14716                           	callstack 0
 14717  003AE4                     _write_byte:
 14718                           	callstack 25
 14719                           
 14720                           ;incstack = 0
 14721                           ;write_byte@val stored from wreg
 14722  003AE4  6E1E               	movwf	write_byte@val^0,c
 14723                           
 14724                           ;onewire.c: 66: void write_byte(uint8_t val);onewire.c: 67: {;onewire.c: 68:    uint8_t 
      +                          i;;onewire.c: 69:    uint8_t temp;;onewire.c: 71:    for (i=0;i<8;i++)
 14725  003AE6  6A20               	clrf	write_byte@i^0,c
 14726  003AE8                     l9162:
 14727                           
 14728                           ;onewire.c: 72:    {;onewire.c: 73:       temp = val >> i;
 14729  003AE8  C020  F01C         	movff	write_byte@i,??_write_byte
 14730  003AEC  C01E  F01D         	movff	write_byte@val,??_write_byte+1
 14731  003AF0  2A1C               	incf	??_write_byte^0,f,c
 14732  003AF2  D002               	goto	u10944
 14733  003AF4                     u10945:
 14734  003AF4  90D8               	bcf	status,0,c
 14735  003AF6  321D               	rrcf	(??_write_byte+1)^0,f,c
 14736  003AF8                     u10944:
 14737  003AF8  2E1C               	decfsz	??_write_byte^0,f,c
 14738  003AFA  D7FC               	goto	u10945
 14739  003AFC  501D               	movf	(??_write_byte+1)^0,w,c
 14740  003AFE  6E1F               	movwf	write_byte@temp^0,c
 14741                           
 14742                           ;onewire.c: 74:       temp &= 0x01;
 14743  003B00  0E01               	movlw	1
 14744  003B02  161F               	andwf	write_byte@temp^0,f,c
 14745                           
 14746                           ;onewire.c: 75:       write_bit(temp);
 14747  003B04  501F               	movf	write_byte@temp^0,w,c
 14748  003B06  ECB0  F01E         	call	_write_bit
 14749                           
 14750                           ;onewire.c: 76:    }
 14751  003B0A  2A20               	incf	write_byte@i^0,f,c
 14752  003B0C  0E07               	movlw	7
 14753  003B0E  6420               	cpfsgt	write_byte@i^0,c
 14754  003B10  D7EB               	goto	l9162
 14755                           
 14756                           ;onewire.c: 78:    _delay((unsigned long)((105)*(64000000/4000000.0)));
 14757  003B12  0EF0               	movlw	240
 14758  003B14                     u12207:
 14759  003B14  F000 F000          	nop2	
 14760  003B18  F000 F000          	nop2	
 14761  003B1C  2EE8               	decfsz	wreg,f,c
 14762  003B1E  D7FA               	bra	u12207
 14763  003B20  0012               	return		;funcret
 14764  003B22                     __end_of_write_byte:
 14765                           	callstack 0
 14766                           
 14767 ;; *************** function _write_bit *****************
 14768 ;; Defined at:
 14769 ;;		line 34 in file "onewire.c"
 14770 ;; Parameters:    Size  Location     Type
 14771 ;;  bitval          1    wreg     unsigned char 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;  bitval          1   26[COMRAM] unsigned char 
 14774 ;; Return value:  Size  Location     Type
 14775 ;;                  1    wreg      void 
 14776 ;; Registers used:
 14777 ;;		wreg, status,2, status,0, cstack
 14778 ;; Tracked objects:
 14779 ;;		On entry : 0/0
 14780 ;;		On exit  : 0/0
 14781 ;;		Unchanged: 0/0
 14782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14783 ;;      Params:         0       0       0       0       0       0       0
 14784 ;;      Locals:         1       0       0       0       0       0       0
 14785 ;;      Temps:          0       0       0       0       0       0       0
 14786 ;;      Totals:         1       0       0       0       0       0       0
 14787 ;;Total ram usage:        1 bytes
 14788 ;; Hardware stack levels used: 1
 14789 ;; Hardware stack levels required when called: 3
 14790 ;; This function calls:
 14791 ;;		Nothing
 14792 ;; This function is called by:
 14793 ;;		_write_byte
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           	psect	text57
 14798  003D60                     __ptext57:
 14799                           	callstack 0
 14800  003D60                     _write_bit:
 14801                           	callstack 25
 14802                           
 14803                           ;incstack = 0
 14804                           ;write_bit@bitval stored from wreg
 14805  003D60  6E1B               	movwf	write_bit@bitval^0,c
 14806                           
 14807                           ;onewire.c: 34: void write_bit(uint8_t bitval);onewire.c: 35: {;onewire.c: 36:     PORTB
      +                          bits.RB7 = 0;
 14808  003D62  9E81               	bcf	129,7,c	;volatile
 14809                           
 14810                           ;onewire.c: 37:     TRISBbits.TRISB7 = 0;
 14811  003D64  9E93               	bcf	147,7,c	;volatile
 14812                           
 14813                           ;onewire.c: 38:    if(bitval == 1) {
 14814  003D66  041B               	decf	write_bit@bitval^0,w,c
 14815  003D68  E107               	bnz	l713
 14816                           
 14817                           ;onewire.c: 39:       _delay((unsigned long)((2)*(64000000/4000000.0)));
 14818  003D6A  0E0A               	movlw	10
 14819  003D6C                     u12217:
 14820  003D6C  2EE8               	decfsz	wreg,f,c
 14821  003D6E  D7FE               	bra	u12217
 14822  003D70  F000 F000          	nop2	
 14823                           
 14824                           ;onewire.c: 40:       PORTBbits.RB7 = 1;
 14825  003D74  8E81               	bsf	129,7,c	;volatile
 14826                           
 14827                           ;onewire.c: 41:       TRISBbits.TRISB7 = 1;
 14828  003D76  8E93               	bsf	147,7,c	;volatile
 14829  003D78                     l713:
 14830                           
 14831                           ;onewire.c: 43:    _delay((unsigned long)((105)*(64000000/4000000.0)));
 14832  003D78  0EF0               	movlw	240
 14833  003D7A                     u12227:
 14834  003D7A  F000 F000          	nop2	
 14835  003D7E  F000 F000          	nop2	
 14836  003D82  2EE8               	decfsz	wreg,f,c
 14837  003D84  D7FA               	bra	u12227
 14838                           
 14839                           ;onewire.c: 44:       PORTBbits.RB7 = 1;
 14840  003D86  8E81               	bsf	129,7,c	;volatile
 14841                           
 14842                           ;onewire.c: 45:       TRISBbits.TRISB7 = 1;
 14843  003D88  8E93               	bsf	147,7,c	;volatile
 14844  003D8A  0012               	return		;funcret
 14845  003D8C                     __end_of_write_bit:
 14846                           	callstack 0
 14847                           
 14848 ;; *************** function _ow_reset *****************
 14849 ;; Defined at:
 14850 ;;		line 5 in file "onewire.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;		None
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  presence        1   27[COMRAM] unsigned char 
 14855 ;; Return value:  Size  Location     Type
 14856 ;;                  1    wreg      unsigned char 
 14857 ;; Registers used:
 14858 ;;		wreg, status,2
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14864 ;;      Params:         0       0       0       0       0       0       0
 14865 ;;      Locals:         1       0       0       0       0       0       0
 14866 ;;      Temps:          1       0       0       0       0       0       0
 14867 ;;      Totals:         2       0       0       0       0       0       0
 14868 ;;Total ram usage:        2 bytes
 14869 ;; Hardware stack levels used: 1
 14870 ;; Hardware stack levels required when called: 3
 14871 ;; This function calls:
 14872 ;;		Nothing
 14873 ;; This function is called by:
 14874 ;;		_init_ds18b20
 14875 ;;		_readTemp_Single
 14876 ;; This function uses a non-reentrant model
 14877 ;;
 14878                           
 14879                           	psect	text58
 14880  0038AE                     __ptext58:
 14881                           	callstack 0
 14882  0038AE                     _ow_reset:
 14883                           	callstack 26
 14884                           
 14885                           ;onewire.c: 7:    uint8_t presence;;onewire.c: 8:     PORTBbits.RB7 = 0;
 14886                           
 14887                           ;incstack = 0
 14888  0038AE  9E81               	bcf	129,7,c	;volatile
 14889                           
 14890                           ;onewire.c: 9:     TRISBbits.TRISB7 = 0;
 14891  0038B0  9E93               	bcf	147,7,c	;volatile
 14892                           
 14893                           ;onewire.c: 10:     _delay((unsigned long)((500)*(64000000/4000000.0)));
 14894  0038B2  0E0B               	movlw	11
 14895  0038B4  6E1B               	movwf	??_ow_reset^0,c
 14896  0038B6  0E62               	movlw	98
 14897  0038B8                     u12237:
 14898  0038B8  2EE8               	decfsz	wreg,f,c
 14899  0038BA  D7FE               	bra	u12237
 14900  0038BC  2E1B               	decfsz	??_ow_reset^0,f,c
 14901  0038BE  D7FC               	bra	u12237
 14902  0038C0  F000 F000          	nop2	
 14903                           
 14904                           ;onewire.c: 11:     PORTBbits.RB7 = 1;
 14905  0038C4  8E81               	bsf	129,7,c	;volatile
 14906                           
 14907                           ;onewire.c: 12:     TRISBbits.TRISB7 = 1;
 14908  0038C6  8E93               	bsf	147,7,c	;volatile
 14909                           
 14910                           ;onewire.c: 13:    _delay((unsigned long)((100)*(64000000/4000000.0)));
 14911  0038C8  0EE4               	movlw	228
 14912  0038CA                     u12247:
 14913  0038CA  F000 F000          	nop2	
 14914  0038CE  F000 F000          	nop2	
 14915  0038D2  2EE8               	decfsz	wreg,f,c
 14916  0038D4  D7FA               	bra	u12247
 14917  0038D6  F000 F000          	nop2	
 14918  0038DA  F000 F000          	nop2	
 14919                           
 14920                           ;onewire.c: 14:    presence = PORTBbits.RB7;
 14921  0038DE  0E00               	movlw	0
 14922  0038E0  BE81               	btfsc	129,7,c	;volatile
 14923  0038E2  0E01               	movlw	1
 14924  0038E4  6E1C               	movwf	ow_reset@presence^0,c
 14925                           
 14926                           ;onewire.c: 15:    _delay((unsigned long)((424)*(64000000/4000000.0)));
 14927  0038E6  0E09               	movlw	9
 14928  0038E8  6E1B               	movwf	??_ow_reset^0,c
 14929  0038EA  0ECE               	movlw	206
 14930  0038EC                     u12257:
 14931  0038EC  2EE8               	decfsz	wreg,f,c
 14932  0038EE  D7FE               	bra	u12257
 14933  0038F0  2E1B               	decfsz	??_ow_reset^0,f,c
 14934  0038F2  D7FC               	bra	u12257
 14935  0038F4  F000 F000          	nop2	
 14936                           
 14937                           ;onewire.c: 16:    return(presence);
 14938  0038F8  501C               	movf	ow_reset@presence^0,w,c
 14939  0038FA  0012               	return		;funcret
 14940  0038FC                     __end_of_ow_reset:
 14941                           	callstack 0
 14942                           
 14943 ;; *************** function _initLCD *****************
 14944 ;; Defined at:
 14945 ;;		line 10 in file "hd44780.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;		None
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;		None
 14950 ;; Return value:  Size  Location     Type
 14951 ;;                  1    wreg      void 
 14952 ;; Registers used:
 14953 ;;		wreg, status,2, status,0, cstack
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14959 ;;      Params:         0       0       0       0       0       0       0
 14960 ;;      Locals:         0       0       0       0       0       0       0
 14961 ;;      Temps:          1       0       0       0       0       0       0
 14962 ;;      Totals:         1       0       0       0       0       0       0
 14963 ;;Total ram usage:        1 bytes
 14964 ;; Hardware stack levels used: 1
 14965 ;; Hardware stack levels required when called: 6
 14966 ;; This function calls:
 14967 ;;		_clearLCD
 14968 ;;		_lcdNibble
 14969 ;;		_lcdWrite
 14970 ;; This function is called by:
 14971 ;;		_init_cpu
 14972 ;; This function uses a non-reentrant model
 14973 ;;
 14974                           
 14975                           	psect	text59
 14976  002B96                     __ptext59:
 14977                           	callstack 0
 14978  002B96                     _initLCD:
 14979                           	callstack 23
 14980                           
 14981                           ;hd44780.c: 11:     LATAbits.LA7 = 0;
 14982                           
 14983                           ;incstack = 0
 14984  002B96  9E89               	bcf	137,7,c	;volatile
 14985                           
 14986                           ;hd44780.c: 12:     LATAbits.LA6 = 0;
 14987  002B98  9C89               	bcf	137,6,c	;volatile
 14988                           
 14989                           ;hd44780.c: 14:     _delay((unsigned long)((10)*(64000000/4000.0)));
 14990  002B9A  0ED0               	movlw	208
 14991  002B9C  6E20               	movwf	??_initLCD^0,c
 14992  002B9E  0ECA               	movlw	202
 14993  002BA0                     u12267:
 14994  002BA0  2EE8               	decfsz	wreg,f,c
 14995  002BA2  D7FE               	bra	u12267
 14996  002BA4  2E20               	decfsz	??_initLCD^0,f,c
 14997  002BA6  D7FC               	bra	u12267
 14998                           
 14999                           ;hd44780.c: 15:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15000  002BA8  0ED0               	movlw	208
 15001  002BAA  6E20               	movwf	??_initLCD^0,c
 15002  002BAC  0ECA               	movlw	202
 15003  002BAE                     u12277:
 15004  002BAE  2EE8               	decfsz	wreg,f,c
 15005  002BB0  D7FE               	bra	u12277
 15006  002BB2  2E20               	decfsz	??_initLCD^0,f,c
 15007  002BB4  D7FC               	bra	u12277
 15008                           
 15009                           ;hd44780.c: 16:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15010  002BB6  0ED0               	movlw	208
 15011  002BB8  6E20               	movwf	??_initLCD^0,c
 15012  002BBA  0ECA               	movlw	202
 15013  002BBC                     u12287:
 15014  002BBC  2EE8               	decfsz	wreg,f,c
 15015  002BBE  D7FE               	bra	u12287
 15016  002BC0  2E20               	decfsz	??_initLCD^0,f,c
 15017  002BC2  D7FC               	bra	u12287
 15018                           
 15019                           ;hd44780.c: 17:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15020  002BC4  0ED0               	movlw	208
 15021  002BC6  6E20               	movwf	??_initLCD^0,c
 15022  002BC8  0ECA               	movlw	202
 15023  002BCA                     u12297:
 15024  002BCA  2EE8               	decfsz	wreg,f,c
 15025  002BCC  D7FE               	bra	u12297
 15026  002BCE  2E20               	decfsz	??_initLCD^0,f,c
 15027  002BD0  D7FC               	bra	u12297
 15028                           
 15029                           ;hd44780.c: 21:     lcdNibble(0b0011);
 15030  002BD2  0E03               	movlw	3
 15031  002BD4  EC78  F019         	call	_lcdNibble
 15032                           
 15033                           ;hd44780.c: 22:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15034  002BD8  0E68               	movlw	104
 15035  002BDA  6E20               	movwf	??_initLCD^0,c
 15036  002BDC  0EE4               	movlw	228
 15037  002BDE                     u12307:
 15038  002BDE  2EE8               	decfsz	wreg,f,c
 15039  002BE0  D7FE               	bra	u12307
 15040  002BE2  2E20               	decfsz	??_initLCD^0,f,c
 15041  002BE4  D7FC               	bra	u12307
 15042  002BE6  F000 F000          	nop2	
 15043                           
 15044                           ;hd44780.c: 23:     lcdNibble(0b0011);
 15045  002BEA  0E03               	movlw	3
 15046  002BEC  EC78  F019         	call	_lcdNibble
 15047                           
 15048                           ;hd44780.c: 24:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15049  002BF0  0E68               	movlw	104
 15050  002BF2  6E20               	movwf	??_initLCD^0,c
 15051  002BF4  0EE4               	movlw	228
 15052  002BF6                     u12317:
 15053  002BF6  2EE8               	decfsz	wreg,f,c
 15054  002BF8  D7FE               	bra	u12317
 15055  002BFA  2E20               	decfsz	??_initLCD^0,f,c
 15056  002BFC  D7FC               	bra	u12317
 15057  002BFE  F000 F000          	nop2	
 15058                           
 15059                           ;hd44780.c: 25:     lcdNibble(0b0011);
 15060  002C02  0E03               	movlw	3
 15061  002C04  EC78  F019         	call	_lcdNibble
 15062                           
 15063                           ;hd44780.c: 26:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15064  002C08  0E68               	movlw	104
 15065  002C0A  6E20               	movwf	??_initLCD^0,c
 15066  002C0C  0EE4               	movlw	228
 15067  002C0E                     u12327:
 15068  002C0E  2EE8               	decfsz	wreg,f,c
 15069  002C10  D7FE               	bra	u12327
 15070  002C12  2E20               	decfsz	??_initLCD^0,f,c
 15071  002C14  D7FC               	bra	u12327
 15072  002C16  F000 F000          	nop2	
 15073                           
 15074                           ;hd44780.c: 27:     lcdNibble(0b0010);
 15075  002C1A  0E02               	movlw	2
 15076  002C1C  EC78  F019         	call	_lcdNibble
 15077                           
 15078                           ;hd44780.c: 28:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15079  002C20  0E68               	movlw	104
 15080  002C22  6E20               	movwf	??_initLCD^0,c
 15081  002C24  0EE4               	movlw	228
 15082  002C26                     u12337:
 15083  002C26  2EE8               	decfsz	wreg,f,c
 15084  002C28  D7FE               	bra	u12337
 15085  002C2A  2E20               	decfsz	??_initLCD^0,f,c
 15086  002C2C  D7FC               	bra	u12337
 15087  002C2E  F000 F000          	nop2	
 15088                           
 15089                           ;hd44780.c: 31:     lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
 15090  002C32  0E00               	movlw	0
 15091  002C34  6E1D               	movwf	lcdWrite@type^0,c
 15092  002C36  0E28               	movlw	40
 15093  002C38  EC52  F01E         	call	_lcdWrite
 15094                           
 15095                           ;hd44780.c: 32:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15096  002C3C  0E68               	movlw	104
 15097  002C3E  6E20               	movwf	??_initLCD^0,c
 15098  002C40  0EE4               	movlw	228
 15099  002C42                     u12347:
 15100  002C42  2EE8               	decfsz	wreg,f,c
 15101  002C44  D7FE               	bra	u12347
 15102  002C46  2E20               	decfsz	??_initLCD^0,f,c
 15103  002C48  D7FC               	bra	u12347
 15104  002C4A  F000 F000          	nop2	
 15105                           
 15106                           ;hd44780.c: 33:     lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
 15107  002C4E  0E00               	movlw	0
 15108  002C50  6E1D               	movwf	lcdWrite@type^0,c
 15109  002C52  0E0C               	movlw	12
 15110  002C54  EC52  F01E         	call	_lcdWrite
 15111                           
 15112                           ;hd44780.c: 34:     _delay((unsigned long)((8)*(64000000/4000.0)));
 15113  002C58  0EA7               	movlw	167
 15114  002C5A  6E20               	movwf	??_initLCD^0,c
 15115  002C5C  0E3A               	movlw	58
 15116  002C5E                     u12357:
 15117  002C5E  2EE8               	decfsz	wreg,f,c
 15118  002C60  D7FE               	bra	u12357
 15119  002C62  2E20               	decfsz	??_initLCD^0,f,c
 15120  002C64  D7FC               	bra	u12357
 15121  002C66  F000 F000          	nop2	
 15122                           
 15123                           ;hd44780.c: 35:     clearLCD();
 15124  002C6A  EC3E  F01F         	call	_clearLCD	;wreg free
 15125                           
 15126                           ;hd44780.c: 36:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15127  002C6E  0E68               	movlw	104
 15128  002C70  6E20               	movwf	??_initLCD^0,c
 15129  002C72  0EE4               	movlw	228
 15130  002C74                     u12367:
 15131  002C74  2EE8               	decfsz	wreg,f,c
 15132  002C76  D7FE               	bra	u12367
 15133  002C78  2E20               	decfsz	??_initLCD^0,f,c
 15134  002C7A  D7FC               	bra	u12367
 15135  002C7C  F000 F000          	nop2	
 15136                           
 15137                           ;hd44780.c: 37:     lcdWrite(0x06, COMMAND);
 15138  002C80  0E00               	movlw	0
 15139  002C82  6E1D               	movwf	lcdWrite@type^0,c
 15140  002C84  0E06               	movlw	6
 15141  002C86  EC52  F01E         	call	_lcdWrite
 15142                           
 15143                           ;hd44780.c: 38:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15144  002C8A  0E68               	movlw	104
 15145  002C8C  6E20               	movwf	??_initLCD^0,c
 15146  002C8E  0EE4               	movlw	228
 15147  002C90                     u12377:
 15148  002C90  2EE8               	decfsz	wreg,f,c
 15149  002C92  D7FE               	bra	u12377
 15150  002C94  2E20               	decfsz	??_initLCD^0,f,c
 15151  002C96  D7FC               	bra	u12377
 15152  002C98  F000 F000          	nop2	
 15153                           
 15154                           ;hd44780.c: 39:     clearLCD();
 15155  002C9C  EC3E  F01F         	call	_clearLCD	;wreg free
 15156                           
 15157                           ;hd44780.c: 41:     LATAbits.LA7 = 1;
 15158  002CA0  8E89               	bsf	137,7,c	;volatile
 15159  002CA2  0012               	return		;funcret
 15160  002CA4                     __end_of_initLCD:
 15161                           	callstack 0
 15162                           
 15163 ;; *************** function _clearLCD *****************
 15164 ;; Defined at:
 15165 ;;		line 45 in file "hd44780.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		wreg, status,2, status,0, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/1
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15179 ;;      Params:         0       0       0       0       0       0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0
 15181 ;;      Temps:          1       0       0       0       0       0       0
 15182 ;;      Totals:         1       0       0       0       0       0       0
 15183 ;;Total ram usage:        1 bytes
 15184 ;; Hardware stack levels used: 1
 15185 ;; Hardware stack levels required when called: 5
 15186 ;; This function calls:
 15187 ;;		_lcdWrite
 15188 ;; This function is called by:
 15189 ;;		_initLCD
 15190 ;;		_main
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text60
 15195  003E7C                     __ptext60:
 15196                           	callstack 0
 15197  003E7C                     _clearLCD:
 15198                           	callstack 0
 15199                           
 15200                           ;hd44780.c: 46:     lcdWrite(0x01, COMMAND);
 15201                           
 15202                           ;incstack = 0
 15203  003E7C  EC57  F017         	call	PL210	;call to abstracted procedure
 15204  003E80  EC52  F01E         	call	_lcdWrite
 15205                           
 15206                           ;hd44780.c: 47:     _delay((unsigned long)((2)*(64000000/4000.0)));
 15207  003E84  0E2A               	movlw	42
 15208  003E86  6E1F               	movwf	??_clearLCD^0,c
 15209  003E88  0E8E               	movlw	142
 15210  003E8A                     u12387:
 15211  003E8A  2EE8               	decfsz	wreg,f,c
 15212  003E8C  D7FE               	bra	u12387
 15213  003E8E  2E1F               	decfsz	??_clearLCD^0,f,c
 15214  003E90  D7FC               	bra	u12387
 15215  003E92  0012               	return		;funcret
 15216  003E94                     __end_of_clearLCD:
 15217                           	callstack 0
 15218                           
 15219 ;; *************** function _cgrom_char *****************
 15220 ;; Defined at:
 15221 ;;		line 149 in file "hd44780.c"
 15222 ;; Parameters:    Size  Location     Type
 15223 ;;  symbol          2   30[COMRAM] PTR unsigned char 
 15224 ;;		 -> symbol_7(8), symbol_6(8), symbol_5(8), symbol_4(8), 
 15225 ;;		 -> symbol_3(8), symbol_2(8), symbol_1(8), 
 15226 ;;  address         1   32[COMRAM] unsigned char 
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  i               1   33[COMRAM] unsigned char 
 15229 ;; Return value:  Size  Location     Type
 15230 ;;                  1    wreg      void 
 15231 ;; Registers used:
 15232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15238 ;;      Params:         3       0       0       0       0       0       0
 15239 ;;      Locals:         1       0       0       0       0       0       0
 15240 ;;      Temps:          0       0       0       0       0       0       0
 15241 ;;      Totals:         4       0       0       0       0       0       0
 15242 ;;Total ram usage:        4 bytes
 15243 ;; Hardware stack levels used: 1
 15244 ;; Hardware stack levels required when called: 5
 15245 ;; This function calls:
 15246 ;;		_lcdWrite
 15247 ;; This function is called by:
 15248 ;;		_init_cpu
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           	psect	text61
 15253  003C72                     __ptext61:
 15254                           	callstack 0
 15255  003C72                     _cgrom_char:
 15256                           	callstack 24
 15257                           
 15258                           ;hd44780.c: 150:     uint8_t i;;hd44780.c: 151:     lcdWrite(0x40 | (address * 8), COMMA
      +                          ND);
 15259                           
 15260                           ;incstack = 0
 15261  003C72  6A1D               	clrf	lcdWrite@type^0,c
 15262  003C74  5021               	movf	cgrom_char@address^0,w,c
 15263  003C76  0D08               	mullw	8
 15264  003C78  50F3               	movf	243,w,c
 15265  003C7A  0940               	iorlw	64
 15266  003C7C  EC52  F01E         	call	_lcdWrite
 15267                           
 15268                           ;hd44780.c: 152:     for (i = 0; i < 8; i++)
 15269  003C80  6A22               	clrf	cgrom_char@i^0,c
 15270  003C82                     l9328:
 15271                           
 15272                           ;hd44780.c: 153:         lcdWrite(*symbol++, DATA);
 15273  003C82  0E01               	movlw	1
 15274  003C84  6E1D               	movwf	lcdWrite@type^0,c
 15275  003C86  C01F  FFF6         	movff	cgrom_char@symbol,tblptrl
 15276  003C8A  C020  FFF7         	movff	cgrom_char@symbol+1,tblptrh
 15277  003C8E                     	if	0	;tblptru may be non-zero
 15278  003C8E                     	endif
 15279  003C8E                     	if	0	;tblptru may be non-zero
 15280  003C8E                     	endif
 15281  003C8E  0008               	tblrd		*
 15282  003C90  50F5               	movf	tablat,w,c
 15283  003C92  EC52  F01E         	call	_lcdWrite
 15284  003C96  4A1F               	infsnz	cgrom_char@symbol^0,f,c
 15285  003C98  2A20               	incf	(cgrom_char@symbol+1)^0,f,c
 15286  003C9A  2A22               	incf	cgrom_char@i^0,f,c
 15287  003C9C  0E07               	movlw	7
 15288  003C9E  6422               	cpfsgt	cgrom_char@i^0,c
 15289  003CA0  D7F0               	goto	l9328
 15290  003CA2  0C07               	retlw	7
 15291  003CA4                     __end_of_cgrom_char:
 15292                           	callstack 0
 15293                           
 15294 ;; *************** function _lcdWrite *****************
 15295 ;; Defined at:
 15296 ;;		line 50 in file "hd44780.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  byte            1    wreg     unsigned char 
 15299 ;;  type            1   28[COMRAM] enum E3254
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  byte            1   29[COMRAM] unsigned char 
 15302 ;; Return value:  Size  Location     Type
 15303 ;;                  1    wreg      void 
 15304 ;; Registers used:
 15305 ;;		wreg, status,2, status,0, cstack
 15306 ;; Tracked objects:
 15307 ;;		On entry : 0/1
 15308 ;;		On exit  : 0/0
 15309 ;;		Unchanged: 0/0
 15310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15311 ;;      Params:         1       0       0       0       0       0       0
 15312 ;;      Locals:         1       0       0       0       0       0       0
 15313 ;;      Temps:          0       0       0       0       0       0       0
 15314 ;;      Totals:         2       0       0       0       0       0       0
 15315 ;;Total ram usage:        2 bytes
 15316 ;; Hardware stack levels used: 1
 15317 ;; Hardware stack levels required when called: 4
 15318 ;; This function calls:
 15319 ;;		_lcdNibble
 15320 ;; This function is called by:
 15321 ;;		_initLCD
 15322 ;;		_clearLCD
 15323 ;;		_lcd_gotoxy
 15324 ;;		_lcd_putc
 15325 ;;		_lcdPrint
 15326 ;;		_cgrom_char
 15327 ;; This function uses a non-reentrant model
 15328 ;;
 15329                           
 15330                           	psect	text62
 15331  003CA4                     __ptext62:
 15332                           	callstack 0
 15333  003CA4                     _lcdWrite:
 15334                           	callstack 24
 15335                           
 15336                           ;incstack = 0
 15337                           ;lcdWrite@byte stored from wreg
 15338  003CA4  6E1E               	movwf	lcdWrite@byte^0,c
 15339                           
 15340                           ;hd44780.c: 51:     if (type == COMMAND)
 15341  003CA6  501D               	movf	lcdWrite@type^0,w,c
 15342  003CA8  E102               	bnz	l116
 15343                           
 15344                           ;hd44780.c: 52:         LATAbits.LA7 = 0;
 15345  003CAA  9E89               	bcf	137,7,c	;volatile
 15346  003CAC  D001               	goto	l8926
 15347  003CAE                     l116:
 15348                           
 15349                           ;hd44780.c: 54:         LATAbits.LA7 = 1;
 15350  003CAE  8E89               	bsf	137,7,c	;volatile
 15351  003CB0                     l8926:
 15352                           
 15353                           ;hd44780.c: 56:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15354  003CB0  0EE4               	movlw	228
 15355  003CB2                     u12397:
 15356  003CB2  F000 F000          	nop2	
 15357  003CB6  F000 F000          	nop2	
 15358  003CBA  2EE8               	decfsz	wreg,f,c
 15359  003CBC  D7FA               	bra	u12397
 15360  003CBE  F000 F000          	nop2	
 15361  003CC2  F000 F000          	nop2	
 15362                           
 15363                           ;hd44780.c: 58:     lcdNibble(byte >> 4);
 15364  003CC6  381E               	swapf	lcdWrite@byte^0,w,c
 15365  003CC8  0B0F               	andlw	15
 15366  003CCA  EC78  F019         	call	_lcdNibble
 15367                           
 15368                           ;hd44780.c: 59:     lcdNibble(byte & 0x0F);
 15369  003CCE  501E               	movf	lcdWrite@byte^0,w,c
 15370  003CD0  0B0F               	andlw	15
 15371  003CD2  EF78  F019         	goto	_lcdNibble
 15372  003CD6                     __end_of_lcdWrite:
 15373                           	callstack 0
 15374                           
 15375 ;; *************** function _lcdNibble *****************
 15376 ;; Defined at:
 15377 ;;		line 63 in file "hd44780.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  nibble          1    wreg     unsigned char 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  nibble          1   27[COMRAM] unsigned char 
 15382 ;; Return value:  Size  Location     Type
 15383 ;;                  1    wreg      void 
 15384 ;; Registers used:
 15385 ;;		wreg, status,2, status,0
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15391 ;;      Params:         0       0       0       0       0       0       0
 15392 ;;      Locals:         1       0       0       0       0       0       0
 15393 ;;      Temps:          1       0       0       0       0       0       0
 15394 ;;      Totals:         2       0       0       0       0       0       0
 15395 ;;Total ram usage:        2 bytes
 15396 ;; Hardware stack levels used: 1
 15397 ;; Hardware stack levels required when called: 3
 15398 ;; This function calls:
 15399 ;;		Nothing
 15400 ;; This function is called by:
 15401 ;;		_initLCD
 15402 ;;		_lcdWrite
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text63
 15407  0032F0                     __ptext63:
 15408                           	callstack 0
 15409  0032F0                     _lcdNibble:
 15410                           	callstack 24
 15411                           
 15412                           ;incstack = 0
 15413                           ;lcdNibble@nibble stored from wreg
 15414  0032F0  6E1C               	movwf	lcdNibble@nibble^0,c
 15415                           
 15416                           ;hd44780.c: 64:     LATCbits.LC0 = (nibble & 0x01) ? 1 : 0;
 15417  0032F2  A01C               	btfss	lcdNibble@nibble^0,0,c
 15418  0032F4  D003               	goto	u9830
 15419  0032F6  6A1B               	clrf	??_lcdNibble^0,c
 15420  0032F8  2A1B               	incf	??_lcdNibble^0,f,c
 15421  0032FA  D001               	goto	u9848
 15422  0032FC                     u9830:
 15423  0032FC  6A1B               	clrf	??_lcdNibble^0,c
 15424  0032FE                     u9848:
 15425  0032FE  508B               	movf	139,w,c	;volatile
 15426  003300  181B               	xorwf	??_lcdNibble^0,w,c
 15427  003302  0BFE               	andlw	-2
 15428  003304  181B               	xorwf	??_lcdNibble^0,w,c
 15429  003306  6E8B               	movwf	139,c	;volatile
 15430                           
 15431                           ;hd44780.c: 65:     LATCbits.LC1 = (nibble & 0x02) ? 1 : 0;
 15432  003308  A21C               	btfss	lcdNibble@nibble^0,1,c
 15433  00330A  D003               	goto	u9850
 15434  00330C  6A1B               	clrf	??_lcdNibble^0,c
 15435  00330E  2A1B               	incf	??_lcdNibble^0,f,c
 15436  003310  D001               	goto	u9868
 15437  003312                     u9850:
 15438  003312  6A1B               	clrf	??_lcdNibble^0,c
 15439  003314                     u9868:
 15440  003314  461B               	rlncf	??_lcdNibble^0,f,c
 15441  003316  508B               	movf	139,w,c	;volatile
 15442  003318  181B               	xorwf	??_lcdNibble^0,w,c
 15443  00331A  0BFD               	andlw	-3
 15444  00331C  181B               	xorwf	??_lcdNibble^0,w,c
 15445  00331E  6E8B               	movwf	139,c	;volatile
 15446                           
 15447                           ;hd44780.c: 66:     LATCbits.LC2 = (nibble & 0x04) ? 1 : 0;
 15448  003320  A41C               	btfss	lcdNibble@nibble^0,2,c
 15449  003322  D003               	goto	u9870
 15450  003324  6A1B               	clrf	??_lcdNibble^0,c
 15451  003326  2A1B               	incf	??_lcdNibble^0,f,c
 15452  003328  D001               	goto	u9888
 15453  00332A                     u9870:
 15454  00332A  6A1B               	clrf	??_lcdNibble^0,c
 15455  00332C                     u9888:
 15456  00332C  D827               	call	PL202	;call to abstracted procedure
 15457  00332E  0BFB               	andlw	-5
 15458  003330  181B               	xorwf	??_lcdNibble^0,w,c
 15459  003332  6E8B               	movwf	139,c	;volatile
 15460                           
 15461                           ;hd44780.c: 67:     LATCbits.LC3 = (nibble & 0x08) ? 1 : 0;
 15462  003334  A61C               	btfss	lcdNibble@nibble^0,3,c
 15463  003336  D003               	goto	u9890
 15464  003338  6A1B               	clrf	??_lcdNibble^0,c
 15465  00333A  2A1B               	incf	??_lcdNibble^0,f,c
 15466  00333C  D001               	goto	u9908
 15467  00333E                     u9890:
 15468  00333E  6A1B               	clrf	??_lcdNibble^0,c
 15469  003340                     u9908:
 15470  003340  461B               	rlncf	??_lcdNibble^0,f,c
 15471  003342  D81C               	call	PL202	;call to abstracted procedure
 15472  003344  0BF7               	andlw	-9
 15473  003346  181B               	xorwf	??_lcdNibble^0,w,c
 15474  003348  6E8B               	movwf	139,c	;volatile
 15475                           
 15476                           ;hd44780.c: 70:     LATAbits.LA6 = 1;
 15477  00334A  8C89               	bsf	137,6,c	;volatile
 15478                           
 15479                           ;hd44780.c: 71:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15480  00334C  0EE4               	movlw	228
 15481  00334E                     u12407:
 15482  00334E  F000 F000          	nop2	
 15483  003352  F000 F000          	nop2	
 15484  003356  2EE8               	decfsz	wreg,f,c
 15485  003358  D7FA               	bra	u12407
 15486  00335A  F000 F000          	nop2	
 15487  00335E  F000 F000          	nop2	
 15488                           
 15489                           ;hd44780.c: 72:     LATAbits.LA6 = 0;
 15490  003362  9C89               	bcf	137,6,c	;volatile
 15491                           
 15492                           ;hd44780.c: 73:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15493  003364  0EE4               	movlw	228
 15494  003366                     u12417:
 15495  003366  F000 F000          	nop2	
 15496  00336A  F000 F000          	nop2	
 15497  00336E  2EE8               	decfsz	wreg,f,c
 15498  003370  D7FA               	bra	u12417
 15499  003372  F000 F000          	nop2	
 15500  003376  F000 F000          	nop2	
 15501  00337A  0012               	return		;funcret
 15502  00337C                     __end_of_lcdNibble:
 15503                           	callstack 0
 15504  00337C                     PL202:
 15505                           	callstack 24
 15506  00337C  461B               	rlncf	??_lcdNibble^0,f,c
 15507  00337E  461B               	rlncf	??_lcdNibble^0,f,c
 15508  003380  508B               	movf	139,w,c	;volatile
 15509  003382  181B               	xorwf	??_lcdNibble^0,w,c
 15510  003384  0012               	return	
 15511  003386                     __end_ofPL202:
 15512                           	callstack 0
 15513                           
 15514 ;; *************** function ___xxtofl *****************
 15515 ;; Defined at:
 15516 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\xxtofl.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;  sign            1    wreg     unsigned char 
 15519 ;;  val             4   26[COMRAM] long 
 15520 ;; Auto vars:     Size  Location     Type
 15521 ;;  sign            1    0[BANK0 ] unsigned char 
 15522 ;;  arg             4    2[BANK0 ] unsigned long 
 15523 ;;  exp             1    1[BANK0 ] unsigned char 
 15524 ;; Return value:  Size  Location     Type
 15525 ;;                  4   26[COMRAM] unsigned char 
 15526 ;; Registers used:
 15527 ;;		wreg, status,2, status,0
 15528 ;; Tracked objects:
 15529 ;;		On entry : 3E/0
 15530 ;;		On exit  : 3F/0
 15531 ;;		Unchanged: 0/0
 15532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15533 ;;      Params:         4       0       0       0       0       0       0
 15534 ;;      Locals:         0       6       0       0       0       0       0
 15535 ;;      Temps:          4       0       0       0       0       0       0
 15536 ;;      Totals:         8       6       0       0       0       0       0
 15537 ;;Total ram usage:       14 bytes
 15538 ;; Hardware stack levels used: 1
 15539 ;; Hardware stack levels required when called: 3
 15540 ;; This function calls:
 15541 ;;		Nothing
 15542 ;; This function is called by:
 15543 ;;		_main
 15544 ;; This function uses a non-reentrant model
 15545 ;;
 15546                           
 15547                           	psect	text64
 15548  002CA4                     __ptext64:
 15549                           	callstack 0
 15550  002CA4                     ___xxtofl:
 15551                           	callstack 27
 15552                           
 15553                           ;incstack = 0
 15554                           ;___xxtofl@sign stored from wreg
 15555  002CA4  0100               	movlb	0	; () banked
 15556  002CA6  6F60               	movwf	___xxtofl@sign& (0+255),b
 15557  002CA8  5160               	movf	___xxtofl@sign& (0+255),w,b
 15558  002CAA  E01C               	bz	l1386
 15559                           
 15560                           ; BSR set to: 0
 15561  002CAC  AE1E               	btfss	(___xxtofl@val+3)^0,7,c
 15562  002CAE  D01A               	goto	l1386
 15563                           
 15564                           ; BSR set to: 0
 15565  002CB0  C01B  F01F         	movff	___xxtofl@val,??___xxtofl
 15566  002CB4  C01C  F020         	movff	___xxtofl@val+1,??___xxtofl+1
 15567  002CB8  C01D  F021         	movff	___xxtofl@val+2,??___xxtofl+2
 15568  002CBC  C01E  F022         	movff	___xxtofl@val+3,??___xxtofl+3
 15569  002CC0  1E1F               	comf	??___xxtofl^0,f,c
 15570  002CC2  1E20               	comf	(??___xxtofl+1)^0,f,c
 15571  002CC4  1E21               	comf	(??___xxtofl+2)^0,f,c
 15572  002CC6  1E22               	comf	(??___xxtofl+3)^0,f,c
 15573  002CC8  2A1F               	incf	??___xxtofl^0,f,c
 15574  002CCA  0E00               	movlw	0
 15575  002CCC  2220               	addwfc	(??___xxtofl+1)^0,f,c
 15576  002CCE  2221               	addwfc	(??___xxtofl+2)^0,f,c
 15577  002CD0  2222               	addwfc	(??___xxtofl+3)^0,f,c
 15578  002CD2  C01F  F062         	movff	??___xxtofl,___xxtofl@arg
 15579  002CD6  C020  F063         	movff	??___xxtofl+1,___xxtofl@arg+1
 15580  002CDA  C021  F064         	movff	??___xxtofl+2,___xxtofl@arg+2
 15581  002CDE  C022  F065         	movff	??___xxtofl+3,___xxtofl@arg+3
 15582  002CE2  D008               	goto	l9778
 15583  002CE4                     l1386:
 15584                           
 15585                           ; BSR set to: 0
 15586  002CE4  C01B  F062         	movff	___xxtofl@val,___xxtofl@arg
 15587  002CE8  C01C  F063         	movff	___xxtofl@val+1,___xxtofl@arg+1
 15588  002CEC  C01D  F064         	movff	___xxtofl@val+2,___xxtofl@arg+2
 15589  002CF0  C01E  F065         	movff	___xxtofl@val+3,___xxtofl@arg+3
 15590  002CF4                     l9778:
 15591                           
 15592                           ; BSR set to: 0
 15593  002CF4  501B               	movf	___xxtofl@val^0,w,c
 15594  002CF6  101C               	iorwf	(___xxtofl@val+1)^0,w,c
 15595  002CF8  101D               	iorwf	(___xxtofl@val+2)^0,w,c
 15596  002CFA  101E               	iorwf	(___xxtofl@val+3)^0,w,c
 15597  002CFC  E105               	bnz	l9782
 15598                           
 15599                           ; BSR set to: 0
 15600  002CFE  6A1B               	clrf	?___xxtofl^0,c
 15601  002D00  6A1C               	clrf	(?___xxtofl+1)^0,c
 15602  002D02  6A1D               	clrf	(?___xxtofl+2)^0,c
 15603  002D04  6A1E               	clrf	(?___xxtofl+3)^0,c
 15604  002D06  0012               	return	
 15605  002D08                     l9782:
 15606                           
 15607                           ; BSR set to: 0
 15608  002D08  0E96               	movlw	150
 15609  002D0A  6F61               	movwf	___xxtofl@exp& (0+255),b
 15610  002D0C  D002               	goto	l9786
 15611  002D0E                     l9784:
 15612                           
 15613                           ; BSR set to: 0
 15614  002D0E  2B61               	incf	___xxtofl@exp& (0+255),f,b
 15615  002D10  D844               	call	PL162	;call to abstracted procedure
 15616  002D12                     l9786:
 15617                           
 15618                           ; BSR set to: 0
 15619  002D12  6A1F               	clrf	??___xxtofl^0,c
 15620  002D14  6A20               	clrf	(??___xxtofl+1)^0,c
 15621  002D16  6A21               	clrf	(??___xxtofl+2)^0,c
 15622  002D18  0EFE               	movlw	254
 15623  002D1A  1565               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 15624  002D1C  D844               	call	PL176	;call to abstracted procedure
 15625  002D1E  E008               	bz	l1393
 15626  002D20  D7F6               	goto	l9784
 15627  002D22                     l9788:
 15628                           
 15629                           ; BSR set to: 0
 15630  002D22  2B61               	incf	___xxtofl@exp& (0+255),f,b
 15631                           
 15632                           ; BSR set to: 0
 15633  002D24  2B62               	incf	___xxtofl@arg& (0+255),f,b
 15634  002D26  0E00               	movlw	0
 15635  002D28  2363               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 15636  002D2A  2364               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 15637  002D2C  2365               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 15638                           
 15639                           ; BSR set to: 0
 15640  002D2E  D835               	call	PL162	;call to abstracted procedure
 15641  002D30                     l1393:
 15642                           
 15643                           ; BSR set to: 0
 15644  002D30  6A1F               	clrf	??___xxtofl^0,c
 15645  002D32  6A20               	clrf	(??___xxtofl+1)^0,c
 15646  002D34  6A21               	clrf	(??___xxtofl+2)^0,c
 15647  002D36  5165               	movf	(___xxtofl@arg+3)& (0+255),w,b
 15648  002D38  D836               	call	PL176	;call to abstracted procedure
 15649  002D3A  E007               	bz	l9796
 15650  002D3C  D7F2               	goto	l9788
 15651  002D3E                     l9794:
 15652                           
 15653                           ; BSR set to: 0
 15654  002D3E  0761               	decf	___xxtofl@exp& (0+255),f,b
 15655  002D40  90D8               	bcf	status,0,c
 15656  002D42  3762               	rlcf	___xxtofl@arg& (0+255),f,b
 15657  002D44  3763               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 15658  002D46  3764               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 15659  002D48  3765               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 15660  002D4A                     l9796:
 15661                           
 15662                           ; BSR set to: 0
 15663  002D4A  BF64               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 15664  002D4C  D003               	goto	u11580
 15665                           
 15666                           ; BSR set to: 0
 15667  002D4E  0E02               	movlw	2
 15668  002D50  6161               	cpfslt	___xxtofl@exp& (0+255),b
 15669  002D52  D7F5               	goto	l9794
 15670  002D54                     u11580:
 15671                           
 15672                           ; BSR set to: 0
 15673  002D54  A161               	btfss	___xxtofl@exp& (0+255),0,b
 15674                           
 15675                           ; BSR set to: 0
 15676  002D56  9F64               	bcf	(___xxtofl@arg+2)& (0+255),7,b
 15677                           
 15678                           ; BSR set to: 0
 15679  002D58  90D8               	bcf	status,0,c
 15680  002D5A  3361               	rrcf	___xxtofl@exp& (0+255),f,b
 15681                           
 15682                           ; BSR set to: 0
 15683  002D5C  C061  F01F         	movff	___xxtofl@exp,??___xxtofl
 15684  002D60  6A20               	clrf	(??___xxtofl+1)^0,c
 15685  002D62  6A21               	clrf	(??___xxtofl+2)^0,c
 15686  002D64  6A22               	clrf	(??___xxtofl+3)^0,c
 15687  002D66  C01F  F022         	movff	??___xxtofl,??___xxtofl+3
 15688  002D6A  6A21               	clrf	(??___xxtofl+2)^0,c
 15689  002D6C  6A20               	clrf	(??___xxtofl+1)^0,c
 15690  002D6E  6A1F               	clrf	??___xxtofl^0,c
 15691  002D70  501F               	movf	??___xxtofl^0,w,c
 15692  002D72  1362               	iorwf	___xxtofl@arg& (0+255),f,b
 15693  002D74  5020               	movf	(??___xxtofl+1)^0,w,c
 15694  002D76  1363               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 15695  002D78  5021               	movf	(??___xxtofl+2)^0,w,c
 15696  002D7A  1364               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 15697  002D7C  5022               	movf	(??___xxtofl+3)^0,w,c
 15698  002D7E  1365               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 15699                           
 15700                           ; BSR set to: 0
 15701  002D80  5160               	movf	___xxtofl@sign& (0+255),w,b
 15702  002D82  E002               	bz	l9812
 15703                           
 15704                           ; BSR set to: 0
 15705  002D84  BE1E               	btfsc	(___xxtofl@val+3)^0,7,c
 15706                           
 15707                           ; BSR set to: 0
 15708  002D86  8F65               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 15709  002D88                     l9812:
 15710                           
 15711                           ; BSR set to: 0
 15712  002D88  C062  F01B         	movff	___xxtofl@arg,?___xxtofl
 15713  002D8C  C063  F01C         	movff	___xxtofl@arg+1,?___xxtofl+1
 15714  002D90  C064  F01D         	movff	___xxtofl@arg+2,?___xxtofl+2
 15715  002D94  C065  F01E         	movff	___xxtofl@arg+3,?___xxtofl+3
 15716                           
 15717                           ; BSR set to: 0
 15718  002D98  0012               	return		;funcret
 15719  002D9A                     __end_of___xxtofl:
 15720                           	callstack 0
 15721  002D9A                     PL162:
 15722                           	callstack 27
 15723  002D9A  90D8               	bcf	status,0,c
 15724  002D9C  3365               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 15725  002D9E  3364               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 15726  002DA0  3363               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 15727  002DA2  3362               	rrcf	___xxtofl@arg& (0+255),f,b
 15728  002DA4  0012               	return	
 15729  002DA6                     __end_ofPL162:
 15730                           	callstack 0
 15731  002DA6                     PL176:
 15732                           	callstack 27
 15733  002DA6  6E22               	movwf	(??___xxtofl+3)^0,c
 15734  002DA8  501F               	movf	??___xxtofl^0,w,c
 15735  002DAA  1020               	iorwf	(??___xxtofl+1)^0,w,c
 15736  002DAC  1021               	iorwf	(??___xxtofl+2)^0,w,c
 15737  002DAE  1022               	iorwf	(??___xxtofl+3)^0,w,c
 15738  002DB0  0012               	return	
 15739  002DB2                     __end_ofPL176:
 15740                           	callstack 0
 15741                           
 15742 ;; *************** function _EncPoll *****************
 15743 ;; Defined at:
 15744 ;;		line 574 in file "main.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;		None
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;		None
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  1    wreg      char 
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 15753 ;; Tracked objects:
 15754 ;;		On entry : 3F/1
 15755 ;;		On exit  : 3F/1
 15756 ;;		Unchanged: 3F/0
 15757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15758 ;;      Params:         0       0       0       0       0       0       0
 15759 ;;      Locals:         0       0       0       0       0       0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0
 15761 ;;      Totals:         0       0       0       0       0       0       0
 15762 ;;Total ram usage:        0 bytes
 15763 ;; Hardware stack levels used: 1
 15764 ;; Hardware stack levels required when called: 3
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_main
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           	psect	text65
 15773  003CD6                     __ptext65:
 15774                           	callstack 0
 15775  003CD6                     _EncPoll:
 15776                           	callstack 27
 15777                           
 15778                           ; BSR set to: 1
 15779                           ;main.c: 575:     static int8_t EncVal = 0;;main.c: 576:     static uint8_t Enc = 0;;mai
      +                          n.c: 578:     Enc <<= 2;
 15780                           
 15781                           ; BSR set to: 0
 15782                           ;incstack = 0
 15783  003CD6  90D8               	bcf	status,0,c
 15784  003CD8  363D               	rlcf	EncPoll@Enc^0,f,c
 15785  003CDA  90D8               	bcf	status,0,c
 15786  003CDC  363D               	rlcf	EncPoll@Enc^0,f,c
 15787                           
 15788                           ;main.c: 579:     Enc &= 0b00001111;
 15789  003CDE  0E0F               	movlw	15
 15790  003CE0  163D               	andwf	EncPoll@Enc^0,f,c
 15791                           
 15792                           ;main.c: 580:     Enc += ((PORTB & ((1 << 4) | (1 << 5))) >> 4);
 15793  003CE2  3881               	swapf	129,w,c	;volatile
 15794  003CE4  0B0F               	andlw	15
 15795  003CE6  0B03               	andlw	3
 15796  003CE8  263D               	addwf	EncPoll@Enc^0,f,c
 15797                           
 15798                           ; BSR set to: 1
 15799                           ;main.c: 581:     EncVal = EncState_[Enc];
 15800  003CEA  0EED               	movlw	low _EncState_
 15801  003CEC  243D               	addwf	EncPoll@Enc^0,w,c
 15802  003CEE  6EF6               	movwf	tblptrl,c
 15803  003CF0  6AF7               	clrf	tblptrh,c
 15804  003CF2  0E7D               	movlw	high _EncState_
 15805  003CF4  22F7               	addwfc	tblptrh,f,c
 15806  003CF6                     	if	0	;There are less than 3 active tblptr bytes
 15807  003CF6                     	endif
 15808  003CF6  0008               	tblrd		*
 15809  003CF8  CFF5 F03E          	movff	tablat,EncPoll@EncVal
 15810                           
 15811                           ; BSR set to: 1
 15812                           ;main.c: 583:     if (EncVal == 0x7F) EncVal = 0;
 15813  003CFC  0E7F               	movlw	127
 15814  003CFE  183E               	xorwf	EncPoll@EncVal^0,w,c
 15815  003D00  E101               	bnz	l6744
 15816                           
 15817                           ; BSR set to: 1
 15818  003D02  6A3E               	clrf	EncPoll@EncVal^0,c
 15819  003D04                     l6744:
 15820                           
 15821                           ; BSR set to: 1
 15822                           ;main.c: 585:     return EncVal;
 15823  003D04  503E               	movf	EncPoll@EncVal^0,w,c
 15824                           
 15825                           ; BSR set to: 1
 15826  003D06  0012               	return		;funcret
 15827  003D08                     __end_of_EncPoll:
 15828                           	callstack 0
 15829                           
 15830 ;; *************** function _Inter_lo *****************
 15831 ;; Defined at:
 15832 ;;		line 7 in file "interrupt.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;		None
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;		None
 15837 ;; Return value:  Size  Location     Type
 15838 ;;                  1    wreg      void 
 15839 ;; Registers used:
 15840 ;;		wreg, status,2, status,0
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15846 ;;      Params:         0       0       0       0       0       0       0
 15847 ;;      Locals:         0       0       0       0       0       0       0
 15848 ;;      Temps:          4       0       0       0       0       0       0
 15849 ;;      Totals:         4       0       0       0       0       0       0
 15850 ;;Total ram usage:        4 bytes
 15851 ;; Hardware stack levels used: 1
 15852 ;; Hardware stack levels required when called: 2
 15853 ;; This function calls:
 15854 ;;		Nothing
 15855 ;; This function is called by:
 15856 ;;		Interrupt level 1
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           	psect	intcodelo
 15861  000018                     __pintcodelo:
 15862                           	callstack 0
 15863  000018                     _Inter_lo:
 15864                           	callstack 19
 15865                           
 15866                           ; BSR set to: 1
 15867                           ;incstack = 0
 15868  000018  8045               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 15869  00001A  CFD8 F018          	movff	status,??_Inter_lo+1
 15870  00001E  CFE8 F019          	movff	wreg,??_Inter_lo+2
 15871  000022  CFE0 F01A          	movff	bsr,??_Inter_lo+3
 15872                           
 15873                           ;interrupt.c: 8:     if (TMR0IE && TMR0IF) {
 15874  000026  BAF2               	btfsc	4082,5,c	;volatile
 15875  000028  A4F2               	btfss	4082,2,c	;volatile
 15876  00002A  D004               	goto	i1l6974
 15877                           
 15878                           ;interrupt.c: 10:         tick_t0++;
 15879  00002C  94F2               	bcf	4082,2,c	;volatile
 15880                           
 15881                           ;interrupt.c: 12:         TMR0L = 57;
 15882  00002E  0E39               	movlw	57
 15883  000030  6ED6               	movwf	214,c	;volatile
 15884                           
 15885                           ;interrupt.c: 13:         ADCON0bits.GODONE = 1;
 15886  000032  82C2               	bsf	194,1,c	;volatile
 15887  000034                     i1l6974:
 15888                           
 15889                           ;interrupt.c: 16:     if (TMR1IE && TMR1IF) {
 15890  000034  B09D               	btfsc	3997,0,c	;volatile
 15891  000036  A09E               	btfss	3998,0,c	;volatile
 15892  000038  D006               	goto	i1l6984
 15893                           
 15894                           ;interrupt.c: 17:         TMR1IF = 0;
 15895  00003A  909E               	bcf	3998,0,c	;volatile
 15896                           
 15897                           ;interrupt.c: 18:         tick_t1++;
 15898  00003C  0101               	movlb	1	; () banked
 15899  00003E  2B2C               	incf	_tick_t1& (0+255),f,b
 15900                           
 15901                           ;interrupt.c: 19:         tick_t1_1++;
 15902  000040  2B2B               	incf	_tick_t1_1& (0+255),f,b
 15903                           
 15904                           ; BSR set to: 1
 15905                           ;interrupt.c: 20:         read_key = 1;
 15906  000042  0E01               	movlw	1
 15907  000044  6F2A               	movwf	_read_key& (0+255),b
 15908  000046                     i1l6984:
 15909                           
 15910                           ;interrupt.c: 23:     if (TMR2IE && TMR2IF) {
 15911  000046  B29D               	btfsc	3997,1,c	;volatile
 15912  000048  A29E               	btfss	3998,1,c	;volatile
 15913  00004A  D034               	goto	i1l247
 15914                           
 15915                           ;interrupt.c: 24:         TMR2IF = 0;
 15916  00004C  929E               	bcf	3998,1,c	;volatile
 15917                           
 15918                           ;interrupt.c: 25:         if (++timer_val >= 782)
 15919  00004E  0101               	movlb	1	; () banked
 15920  000050  4B9F               	infsnz	_timer_val& (0+255),f,b
 15921  000052  2BA0               	incf	(_timer_val+1)& (0+255),f,b
 15922  000054  0E0E               	movlw	14
 15923  000056  5D9F               	subwf	_timer_val& (0+255),w,b
 15924  000058  0E03               	movlw	3
 15925  00005A  59A0               	subwfb	(_timer_val+1)& (0+255),w,b
 15926  00005C  E305               	bnc	i1l241
 15927                           
 15928                           ; BSR set to: 1
 15929                           ;interrupt.c: 26:         {;interrupt.c: 27:             timer_val = 0;
 15930  00005E  6B9F               	clrf	_timer_val& (0+255),b
 15931  000060  6BA0               	clrf	(_timer_val+1)& (0+255),b
 15932                           
 15933                           ; BSR set to: 1
 15934                           ;interrupt.c: 28:             time_flag = 1;
 15935  000062  0E01               	movlw	1
 15936  000064  6FA2               	movwf	_time_flag& (0+255),b
 15937                           
 15938                           ; BSR set to: 1
 15939                           ;interrupt.c: 29:             TMR2ON = 0;
 15940  000066  94CA               	bcf	4042,2,c	;volatile
 15941  000068                     i1l241:
 15942                           
 15943                           ; BSR set to: 1
 15944                           ;interrupt.c: 31:         if (sound_enable) {
 15945  000068  5129               	movf	_sound_enable& (0+255),w,b
 15946  00006A  E024               	bz	i1l247
 15947                           
 15948                           ; BSR set to: 1
 15949                           ;interrupt.c: 32:             TMR2ON = 1;
 15950  00006C  84CA               	bsf	4042,2,c	;volatile
 15951                           
 15952                           ; BSR set to: 1
 15953                           ;interrupt.c: 33:             sound_delay++;
 15954  00006E  4A3A               	infsnz	_sound_delay^0,f,c
 15955  000070  2A3B               	incf	(_sound_delay+1)^0,f,c
 15956                           
 15957                           ; BSR set to: 1
 15958                           ;interrupt.c: 34:             if (sound_delay <= 195) {
 15959  000072  503B               	movf	(_sound_delay+1)^0,w,c
 15960  000074  E110               	bnz	i1l7006
 15961  000076  0EC4               	movlw	196
 15962  000078  5C3A               	subwf	_sound_delay^0,w,c
 15963  00007A  E20D               	bc	i1l7006
 15964  00007C  0E01               	movlw	1
 15965                           
 15966                           ; BSR set to: 1
 15967                           ;interrupt.c: 36:                 LATCbits.LATC5 = ~LATCbits.LATC5;
 15968  00007E  AA8B               	btfss	139,5,c	;volatile
 15969  000080  0E00               	movlw	0
 15970  000082  0AFF               	xorlw	255
 15971  000084  6E17               	movwf	??_Inter_lo^0,c
 15972  000086  3A17               	swapf	??_Inter_lo^0,f,c
 15973  000088  4617               	rlncf	??_Inter_lo^0,f,c
 15974  00008A  508B               	movf	139,w,c	;volatile
 15975  00008C  1817               	xorwf	??_Inter_lo^0,w,c
 15976  00008E  0BDF               	andlw	-33
 15977  000090  1817               	xorwf	??_Inter_lo^0,w,c
 15978  000092  6E8B               	movwf	139,c	;volatile
 15979                           
 15980                           ;interrupt.c: 37:             } else if ((sound_delay > 195)&&(sound_delay < 390))
 15981  000094  D00F               	goto	i1l247
 15982  000096                     i1l7006:
 15983                           
 15984                           ; BSR set to: 1
 15985  000096  503B               	movf	(_sound_delay+1)^0,w,c
 15986  000098  E103               	bnz	i1u766_20
 15987  00009A  0EC4               	movlw	196
 15988  00009C  5C3A               	subwf	_sound_delay^0,w,c
 15989  00009E  E307               	bnc	i1l245
 15990  0000A0                     i1u766_20:
 15991                           
 15992                           ; BSR set to: 1
 15993  0000A0  0E86               	movlw	134
 15994  0000A2  5C3A               	subwf	_sound_delay^0,w,c
 15995  0000A4  0E01               	movlw	1
 15996  0000A6  583B               	subwfb	(_sound_delay+1)^0,w,c
 15997  0000A8  E202               	bc	i1l245
 15998                           
 15999                           ; BSR set to: 1
 16000                           ;interrupt.c: 38:                 LATCbits.LATC5 = 0;
 16001  0000AA  9A8B               	bcf	139,5,c	;volatile
 16002  0000AC  D003               	goto	i1l247
 16003  0000AE                     i1l245:
 16004                           
 16005                           ; BSR set to: 1
 16006                           ;interrupt.c: 40:                 LATCbits.LATC5 = 0;
 16007  0000AE  9A8B               	bcf	139,5,c	;volatile
 16008                           
 16009                           ;interrupt.c: 41:                 sound_delay = 0;
 16010  0000B0  6A3A               	clrf	_sound_delay^0,c
 16011  0000B2  6A3B               	clrf	(_sound_delay+1)^0,c
 16012  0000B4                     i1l247:
 16013  0000B4  C01A  FFE0         	movff	??_Inter_lo+3,bsr
 16014  0000B8  C019  FFE8         	movff	??_Inter_lo+2,wreg
 16015  0000BC  C018  FFD8         	movff	??_Inter_lo+1,status
 16016  0000C0  9045               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 16017  0000C2  0010               	retfie	
 16018  0000C4                     __end_of_Inter_lo:
 16019                           	callstack 0
 16020                           
 16021 ;; *************** function _Inter_hi *****************
 16022 ;; Defined at:
 16023 ;;		line 51 in file "interrupt.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;		None
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  pulse           2   20[COMRAM] short 
 16028 ;;  lev             2   18[COMRAM] short 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;                  1    wreg      void 
 16031 ;; Registers used:
 16032 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16038 ;;      Params:         0       0       0       0       0       0       0
 16039 ;;      Locals:         6       0       0       0       0       0       0
 16040 ;;      Temps:          4       0       0       0       0       0       0
 16041 ;;      Totals:        10       0       0       0       0       0       0
 16042 ;;Total ram usage:       10 bytes
 16043 ;; Hardware stack levels used: 1
 16044 ;; Hardware stack levels required when called: 1
 16045 ;; This function calls:
 16046 ;;		i2___lmul
 16047 ;;		i2___wmul
 16048 ;; This function is called by:
 16049 ;;		Interrupt level 2
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           	psect	intcode
 16054  000008                     __pintcode:
 16055                           	callstack 0
 16056  000008                     _Inter_hi:
 16057                           	callstack 19
 16058                           
 16059                           ;incstack = 0
 16060  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16061  00000A  EFB0  F012         	goto	int_func
 16062                           
 16063                           	psect	intcode_body
 16064  002560                     __pintcode_body:
 16065                           	callstack 19
 16066  002560                     int_func:
 16067                           	callstack 19
 16068  002560  CFF3 F00F          	movff	prodl,??_Inter_hi+2
 16069  002564  CFF4 F010          	movff	prodh,??_Inter_hi+3
 16070                           
 16071                           ;interrupt.c: 52: int16_t pulse = 0, lev = t_power + err;
 16072  002568  6A15               	clrf	Inter_hi@pulse^0,c
 16073  00256A  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16074  00256C  5038               	movf	_t_power^0,w,c
 16075  00256E  2436               	addwf	_err^0,w,c
 16076  002570  6E13               	movwf	Inter_hi@lev^0,c
 16077  002572  5039               	movf	(_t_power+1)^0,w,c
 16078  002574  2037               	addwfc	(_err+1)^0,w,c
 16079  002576  6E14               	movwf	(Inter_hi@lev+1)^0,c
 16080                           
 16081                           ;interrupt.c: 55:     if (INT0IE && INT0IF) {
 16082  002578  B8F2               	btfsc	4082,4,c	;volatile
 16083  00257A  A2F2               	btfss	4082,1,c	;volatile
 16084  00257C  D058               	goto	i2l252
 16085                           
 16086                           ;interrupt.c: 56:         if (lev >= 50) pulse = 1;
 16087  00257E  BE14               	btfsc	(Inter_hi@lev+1)^0,7,c
 16088  002580  D008               	goto	i2l7024
 16089  002582  5014               	movf	(Inter_hi@lev+1)^0,w,c
 16090  002584  E103               	bnz	i2u770_40
 16091  002586  0E32               	movlw	50
 16092  002588  5C13               	subwf	Inter_hi@lev^0,w,c
 16093  00258A  E303               	bnc	i2l7024
 16094  00258C                     i2u770_40:
 16095  00258C  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16096  00258E  0E01               	movlw	1
 16097  002590  6E15               	movwf	Inter_hi@pulse^0,c
 16098  002592                     i2l7024:
 16099                           
 16100                           ;interrupt.c: 60:         if (ps * pulse * pp > 0) pulse = 0;
 16101  002592  5044               	movf	_pp^0,w,c
 16102  002594  6E01               	movwf	i2___wmul@multiplier^0,c
 16103  002596  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 16104  002598  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 16105  00259A  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 16106  00259C  C034  F003         	movff	_ps,i2___wmul@multiplicand
 16107  0025A0  C035  F004         	movff	_ps+1,i2___wmul@multiplicand+1
 16108  0025A4  ECED  F01E         	call	i2___wmul	;wreg free
 16109  0025A8  C001  F011         	movff	?i2___wmul,_Inter_hi$2885
 16110  0025AC  C002  F012         	movff	?i2___wmul+1,_Inter_hi$2885+1
 16111                           
 16112                           ;interrupt.c: 60:         if (ps * pulse * pp > 0) pulse = 0;
 16113  0025B0  C011  F001         	movff	_Inter_hi$2885,i2___wmul@multiplier
 16114  0025B4  C012  F002         	movff	_Inter_hi$2885+1,i2___wmul@multiplier+1
 16115  0025B8  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 16116  0025BC  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 16117  0025C0  ECED  F01E         	call	i2___wmul	;wreg free
 16118  0025C4  BE02               	btfsc	(?i2___wmul+1)^0,7,c
 16119  0025C6  D006               	goto	i2l7030
 16120  0025C8  5002               	movf	(?i2___wmul+1)^0,w,c
 16121  0025CA  E102               	bnz	i2u771_40
 16122  0025CC  0401               	decf	?i2___wmul^0,w,c
 16123  0025CE  E302               	bnc	i2l7030
 16124  0025D0                     i2u771_40:
 16125  0025D0  6A15               	clrf	Inter_hi@pulse^0,c
 16126  0025D2  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16127  0025D4                     i2l7030:
 16128                           
 16129                           ;interrupt.c: 61:         if (pulse) {
 16130  0025D4  5015               	movf	Inter_hi@pulse^0,w,c
 16131  0025D6  1016               	iorwf	(Inter_hi@pulse+1)^0,w,c
 16132  0025D8  E008               	bz	i2l255
 16133                           
 16134                           ;interrupt.c: 62:             LATAbits.LA5 = 1;
 16135  0025DA  8A89               	bsf	137,5,c	;volatile
 16136                           
 16137                           ;interrupt.c: 63:             err = lev - 100;
 16138  0025DC  0E9C               	movlw	156
 16139  0025DE  2413               	addwf	Inter_hi@lev^0,w,c
 16140  0025E0  6E36               	movwf	_err^0,c
 16141  0025E2  0EFF               	movlw	255
 16142  0025E4  2014               	addwfc	(Inter_hi@lev+1)^0,w,c
 16143  0025E6  6E37               	movwf	(_err+1)^0,c
 16144                           
 16145                           ;interrupt.c: 64:         } else {
 16146  0025E8  D005               	goto	i2l256
 16147  0025EA                     i2l255:
 16148                           
 16149                           ;interrupt.c: 65:             LATAbits.LA5 = 0;
 16150  0025EA  9A89               	bcf	137,5,c	;volatile
 16151                           
 16152                           ;interrupt.c: 66:             err = lev;
 16153  0025EC  C013  F036         	movff	Inter_hi@lev,_err
 16154  0025F0  C014  F037         	movff	Inter_hi@lev+1,_err+1
 16155  0025F4                     i2l256:
 16156                           
 16157                           ;interrupt.c: 68:         TMR3ON = 1;
 16158  0025F4  80B1               	bsf	4017,0,c	;volatile
 16159                           
 16160                           ;interrupt.c: 69:         ps += pp * pulse;
 16161  0025F6  5044               	movf	_pp^0,w,c
 16162  0025F8  6E01               	movwf	i2___wmul@multiplier^0,c
 16163  0025FA  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 16164  0025FC  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 16165  0025FE  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 16166  002600  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 16167  002604  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 16168  002608  ECED  F01E         	call	i2___wmul	;wreg free
 16169  00260C  5001               	movf	?i2___wmul^0,w,c
 16170  00260E  2634               	addwf	_ps^0,f,c
 16171  002610  5002               	movf	(?i2___wmul+1)^0,w,c
 16172  002612  2235               	addwfc	(_ps+1)^0,f,c
 16173                           
 16174                           ;interrupt.c: 70:         pp = -pp;
 16175  002614  6C44               	negf	_pp^0,c
 16176                           
 16177                           ;interrupt.c: 72:         if (zero <= (50 - 1))
 16178  002616  0E32               	movlw	50
 16179  002618  6040               	cpfslt	_zero^0,c
 16180  00261A  D001               	goto	i2l7044
 16181                           
 16182                           ;interrupt.c: 73:             zero++;
 16183  00261C  2A40               	incf	_zero^0,f,c
 16184  00261E                     i2l7044:
 16185                           
 16186                           ;interrupt.c: 74:         if (getU == 1) {
 16187  00261E  043F               	decf	_getU^0,w,c
 16188  002620  E105               	bnz	i2l258
 16189                           
 16190                           ;interrupt.c: 75:             getU = 0;
 16191  002622  6A3F               	clrf	_getU^0,c
 16192                           
 16193                           ;interrupt.c: 76:             cnt_adc = 0;
 16194  002624  0101               	movlb	1	; () banked
 16195  002626  6B1A               	clrf	_cnt_adc& (0+255),b
 16196  002628  6B1B               	clrf	(_cnt_adc+1)& (0+255),b
 16197                           
 16198                           ;interrupt.c: 77:             zero = 0;
 16199  00262A  6A40               	clrf	_zero^0,c
 16200  00262C                     i2l258:
 16201                           
 16202                           ;interrupt.c: 79:         INT0IF = 0;
 16203  00262C  92F2               	bcf	4082,1,c	;volatile
 16204  00262E                     i2l252:
 16205                           
 16206                           ;interrupt.c: 83:     if (ADIE && ADIF) {
 16207  00262E  BC9D               	btfsc	3997,6,c	;volatile
 16208  002630  AC9E               	btfss	3998,6,c	;volatile
 16209  002632  D03B               	goto	i2l7062
 16210                           
 16211                           ;interrupt.c: 84:         if (zero < 50) {
 16212  002634  0E32               	movlw	50
 16213  002636  6040               	cpfslt	_zero^0,c
 16214  002638  D037               	goto	i2l7060
 16215                           
 16216                           ;interrupt.c: 85:             U_meas = ((ADRESH << 8) + ADRESL);
 16217  00263A  50C3               	movf	195,w,c	;volatile
 16218  00263C  CFC4 F00D          	movff	4036,??_Inter_hi	;volatile
 16219  002640  6A0E               	clrf	(??_Inter_hi+1)^0,c
 16220  002642  C00D  F00E         	movff	??_Inter_hi,??_Inter_hi+1
 16221  002646  6A0D               	clrf	??_Inter_hi^0,c
 16222  002648  260D               	addwf	??_Inter_hi^0,f,c
 16223  00264A  0E00               	movlw	0
 16224  00264C  220E               	addwfc	(??_Inter_hi+1)^0,f,c
 16225  00264E  C00D  F028         	movff	??_Inter_hi,_U_meas
 16226  002652  C00E  F029         	movff	??_Inter_hi+1,_U_meas+1
 16227  002656  BE29               	btfsc	(_U_meas+1)^0,7,c
 16228  002658  0EFF               	movlw	-1
 16229  00265A  6E2A               	movwf	(_U_meas+2)^0,c
 16230  00265C  6E2B               	movwf	(_U_meas+3)^0,c
 16231                           
 16232                           ;interrupt.c: 86:             U_meas *= U_meas;
 16233  00265E  C028  F001         	movff	_U_meas,i2___lmul@multiplier
 16234  002662  C029  F002         	movff	_U_meas+1,i2___lmul@multiplier+1
 16235  002666  C02A  F003         	movff	_U_meas+2,i2___lmul@multiplier+2
 16236  00266A  C02B  F004         	movff	_U_meas+3,i2___lmul@multiplier+3
 16237  00266E  C028  F005         	movff	_U_meas,i2___lmul@multiplicand
 16238  002672  C029  F006         	movff	_U_meas+1,i2___lmul@multiplicand+1
 16239  002676  C02A  F007         	movff	_U_meas+2,i2___lmul@multiplicand+2
 16240  00267A  C02B  F008         	movff	_U_meas+3,i2___lmul@multiplicand+3
 16241  00267E  ECA4  F01C         	call	i2___lmul	;wreg free
 16242  002682  C001  F028         	movff	?i2___lmul,_U_meas
 16243  002686  C002  F029         	movff	?i2___lmul+1,_U_meas+1
 16244  00268A  C003  F02A         	movff	?i2___lmul+2,_U_meas+2
 16245  00268E  C004  F02B         	movff	?i2___lmul+3,_U_meas+3
 16246                           
 16247                           ;interrupt.c: 87:             U_summ += U_meas;
 16248  002692  5028               	movf	_U_meas^0,w,c
 16249  002694  0101               	movlb	1	; () banked
 16250  002696  2710               	addwf	_U_summ& (0+255),f,b
 16251  002698  5029               	movf	(_U_meas+1)^0,w,c
 16252  00269A  2311               	addwfc	(_U_summ+1)& (0+255),f,b
 16253  00269C  502A               	movf	(_U_meas+2)^0,w,c
 16254  00269E  2312               	addwfc	(_U_summ+2)& (0+255),f,b
 16255  0026A0  502B               	movf	(_U_meas+3)^0,w,c
 16256  0026A2  2313               	addwfc	(_U_summ+3)& (0+255),f,b
 16257                           
 16258                           ; BSR set to: 1
 16259                           ;interrupt.c: 88:             cnt_adc++;
 16260  0026A4  4B1A               	infsnz	_cnt_adc& (0+255),f,b
 16261  0026A6  2B1B               	incf	(_cnt_adc+1)& (0+255),f,b
 16262  0026A8                     i2l7060:
 16263                           
 16264                           ;interrupt.c: 91:         PIR1bits.ADIF = 0;
 16265  0026A8  9C9E               	bcf	158,6,c	;volatile
 16266  0026AA                     i2l7062:
 16267                           
 16268                           ;interrupt.c: 99:     if (TMR3IE && TMR3IF){
 16269  0026AA  B2A0               	btfsc	4000,1,c	;volatile
 16270  0026AC  A2A1               	btfss	4001,1,c	;volatile
 16271  0026AE  D003               	goto	i2l262
 16272                           
 16273                           ;interrupt.c: 100:         TMR3IF = 0;
 16274  0026B0  92A1               	bcf	4001,1,c	;volatile
 16275                           
 16276                           ;interrupt.c: 101:         LATAbits.LA5 = 0;
 16277  0026B2  9A89               	bcf	137,5,c	;volatile
 16278                           
 16279                           ;interrupt.c: 102:         TMR3ON = 0;
 16280  0026B4  90B1               	bcf	4017,0,c	;volatile
 16281  0026B6                     i2l262:
 16282  0026B6  C010  FFF4         	movff	??_Inter_hi+3,prodh
 16283  0026BA  C00F  FFF3         	movff	??_Inter_hi+2,prodl
 16284  0026BE  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16285  0026C0  0011               	retfie		f
 16286  0026C2                     __end_of_Inter_hi:
 16287                           	callstack 0
 16288                           
 16289 ;; *************** function i2___wmul *****************
 16290 ;; Defined at:
 16291 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 16292 ;; Parameters:    Size  Location     Type
 16293 ;;  multiplier      2    0[COMRAM] unsigned int 
 16294 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16295 ;; Auto vars:     Size  Location     Type
 16296 ;;  product         2    4[COMRAM] unsigned int 
 16297 ;; Return value:  Size  Location     Type
 16298 ;;                  2    0[COMRAM] unsigned int 
 16299 ;; Registers used:
 16300 ;;		wreg, status,2, status,0, prodl, prodh
 16301 ;; Tracked objects:
 16302 ;;		On entry : 0/0
 16303 ;;		On exit  : 0/0
 16304 ;;		Unchanged: 0/0
 16305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16306 ;;      Params:         4       0       0       0       0       0       0
 16307 ;;      Locals:         2       0       0       0       0       0       0
 16308 ;;      Temps:          0       0       0       0       0       0       0
 16309 ;;      Totals:         6       0       0       0       0       0       0
 16310 ;;Total ram usage:        6 bytes
 16311 ;; Hardware stack levels used: 1
 16312 ;; This function calls:
 16313 ;;		Nothing
 16314 ;; This function is called by:
 16315 ;;		_Inter_hi
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           	psect	text68
 16320  003DDA                     __ptext68:
 16321                           	callstack 0
 16322  003DDA                     i2___wmul:
 16323                           	callstack 19
 16324                           
 16325                           ;incstack = 0
 16326  003DDA  5001               	movf	i2___wmul@multiplier^0,w,c
 16327  003DDC  0203               	mulwf	i2___wmul@multiplicand^0,c
 16328  003DDE  CFF3 F005          	movff	prodl,i2___wmul@product
 16329  003DE2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16330  003DE6  5001               	movf	i2___wmul@multiplier^0,w,c
 16331  003DE8  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
 16332  003DEA  50F3               	movf	243,w,c
 16333  003DEC  2606               	addwf	(i2___wmul@product+1)^0,f,c
 16334  003DEE  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
 16335  003DF0  0203               	mulwf	i2___wmul@multiplicand^0,c
 16336  003DF2  50F3               	movf	243,w,c
 16337  003DF4  2606               	addwf	(i2___wmul@product+1)^0,f,c
 16338  003DF6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16339  003DFA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16340  003DFE  0012               	return		;funcret
 16341  003E00                     __end_ofi2___wmul:
 16342                           	callstack 0
 16343                           
 16344 ;; *************** function i2___lmul *****************
 16345 ;; Defined at:
 16346 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 16347 ;; Parameters:    Size  Location     Type
 16348 ;;  multiplier      4    0[COMRAM] unsigned long 
 16349 ;;  multiplicand    4    4[COMRAM] unsigned long 
 16350 ;; Auto vars:     Size  Location     Type
 16351 ;;  product         4    8[COMRAM] unsigned long 
 16352 ;; Return value:  Size  Location     Type
 16353 ;;                  4    0[COMRAM] unsigned long 
 16354 ;; Registers used:
 16355 ;;		wreg, status,2, status,0
 16356 ;; Tracked objects:
 16357 ;;		On entry : 0/0
 16358 ;;		On exit  : 0/0
 16359 ;;		Unchanged: 0/0
 16360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16361 ;;      Params:         8       0       0       0       0       0       0
 16362 ;;      Locals:         4       0       0       0       0       0       0
 16363 ;;      Temps:          0       0       0       0       0       0       0
 16364 ;;      Totals:        12       0       0       0       0       0       0
 16365 ;;Total ram usage:       12 bytes
 16366 ;; Hardware stack levels used: 1
 16367 ;; This function calls:
 16368 ;;		Nothing
 16369 ;; This function is called by:
 16370 ;;		_Inter_hi
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           	psect	text69
 16375  003948                     __ptext69:
 16376                           	callstack 0
 16377  003948                     i2___lmul:
 16378                           	callstack 19
 16379                           
 16380                           ;incstack = 0
 16381  003948  6A09               	clrf	i2___lmul@product^0,c
 16382  00394A  6A0A               	clrf	(i2___lmul@product+1)^0,c
 16383  00394C  6A0B               	clrf	(i2___lmul@product+2)^0,c
 16384  00394E  6A0C               	clrf	(i2___lmul@product+3)^0,c
 16385  003950                     i2l740:
 16386  003950  A001               	btfss	i2___lmul@multiplier^0,0,c
 16387  003952  D008               	goto	i2l6960
 16388  003954  5005               	movf	i2___lmul@multiplicand^0,w,c
 16389  003956  2609               	addwf	i2___lmul@product^0,f,c
 16390  003958  5006               	movf	(i2___lmul@multiplicand+1)^0,w,c
 16391  00395A  220A               	addwfc	(i2___lmul@product+1)^0,f,c
 16392  00395C  5007               	movf	(i2___lmul@multiplicand+2)^0,w,c
 16393  00395E  220B               	addwfc	(i2___lmul@product+2)^0,f,c
 16394  003960  5008               	movf	(i2___lmul@multiplicand+3)^0,w,c
 16395  003962  220C               	addwfc	(i2___lmul@product+3)^0,f,c
 16396  003964                     i2l6960:
 16397  003964  90D8               	bcf	status,0,c
 16398  003966  3605               	rlcf	i2___lmul@multiplicand^0,f,c
 16399  003968  3606               	rlcf	(i2___lmul@multiplicand+1)^0,f,c
 16400  00396A  3607               	rlcf	(i2___lmul@multiplicand+2)^0,f,c
 16401  00396C  3608               	rlcf	(i2___lmul@multiplicand+3)^0,f,c
 16402  00396E  90D8               	bcf	status,0,c
 16403  003970  3204               	rrcf	(i2___lmul@multiplier+3)^0,f,c
 16404  003972  3203               	rrcf	(i2___lmul@multiplier+2)^0,f,c
 16405  003974  3202               	rrcf	(i2___lmul@multiplier+1)^0,f,c
 16406  003976  3201               	rrcf	i2___lmul@multiplier^0,f,c
 16407  003978  5001               	movf	i2___lmul@multiplier^0,w,c
 16408  00397A  1002               	iorwf	(i2___lmul@multiplier+1)^0,w,c
 16409  00397C  1003               	iorwf	(i2___lmul@multiplier+2)^0,w,c
 16410  00397E  1004               	iorwf	(i2___lmul@multiplier+3)^0,w,c
 16411  003980  E1E7               	bnz	i2l740
 16412  003982  C009  F001         	movff	i2___lmul@product,?i2___lmul
 16413  003986  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 16414  00398A  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 16415  00398E  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 16416  003992  0012               	return		;funcret
 16417  003994                     __end_ofi2___lmul:
 16418                           	callstack 0
 16419                           
 16420                           	psect	rparam
 16421  0000                     
 16422                           	psect	temp
 16423  000045                     btemp:
 16424                           	callstack 0
 16425  000045                     	ds	1
 16426  0000                     int$flags	set	btemp
 16427  0000                     wtemp8	set	btemp+1
 16428  0000                     ttemp5	set	btemp+1
 16429  0000                     ttemp6	set	btemp+4
 16430  0000                     ttemp7	set	btemp+8
 16431                           
 16432                           	psect	idloc
 16433                           
 16434                           ;Config register IDLOC0 @ 0x200000
 16435                           ;	unspecified, using default values
 16436  200000                     	org	2097152
 16437  200000  FF                 	db	255
 16438                           
 16439                           ;Config register IDLOC1 @ 0x200001
 16440                           ;	unspecified, using default values
 16441  200001                     	org	2097153
 16442  200001  FF                 	db	255
 16443                           
 16444                           ;Config register IDLOC2 @ 0x200002
 16445                           ;	unspecified, using default values
 16446  200002                     	org	2097154
 16447  200002  FF                 	db	255
 16448                           
 16449                           ;Config register IDLOC3 @ 0x200003
 16450                           ;	unspecified, using default values
 16451  200003                     	org	2097155
 16452  200003  FF                 	db	255
 16453                           
 16454                           ;Config register IDLOC4 @ 0x200004
 16455                           ;	unspecified, using default values
 16456  200004                     	org	2097156
 16457  200004  FF                 	db	255
 16458                           
 16459                           ;Config register IDLOC5 @ 0x200005
 16460                           ;	unspecified, using default values
 16461  200005                     	org	2097157
 16462  200005  FF                 	db	255
 16463                           
 16464                           ;Config register IDLOC6 @ 0x200006
 16465                           ;	unspecified, using default values
 16466  200006                     	org	2097158
 16467  200006  FF                 	db	255
 16468                           
 16469                           ;Config register IDLOC7 @ 0x200007
 16470                           ;	unspecified, using default values
 16471  200007                     	org	2097159
 16472  200007  FF                 	db	255
 16473                           
 16474                           	psect	config
 16475                           
 16476                           ; Padding undefined space
 16477  300000                     	org	3145728
 16478  300000  FF                 	db	255
 16479                           
 16480                           ;Config register CONFIG1H @ 0x300001
 16481                           ;	Oscillator Selection bits
 16482                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
 16483                           ;	Fail-Safe Clock Monitor Enable bit
 16484                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 16485                           ;	Internal/External Oscillator Switchover bit
 16486                           ;	IESO = OFF, Oscillator Switchover mode disabled
 16487  300001                     	org	3145729
 16488  300001  08                 	db	8
 16489                           
 16490                           ;Config register CONFIG2L @ 0x300002
 16491                           ;	Power-up Timer Enable bit
 16492                           ;	PWRT = ON, PWRT enabled
 16493                           ;	Brown-out Reset Enable bits
 16494                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 16495                           ;	Brown Out Reset Voltage bits
 16496                           ;	BORV = 18, VBOR set to 1.8 V nominal
 16497  300002                     	org	3145730
 16498  300002  1E                 	db	30
 16499                           
 16500                           ;Config register CONFIG2H @ 0x300003
 16501                           ;	Watchdog Timer Enable bit
 16502                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
 16503                           ;	Watchdog Timer Postscale Select bits
 16504                           ;	WDTPS = 2048, 1:2048
 16505  300003                     	org	3145731
 16506  300003  17                 	db	23
 16507                           
 16508                           ; Padding undefined space
 16509  300004                     	org	3145732
 16510  300004  FF                 	db	255
 16511                           
 16512                           ;Config register CONFIG3H @ 0x300005
 16513                           ;	CCP2 MUX bit
 16514                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
 16515                           ;	PORTB A/D Enable bit
 16516                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 16517                           ;	Low-Power Timer1 Oscillator Enable bit
 16518                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 16519                           ;	HFINTOSC Fast Start-up
 16520                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
 16521                           ;	MCLR Pin Enable bit
 16522                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 16523  300005                     	org	3145733
 16524  300005  80                 	db	128
 16525                           
 16526                           ;Config register CONFIG4L @ 0x300006
 16527                           ;	Stack Full/Underflow Reset Enable bit
 16528                           ;	STVREN = ON, Stack full/underflow will cause Reset
 16529                           ;	Single-Supply ICSP Enable bit
 16530                           ;	LVP = OFF, Single-Supply ICSP disabled
 16531                           ;	Extended Instruction Set Enable bit
 16532                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 16533                           ;	Background Debugger Enable bit
 16534                           ;	DEBUG = 0x1, unprogrammed default
 16535  300006                     	org	3145734
 16536  300006  81                 	db	129
 16537                           
 16538                           ; Padding undefined space
 16539  300007                     	org	3145735
 16540  300007  FF                 	db	255
 16541                           
 16542                           ;Config register CONFIG5L @ 0x300008
 16543                           ;	Code Protection Block 0
 16544                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 16545                           ;	Code Protection Block 1
 16546                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 16547                           ;	Code Protection Block 2
 16548                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 16549                           ;	Code Protection Block 3
 16550                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 16551  300008                     	org	3145736
 16552  300008  0F                 	db	15
 16553                           
 16554                           ;Config register CONFIG5H @ 0x300009
 16555                           ;	Boot Block Code Protection bit
 16556                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 16557                           ;	Data EEPROM Code Protection bit
 16558                           ;	CPD = OFF, Data EEPROM not code-protected
 16559  300009                     	org	3145737
 16560  300009  C0                 	db	192
 16561                           
 16562                           ;Config register CONFIG6L @ 0x30000A
 16563                           ;	Write Protection Block 0
 16564                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 16565                           ;	Write Protection Block 1
 16566                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 16567                           ;	Write Protection Block 2
 16568                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 16569                           ;	Write Protection Block 3
 16570                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 16571  30000A                     	org	3145738
 16572  30000A  0F                 	db	15
 16573                           
 16574                           ;Config register CONFIG6H @ 0x30000B
 16575                           ;	Configuration Register Write Protection bit
 16576                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 16577                           ;	Boot Block Write Protection bit
 16578                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 16579                           ;	Data EEPROM Write Protection bit
 16580                           ;	WRTD = OFF, Data EEPROM not write-protected
 16581  30000B                     	org	3145739
 16582  30000B  E0                 	db	224
 16583                           
 16584                           ;Config register CONFIG7L @ 0x30000C
 16585                           ;	Table Read Protection Block 0
 16586                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 16587                           ;	Table Read Protection Block 1
 16588                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 16589                           ;	Table Read Protection Block 2
 16590                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 16591                           ;	Table Read Protection Block 3
 16592                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 16593  30000C                     	org	3145740
 16594  30000C  0F                 	db	15
 16595                           
 16596                           ;Config register CONFIG7H @ 0x30000D
 16597                           ;	Boot Block Table Read Protection bit
 16598                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 16599  30000D                     	org	3145741
 16600  30000D  40                 	db	64
 16601                           tosu	equ	0xFFF
 16602                           tosh	equ	0xFFE
 16603                           tosl	equ	0xFFD
 16604                           stkptr	equ	0xFFC
 16605                           pclatu	equ	0xFFB
 16606                           pclath	equ	0xFFA
 16607                           pcl	equ	0xFF9
 16608                           tblptru	equ	0xFF8
 16609                           tblptrh	equ	0xFF7
 16610                           tblptrl	equ	0xFF6
 16611                           tablat	equ	0xFF5
 16612                           prodh	equ	0xFF4
 16613                           prodl	equ	0xFF3
 16614                           indf0	equ	0xFEF
 16615                           postinc0	equ	0xFEE
 16616                           postdec0	equ	0xFED
 16617                           preinc0	equ	0xFEC
 16618                           plusw0	equ	0xFEB
 16619                           fsr0h	equ	0xFEA
 16620                           fsr0l	equ	0xFE9
 16621                           wreg	equ	0xFE8
 16622                           indf1	equ	0xFE7
 16623                           postinc1	equ	0xFE6
 16624                           postdec1	equ	0xFE5
 16625                           preinc1	equ	0xFE4
 16626                           plusw1	equ	0xFE3
 16627                           fsr1h	equ	0xFE2
 16628                           fsr1l	equ	0xFE1
 16629                           bsr	equ	0xFE0
 16630                           indf2	equ	0xFDF
 16631                           postinc2	equ	0xFDE
 16632                           postdec2	equ	0xFDD
 16633                           preinc2	equ	0xFDC
 16634                           plusw2	equ	0xFDB
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8

Data Sizes:
    Strings     421
    Constant    173
    Data        8
    BSS         194
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      68
    BANK0           160    159     159
    BANK1           256     83     253
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    nanf@s	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_49(CODE[1]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_46(CODE[4]), STR_41(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_46(CODE[4]), STR_41(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 22
		 -> vfpfcnvrt@ct(BANK0[3]), STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), 
		 -> STR_27(CODE[10]), STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), 
		 -> STR_21(CODE[10]), STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), 
		 -> STR_4(CODE[6]), STR_2(CODE[15]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 22
		 -> vfpfcnvrt@ct(BANK0[3]), STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), 
		 -> STR_27(CODE[10]), STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), 
		 -> STR_21(CODE[10]), STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), 
		 -> STR_4(CODE[6]), STR_2(CODE[15]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK1[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK1[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> stoa@nuls(BANK0[7]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), 
		 -> U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S2264$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2264$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    ds18b20_crc8@data_in	PTR unsigned char  size(2) Largest target is 9
		 -> scratch(BANK1[9]), 

    readTemp_Single@buf	PTR unsigned short  size(2) Largest target is 2
		 -> temperature(BANK1[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(2) Largest target is 1
		 -> time_flag(BANK1[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(2) Largest target is 2
		 -> timer_val(BANK1[2]), 

    readTemp_Single@minus	PTR unsigned char  size(2) Largest target is 1
		 -> minus(BANK1[1]), 

    main$1544	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_20(CODE[4]), STR_19(CODE[3]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_7(CODE[8]), symbol_6(CODE[8]), symbol_5(CODE[8]), symbol_4(CODE[8]), 
		 -> symbol_3(CODE[8]), symbol_2(CODE[8]), symbol_1(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_23(CODE[11]), STR_22(CODE[11]), STR_16(CODE[19]), STR_15(CODE[19]), 
		 -> STR_13(CODE[21]), STR_12(CODE[15]), STR_11(CODE[20]), STR_10(CODE[19]), 
		 -> STR_9(CODE[22]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), TxtBuf(BANK1[21]), STR_1(CODE[21]), 


Critical Paths under _main in COMRAM

    _main->_lcd_gotoxy
    _sqrtf->___xxtofl
    _sqrtf->_nanf
    _show_lcd_main->_lcd_gotoxy
    _vfpfcnvrt->_ctoa
    _vfpfcnvrt->_stoa
    _utoa->___lodiv
    _stoa->_fputc
    _tolower->_isupper
    _pad->_fputs
    _fputs->_fputc
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    ___flmul->___xxtofl
    ___fldiv->___xxtofl
    _ctoa->_fputc
    _fputc->_putch
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _calc_power->___lldiv
    _calc_power->___lmul
    _calc_power->___lwmod
    ___wmul->___lwmod
    ___lwmod->___lwdiv
    _readTemp_Single->_ds18b20_crc8
    _init_cpu->_cgrom_char
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble

Critical Paths under _Inter_lo in COMRAM

    None.

Critical Paths under _Inter_hi in COMRAM

    _Inter_hi->i2___lmul

Critical Paths under _main in BANK0

    _main->_show_lcd_main
    _sqrtf->___fladd
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _utoa->_pad
    _stoa->_fputc
    _efgtoa->___fltol
    _pad->_fputs
    _fputs->_fputc
    _floorf->___fldiv
    ___fltol->_sqrtf
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___flge->___flmul
    ___fldiv->___xxtofl
    _ctoa->_fputc
    _atoi->___wmul
    _calc_power->___wmul
    ___wmul->___lwmod

Critical Paths under _Inter_lo in BANK0

    None.

Critical Paths under _Inter_hi in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _show_lcd_main->_sprintf
    _vfpfcnvrt->_efgtoa

Critical Paths under _Inter_lo in BANK1

    None.

Critical Paths under _Inter_hi in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Inter_lo in BANK2

    None.

Critical Paths under _Inter_hi in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Inter_lo in BANK3

    None.

Critical Paths under _Inter_hi in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Inter_lo in BANK4

    None.

Critical Paths under _Inter_hi in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Inter_lo in BANK5

    None.

Critical Paths under _Inter_hi in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  211263
                                            155 BANK0      4     4      0
                                             77 BANK1      6     6      0
                            _EncPoll
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                            ___lldiv
                             ___lmul
                            ___lwdiv
                           ___xxtofl
                         _calc_power
                           _clearLCD
                           _init_cpu
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                    _readTemp_Single
                           _read_eep
                      _show_lcd_main
                            _sprintf
                              _sqrtf
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     424
                                             26 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _sqrtf                                               49    45      4   10679
                                             47 BANK0     45    41      4
                            ___fladd
                             ___flge
                            ___flmul
                           ___xxtofl (ARG)
                               _nanf
 ---------------------------------------------------------------------------------
 (2) _nanf                                                 8     4      4      99
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _show_lcd_main                                        2     2      0   89674
                                            153 BANK0      2     2      0
                            ___lwdiv
                            ___lwmod
                         _calc_power
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14   61342
                                             50 BANK1     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   58654
                                            145 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    39      5   58037
                                            114 BANK0     31    26      5
                               _atoi
                               _ctoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    7951
                                             19 BANK0     32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                             26 COMRAM     1     1      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                             26 COMRAM     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (4) _strncmp                                             11     5      6     865
                                             26 COMRAM     7     1      6
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    3310
                                             31 COMRAM     4     0      4
                                              5 BANK0     18    18      0
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              62    55      7   33833
                                            102 BANK0     12     5      7
                                              0 BANK1     50    50      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _tolower                                              6     4      2    1105
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            _isupper
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     551
                                             26 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _strcpy                                              10     6      4    1037
                                             26 COMRAM     6     2      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    6539
                                              8 BANK0     11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     310
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    2648
                                             31 COMRAM     4     0      4
                                              5 BANK0      3     3      0
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     669
                                             31 BANK0     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       14    10      4     375
                                             26 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     697
                                             92 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _sqrtf (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    4336
                                             47 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             16     8      8    3771
                                             31 BANK0     16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     155
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4105
                                              6 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1346
                                             31 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     770
                                             26 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2872
                                              6 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     613
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     5      3    2622
                                             31 COMRAM     4     1      3
                                              5 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    2148
                                             27 COMRAM     4     0      4
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    2654
                                             10 BANK0     10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                             26 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     371
                                             26 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1328
                                             30 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdPrint                                             6     4      2    8263
                                              0 BANK0      6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     4      1    4468
                                             30 COMRAM     5     4      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _calc_power                                          21    15      6    9086
                                             10 BANK0     21    15      6
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1482
                                              4 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    2572
                                             33 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    2581
                                             26 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1106
                                             26 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     601
                                             26 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     402
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readTemp_Single                                     16     8      8    1901
                                              0 BANK0     15     7      8
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0     136
                                             26 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         8     5      3     554
                                             26 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      46
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_cpu                                             2     2      0    5780
                                              0 BANK0      2     2      0
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     198
                                             27 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             2     2      0      34
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2718
                                             31 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             1     1      0    1297
                                             30 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    2830
                                             30 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1297
                                             28 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     124
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     746
                                             26 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _EncPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _Inter_lo                                            4     4      0       0
                                             22 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _Inter_hi                                           10    10      0     618
                                             12 COMRAM    10    10      0
                           i2___lmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     315
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (12) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EncPoll
   ___fladd
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___fldiv
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
     _sqrtf (ARG)
       ___fladd
       ___flge
         ___flmul (ARG)
       ___flmul
       ___xxtofl (ARG)
       _nanf (ARG)
   ___lldiv
   ___lmul
   ___lwdiv
   ___xxtofl
   _calc_power
     ___lldiv
     ___lmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _init_cpu
     _cgrom_char
       _lcdWrite
     _initLCD
       _clearLCD
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _readTemp_Single
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _read_eep
   _show_lcd_main
     ___lwdiv
     ___lwmod
     _calc_power
     _lcdPrint
     _lcd_gotoxy
     _lcd_putc
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _fputc
               _putch
           _efgtoa
             ___awdiv
             ___awmod
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
               ___fladd
               ___flmul (ARG)
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _isupper
             _pad
               _fputc
               _fputs
                 _fputc
               _strlen
             _strcpy
             _tolower
               _isupper
           _fputc
           _isdigit
           _isupper
           _stoa
             _fputc
             _strlen
           _strncmp
           _tolower
           _utoa
             ___lodiv
             ___lomod
             _pad
   _sprintf
   _sqrtf
   _write_eep

 _Inter_lo (ROOT)

 _Inter_hi (ROOT)
   i2___lmul
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      36        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     53      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     23      44       1       72.3%
BITBIGSFRllllll     1C      0       0      34        0.0%
BITBIGSFRhhlhhh     1A      0       0      17        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhhlhhl      7      0       0      23        0.0%
BITBIGSFRllllhh      6      0       0      31        0.0%
BITBIGSFRlllhhl      6      0       0      30        0.0%
BITBIGSFRhhlhlh      6      0       0      24        0.0%
BITBIGSFRllhl        6      0       0      29        0.0%
BITBIGSFRhhlhhl      5      0       0      22        0.0%
BITBIGSFRlhh         3      0       0      27        0.0%
BITBIGSFRhhlhhl      2      0       0      19        0.0%
BITBIGSFRhhlhhl      2      0       0      20        0.0%
BITBIGSFRlllllh      1      0       0      32        0.0%
BITBIGSFRlllllh      1      0       0      33        0.0%
BITBIGSFRllhh        1      0       0      28        0.0%
BITBIGSFRhhlhhl      1      0       0      18        0.0%
BITBIGSFRhhlhhl      1      0       0      21        0.0%
BITBIGSFRhhlhll      1      0       0      25        0.0%
BITBIGSFRhhll        1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E0      35        0.0%
DATA                 0      0     1E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 20 20:27:04 2022

            ___fldiv@aexp 007E              ___fldiv@bexp 007D              ___fldiv@sign 0076  
                      PL2 142C                        PL4 1440                        PL6 1464  
                      PL8 1496              ___awdiv@sign 0020                        _pp 0044  
                      _ps 0034                        bsr 000FE0       ___wmul@multiplicand 0066  
            lcdWrite@byte 001E                       PL10 17F0                       PL20 0F7C  
                     PL12 14A4                       PL30 0942                       PL22 0910  
                     PL14 1802                       PL40 3030                       PL32 181A  
                     PL24 202C                       PL16 2E94                       PL50 1028  
                     PL42 2EA0                       PL34 14AC                       PL26 0FAE  
                     PL18 0F5E                       PL60 105E                       PL52 1038  
                     PL44 0FD6                       PL36 0FC0                       PL28 180E  
                     PL70 14C4                       PL62 106C                       PL54 1830  
                     PL46 0FE4                       PL38 1826                       PL80 2060  
                     PL72 14D4                       PL64 223C                       PL56 104C  
                     PL48 1006                       PL90 0976                       PL82 2536  
                     PL74 2048                       PL66 2038                       PL58 1BE0  
                     PL92 1092                       PL84 183A                       PL76 107A  
                     PL68 14B4                       PL94 10A4                       PL86 2256  
                     PL78 323A                       PL96 30E4                       PL88 096C  
                     PL98 27EE              lcdWrite@type 001D                       l116 3CAE  
                     l125 3A28                       l522 026C                       l515 01C4  
                     l533 0418                       l640 3B2C                       l713 3D78  
                     l561 065E                       l529 037E                       l642 3B58  
                     l562 0684                       l571 070E                       l740 381A  
                     l556 05AC                       l565 06A6                       l558 05FC  
                     l559 0612                       l576 07B0                       l690 388A  
                     l579 07D2                       l758 368E                       l994 33BC  
                     l996 33E8                       _PR2 000FCB                       _pad 352C  
                     _err 0036              ___awmod@sign 0020                       wreg 000FE8  
         lcdNibble@nibble 001C              ___flmul@aexp 0073             write_eep@data 001B  
            ___flmul@bexp 0074              ___flmul@sign 0072              ___flmul@temp 007D  
            ___flmul@prod 0079               lcd_gotoxy@x 0022               lcd_gotoxy@y 001F  
                    PL100 359E                      PL110 184E                      PL102 10B6  
                    PL200 2090                      PL120 1E2A                      PL112 10EC  
                    PL104 10C8                      PL210 2EAE                      PL202 337C  
                    PL130 09A0                      PL122 2B74                      PL114 10FE  
                    PL106 0988                      PL212 1882                      PL204 1136  
                    PL140 303E                      PL132 09A6                      PL124 1866  
                    PL116 1860                      PL108 10DA                      PL214 1888  
                    PL206 14FE                      PL150 2078                      PL142 14E4  
                    PL134 351C                      PL126 3248                      PL118 1110  
                    PL208 280C                      PL160 09BE                      PL152 2A6C  
                    PL144 2B86                      PL136 3498                      PL128 099A  
                    PL170 375A                      PL162 2D9A                      PL154 1E3C  
                    PL146 09B0                      PL138 206E                      PL180 2A76  
                    PL172 1E52                      PL164 2548                      PL156 1122  
                    PL148 1BF2                      PL190 1C0A                      PL182 14F4  
                    PL174 09CA                      PL166 2554                      PL158 2800  
                    PL192 1E5C                      PL184 112C                      PL176 2DA6  
                    PL168 1E46                      PL194 2086                      PL186 1C00  
                    PL178 3408                      PL196 1E66                      PL188 30F6  
                    PL198 1878               _sound_delay 003A              ___fltol@exp1 00C5  
                    l1222 39D4                      l1232 3ADA                      l1305 20BA  
                    l1315 2194                      l1260 1CF6                      l1333 2226  
                    l1309 20E6                      l1261 1CE8                      l1253 1C66  
                    l1326 21E0                      l1327 21DC                      l1343 1EB0  
                    l1503 0BA4                      l1248 1C34                      l1169 2F60  
                    l1362 2002                      l1354 1FB8                      l1450 3548  
                    l1355 1FB4                      l1339 1E90                      l1531 0D98  
                    l1179 3188                      l1292 1E04                      l1276 1D92  
                    l1285 1DDA                      l1286 1DD6                      l1711 3C36  
                    l1448 3544                      l1393 2D30                      l1529 0D94  
                    l1386 2CE4                      l1466 34D2                      l1802 3BFE  
                    l1567 2AE2                      l1761 1A2A                      l1586 2278  
                    l1588 2280                      l1764 1ABC                      l1685 3026  
                    l1757 19F8                      l1766 1B4C                      l1697 24CA  
                    ?_pad 0068                      l8012 2200                      l8024 2232  
                    l9000 11DC                      l8210 36B2                      l8026 2234  
                    l8018 2212                      l8130 1FD2                      l8114 1F88  
                    l8220 36D2                      l8108 1F6A                      l8060 1EAC  
                    l8300 32A2                      l9012 120C                      l8230 36F2  
                    l8214 36BE                      l8134 1FEA                      l8062 1EB2  
                    l8046 1E8C                      l8310 32C6                      l9102 1412  
                    l9030 1264                      l9014 121C                      _ADIE 007CEE  
                    l6624 3B2E                      l8048 1E92                      l8304 32B2  
                    _ADIF 007CF6                      l6634 3B46                      l9130 3A34  
                    l8234 36FE                      l8226 36E8                      l8218 36CA  
                    l8250 3756                      l8242 3724                      l8146 2016  
                    l8066 1EC4                      l8402 390C                      l9050 12D6  
                    l9018 121E                      l9220 39AC                      l9300 2DE6  
                    l8180 35EA                      l8172 35D2                      l8316 32DE  
                    l8308 32BA                      l8420 2458                      l9060 130C  
                    l9108 141A                      l6476 3E02                      l9230 39CA  
                    l9126 3A2C                      l9134 3A3A                      l9310 2E7A  
                    l8190 3608                      l8166 35C2                      l8246 373A  
                    l8270 3404                      l8430 24EC                      l8510 0A3C  
                    l8326 2EDC                      l9046 12AC                      l9038 128E  
                    l6744 3D04                      l9400 38A4                      l9208 3680  
                    l9240 3ABA                      l9128 3A30                      l9136 3A58  
                    l9304 2E16                      l9312 2E80                      l8264 33D2  
                    l8328 2EF0                      l9162 3AE8                      l9218 39A4  
                    l8178 35E2                      l8194 3612                      l8258 33A2  
                    l7722 1C48                      l7714 1C30                      l8434 2504  
                    l8370 3566                      l8362 3536                      l8602 0BFC  
                    l8530 0A86                      l8338 2F4A                      l8354 3172  
                    l8346 3118                      l9074 135A                      l9066 131E  
                    l9308 2E52                      l8604 0C02                      l8532 0A90  
                    l8348 312C                      l9092 13F4                      l9084 1394  
                    l9246 3AD0                      l9238 3AB2                      l8470 34BE  
                    l8198 361E                      l8278 3E32                      l7806 1D22  
                    l7734 1C62                      l8286 3268                      l8390 30B6  
                    l8438 2524                      l8374 3582                      l8366 354E  
                    l8622 0C28                      l8614 0C1E                      l8518 0A50  
                    l9254 37D0                      l9328 3C82                      l7832 1D9C  
                    l7808 1D26                      l7816 1D2A                      l7744 1C7C  
                    l8704 0E04                      l8712 0E16                      l8720 0E36  
                    l8632 0C5C                      l8640 0C8A                      l8528 0A78  
                    l8536 0AB8                      l9256 37F8                      l9370 3A8A  
                    l9186 3830                      l8482 34F0                      l8474 34C8  
                    l7842 1DB2                      l7826 1D82                      l8386 30AE  
                    l8626 0C36                      l8562 0B0E                      l8546 0AE0  
                    l8554 0AF0                      l9098 1408                      l9380 3866  
                    l9196 3642                      l9292 2DB4                      l7684 3EA8  
                    l8468 34B2                      l8396 30DC                      l8732 0E60  
                    l8572 0B50                      l8820 2B0E                      l8804 2AA6  
                    l9700 1546                      l9366 3A6A                      l9526 2956  
                    l9606 2A4C                      l9198 364E                      l7694 3426  
                    l8486 350C                      l8478 34D8                      l7942 20E2  
                    l7926 20B6                      l7774 1CB8                      l8750 0E94  
                    l8654 0D00                      l8566 0B2C                      l8830 2B5A  
                    l8814 2AF8                      l8910 31DE                      l9392 3898  
                    l9384 387A                      l9296 2DD0                      l7960 2126  
                    l7864 1DF4                      l7848 1DBC                      l7784 1CF0  
                    l8760 0EDA                      l8672 0DA6                      l8648 0CCC  
                    l8584 0B90                      l8568 0B42                      l9704 155A  
                    l9632 1948                      l9570 29C6                      l9546 2980  
                    l9298 2DDA                      l7970 215E                      l7874 1E0C  
                    l7786 1CF4                      l8770 0EFE                      l8666 0D72  
                    l8594 0BB4                      l8498 0A1A                      l8834 2B66  
                    l8826 2B42                      l8818 2B04                      l9730 1694  
                    l9642 19B8                      l9626 1916                      l9812 2D88  
                    l7956 2118                      l7876 1E0E                      l7892 3C5C  
                    l8748 0E8C                      l8684 0DD6                      l8588 0BAE  
                    l8908 31CE                      l9732 16FE                      l8926 3CB0  
                    l9558 2994                      l7990 21A8                      l7798 1D06  
                    l9646 19CC                      l9638 196A                      l7984 2192  
                    l7888 3C44                      l7896 3B68                      l8784 0F2C  
                    l8696 0DF4                      l8848 22B4                      l8960 1162  
                    l9752 1788                      l9736 172E                      l9728 163A  
                    l9664 1AC8                      l9578 29EC                      l8882 2FAA  
                    l8874 2F8C                      l7978 216E                      l7898 3B6C  
                    l8858 2384                      l9754 179E                      l9658 1A52  
                    l9930 03FC                      l9906 0286                      l8884 2FB0  
                    l7996 21B0                      l8980 117A                      l8972 116E  
                    l8964 1166                      l8956 115C                      l9932 0404  
                    l9782 2D08                      l8894 2FF4                      l8886 2FB6  
                    l8878 2F90                      l8958 115E                      l8982 119C  
                    l9758 17AC                      l9678 1B30                      l9942 0456  
                    l9862 01D2                      STR_1 7EF0                      l9784 2D0E  
                    l8888 2FCC                      l8976 1172                      l8968 116A  
                    l9960 0496                      l9952 0470                      l9880 0246  
                    l9872 0232                      STR_2 7F62                      STR_3 7FC9  
                    l9794 2D3E                      l9786 2D12                      l9778 2CF4  
                    l8994 11CA                      l9938 041A                      STR_4 7FDB  
                    STR_5 7EC6                      l9796 2D4A                      l9788 2D22  
                    l8996 11DA                      l9956 0484                      l9948 0464  
                    l9892 0264                      l9876 023C                      STR_6 7EDB  
                    STR_7 7EB1                      STR_8 7E9C                      STR_9 7E5A  
                    l9896 027A                      l9898 027E                      l9996 0506  
        ow_reset@presence 001C                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B                      u9000 220C                      u9010 221E  
                    u9100 1EBA                      u8330 3420                      u9300 36D6  
                    u9140 1FAE                      u8500 1CFC                      u8350 345A  
                    u9240 35EE                      u8450 1CD6                      u9180 1FDE  
                    u9420 325E                      u9500 2EF4                      _RBPU 007F8F  
                    u9350 3752                      u9190 1FF6                      u8710 1DFC  
                    u8630 1DC0                      u9430 3286                      u8650 1DD0  
                    u9530 3130                      u9435 327C                      u9700 2446  
                    u9470 32CA                      u9800 3D5A                      u8760 3B86  
                    u9635 30C0                      u9820 3C34                      u9740 24B2  
                    u9660 3940                      u8780 3D2C                      u9725 246C  
                    u9830 32FC                      u9590 307E                      u9726 2472  
                    u8790 3D2E                      u9727 2480                      u8767 3B82  
                    u8960 21D6                      u9760 24F2                      u9745 24B0  
                    u9850 3312                      u9690 2428                      u9595 3074  
                    u9667 393C                      u9908 3340                      u9765 24F0  
                    u9870 332A                      u9790 3D58                      u9695 241E  
                    u9848 32FE                      u9890 333E                      u9868 3314  
                    u9980 0A30                      u9888 332C                      _TXIF 007CF4  
                    _WPUB 000F7C                _AlarmTempT 0126             calc_power@p_w 007D  
           calc_power@res 006A                      _dbuf 012D                      _coef 0108  
                    _getU 003F             calc_power@pwr 007C                      _atoi 2F82  
                    _ctoa 34A2                      _main 00C8                      _nanf 3E44  
                    _prec 002E                      _nout 0114                      pad@i 006F  
                    pad@p 006C                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf1 000FE7                      indf2 000FDF                      fsr1l 000FE1  
                    pad@w 0071                      fsr2l 000FD9                      _stoa 2A80  
                    btemp 0045                      _zero 0040                      _utoa 2260  
           write_byte@val 001E             ___fpclassifyf 304E                      prodh 000FF4  
                    prodl 000FF3                      start 00C4           ___fldiv@new_exp 0077  
         __end_of_EncPoll 3D08              ___param_bank 000000                     ??_pad 006E  
            _sound_enable 0129                     l10000 051C                     l10100 06C4  
                   l10020 0576                     l10012 0552                     l10004 0526  
                   l10112 0706                     l10016 0568                     l10008 053C  
                   l10106 06E6                     l10026 058C                     l10204 08AA  
                   l10132 0762                     l10116 0712                     l10060 0626  
                   l10028 05A4                     l10222 08E0                     l10170 07EA  
                   l10162 07D8                     l10138 077E                     l10058 061C  
                   l10180 0828                     l10092 069E                     l10158 07CA  
                   l10086 0668                     l10096 06AC                     l10194 0886  
           ___fltol@sign1 00C4                     ?_atoi 006A                     ?_ctoa 0020  
         __end_of___fladd 1E2A                     ?_main 0001                     ?_nanf 001B  
         __end_of___fldiv 223C           __end_of___awdiv 3628           __end_of___flneg 3E44  
                   _EEADR 000FA9                     STR_10 7F2D                     STR_11 7F19  
                   STR_20 7FF5                     STR_12 7F53                     STR_13 7E9C  
                   STR_21 7FB5                     STR_30 7FBF                     STR_22 7F8A  
                   STR_14 7F05                     STR_15 7F2D                     STR_31 7FE1  
                   STR_23 7F95                     STR_32 7FE9                     STR_24 7FAB  
                   STR_16 7F40                     STR_41 7FF9                     STR_25 7FD2  
                   STR_17 7F71                     STR_18 7FA0                     STR_26 7E70  
                   STR_19 7FFC                     STR_35 7FE5                     STR_27 7FBF  
                   STR_44 7FF1                     STR_36 7FED                     STR_28 7F7F  
         __end_of___awmod 3708                     STR_29 7E86                     STR_46 7FF1  
                   STR_39 7FF9                     STR_49 7E6F           __end_of___flmul 202C  
         __end_of___flsub 3BD2           __end_of___fltol 32F0                     ?_stoa 0020  
         __end_of___lldiv 36A0                     ?_utoa 0073                     u11000 3652  
                   u10120 0BC8                     u10060 0B68                     u11030 39B0  
                   u11110 2E10                     u10230 0CF8                     u11120 2E2E  
                   u10160 0C1A                     u11130 2E60                     u10410 0EEC  
                   u10090 0B9C                     u11060 3ABE                     u11140 2E8E  
                   u10500 2B28                     u11117 2E0E                     u10430 0F24  
                   u10350 0E4A                     u11310 1926                     u12030 07C4  
                   u11127 2E2C                     u10600 23BA                     u11137 2E5E  
                   u10441 2A8A                     u12105 0868           ??_show_lcd_main 0024  
                   u11090 2DF4                     u10530 2B6A                     u11147 2E8C  
                   u10507 2B24           __end_of___lodiv 2F82                     u10700 3218  
         ___awdiv@divisor 001D                     u10630 3006                     u10710 3228  
                   u10550 2270                     u12207 3B14                     u12217 3D6C  
                   u11097 2DF2                     u10705 3214                     u11345 197E  
                   u12137 00D8                     u11194 3A82                     u10490 2B08  
                   u11346 1984                     u12090 0866                     u12307 2BDE  
                   u12227 3D7A                     u11195 3A7E                     u10707 3210  
                   u11435 1B90                     u11347 1992                     u12147 015E  
                   u10660 31EE                     u10580 23AA                     u10900 134C  
                   u10820 122C                     u12317 2BF6                     u12237 38B8  
                   u12157 2DC2                     u10717 3224                     u10590 23B6  
                   u12407 334E                     u12327 2C0E                     u12247 38CA  
                   u12167 3A90                     u11295 2A10                     u12417 3366  
                   u12337 2C26                     u12257 38EC                     u12177 3E66  
                   u12347 2C42                     u12267 2BA0                     u12187 3E72  
                   u10667 31EA                     u11580 2D54                     u11820 047E  
                   u12357 2C5E                     u12277 2BAE                     u12197 28BE  
                   u10790 11EA                     u11910 06BC                     u12367 2C74  
                   u12287 2BBC                     u10944 3AF8                     u11920 06D2  
                   u12377 2C90                     u12297 2BCA                     u10945 3AF4  
                   u11930 06E0                     u11850 0516                     u11770 040E  
                   u12387 3E8A                     u11940 06F2                     u11780 0426  
                   u12397 3CB2                     u11950 0700           __end_of___lomod 31AA  
                   u11890 0698                     u11980 074A                     u11798 042A  
                   u11995 074C           __end_of___lwdiv 39DE                     i1l241 0068  
                   i1l245 00AE                     i1l247 00B4           __end_of___lwmod 3AE4  
                   i2l252 262E                     i2l262 26B6                     i2l255 25EA  
                   i2l256 25F4                     i2l258 262C                     i2l740 3950  
         ___awdiv@counter 001F              vfpfcnvrt@fmt 00D4              vfpfcnvrt@llu 00DB  
                   _TMR0L 000FD6                     _SPBRG 000FAF                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTC 000F82                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94                     _TXREG 000FAD  
     ___lmul@multiplicand 001F           __end_of_initLCD 2CA4            calc_power@u_rl 006E  
                   _flags 0030                     _fract 7DFD                     _r_dec 011E  
                   _fputc 3414                     _fputs 3C3E           __end_of_isdigit 3D60  
                   _minus 01A1                     _t_res 0104                     atoi@n 0072  
                   pad@fp 0068                     atoi@s 006A                     _power 0121  
                   _width 002C                     ctoa@c 0022                     _putch 3EA6  
                   ctoa@l 0065                     ctoa@w 0067                     _sqrtf 188E  
                   nanf@s 001B                     nanf@u 001F           __end_of_isspace 3C3E  
          write_byte@temp 001F            __pbitbssCOMRAM 0218           __end_of_isupper 3D34  
            main@powerOFF 011C                     tablat 000FF5          __end_ofi2___lmul 3994  
        __end_ofi2___wmul 3E00                     plusw1 000FE3                     plusw2 000FDB  
                   stoa@i 006D                     stoa@l 0075                     stoa@p 0073  
                   stoa@s 0022                     stoa@w 006F                     ttemp5 0046  
                   ttemp6 0049                     ttemp7 004D                     utoa@d 0075  
                   utoa@i 0091                     utoa@n 0089                     utoa@p 0085  
                   utoa@w 0087                     status 000FD8                     wtemp8 0046  
         __end_of_sprintf 3A24            ?___fpclassifyf 001B           __end_of_tolower 3C08  
         __end_of_strncmp 323A          ___lodiv@dividend 0060              __end_ofPL100 35B0  
            __end_ofPL110 1860              __end_ofPL102 10C8              __end_ofPL200 209A  
            __end_ofPL120 1E3C              __end_ofPL112 10FE              __end_ofPL104 10DA  
            __end_ofPL210 2EB4              __end_ofPL202 3386              __end_ofPL130 09A6  
            __end_ofPL122 2B86              __end_ofPL114 1110              __end_ofPL106 099A  
            __end_ofPL212 1888              __end_ofPL204 1140              __end_ofPL140 304E  
            __end_ofPL132 09B0              __end_ofPL124 1878              __end_ofPL116 1866  
            __end_ofPL108 10EC              __end_ofPL214 188E              __end_ofPL206 1506  
            __end_ofPL150 2086              __end_ofPL142 14F4              __end_ofPL134 352C  
            __end_ofPL126 3254              __end_ofPL118 1122              __end_ofPL208 2814  
            __end_ofPL160 09CA              __end_ofPL152 2A76              __end_ofPL144 2B96  
            __end_ofPL136 34A2              __end_ofPL128 09A0              __end_ofPL170 3766  
            __end_ofPL162 2DA6              __end_ofPL154 1E46              __end_ofPL146 09BE  
            __end_ofPL138 2078              __end_ofPL180 2A80              __end_ofPL172 1E5C  
            __end_ofPL164 2554              __end_ofPL156 112C              __end_ofPL148 1C00  
            __end_ofPL190 1C14              __end_ofPL182 14FE              __end_ofPL174 09D6  
            __end_ofPL166 2560              __end_ofPL158 280C              __end_ofPL192 1E66  
            __end_ofPL184 1136              __end_ofPL176 2DB2              __end_ofPL168 1E52  
            __end_ofPL194 2090              __end_ofPL186 1C0A              __end_ofPL178 3414  
            __end_ofPL196 1E70              __end_ofPL188 3100              __end_ofPL198 1882  
         write_bit@bitval 001B           __initialization 3766           ds18b20_crc8@crc 0022  
            __end_of_atoi 3030              __end_of_ctoa 351C              __end_of_main 0910  
            __end_of_nanf 3E60              __end_of_stoa 2B74              __end_of_utoa 23E4  
         _readTemp_Single 294E       ds18b20_crc8@data_in 001B          __end_of_Inter_hi 26C2  
        __end_of_Inter_lo 00C4                    ??_atoi 006C                    ??_ctoa 0023  
                  ??_main 00FB                    ??_nanf 001F          main@alarm_enable 0218  
                  ??_stoa 0065                    ??_utoa 007D             __activetblptr 000002  
           ?_init_ds18b20 0001          ___lodiv@quotient 001B                    _ADCON1 000FC1  
                  ?_fputc 001C                    ?_fputs 0020                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _EEDATA 000FA8                    _EECON2 000FA7  
        ___awdiv@dividend 001B                    ?_putch 0001                    ?_sqrtf 008F  
                  _INT0IE 007F94                    _INT0IF 007F91                    i1l7006 0096  
                  i2l7030 25D4                    i2l7024 2592                    i2l7060 26A8  
                  i2l7044 261E                    i2l7062 26AA                    i1l6974 0034  
                  i1l6984 0046                    i2l6960 3964                 ??_EncPoll 001B  
           vfpfcnvrt@done 00E5                    _TMR0IE 007F95                    _TMR0IF 007F92  
                  _TMR1IE 007CE8                    _TMR1IF 007CF0                    _TMR1CS 007E69  
                  _TMR2IE 007CE9                    _TMR2IF 007CF1                    _TMR3IE 007D01  
                  _TMR3IF 007D09                    _TMR1IP 007CF8                    _TMR3IP 007D11  
                  _SPBRGH 000FB0                    _TMR1ON 007E68          i2___lmul@product 0009  
                  _TMR2ON 007E52                    _TMR3ON 007D88          __end_of___xxtofl 2D9A  
             Inter_hi@lev 0013          __end_of_clearLCD 3E94                    _U_meas 0028  
        __end_of_lcdPrint 2E94                    _U_real 019B                    _TempEn 0125  
                  _U_summ 0110          __end_of_lcdWrite 3CD6              vfprintf@cfmt 00F7  
                  ___flge 3386          __end_of_lcd_putc 3EBE                    ___fleq 3708  
                  _TxtBuf 017D                    ___lmul 3810                 ??___fladd 0087  
                  ___wmul 3DB4                 ??___fldiv 006E                 ??___awdiv 001F  
               ??___flneg 001F                 ??___awmod 001F                 ??___flmul 006E  
               ??___flsub 0023                 ??___fltol 00C0                 ??___lldiv 0023  
               ??___lodiv 001B                 ??___lomod 001B                    _efgtoa 09D6  
               ??___lwdiv 001F                 ??___lwmod 0022                    _isTemp 0128  
                  _floorf 23E4          __end_of_init_cpu 294E          __end_of_read_bit 3E7C  
        __end_of_read_eep 3EA6                    clear_0 379E                    clear_1 37AC  
        ___awdiv@quotient 0021           ___awmod@divisor 001D                    isa$std 000001  
         ___awmod@counter 001F                    pad@buf 006A                    ctoa@fp 0020  
                  _strcpy 38FC                    _strlen 3B5E            ??_init_ds18b20 0021  
               ??_initLCD 0020             _Inter_hi$2885 0011                    fputc@c 001C  
                  fputs@c 0065                    fputs@i 0066              __pdataCOMRAM 0044  
                  fputs@s 0020                 ??_isdigit 001D           ___fpclassifyf@e 0060  
         ___fpclassifyf@u 0062           ___fpclassifyf@x 001B              __mediumconst 7DAC  
               ??_isspace 001D          __end_of_ow_reset 38FC                    tblptrh 000FF7  
               ??_isupper 001D                    tblptrl 000FF6                    tblptru 000FF8  
                  stoa@cp 0071                    stoa@fp 0020          __end_of_vfprintf 3810  
           main@whole_dec 0219                    utoa@fp 0073                    sqrtf@i 009C  
                  sqrtf@m 00B0                    sqrtf@q 00A4                    sqrtf@r 00B4  
                  sqrtf@s 0098                    sqrtf@t 00A8                    sqrtf@x 008F  
                  sqrtf@z 00AC                 ??_sprintf 0024                 ??_tolower 0060  
               ??_strncmp 0021          __end_of_symbol_1 7E5A          __end_of_symbol_2 7E52  
        __end_of_symbol_3 7E4A          __end_of_symbol_4 7E42          __end_of_symbol_5 7E3A  
        __end_of_symbol_6 7E32          __end_of_symbol_7 7E2A                ___flge@ff1 007F  
         ??___fpclassifyf 001F                ___flge@ff2 0083              ___xxtofl@arg 0062  
            ___xxtofl@exp 0061              ___xxtofl@val 001B                ___fleq@ff1 001B  
              ___fleq@ff2 001F                __accesstop 0060   __end_of__initialization 37B2  
              ___flneg@f1 001B         __end_of_EncState_ 7DFD             ___rparam_used 000001  
 __end_of_readTemp_Single 2A6C          write_eep@address 001C                ___fltol@f1 00BC  
    __end_of_compile_date 7E19          ds18b20_crc8@data 001F      __end_of_compile_time 7E22  
          __pcstackCOMRAM 0001              __pidataBANK1 3EC8             __end_of_fract 7E0D  
           __end_of_fputc 3498             __end_of_fputs 3C72    ds18b20_crc8@loop_count 0021  
           __end_of_putch 3EB2             __end_of_sqrtf 1BE0                __end_ofPL2 1440  
              __end_ofPL4 1464                __end_ofPL6 1496                __end_ofPL8 14A4  
           EncPoll@EncVal 003E             ?_ds18b20_crc8 001B                 ?i2___lmul 0001  
               ?i2___wmul 0001                _calc_power 26C2         lcd_gotoxy@address 0023  
                 ??_fputc 0060                   ??_fputs 0024                   ??_putch 001B  
                 ??_sqrtf 0093                __pbssBANK1 0100                 ?_Inter_hi 0001  
               ?_Inter_lo 0001   ds18b20_crc8@bit_counter 001E                   ?___flge 007F  
                 ?___fleq 001B                   ?___lmul 001B                   ?___wmul 0064  
                 ?_efgtoa 00C6                   ?_floorf 007F       __end_of_HD44780_CYR 7DED  
          ___lmul@product 0060            ??_ds18b20_crc8 001E                _cgrom_char 3C72  
                 ?_strcpy 001B                   ?_strlen 001B                ??i2___lmul 0009  
              ??i2___wmul 0005                   _T1OSCEN 007E6B             _eusartRxCount 0041  
               ?___xxtofl 001B                 ?_clearLCD 0001                _lcd_gotoxy 3A24  
               ?_lcdPrint 0060                 ?_lcdWrite 001D                 ?_lcd_putc 0001  
        ___lomod@dividend 0060                   _EncData 0116                   _EncPoll 3CD6  
               ?_init_cpu 0001                 ?_read_eep 001B                 ?_read_bit 0001  
              ??_Inter_hi 000D                ??_Inter_lo 0017                _key_GetKey 3EBE  
    __end_of_init_ds18b20 3DB4         __end_of_lcdNibble 337C          ?_readTemp_Single 0060  
                 __Hparam 0000                   _TempEnT 0124                   __Lparam 0000  
               ?_ow_reset 0001                   ___fladd 1C14                   ___fldiv 209A  
                 ___awdiv 35B0                   ___flneg 3E24                   ___awmod 36A0  
                 ___flmul 1E70                   ___flsub 3B98                   ___fltol 3254  
                 ___lldiv 3628                   ___lodiv 2EB4                   ___lomod 3100  
                 ___lwdiv 3994                   ___lwmod 3AA6                 ?_vfprintf 00F1  
                 __pcinit 3766                 _ANSELbits 000F7E                   __ramtop 0600  
readTemp_Single@time_flag 0064                   __ptext0 00C8                   __ptext1 3E00  
                 __ptext2 188E                   __ptext3 3E44                   __ptext4 1506  
                 __ptext5 39DE                   __ptext6 37C0                   __ptext7 1140  
                 __ptext8 2260                   __ptext9 3100                   _cnt_adc 011A  
               _T0CONbits 000FD5  readTemp_Single@timer_val 0066                   _initLCD 2B96  
               _T1CONbits 000FCD                 _T2CONbits 000FCA                   _isdigit 3D34  
                 _is_stab 021E                ??___xxtofl 001F                 _T3CONbits 000FB1  
       __end_of_key_press 3B5E          ___awmod@dividend 001B     __end_of_show_lcd_main 17F0  
       __end_of_read_byte 3AA6                ??_clearLCD 001F                   _isspace 3C08  
                 _r_whole 011F               ?_calc_power 006A                   _tick_t1 012C  
                 _scratch 0192                   _isupper 3D08                   _t_power 0038  
                 efgtoa@c 00CC                   efgtoa@d 01B5                   efgtoa@e 01CD  
                 efgtoa@f 00C8                   efgtoa@g 01C9                   efgtoa@h 01BF  
                 efgtoa@i 01C7                   efgtoa@l 01C3                   efgtoa@m 01AF  
                 efgtoa@n 01CF                   efgtoa@p 01B9                   efgtoa@t 01A9  
                 efgtoa@u 01D1                   efgtoa@w 01BB                   _show_tp 021C  
                 atoi@neg 0070                ??_lcdPrint 0062                ??_lcdWrite 001E  
                 _sprintf 39DE                   _tolower 3BD2                   _strncmp 31AA  
          __pintcode_body 2560                ??_lcd_putc 001F      end_of_initialization 37B2  
                 floorf@e 008D                   floorf@m 0089                   floorf@u 008F  
                 floorf@x 007F                   fputc@fp 001E              key_press@key 001B  
           __Lmediumconst 7DAC                ??_init_cpu 0060                   int_func 2560  
                 fputs@fp 0022       i2___wmul@multiplier 0001                ??_read_eep 001D  
              ??_read_bit 001B           ___lldiv@divisor 001F           ___lldiv@counter 0064  
             _HD44780_CYR 7DAD         __end_of_vfpfcnvrt 142C                efgtoa@mode 01BE  
              efgtoa@sign 01B7                 _RCSTAbits 000FAB                ??_ow_reset 001B  
                 postdec1 000FE5                   postdec2 000FDD                   postinc0 000FEE  
                 postinc1 000FE6                   postinc2 000FDE       i2___lmul@multiplier 0001  
            read_byte@val 001D                ??_vfprintf 0024                   sqrtf@ix 00B8  
                 strcpy@d 0062                   strlen@a 001D                   strcpy@s 0060  
                 strlen@s 001B               ?_cgrom_char 001F                 _PORTBbits 000F81  
             ___fladd@grs 008E             key_GetKey@key 001B         __end_of_write_bit 3D8C  
       __end_of_write_eep 3E24             ___xxtofl@sign 0060                 _TRISBbits 000F93  
               _TRISCbits 000F94               ?_lcd_gotoxy 001F              _compile_date 7E0D  
             ___fldiv@grs 0079              _compile_time 7E19               ___fldiv@rem 0072  
             ___flmul@grs 0075      __end_of_ds18b20_crc8 38AE               ?_key_GetKey 0001  
               _TXSTAbits 000FAC                 _AlarmTemp 0127              calc_power@tt 0072  
               _EncState_ 7DED           _calc_power$2870 007A           _calc_power$2869 0076  
          __end_of___flge 3408            __end_of___fleq 375A            __end_of___lmul 3860  
             vfpfcnvrt@ap 00D5               vfpfcnvrt@cp 00E3               vfpfcnvrt@ct 00ED  
             vfpfcnvrt@fp 00D2            __end_of___wmul 3DDA               _BAUDCONbits 000FB8  
           __pidataCOMRAM 3ECF            __end_of_efgtoa 0F5E                _write_byte 3AE4  
          __end_of_floorf 2536                floorf@F526 0100          i2___wmul@product 0005  
          __end_of_strcpy 3948            __end_of_strlen 3B98               __end_ofPL10 1802  
             __end_ofPL20 0FAE               __end_ofPL12 14AC               __end_ofPL30 096C  
             __end_ofPL22 0942               __end_ofPL14 180E               __end_ofPL40 303E  
             __end_ofPL32 1826               __end_ofPL24 2038               __end_ofPL16 2EA0  
             __end_ofPL50 1038               __end_ofPL42 2EAE               __end_ofPL34 14B4  
             __end_ofPL26 0FC0               __end_ofPL18 0F7C               __end_ofPL60 106C  
             __end_ofPL52 104C               __end_ofPL44 0FE4               __end_ofPL36 0FD6  
             __end_ofPL28 181A               __end_ofPL70 14D4               __end_ofPL62 107A  
             __end_ofPL54 183A               __end_ofPL46 1006               __end_ofPL38 1830  
             __end_ofPL80 206E               __end_ofPL72 14E4               __end_ofPL64 2256  
             __end_ofPL56 105E               __end_ofPL48 1028               __end_ofPL90 0988  
             __end_ofPL82 2548               __end_ofPL74 2060               __end_ofPL66 2048  
             __end_ofPL58 1BF2               __end_ofPL92 10A4               __end_ofPL84 184E  
             __end_ofPL76 1092               __end_ofPL68 14C4               __end_ofPL94 10B6  
             __end_ofPL86 2260               __end_ofPL78 3248               __end_ofPL96 30F6  
             __end_ofPL88 0976               __end_ofPL98 2800       start_initialization 3766  
         ___lodiv@divisor 0068           ___lodiv@counter 0023               __end_of_pad 359E  
   __end_of___fpclassifyf 30E4  ds18b20_crc8@feedback_bit 0020               vfprintf@fmt 00F3  
                ??___flge 0087                  ??___fleq 0060                  ??___lmul 0023  
                ??___wmul 0023                  ??_efgtoa 00CD               __pdataBANK1 01F6  
                ??_floorf 0083           read_eep@address 001B                read_byte@i 001E  
                ??_strcpy 001F                  ??_strlen 001D                 ___fladd@a 0083  
               ___fladd@b 007F                 ___fldiv@a 006A                 ___fldiv@b 0066  
            _init_ds18b20 3D8C                 ___flmul@a 006A                 ___flmul@b 0066  
             __pbssCOMRAM 0024                 ___flsub@a 0093                 ___flsub@b 008F  
           __pcstackBANK0 0060             __pcstackBANK1 01A3                  ?_EncPoll 0001  
    readTemp_Single@minus 0062     ds18b20_crc8@num_bytes 001D               _efgtoa$2411 01A5  
             _efgtoa$2403 01A3               _efgtoa$2412 01A7                 _main$1544 01F4  
               _main$2868 01F0          ___lwdiv@dividend 001B                 __pintcode 0008  
           __pmediumconst 7DAC                 _lcdNibble 32F0                  ?___fladd 007F  
                ?___fldiv 0066                  ?___awdiv 001B                  ?___flneg 001B  
                ?___awmod 001B                  ?___flmul 0066                  ?___flsub 008F  
                ?___fltol 00BC                  ?___lldiv 001B                  ?___lodiv 0060  
                ?___lomod 0060                  ?___lwdiv 001B                  ?___lwmod 0060  
             __pintcodelo 0018               ?_write_byte 0001   _eusartTxBufferRemaining 0042  
         ___lomod@divisor 0068                  ?_initLCD 0001           ___lomod@counter 001B  
                ?_isdigit 001B                 _count_enc 0120              ??_calc_power 0070  
                ?_isspace 001B                  ?_isupper 001B          ___lwdiv@quotient 0020  
                ?_sprintf 01D5                  ?_tolower 0021                 _key_press 3B22  
               _read_byte 3A66                  ?_strncmp 001B            ___wmul@product 0068  
                _LATAbits 000F89                  _LATCbits 000F8B                  _IPR1bits 000F9F  
                _PIE1bits 000F9D                 _tick_t1_1 012B          readTemp_Single@i 006C  
                _PIR1bits 000F9E                  i1u766_20 00A0                  i2u770_40 258C  
                i2u771_40 25D0                  _RCONbits 000FD0                ?_lcdNibble 0001  
               _time_flag 01A2        __end_of_calc_power 27EE                 _power_100 021B  
               _timer_val 019F                 lcdPrint@t 0060                 _vfpfcnvrt 1140  
            ??_cgrom_char 0022                 _watt_disp 0118                _ADCON0bits 000FC2  
              _ADCON2bits 000FC0              _ds18b20_crc8 3860         ___wmul@multiplier 0064  
                i2___lmul 3948                  i2___wmul 3DDA               _isTempReady 0123  
               _sqrtU_sum 010C             Inter_hi@pulse 0015                 lcd_putc@c 001F  
             write_byte@i 0020              ??_lcd_gotoxy 0020              _isspace$2517 0021  
              vfpfcnvrt@c 00F0                vfpfcnvrt@f 00E9                ?_key_press 0001  
               _write_bit 3D60                 _write_eep 3E00         ___lmul@multiplier 001B  
             _INTCON2bits 000FF1                ?_read_byte 0001                 copy_data0 377A  
            ??_key_GetKey 001B                  _Inter_hi 0008                  _Inter_lo 0018  
              _EECON1bits 000FA6        __end_of_cgrom_char 3CA4                  __Hrparam 0000  
              vfprintf@ap 00F5                  __Lrparam 0000                vfprintf@fp 00F1  
      __end_of_lcd_gotoxy 3A66            key_press@count 0032     i2___wmul@multiplicand 0003  
              ?_vfpfcnvrt 00D2        ___fpclassifyf@F465 0024       readTemp_Single@temp 006D  
              sprintf@fmt 01D7                  ___xxtofl 2CA4                  _clearLCD 3E7C  
             _key_pressed 003C        __end_of_key_GetKey 3EC8           ___lwdiv@divisor 001D  
         ___lwdiv@counter 001F                  __ptext10 2EB4                  __ptext11 31AA  
                __ptext20 23E4                  __ptext12 2A80                  __ptext21 304E  
                __ptext13 09D6                  __ptext30 36A0                  __ptext22 3254  
                __ptext14 3BD2                  __ptext31 35B0                  __ptext23 3B98  
                __ptext15 3D08                  __ptext40 3A24                  __ptext32 34A2  
                __ptext24 1C14                  __ptext16 38FC                  __ptext41 26C2  
                __ptext33 3414                  __ptext25 3E24                  __ptext17 352C  
                __ptext50 3E60                  __ptext42 3DB4                  __ptext34 3EA6  
                __ptext26 1E70                  __ptext18 3B5E                  __ptext51 3860  
                __ptext43 3AA6                  __ptext35 2F82                  __ptext27 3386  
                __ptext19 3C3E                  __ptext60 3E7C                  __ptext52 3B22  
                __ptext44 3994                  __ptext36 3C08                  __ptext28 3708  
                __ptext61 3C72                  __ptext53 3EBE                  __ptext45 3810  
                __ptext37 3D34                  __ptext29 209A                  __ptext62 3CA4  
                __ptext54 2814                  __ptext46 3628                  __ptext38 3EB2  
                __ptext63 32F0                  __ptext55 3D8C                  __ptext47 3E94  
                __ptext39 2DB2                  __ptext64 2CA4                  __ptext56 3AE4  
                __ptext48 294E                  __ptext65 3CD6                  __ptext57 3D60  
                __ptext49 3A66                  __ptext58 38AE                  __ptext59 2B96  
                __ptext68 3DDA                  __ptext69 3948                  _lcdPrint 2DB2  
                _lcdWrite 3CA4                ?_write_eep 001B                ?_write_bit 0001  
                _lcd_putc 3EB2                  _inc_data 021A                strcpy@dest 001B  
                _init_cpu 2814                  _read_bit 3E60                  _read_eep 3E94  
                _read_key 012A                  _is_power 021D                  _sel_main 011D  
       cgrom_char@address 0021                  efgtoa@fp 00C6                  efgtoa@ne 01AD  
                efgtoa@pp 01AB                  efgtoa@ou 01B1                 stoa@F1169 01F6  
                isa$xinst 000000               ??_lcdNibble 001B                  _ow_reset 38AE  
                int$flags 0045      show_lcd_main@pwr_dsp 00F9                  _vfprintf 37C0  
                _symbol_1 7E52                  _symbol_2 7E4A                  _symbol_3 7E42  
                _symbol_4 7E3A                  _symbol_5 7E32                  _symbol_6 7E2A  
                _symbol_7 7E22                 putch@data 001B            _vfpfcnvrt$2452 00E7  
             _OSCTUNEbits 000F9B                _INTCONbits 000FF2     i2___lmul@multiplicand 0005  
       ??_readTemp_Single 0068             _show_lcd_main 1506                  isdigit@c 001B  
             ??_key_press 001B               ??_read_byte 001B                EncPoll@Enc 003D  
      readTemp_Single@buf 0060                  intlevel1 0000                  intlevel2 0000  
               sprintf@ap 01E3        readTemp_Single@tmp 006B          ___lwmod@dividend 0060  
                isspace@c 001B          ___lldiv@dividend 001B                 strcpy@src 001D  
                isupper@c 001B                 strncmp@_l 001B                 strncmp@_r 001D  
              _OSCCONbits 000FD3               efgtoa@nmode 01BD               ??_vfpfcnvrt 00D7  
        cgrom_char@symbol 001F                  stoa@nuls 0066              ??_write_byte 001C  
             _temperature 019D                  sprintf@f 01E5                  tolower@c 0021  
                sprintf@s 01D5          ___lldiv@quotient 0060           ___lwmod@divisor 0062  
          ?_show_lcd_main 0001           ___lwmod@counter 0022                  strncmp@l 0060  
                strncmp@n 001F                  strncmp@r 0062               cgrom_char@i 0022  
             ??_write_eep 001C               ??_write_bit 001B             ___fladd@signs 008B  
             _pressed_key 0122     sqrtf@__xc8_float_word 00A0              ___fladd@aexp 008C  
            ___fladd@bexp 008D        __end_of_write_byte 3B22  
