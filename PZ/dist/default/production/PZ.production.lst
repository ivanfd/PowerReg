

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jul 11 21:06:19 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F25K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=2
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    94                           	psect	pa_nodes0,global,class=CODE,delta=1
    95  0000                     
    96                           ; Version 2.40
    97                           ; Generated 17/11/2021 GMT
    98                           ; 
    99                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F25K20 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	eeprom_data
   133  F00000  18 14 21 00 00 00 00 00 	db	24,20,33,0,0,0,0,0	;# 
   134  0000                     
   135                           	psect	idataCOMRAM
   136  003EC7                     __pidataCOMRAM:
   137                           	callstack 0
   138                           
   139                           ;initializer for _pp
   140  003EC7  01                 	db	1
   141                           
   142                           	psect	idataBANK1
   143  003EC0                     __pidataBANK1:
   144                           	callstack 0
   145                           
   146                           ;initializer for stoa@F1169
   147  003EC0  28                 	db	40
   148  003EC1  6E                 	db	110
   149  003EC2  75                 	db	117
   150  003EC3  6C                 	db	108
   151  003EC4  6C                 	db	108
   152  003EC5  29                 	db	41
   153  003EC6  00                 	db	0
   154                           
   155                           	psect	mediumconst
   156  007DAC                     __pmediumconst:
   157                           	callstack 0
   158  007DAC  00                 	db	0
   159  007DAD                     _HD44780_CYR:
   160                           	callstack 0
   161  007DAD  41                 	db	65
   162  007DAE  A0                 	db	160
   163  007DAF  42                 	db	66
   164  007DB0  A1                 	db	161
   165  007DB1  E0                 	db	224
   166  007DB2  45                 	db	69
   167  007DB3  A3                 	db	163
   168  007DB4  A4                 	db	164
   169  007DB5  A5                 	db	165
   170  007DB6  A6                 	db	166
   171  007DB7  4B                 	db	75
   172  007DB8  A7                 	db	167
   173  007DB9  4D                 	db	77
   174  007DBA  48                 	db	72
   175  007DBB  4F                 	db	79
   176  007DBC  A8                 	db	168
   177  007DBD  50                 	db	80
   178  007DBE  43                 	db	67
   179  007DBF  54                 	db	84
   180  007DC0  A9                 	db	169
   181  007DC1  AA                 	db	170
   182  007DC2  58                 	db	88
   183  007DC3  E1                 	db	225
   184  007DC4  AB                 	db	171
   185  007DC5  AC                 	db	172
   186  007DC6  E2                 	db	226
   187  007DC7  AD                 	db	173
   188  007DC8  AE                 	db	174
   189  007DC9  62                 	db	98
   190  007DCA  AF                 	db	175
   191  007DCB  B0                 	db	176
   192  007DCC  B1                 	db	177
   193  007DCD  61                 	db	97
   194  007DCE  B2                 	db	178
   195  007DCF  B3                 	db	179
   196  007DD0  B4                 	db	180
   197  007DD1  E3                 	db	227
   198  007DD2  65                 	db	101
   199  007DD3  B6                 	db	182
   200  007DD4  B7                 	db	183
   201  007DD5  B8                 	db	184
   202  007DD6  B9                 	db	185
   203  007DD7  BA                 	db	186
   204  007DD8  BB                 	db	187
   205  007DD9  BC                 	db	188
   206  007DDA  BD                 	db	189
   207  007DDB  6F                 	db	111
   208  007DDC  BE                 	db	190
   209  007DDD  70                 	db	112
   210  007DDE  63                 	db	99
   211  007DDF  BF                 	db	191
   212  007DE0  79                 	db	121
   213  007DE1  E4                 	db	228
   214  007DE2  78                 	db	120
   215  007DE3  E5                 	db	229
   216  007DE4  C0                 	db	192
   217  007DE5  C1                 	db	193
   218  007DE6  E6                 	db	230
   219  007DE7  C2                 	db	194
   220  007DE8  C3                 	db	195
   221  007DE9  C4                 	db	196
   222  007DEA  C5                 	db	197
   223  007DEB  C6                 	db	198
   224  007DEC  C7                 	db	199
   225  007DED                     __end_of_HD44780_CYR:
   226                           	callstack 0
   227  007DED                     _EncState_:
   228                           	callstack 0
   229  007DED  00                 	db	0
   230  007DEE  FF                 	db	255
   231  007DEF  01                 	db	1
   232  007DF0  7F                 	db	127
   233  007DF1  01                 	db	1
   234  007DF2  00                 	db	0
   235  007DF3  7F                 	db	127
   236  007DF4  FF                 	db	255
   237  007DF5  FF                 	db	255
   238  007DF6  7F                 	db	127
   239  007DF7  00                 	db	0
   240  007DF8  01                 	db	1
   241  007DF9  7F                 	db	127
   242  007DFA  01                 	db	1
   243  007DFB  FF                 	db	255
   244  007DFC  00                 	db	0
   245  007DFD                     __end_of_EncState_:
   246                           	callstack 0
   247  007DFD                     _fract:
   248                           	callstack 0
   249  007DFD  00                 	db	0
   250  007DFE  01                 	db	1
   251  007DFF  01                 	db	1
   252  007E00  02                 	db	2
   253  007E01  02                 	db	2
   254  007E02  03                 	db	3
   255  007E03  04                 	db	4
   256  007E04  04                 	db	4
   257  007E05  05                 	db	5
   258  007E06  06                 	db	6
   259  007E07  06                 	db	6
   260  007E08  07                 	db	7
   261  007E09  07                 	db	7
   262  007E0A  08                 	db	8
   263  007E0B  09                 	db	9
   264  007E0C  09                 	db	9
   265  007E0D                     __end_of_fract:
   266                           	callstack 0
   267  007E0D                     _compile_date:
   268                           	callstack 0
   269  007E0D  4A                 	db	74
   270  007E0E  75                 	db	117
   271  007E0F  6C                 	db	108
   272  007E10  20                 	db	32
   273  007E11  31                 	db	49
   274  007E12  31                 	db	49
   275  007E13  20                 	db	32
   276  007E14  32                 	db	50
   277  007E15  30                 	db	48
   278  007E16  32                 	db	50
   279  007E17  32                 	db	50
   280  007E18  00                 	db	0
   281  007E19                     __end_of_compile_date:
   282                           	callstack 0
   283  007E19                     _compile_time:
   284                           	callstack 0
   285  007E19  32                 	db	50
   286  007E1A  31                 	db	49
   287  007E1B  3A                 	db	58
   288  007E1C  30                 	db	48
   289  007E1D  36                 	db	54
   290  007E1E  3A                 	db	58
   291  007E1F  30                 	db	48
   292  007E20  38                 	db	56
   293  007E21  00                 	db	0
   294  007E22                     __end_of_compile_time:
   295                           	callstack 0
   296  007E22                     _symbol_7:
   297                           	callstack 0
   298  007E22  06                 	db	6
   299  007E23  09                 	db	9
   300  007E24  09                 	db	9
   301  007E25  06                 	db	6
   302  007E26  00                 	db	0
   303  007E27  00                 	db	0
   304  007E28  00                 	db	0
   305  007E29  00                 	db	0
   306  007E2A                     __end_of_symbol_7:
   307                           	callstack 0
   308  007E2A                     _symbol_6:
   309                           	callstack 0
   310  007E2A  00                 	db	0
   311  007E2B  0E                 	db	14
   312  007E2C  1F                 	db	31
   313  007E2D  1B                 	db	27
   314  007E2E  1F                 	db	31
   315  007E2F  0E                 	db	14
   316  007E30  00                 	db	0
   317  007E31  00                 	db	0
   318  007E32                     __end_of_symbol_6:
   319                           	callstack 0
   320  007E32                     _symbol_5:
   321                           	callstack 0
   322  007E32  00                 	db	0
   323  007E33  00                 	db	0
   324  007E34  1F                 	db	31
   325  007E35  1F                 	db	31
   326  007E36  1F                 	db	31
   327  007E37  00                 	db	0
   328  007E38  00                 	db	0
   329  007E39  00                 	db	0
   330  007E3A                     __end_of_symbol_5:
   331                           	callstack 0
   332  007E3A                     _symbol_4:
   333                           	callstack 0
   334  007E3A  00                 	db	0
   335  007E3B  04                 	db	4
   336  007E3C  0F                 	db	15
   337  007E3D  1F                 	db	31
   338  007E3E  0F                 	db	15
   339  007E3F  04                 	db	4
   340  007E40  00                 	db	0
   341  007E41  00                 	db	0
   342  007E42                     __end_of_symbol_4:
   343                           	callstack 0
   344  007E42                     _symbol_3:
   345                           	callstack 0
   346  007E42  00                 	db	0
   347  007E43  04                 	db	4
   348  007E44  1E                 	db	30
   349  007E45  1F                 	db	31
   350  007E46  1E                 	db	30
   351  007E47  04                 	db	4
   352  007E48  00                 	db	0
   353  007E49  00                 	db	0
   354  007E4A                     __end_of_symbol_3:
   355                           	callstack 0
   356  007E4A                     _symbol_2:
   357                           	callstack 0
   358  007E4A  0E                 	db	14
   359  007E4B  11                 	db	17
   360  007E4C  11                 	db	17
   361  007E4D  11                 	db	17
   362  007E4E  0A                 	db	10
   363  007E4F  1B                 	db	27
   364  007E50  00                 	db	0
   365  007E51  00                 	db	0
   366  007E52                     __end_of_symbol_2:
   367                           	callstack 0
   368  007E52                     _symbol_1:
   369                           	callstack 0
   370  007E52  00                 	db	0
   371  007E53  00                 	db	0
   372  007E54  08                 	db	8
   373  007E55  15                 	db	21
   374  007E56  02                 	db	2
   375  007E57  00                 	db	0
   376  007E58  00                 	db	0
   377  007E59  00                 	db	0
   378  007E5A                     __end_of_symbol_1:
   379                           	callstack 0
   380  0000                     _IPR1bits	set	3999
   381  0000                     _ADCON1	set	4033
   382  0000                     _TRISB	set	3987
   383  0000                     _LATB	set	3978
   384  0000                     _PORTB	set	3969
   385  0000                     _PORTC	set	3970
   386  0000                     _ADRESL	set	4035
   387  0000                     _ADRESH	set	4036
   388  0000                     _LATCbits	set	3979
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _EEADR	set	4009
   392  0000                     _TMR3IE	set	32001
   393  0000                     _TMR2ON	set	32338
   394  0000                     _TRISBbits	set	3987
   395  0000                     _PORTBbits	set	3969
   396  0000                     _T2CONbits	set	4042
   397  0000                     _T3CONbits	set	4017
   398  0000                     _T1CONbits	set	4045
   399  0000                     _INTCON2bits	set	4081
   400  0000                     _TRISC	set	3988
   401  0000                     _LATC	set	3979
   402  0000                     _LATA	set	3977
   403  0000                     _PIR1bits	set	3998
   404  0000                     _TMR1ON	set	32360
   405  0000                     _TMR1IP	set	31992
   406  0000                     _T1OSCEN	set	32363
   407  0000                     _ADIF	set	31990
   408  0000                     _ADIE	set	31982
   409  0000                     _INT0IF	set	32657
   410  0000                     _INT0IE	set	32660
   411  0000                     _TMR2IF	set	31985
   412  0000                     _TMR2IE	set	31977
   413  0000                     _TMR1IF	set	31984
   414  0000                     _TMR1IE	set	31976
   415  0000                     _TMR0IF	set	32658
   416  0000                     _TMR0IE	set	32661
   417  0000                     _WPUB	set	3964
   418  0000                     _PORTA	set	3968
   419  0000                     _LATAbits	set	3977
   420  0000                     _TRISCbits	set	3988
   421  0000                     _EECON1bits	set	4006
   422  0000                     _TXIF	set	31988
   423  0000                     _RCSTAbits	set	4011
   424  0000                     _TXSTAbits	set	4012
   425  0000                     _TXREG	set	4013
   426  0000                     _INTCONbits	set	4082
   427  0000                     _SPBRG	set	4015
   428  0000                     _SPBRGH	set	4016
   429  0000                     _BAUDCONbits	set	4024
   430  0000                     _OSCTUNEbits	set	3995
   431  0000                     _PIE1bits	set	3997
   432  0000                     _ADCON2bits	set	4032
   433  0000                     _ADCON0bits	set	4034
   434  0000                     _TMR0L	set	4054
   435  0000                     _TMR3ON	set	32136
   436  0000                     _TRISA	set	3986
   437  0000                     _RBPU	set	32655
   438  0000                     _PR2	set	4043
   439  0000                     _OSCCONbits	set	4051
   440  0000                     _TMR1CS	set	32361
   441  0000                     _TMR3IP	set	32017
   442  0000                     _TMR3IF	set	32009
   443  0000                     _T0CONbits	set	4053
   444  0000                     _ANSELbits	set	3966
   445  0000                     _RCONbits	set	4048
   446  007E5A                     STR_9:
   447  007E5A  20                 	db	32
   448  007E5B  20                 	db	32
   449  007E5C  20                 	db	32
   450  007E5D  20                 	db	32
   451  007E5E  20                 	db	32
   452  007E5F  20                 	db	32
   453  007E60  20                 	db	32
   454  007E61  20                 	db	32
   455  007E62  20                 	db	32
   456  007E63  45                 	db	69	;'E'
   457  007E64  58                 	db	88	;'X'
   458  007E65  49                 	db	73	;'I'
   459  007E66  54                 	db	84	;'T'
   460  007E67  20                 	db	32
   461  007E68  20                 	db	32
   462  007E69  20                 	db	32
   463  007E6A  20                 	db	32
   464  007E6B  20                 	db	32
   465  007E6C  20                 	db	32
   466  007E6D  20                 	db	32
   467  007E6E  20                 	db	32
   468  007E6F  00                 	db	0
   469  007E70                     STR_26:
   470  007E70  43                 	db	67	;'C'
   471  007E71  6C                 	db	108	;'l'
   472  007E72  63                 	db	99	;'c'
   473  007E73  50                 	db	80	;'P'
   474  007E74  3A                 	db	58	;':'
   475  007E75  25                 	db	37
   476  007E76  63                 	db	99	;'c'
   477  007E77  25                 	db	37
   478  007E78  2D                 	db	45
   479  007E79  34                 	db	52	;'4'
   480  007E7A  75                 	db	117	;'u'
   481  007E7B  57                 	db	87	;'W'
   482  007E7C  20                 	db	32
   483  007E7D  25                 	db	37
   484  007E7E  63                 	db	99	;'c'
   485  007E7F  3D                 	db	61	;'='
   486  007E80  25                 	db	37
   487  007E81  75                 	db	117	;'u'
   488  007E82  2E                 	db	46
   489  007E83  25                 	db	37
   490  007E84  75                 	db	117	;'u'
   491  007E85  00                 	db	0
   492  007E86                     STR_29:
   493  007E86  41                 	db	65	;'A'
   494  007E87  70                 	db	112	;'p'
   495  007E88  78                 	db	120	;'x'
   496  007E89  50                 	db	80	;'P'
   497  007E8A  3A                 	db	58	;':'
   498  007E8B  25                 	db	37
   499  007E8C  63                 	db	99	;'c'
   500  007E8D  25                 	db	37
   501  007E8E  2D                 	db	45
   502  007E8F  34                 	db	52	;'4'
   503  007E90  75                 	db	117	;'u'
   504  007E91  57                 	db	87	;'W'
   505  007E92  20                 	db	32
   506  007E93  25                 	db	37
   507  007E94  63                 	db	99	;'c'
   508  007E95  3D                 	db	61	;'='
   509  007E96  25                 	db	37
   510  007E97  75                 	db	117	;'u'
   511  007E98  2E                 	db	46
   512  007E99  25                 	db	37
   513  007E9A  75                 	db	117	;'u'
   514  007E9B  00                 	db	0
   515  007E9C                     STR_8:
   516  007E9C  20                 	db	32
   517  007E9D  20                 	db	32
   518  007E9E  20                 	db	32
   519  007E9F  20                 	db	32
   520  007EA0  20                 	db	32
   521  007EA1  41                 	db	65	;'A'
   522  007EA2  4C                 	db	76	;'L'
   523  007EA3  41                 	db	65	;'A'
   524  007EA4  52                 	db	82	;'R'
   525  007EA5  4D                 	db	77	;'M'
   526  007EA6  20                 	db	32
   527  007EA7  54                 	db	84	;'T'
   528  007EA8  45                 	db	69	;'E'
   529  007EA9  4D                 	db	77	;'M'
   530  007EAA  50                 	db	80	;'P'
   531  007EAB  20                 	db	32
   532  007EAC  20                 	db	32
   533  007EAD  20                 	db	32
   534  007EAE  20                 	db	32
   535  007EAF  20                 	db	32
   536  007EB0  00                 	db	0
   537  007EB1                     STR_7:
   538  007EB1  20                 	db	32
   539  007EB2  20                 	db	32
   540  007EB3  20                 	db	32
   541  007EB4  53                 	db	83	;'S'
   542  007EB5  45                 	db	69	;'E'
   543  007EB6  54                 	db	84	;'T'
   544  007EB7  20                 	db	32
   545  007EB8  31                 	db	49	;'1'
   546  007EB9  30                 	db	48	;'0'
   547  007EBA  30                 	db	48	;'0'
   548  007EBB  25                 	db	37
   549  007EBC  20                 	db	32
   550  007EBD  50                 	db	80	;'P'
   551  007EBE  4F                 	db	79	;'O'
   552  007EBF  57                 	db	87	;'W'
   553  007EC0  45                 	db	69	;'E'
   554  007EC1  52                 	db	82	;'R'
   555  007EC2  20                 	db	32
   556  007EC3  20                 	db	32
   557  007EC4  20                 	db	32
   558  007EC5  00                 	db	0
   559  007EC6                     STR_5:
   560  007EC6  20                 	db	32
   561  007EC7  20                 	db	32
   562  007EC8  20                 	db	32
   563  007EC9  45                 	db	69	;'E'
   564  007ECA  44                 	db	68	;'D'
   565  007ECB  49                 	db	73	;'I'
   566  007ECC  54                 	db	84	;'T'
   567  007ECD  20                 	db	32
   568  007ECE  52                 	db	82	;'R'
   569  007ECF  45                 	db	69	;'E'
   570  007ED0  53                 	db	83	;'S'
   571  007ED1  49                 	db	73	;'I'
   572  007ED2  53                 	db	83	;'S'
   573  007ED3  54                 	db	84	;'T'
   574  007ED4  41                 	db	65	;'A'
   575  007ED5  4E                 	db	78	;'N'
   576  007ED6  43                 	db	67	;'C'
   577  007ED7  45                 	db	69	;'E'
   578  007ED8  20                 	db	32
   579  007ED9  20                 	db	32
   580  007EDA  00                 	db	0
   581  007EDB                     STR_6:
   582  007EDB  20                 	db	32
   583  007EDC  20                 	db	32
   584  007EDD  53                 	db	83	;'S'
   585  007EDE  41                 	db	65	;'A'
   586  007EDF  56                 	db	86	;'V'
   587  007EE0  45                 	db	69	;'E'
   588  007EE1  20                 	db	32
   589  007EE2  4C                 	db	76	;'L'
   590  007EE3  4F                 	db	79	;'O'
   591  007EE4  41                 	db	65	;'A'
   592  007EE5  44                 	db	68	;'D'
   593  007EE6  20                 	db	32
   594  007EE7  44                 	db	68	;'D'
   595  007EE8  45                 	db	69	;'E'
   596  007EE9  46                 	db	70	;'F'
   597  007EEA  41                 	db	65	;'A'
   598  007EEB  55                 	db	85	;'U'
   599  007EEC  4C                 	db	76	;'L'
   600  007EED  54                 	db	84	;'T'
   601  007EEE  20                 	db	32
   602  007EEF  00                 	db	0
   603  007EF0                     STR_1:
   604  007EF0  2D                 	db	45
   605  007EF1  2D                 	db	45
   606  007EF2  2D                 	db	45
   607  007EF3  42                 	db	66	;'B'
   608  007EF4  52                 	db	82	;'R'
   609  007EF5  45                 	db	69	;'E'
   610  007EF6  53                 	db	83	;'S'
   611  007EF7  45                 	db	69	;'E'
   612  007EF8  4E                 	db	78	;'N'
   613  007EF9  48                 	db	72	;'H'
   614  007EFA  41                 	db	65	;'A'
   615  007EFB  4D                 	db	77	;'M'
   616  007EFC  20                 	db	32
   617  007EFD  53                 	db	83	;'S'
   618  007EFE  54                 	db	84	;'T'
   619  007EFF  41                 	db	65	;'A'
   620  007F00  42                 	db	66	;'B'
   621  007F01  2D                 	db	45
   622  007F02  2D                 	db	45
   623  007F03  2D                 	db	45
   624  007F04  00                 	db	0
   625  007F05                     STR_14:
   626  007F05  52                 	db	82	;'R'
   627  007F06  65                 	db	101	;'e'
   628  007F07  73                 	db	115	;'s'
   629  007F08  69                 	db	105	;'i'
   630  007F09  73                 	db	115	;'s'
   631  007F0A  74                 	db	116	;'t'
   632  007F0B  3A                 	db	58	;':'
   633  007F0C  25                 	db	37
   634  007F0D  30                 	db	48	;'0'
   635  007F0E  32                 	db	50	;'2'
   636  007F0F  75                 	db	117	;'u'
   637  007F10  2E                 	db	46
   638  007F11  25                 	db	37
   639  007F12  75                 	db	117	;'u'
   640  007F13  20                 	db	32
   641  007F14  4F                 	db	79	;'O'
   642  007F15  68                 	db	104	;'h'
   643  007F16  6D                 	db	109	;'m'
   644  007F17  20                 	db	32
   645  007F18  00                 	db	0
   646  007F19                     STR_11:
   647  007F19  4C                 	db	76	;'L'
   648  007F1A  6F                 	db	111	;'o'
   649  007F1B  6E                 	db	110	;'n'
   650  007F1C  67                 	db	103	;'g'
   651  007F1D  20                 	db	32
   652  007F1E  70                 	db	112	;'p'
   653  007F1F  72                 	db	114	;'r'
   654  007F20  65                 	db	101	;'e'
   655  007F21  73                 	db	115	;'s'
   656  007F22  73                 	db	115	;'s'
   657  007F23  20                 	db	32
   658  007F24  66                 	db	102	;'f'
   659  007F25  6F                 	db	111	;'o'
   660  007F26  72                 	db	114	;'r'
   661  007F27  20                 	db	32
   662  007F28  73                 	db	115	;'s'
   663  007F29  61                 	db	97	;'a'
   664  007F2A  76                 	db	118	;'v'
   665  007F2B  65                 	db	101	;'e'
   666  007F2C  00                 	db	0
   667  007F2D                     STR_10:
   668  007F2D  20                 	db	32
   669  007F2E  20                 	db	32
   670  007F2F  2D                 	db	45
   671  007F30  20                 	db	32
   672  007F31  57                 	db	87	;'W'
   673  007F32  68                 	db	104	;'h'
   674  007F33  6F                 	db	111	;'o'
   675  007F34  6C                 	db	108	;'l'
   676  007F35  65                 	db	101	;'e'
   677  007F36  20                 	db	32
   678  007F37  70                 	db	112	;'p'
   679  007F38  61                 	db	97	;'a'
   680  007F39  72                 	db	114	;'r'
   681  007F3A  74                 	db	116	;'t'
   682  007F3B  20                 	db	32
   683  007F3C  2D                 	db	45
   684  007F3D  20                 	db	32
   685  007F3E  20                 	db	32
   686  007F3F  00                 	db	0
   687  007F40                     STR_16:
   688  007F40  20                 	db	32
   689  007F41  20                 	db	32
   690  007F42  2D                 	db	45
   691  007F43  20                 	db	32
   692  007F44  46                 	db	70	;'F'
   693  007F45  72                 	db	114	;'r'
   694  007F46  61                 	db	97	;'a'
   695  007F47  63                 	db	99	;'c'
   696  007F48  74                 	db	116	;'t'
   697  007F49  20                 	db	32
   698  007F4A  70                 	db	112	;'p'
   699  007F4B  61                 	db	97	;'a'
   700  007F4C  72                 	db	114	;'r'
   701  007F4D  74                 	db	116	;'t'
   702  007F4E  20                 	db	32
   703  007F4F  2D                 	db	45
   704  007F50  20                 	db	32
   705  007F51  20                 	db	32
   706  007F52  00                 	db	0
   707  007F53                     STR_12:
   708  007F53  20                 	db	32
   709  007F54  20                 	db	32
   710  007F55  20                 	db	32
   711  007F56  20                 	db	32
   712  007F57  74                 	db	116	;'t'
   713  007F58  6F                 	db	111	;'o'
   714  007F59  20                 	db	32
   715  007F5A  45                 	db	69	;'E'
   716  007F5B  45                 	db	69	;'E'
   717  007F5C  50                 	db	80	;'P'
   718  007F5D  52                 	db	82	;'R'
   719  007F5E  4F                 	db	79	;'O'
   720  007F5F  4D                 	db	77	;'M'
   721  007F60  2E                 	db	46
   722  007F61  00                 	db	0
   723  007F62                     STR_2:
   724  007F62  28                 	db	40
   725  007F63  63                 	db	99	;'c'
   726  007F64  29                 	db	41
   727  007F65  49                 	db	73	;'I'
   728  007F66  76                 	db	118	;'v'
   729  007F67  61                 	db	97	;'a'
   730  007F68  6E                 	db	110	;'n'
   731  007F69  5F                 	db	95	;'_'
   732  007F6A  66                 	db	102	;'f'
   733  007F6B  64                 	db	100	;'d'
   734  007F6C  20                 	db	32
   735  007F6D  76                 	db	118	;'v'
   736  007F6E  25                 	db	37
   737  007F6F  73                 	db	115	;'s'
   738  007F70  00                 	db	0
   739  007F71                     STR_17:
   740  007F71  54                 	db	84	;'T'
   741  007F72  65                 	db	101	;'e'
   742  007F73  6D                 	db	109	;'m'
   743  007F74  70                 	db	112	;'p'
   744  007F75  3A                 	db	58	;':'
   745  007F76  25                 	db	37
   746  007F77  75                 	db	117	;'u'
   747  007F78  25                 	db	37
   748  007F79  63                 	db	99	;'c'
   749  007F7A  25                 	db	37
   750  007F7B  2D                 	db	45
   751  007F7C  34                 	db	52	;'4'
   752  007F7D  63                 	db	99	;'c'
   753  007F7E  00                 	db	0
   754  007F7F                     STR_28:
   755  007F7F  50                 	db	80	;'P'
   756  007F80  77                 	db	119	;'w'
   757  007F81  55                 	db	85	;'U'
   758  007F82  3A                 	db	58	;':'
   759  007F83  25                 	db	37
   760  007F84  75                 	db	117	;'u'
   761  007F85  25                 	db	37
   762  007F86  25                 	db	37
   763  007F87  20                 	db	32
   764  007F88  20                 	db	32
   765  007F89  00                 	db	0
   766  007F8A                     STR_22:
   767  007F8A  4E                 	db	78	;'N'
   768  007F8B  4F                 	db	79	;'O'
   769  007F8C  54                 	db	84	;'T'
   770  007F8D  20                 	db	32
   771  007F8E  53                 	db	83	;'S'
   772  007F8F  54                 	db	84	;'T'
   773  007F90  41                 	db	65	;'A'
   774  007F91  42                 	db	66	;'B'
   775  007F92  21                 	db	33
   776  007F93  20                 	db	32
   777  007F94  00                 	db	0
   778  007F95                     STR_23:
   779  007F95  53                 	db	83	;'S'
   780  007F96  54                 	db	84	;'T'
   781  007F97  41                 	db	65	;'A'
   782  007F98  42                 	db	66	;'B'
   783  007F99  49                 	db	73	;'I'
   784  007F9A  4C                 	db	76	;'L'
   785  007F9B  49                 	db	73	;'I'
   786  007F9C  5A                 	db	90	;'Z'
   787  007F9D  45                 	db	69	;'E'
   788  007F9E  20                 	db	32
   789  007F9F  00                 	db	0
   790  007FA0                     STR_18:
   791  007FA0  41                 	db	65	;'A'
   792  007FA1  6C                 	db	108	;'l'
   793  007FA2  61                 	db	97	;'a'
   794  007FA3  72                 	db	114	;'r'
   795  007FA4  6D                 	db	109	;'m'
   796  007FA5  3A                 	db	58	;':'
   797  007FA6  25                 	db	37
   798  007FA7  2D                 	db	45
   799  007FA8  33                 	db	51	;'3'
   800  007FA9  73                 	db	115	;'s'
   801  007FAA  00                 	db	0
   802  007FAB                     STR_24:
   803  007FAB  50                 	db	80	;'P'
   804  007FAC  77                 	db	119	;'w'
   805  007FAD  52                 	db	82	;'R'
   806  007FAE  3A                 	db	58	;':'
   807  007FAF  25                 	db	37
   808  007FB0  75                 	db	117	;'u'
   809  007FB1  25                 	db	37
   810  007FB2  25                 	db	37
   811  007FB3  20                 	db	32
   812  007FB4  00                 	db	0
   813  007FB5                     STR_21:
   814  007FB5  55                 	db	85	;'U'
   815  007FB6  5F                 	db	95	;'_'
   816  007FB7  49                 	db	73	;'I'
   817  007FB8  6E                 	db	110	;'n'
   818  007FB9  3A                 	db	58	;':'
   819  007FBA  25                 	db	37
   820  007FBB  75                 	db	117	;'u'
   821  007FBC  56                 	db	86	;'V'
   822  007FBD  20                 	db	32
   823  007FBE  00                 	db	0
   824  007FBF                     STR_27:
   825  007FBF  50                 	db	80	;'P'
   826  007FC0  77                 	db	119	;'w'
   827  007FC1  55                 	db	85	;'U'
   828  007FC2  3A                 	db	58	;':'
   829  007FC3  25                 	db	37
   830  007FC4  75                 	db	117	;'u'
   831  007FC5  25                 	db	37
   832  007FC6  25                 	db	37
   833  007FC7  2A                 	db	42
   834  007FC8  00                 	db	0
   835  007FC9                     STR_3:
   836  007FC9  31                 	db	49	;'1'
   837  007FCA  31                 	db	49	;'1'
   838  007FCB  2E                 	db	46
   839  007FCC  30                 	db	48	;'0'
   840  007FCD  37                 	db	55	;'7'
   841  007FCE  2E                 	db	46
   842  007FCF  32                 	db	50	;'2'
   843  007FD0  32                 	db	50	;'2'
   844  007FD1  00                 	db	0
   845  007FD2                     STR_25:
   846  007FD2  43                 	db	67	;'C'
   847  007FD3  6F                 	db	111	;'o'
   848  007FD4  65                 	db	101	;'e'
   849  007FD5  3A                 	db	58	;':'
   850  007FD6  25                 	db	37
   851  007FD7  2E                 	db	46
   852  007FD8  34                 	db	52	;'4'
   853  007FD9  66                 	db	102	;'f'
   854  007FDA  00                 	db	0
   855  007FDB                     STR_4:
   856  007FDB  25                 	db	37
   857  007FDC  73                 	db	115	;'s'
   858  007FDD  20                 	db	32
   859  007FDE  25                 	db	37
   860  007FDF  73                 	db	115	;'s'
   861  007FE0  00                 	db	0
   862  007FE1                     STR_31:
   863  007FE1  49                 	db	73	;'I'
   864  007FE2  4E                 	db	78	;'N'
   865  007FE3  46                 	db	70	;'F'
   866  007FE4  00                 	db	0
   867  007FE5                     STR_35:
   868  007FE5  4E                 	db	78	;'N'
   869  007FE6  41                 	db	65	;'A'
   870  007FE7  4E                 	db	78	;'N'
   871  007FE8  00                 	db	0
   872  007FE9                     STR_32:
   873  007FE9  69                 	db	105	;'i'
   874  007FEA  6E                 	db	110	;'n'
   875  007FEB  66                 	db	102	;'f'
   876  007FEC  00                 	db	0
   877  007FED                     STR_36:
   878  007FED  6E                 	db	110	;'n'
   879  007FEE  61                 	db	97	;'a'
   880  007FEF  6E                 	db	110	;'n'
   881  007FF0  00                 	db	0
   882  007FF1                     STR_44:
   883  007FF1  6C                 	db	108	;'l'
   884  007FF2  6C                 	db	108	;'l'
   885  007FF3  73                 	db	115	;'s'
   886  007FF4  00                 	db	0
   887  007FF5                     STR_20:
   888  007FF5  4F                 	db	79	;'O'
   889  007FF6  46                 	db	70	;'F'
   890  007FF7  46                 	db	70	;'F'
   891  007FF8  00                 	db	0
   892  007FF9                     STR_39:
   893  007FF9  6C                 	db	108	;'l'
   894  007FFA  66                 	db	102	;'f'
   895  007FFB  00                 	db	0
   896  007FFC                     STR_19:
   897  007FFC  4F                 	db	79	;'O'
   898  007FFD  4E                 	db	78	;'N'
   899  007FFE  00                 	db	0
   900  007FFF  00                 	db	0	; dummy byte at the end
   901  0000                     
   902                           ; #config settings
   903                           
   904                           	psect	cinit
   905  00375E                     __pcinit:
   906                           	callstack 0
   907  00375E                     start_initialization:
   908                           	callstack 0
   909  00375E                     __initialization:
   910                           	callstack 0
   911                           
   912                           ; Initialize objects allocated to BANK1 (7 bytes)
   913                           ; load TBLPTR registers with __pidataBANK1
   914  00375E  0EC0               	movlw	low __pidataBANK1
   915  003760  6EF6               	movwf	tblptrl,c
   916  003762  0E3E               	movlw	high __pidataBANK1
   917  003764  6EF7               	movwf	tblptrh,c
   918  003766  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   919  003768  6EF8               	movwf	tblptru,c
   920  00376A  EE01  F0F6         	lfsr	0,__pdataBANK1
   921  00376E  EE10 F007          	lfsr	1,7
   922  003772                     copy_data0:
   923  003772  0009               	tblrd		*+
   924  003774  CFF5 FFEE          	movff	tablat,postinc0
   925  003778  50E5               	movf	postdec1,w,c
   926  00377A  50E1               	movf	fsr1l,w,c
   927  00377C  E1FA               	bnz	copy_data0
   928                           
   929                           ; Initialize objects allocated to COMRAM (1 bytes)
   930                           ; load TBLPTR registers with __pidataCOMRAM
   931  00377E  0EC7               	movlw	low __pidataCOMRAM
   932  003780  6EF6               	movwf	tblptrl,c
   933  003782  0E3E               	movlw	high __pidataCOMRAM
   934  003784  6EF7               	movwf	tblptrh,c
   935  003786  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   936  003788  6EF8               	movwf	tblptru,c
   937  00378A  0009               	tblrd		*+	;fetch initializer
   938  00378C  CFF5 F045          	movff	tablat,__pdataCOMRAM
   939                           
   940                           ; Clear objects allocated to BANK1 (163 bytes)
   941  003790  EE01  F000         	lfsr	0,__pbssBANK1
   942  003794  0EA3               	movlw	163
   943  003796                     clear_0:
   944  003796  6AEE               	clrf	postinc0,c
   945  003798  06E8               	decf	wreg,f,c
   946  00379A  E1FD               	bnz	clear_0
   947                           
   948                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   949  00379C  6A44               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   950                           
   951                           ; Clear objects allocated to COMRAM (31 bytes)
   952  00379E  EE00  F025         	lfsr	0,__pbssCOMRAM
   953  0037A2  0E1F               	movlw	31
   954  0037A4                     clear_1:
   955  0037A4  6AEE               	clrf	postinc0,c
   956  0037A6  06E8               	decf	wreg,f,c
   957  0037A8  E1FD               	bnz	clear_1
   958  0037AA                     end_of_initialization:
   959                           	callstack 0
   960  0037AA                     __end_of__initialization:
   961                           	callstack 0
   962  0037AA  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   963  0037AC  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   964  0037AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   965  0037B0  6EF8               	movwf	tblptru,c
   966  0037B2  0100               	movlb	0
   967  0037B4  EF59  F000         	goto	_main	;jump to C main() function
   968                           
   969                           	psect	bitbssCOMRAM
   970  000220                     __pbitbssCOMRAM:
   971                           	callstack 0
   972  000220                     main@alarm_enable:
   973                           	callstack 0
   974  000220                     	ds	1
   975  000221                     main@whole_dec:
   976                           	callstack 0
   977  000221                     	ds	1
   978  000222                     _inc_data:
   979                           	callstack 0
   980  000222                     	ds	1
   981  000223                     _power_100:
   982                           	callstack 0
   983  000223                     	ds	1
   984  000224                     _show_tp:
   985                           	callstack 0
   986  000224                     	ds	1
   987  000225                     _is_power:
   988                           	callstack 0
   989  000225                     	ds	1
   990  000226                     _is_stab:
   991                           	callstack 0
   992  000226                     	ds	1
   993                           
   994                           	psect	bssCOMRAM
   995  000025                     __pbssCOMRAM:
   996                           	callstack 0
   997  000025                     ___fpclassifyf@F465:
   998                           	callstack 0
   999  000025                     	ds	4
  1000  000029                     _U_meas:
  1001                           	callstack 0
  1002  000029                     	ds	4
  1003  00002D                     _width:
  1004                           	callstack 0
  1005  00002D                     	ds	2
  1006  00002F                     _prec:
  1007                           	callstack 0
  1008  00002F                     	ds	2
  1009  000031                     _flags:
  1010                           	callstack 0
  1011  000031                     	ds	2
  1012  000033                     key_press@count:
  1013                           	callstack 0
  1014  000033                     	ds	2
  1015  000035                     _ps:
  1016                           	callstack 0
  1017  000035                     	ds	2
  1018  000037                     _err:
  1019                           	callstack 0
  1020  000037                     	ds	2
  1021  000039                     _t_power:
  1022                           	callstack 0
  1023  000039                     	ds	2
  1024  00003B                     _sound_delay:
  1025                           	callstack 0
  1026  00003B                     	ds	2
  1027  00003D                     _key_pressed:
  1028                           	callstack 0
  1029  00003D                     	ds	1
  1030  00003E                     EncPoll@Enc:
  1031                           	callstack 0
  1032  00003E                     	ds	1
  1033  00003F                     EncPoll@EncVal:
  1034                           	callstack 0
  1035  00003F                     	ds	1
  1036  000040                     _getU:
  1037                           	callstack 0
  1038  000040                     	ds	1
  1039  000041                     _zero:
  1040                           	callstack 0
  1041  000041                     	ds	1
  1042  000042                     _eusartRxCount:
  1043                           	callstack 0
  1044  000042                     	ds	1
  1045  000043                     _eusartTxBufferRemaining:
  1046                           	callstack 0
  1047  000043                     	ds	1
  1048                           
  1049                           	psect	dataCOMRAM
  1050  000045                     __pdataCOMRAM:
  1051                           	callstack 0
  1052  000045                     _pp:
  1053                           	callstack 0
  1054  000045                     	ds	1
  1055                           
  1056                           	psect	bssBANK1
  1057  000100                     __pbssBANK1:
  1058                           	callstack 0
  1059  000100                     floorf@F526:
  1060                           	callstack 0
  1061  000100                     	ds	4
  1062  000104                     _t_res:
  1063                           	callstack 0
  1064  000104                     	ds	4
  1065  000108                     _coef:
  1066                           	callstack 0
  1067  000108                     	ds	4
  1068  00010C                     _sqrtU_sum:
  1069                           	callstack 0
  1070  00010C                     	ds	4
  1071  000110                     _U_summ:
  1072                           	callstack 0
  1073  000110                     	ds	4
  1074  000114                     _nout:
  1075                           	callstack 0
  1076  000114                     	ds	2
  1077  000116                     _EncData:
  1078                           	callstack 0
  1079  000116                     	ds	2
  1080  000118                     _watt_disp:
  1081                           	callstack 0
  1082  000118                     	ds	2
  1083  00011A                     _cnt_adc:
  1084                           	callstack 0
  1085  00011A                     	ds	2
  1086  00011C                     main@powerOFF:
  1087                           	callstack 0
  1088  00011C                     	ds	1
  1089  00011D                     _sel_main:
  1090                           	callstack 0
  1091  00011D                     	ds	1
  1092  00011E                     _r_dec:
  1093                           	callstack 0
  1094  00011E                     	ds	1
  1095  00011F                     _r_whole:
  1096                           	callstack 0
  1097  00011F                     	ds	1
  1098  000120                     _count_enc:
  1099                           	callstack 0
  1100  000120                     	ds	1
  1101  000121                     _power:
  1102                           	callstack 0
  1103  000121                     	ds	1
  1104  000122                     _pressed_key:
  1105                           	callstack 0
  1106  000122                     	ds	1
  1107  000123                     _isTempReady:
  1108                           	callstack 0
  1109  000123                     	ds	1
  1110  000124                     _TempEnT:
  1111                           	callstack 0
  1112  000124                     	ds	1
  1113  000125                     _TempEn:
  1114                           	callstack 0
  1115  000125                     	ds	1
  1116  000126                     _AlarmTempT:
  1117                           	callstack 0
  1118  000126                     	ds	1
  1119  000127                     _AlarmTemp:
  1120                           	callstack 0
  1121  000127                     	ds	1
  1122  000128                     _isTemp:
  1123                           	callstack 0
  1124  000128                     	ds	1
  1125  000129                     _sound_enable:
  1126                           	callstack 0
  1127  000129                     	ds	1
  1128  00012A                     _read_key:
  1129                           	callstack 0
  1130  00012A                     	ds	1
  1131  00012B                     _tick_t1_1:
  1132                           	callstack 0
  1133  00012B                     	ds	1
  1134  00012C                     _tick_t1:
  1135                           	callstack 0
  1136  00012C                     	ds	1
  1137  00012D                     _dbuf:
  1138                           	callstack 0
  1139  00012D                     	ds	80
  1140  00017D                     _TxtBuf:
  1141                           	callstack 0
  1142  00017D                     	ds	21
  1143  000192                     _scratch:
  1144                           	callstack 0
  1145  000192                     	ds	9
  1146  00019B                     _U_real:
  1147                           	callstack 0
  1148  00019B                     	ds	2
  1149  00019D                     _temperature:
  1150                           	callstack 0
  1151  00019D                     	ds	2
  1152  00019F                     _timer_val:
  1153                           	callstack 0
  1154  00019F                     	ds	2
  1155  0001A1                     _minus:
  1156                           	callstack 0
  1157  0001A1                     	ds	1
  1158  0001A2                     _time_flag:
  1159                           	callstack 0
  1160  0001A2                     	ds	1
  1161                           
  1162                           	psect	dataBANK1
  1163  0001F6                     __pdataBANK1:
  1164                           	callstack 0
  1165  0001F6                     stoa@F1169:
  1166                           	callstack 0
  1167  0001F6                     	ds	7
  1168                           
  1169                           	psect	cstackBANK1
  1170  0001A3                     __pcstackBANK1:
  1171                           	callstack 0
  1172  0001A3                     _efgtoa$2403:
  1173                           	callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x0
  1176  0001A3                     	ds	2
  1177  0001A5                     _efgtoa$2411:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x2
  1181  0001A5                     	ds	2
  1182  0001A7                     _efgtoa$2412:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x4
  1186  0001A7                     	ds	2
  1187  0001A9                     efgtoa@t:
  1188                           	callstack 0
  1189                           
  1190                           ; 2 bytes @ 0x6
  1191  0001A9                     	ds	2
  1192  0001AB                     efgtoa@pp:
  1193                           	callstack 0
  1194                           
  1195                           ; 2 bytes @ 0x8
  1196  0001AB                     	ds	2
  1197  0001AD                     efgtoa@ne:
  1198                           	callstack 0
  1199                           
  1200                           ; 2 bytes @ 0xA
  1201  0001AD                     	ds	2
  1202  0001AF                     efgtoa@m:
  1203                           	callstack 0
  1204                           
  1205                           ; 2 bytes @ 0xC
  1206  0001AF                     	ds	2
  1207  0001B1                     efgtoa@ou:
  1208                           	callstack 0
  1209                           
  1210                           ; 4 bytes @ 0xE
  1211  0001B1                     	ds	4
  1212  0001B5                     efgtoa@d:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x12
  1216  0001B5                     	ds	2
  1217  0001B7                     efgtoa@sign:
  1218                           	callstack 0
  1219                           
  1220                           ; 2 bytes @ 0x14
  1221  0001B7                     	ds	2
  1222  0001B9                     efgtoa@p:
  1223                           	callstack 0
  1224                           
  1225                           ; 2 bytes @ 0x16
  1226  0001B9                     	ds	2
  1227  0001BB                     efgtoa@w:
  1228                           	callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x18
  1231  0001BB                     	ds	2
  1232  0001BD                     efgtoa@nmode:
  1233                           	callstack 0
  1234                           
  1235                           ; 1 bytes @ 0x1A
  1236  0001BD                     	ds	1
  1237  0001BE                     efgtoa@mode:
  1238                           	callstack 0
  1239                           
  1240                           ; 1 bytes @ 0x1B
  1241  0001BE                     	ds	1
  1242  0001BF                     efgtoa@h:
  1243                           	callstack 0
  1244                           
  1245                           ; 4 bytes @ 0x1C
  1246  0001BF                     	ds	4
  1247  0001C3                     efgtoa@l:
  1248                           	callstack 0
  1249                           
  1250                           ; 4 bytes @ 0x20
  1251  0001C3                     	ds	4
  1252  0001C7                     efgtoa@i:
  1253                           	callstack 0
  1254                           
  1255                           ; 2 bytes @ 0x24
  1256  0001C7                     	ds	2
  1257  0001C9                     efgtoa@g:
  1258                           	callstack 0
  1259                           
  1260                           ; 4 bytes @ 0x26
  1261  0001C9                     	ds	4
  1262  0001CD                     efgtoa@e:
  1263                           	callstack 0
  1264                           
  1265                           ; 2 bytes @ 0x2A
  1266  0001CD                     	ds	2
  1267  0001CF                     efgtoa@n:
  1268                           	callstack 0
  1269                           
  1270                           ; 2 bytes @ 0x2C
  1271  0001CF                     	ds	2
  1272  0001D1                     efgtoa@u:
  1273                           	callstack 0
  1274                           
  1275                           ; 4 bytes @ 0x2E
  1276  0001D1                     	ds	4
  1277  0001D5                     ?_sprintf:
  1278                           	callstack 0
  1279  0001D5                     sprintf@s:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x32
  1283  0001D5                     	ds	2
  1284  0001D7                     sprintf@fmt:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x34
  1288  0001D7                     	ds	12
  1289  0001E3                     sprintf@ap:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x40
  1293  0001E3                     	ds	2
  1294  0001E5                     sprintf@f:
  1295                           	callstack 0
  1296                           
  1297                           ; 11 bytes @ 0x42
  1298  0001E5                     	ds	11
  1299  0001F0                     _main$2868:
  1300                           	callstack 0
  1301                           
  1302                           ; 4 bytes @ 0x4D
  1303  0001F0                     	ds	4
  1304  0001F4                     _main$1544:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x51
  1308  0001F4                     	ds	2
  1309                           
  1310                           	psect	cstackBANK0
  1311  000060                     __pcstackBANK0:
  1312                           	callstack 0
  1313  000060                     ??_tolower:
  1314  000060                     ??_lcdPrint:
  1315  000060                     ??___fleq:
  1316  000060                     ?_ctoa:
  1317                           	callstack 0
  1318  000060                     ?_stoa:
  1319                           	callstack 0
  1320  000060                     ?___lodiv:
  1321                           	callstack 0
  1322  000060                     ?___lomod:
  1323                           	callstack 0
  1324  000060                     ___lwmod@counter:
  1325                           	callstack 0
  1326  000060                     ___xxtofl@sign:
  1327                           	callstack 0
  1328  000060                     readTemp_Single@buf:
  1329                           	callstack 0
  1330  000060                     ctoa@fp:
  1331                           	callstack 0
  1332  000060                     stoa@fp:
  1333                           	callstack 0
  1334  000060                     ___fpclassifyf@e:
  1335                           	callstack 0
  1336  000060                     fputs@s:
  1337                           	callstack 0
  1338  000060                     ___lmul@product:
  1339                           	callstack 0
  1340  000060                     ___lldiv@quotient:
  1341                           	callstack 0
  1342  000060                     ___lodiv@dividend:
  1343                           	callstack 0
  1344  000060                     ___lomod@dividend:
  1345                           	callstack 0
  1346                           
  1347                           ; 8 bytes @ 0x0
  1348  000060                     	ds	1
  1349  000061                     ?___wmul:
  1350                           	callstack 0
  1351  000061                     ___xxtofl@exp:
  1352                           	callstack 0
  1353  000061                     ___wmul@multiplier:
  1354                           	callstack 0
  1355                           
  1356                           ; 2 bytes @ 0x1
  1357  000061                     	ds	1
  1358  000062                     ctoa@c:
  1359                           	callstack 0
  1360  000062                     readTemp_Single@minus:
  1361                           	callstack 0
  1362  000062                     stoa@s:
  1363                           	callstack 0
  1364  000062                     fputs@fp:
  1365                           	callstack 0
  1366  000062                     ___xxtofl@arg:
  1367                           	callstack 0
  1368  000062                     ___fpclassifyf@u:
  1369                           	callstack 0
  1370                           
  1371                           ; 4 bytes @ 0x2
  1372  000062                     	ds	1
  1373  000063                     ___wmul@multiplicand:
  1374                           	callstack 0
  1375  000063                     ctoa@l:
  1376                           	callstack 0
  1377                           
  1378                           ; 2 bytes @ 0x3
  1379  000063                     	ds	1
  1380  000064                     ___lldiv@counter:
  1381                           	callstack 0
  1382  000064                     fputs@c:
  1383                           	callstack 0
  1384  000064                     readTemp_Single@time_flag:
  1385                           	callstack 0
  1386  000064                     stoa@nuls:
  1387                           	callstack 0
  1388                           
  1389                           ; 7 bytes @ 0x4
  1390  000064                     	ds	1
  1391  000065                     ___wmul@product:
  1392                           	callstack 0
  1393  000065                     ctoa@w:
  1394                           	callstack 0
  1395  000065                     fputs@i:
  1396                           	callstack 0
  1397                           
  1398                           ; 2 bytes @ 0x5
  1399  000065                     	ds	1
  1400  000066                     ?___fldiv:
  1401                           	callstack 0
  1402  000066                     ?___flmul:
  1403                           	callstack 0
  1404  000066                     readTemp_Single@timer_val:
  1405                           	callstack 0
  1406  000066                     ___fldiv@b:
  1407                           	callstack 0
  1408  000066                     ___flmul@b:
  1409                           	callstack 0
  1410                           
  1411                           ; 4 bytes @ 0x6
  1412  000066                     	ds	1
  1413  000067                     ?_calc_power:
  1414                           	callstack 0
  1415  000067                     ?_atoi:
  1416                           	callstack 0
  1417  000067                     ?_pad:
  1418                           	callstack 0
  1419  000067                     pad@fp:
  1420                           	callstack 0
  1421  000067                     atoi@s:
  1422                           	callstack 0
  1423  000067                     calc_power@res:
  1424                           	callstack 0
  1425                           
  1426                           ; 4 bytes @ 0x7
  1427  000067                     	ds	1
  1428  000068                     readTemp_Single@tmp:
  1429                           	callstack 0
  1430  000068                     ___lodiv@divisor:
  1431                           	callstack 0
  1432  000068                     ___lomod@divisor:
  1433                           	callstack 0
  1434                           
  1435                           ; 8 bytes @ 0x8
  1436  000068                     	ds	1
  1437  000069                     ??_atoi:
  1438  000069                     readTemp_Single@i:
  1439                           	callstack 0
  1440  000069                     pad@buf:
  1441                           	callstack 0
  1442                           
  1443                           ; 2 bytes @ 0x9
  1444  000069                     	ds	1
  1445  00006A                     readTemp_Single@temp:
  1446                           	callstack 0
  1447  00006A                     ___fldiv@a:
  1448                           	callstack 0
  1449  00006A                     ___flmul@a:
  1450                           	callstack 0
  1451                           
  1452                           ; 4 bytes @ 0xA
  1453  00006A                     	ds	1
  1454  00006B                     calc_power@u_rl:
  1455                           	callstack 0
  1456  00006B                     pad@p:
  1457                           	callstack 0
  1458  00006B                     stoa@i:
  1459                           	callstack 0
  1460                           
  1461                           ; 2 bytes @ 0xB
  1462  00006B                     	ds	2
  1463  00006D                     ??_calc_power:
  1464  00006D                     pad@i:
  1465                           	callstack 0
  1466  00006D                     stoa@w:
  1467                           	callstack 0
  1468  00006D                     atoi@neg:
  1469                           	callstack 0
  1470                           
  1471                           ; 2 bytes @ 0xD
  1472  00006D                     	ds	1
  1473  00006E                     ??___fldiv:
  1474  00006E                     ??___flmul:
  1475                           
  1476                           ; 1 bytes @ 0xE
  1477  00006E                     	ds	1
  1478  00006F                     pad@w:
  1479                           	callstack 0
  1480  00006F                     stoa@cp:
  1481                           	callstack 0
  1482  00006F                     atoi@n:
  1483                           	callstack 0
  1484  00006F                     calc_power@tt:
  1485                           	callstack 0
  1486                           
  1487                           ; 4 bytes @ 0xF
  1488  00006F                     	ds	2
  1489  000071                     ?_utoa:
  1490                           	callstack 0
  1491  000071                     stoa@p:
  1492                           	callstack 0
  1493  000071                     utoa@fp:
  1494                           	callstack 0
  1495                           
  1496                           ; 2 bytes @ 0x11
  1497  000071                     	ds	1
  1498  000072                     ___flmul@sign:
  1499                           	callstack 0
  1500  000072                     ___fldiv@rem:
  1501                           	callstack 0
  1502                           
  1503                           ; 4 bytes @ 0x12
  1504  000072                     	ds	1
  1505  000073                     ___flmul@aexp:
  1506                           	callstack 0
  1507  000073                     stoa@l:
  1508                           	callstack 0
  1509  000073                     _calc_power$2869:
  1510                           	callstack 0
  1511  000073                     utoa@d:
  1512                           	callstack 0
  1513                           
  1514                           ; 8 bytes @ 0x13
  1515  000073                     	ds	1
  1516  000074                     ___flmul@bexp:
  1517                           	callstack 0
  1518                           
  1519                           ; 1 bytes @ 0x14
  1520  000074                     	ds	1
  1521  000075                     ___flmul@grs:
  1522                           	callstack 0
  1523                           
  1524                           ; 4 bytes @ 0x15
  1525  000075                     	ds	1
  1526  000076                     ___fldiv@sign:
  1527                           	callstack 0
  1528                           
  1529                           ; 1 bytes @ 0x16
  1530  000076                     	ds	1
  1531  000077                     ___fldiv@new_exp:
  1532                           	callstack 0
  1533  000077                     _calc_power$2870:
  1534                           	callstack 0
  1535                           
  1536                           ; 2 bytes @ 0x17
  1537  000077                     	ds	2
  1538  000079                     calc_power@pwr:
  1539                           	callstack 0
  1540  000079                     ___fldiv@grs:
  1541                           	callstack 0
  1542  000079                     ___flmul@prod:
  1543                           	callstack 0
  1544                           
  1545                           ; 4 bytes @ 0x19
  1546  000079                     	ds	1
  1547  00007A                     calc_power@p_w:
  1548                           	callstack 0
  1549                           
  1550                           ; 2 bytes @ 0x1A
  1551  00007A                     	ds	1
  1552  00007B                     ??_utoa:
  1553                           
  1554                           ; 1 bytes @ 0x1B
  1555  00007B                     	ds	2
  1556  00007D                     ___fldiv@bexp:
  1557                           	callstack 0
  1558  00007D                     ___flmul@temp:
  1559                           	callstack 0
  1560                           
  1561                           ; 2 bytes @ 0x1D
  1562  00007D                     	ds	1
  1563  00007E                     ___fldiv@aexp:
  1564                           	callstack 0
  1565                           
  1566                           ; 1 bytes @ 0x1E
  1567  00007E                     	ds	1
  1568  00007F                     ?___fladd:
  1569                           	callstack 0
  1570  00007F                     ?_floorf:
  1571                           	callstack 0
  1572  00007F                     ___flge@ff1:
  1573                           	callstack 0
  1574  00007F                     ___fladd@b:
  1575                           	callstack 0
  1576  00007F                     floorf@x:
  1577                           	callstack 0
  1578                           
  1579                           ; 4 bytes @ 0x1F
  1580  00007F                     	ds	4
  1581  000083                     ??_floorf:
  1582  000083                     utoa@p:
  1583                           	callstack 0
  1584  000083                     ___flge@ff2:
  1585                           	callstack 0
  1586  000083                     ___fladd@a:
  1587                           	callstack 0
  1588                           
  1589                           ; 4 bytes @ 0x23
  1590  000083                     	ds	2
  1591  000085                     utoa@w:
  1592                           	callstack 0
  1593                           
  1594                           ; 2 bytes @ 0x25
  1595  000085                     	ds	2
  1596  000087                     ??___fladd:
  1597  000087                     ??___flge:
  1598  000087                     utoa@n:
  1599                           	callstack 0
  1600                           
  1601                           ; 8 bytes @ 0x27
  1602  000087                     	ds	2
  1603  000089                     floorf@m:
  1604                           	callstack 0
  1605                           
  1606                           ; 4 bytes @ 0x29
  1607  000089                     	ds	2
  1608  00008B                     ___fladd@signs:
  1609                           	callstack 0
  1610                           
  1611                           ; 1 bytes @ 0x2B
  1612  00008B                     	ds	1
  1613  00008C                     ___fladd@aexp:
  1614                           	callstack 0
  1615                           
  1616                           ; 1 bytes @ 0x2C
  1617  00008C                     	ds	1
  1618  00008D                     ___fladd@bexp:
  1619                           	callstack 0
  1620  00008D                     floorf@e:
  1621                           	callstack 0
  1622                           
  1623                           ; 2 bytes @ 0x2D
  1624  00008D                     	ds	1
  1625  00008E                     ___fladd@grs:
  1626                           	callstack 0
  1627                           
  1628                           ; 1 bytes @ 0x2E
  1629  00008E                     	ds	1
  1630  00008F                     ?_sqrtf:
  1631                           	callstack 0
  1632  00008F                     ?___flsub:
  1633                           	callstack 0
  1634  00008F                     utoa@i:
  1635                           	callstack 0
  1636  00008F                     ___flsub@b:
  1637                           	callstack 0
  1638  00008F                     floorf@u:
  1639                           	callstack 0
  1640  00008F                     sqrtf@x:
  1641                           	callstack 0
  1642                           
  1643                           ; 4 bytes @ 0x2F
  1644  00008F                     	ds	4
  1645  000093                     ??_sqrtf:
  1646  000093                     ___flsub@a:
  1647                           	callstack 0
  1648                           
  1649                           ; 4 bytes @ 0x33
  1650  000093                     	ds	5
  1651  000098                     sqrtf@s:
  1652                           	callstack 0
  1653                           
  1654                           ; 4 bytes @ 0x38
  1655  000098                     	ds	4
  1656  00009C                     sqrtf@i:
  1657                           	callstack 0
  1658                           
  1659                           ; 4 bytes @ 0x3C
  1660  00009C                     	ds	4
  1661  0000A0                     sqrtf@__xc8_float_word:
  1662                           	callstack 0
  1663                           
  1664                           ; 4 bytes @ 0x40
  1665  0000A0                     	ds	4
  1666  0000A4                     sqrtf@q:
  1667                           	callstack 0
  1668                           
  1669                           ; 4 bytes @ 0x44
  1670  0000A4                     	ds	4
  1671  0000A8                     sqrtf@t:
  1672                           	callstack 0
  1673                           
  1674                           ; 4 bytes @ 0x48
  1675  0000A8                     	ds	4
  1676  0000AC                     sqrtf@z:
  1677                           	callstack 0
  1678                           
  1679                           ; 4 bytes @ 0x4C
  1680  0000AC                     	ds	4
  1681  0000B0                     sqrtf@m:
  1682                           	callstack 0
  1683                           
  1684                           ; 4 bytes @ 0x50
  1685  0000B0                     	ds	4
  1686  0000B4                     sqrtf@r:
  1687                           	callstack 0
  1688                           
  1689                           ; 4 bytes @ 0x54
  1690  0000B4                     	ds	4
  1691  0000B8                     sqrtf@ix:
  1692                           	callstack 0
  1693                           
  1694                           ; 4 bytes @ 0x58
  1695  0000B8                     	ds	4
  1696  0000BC                     ?___fltol:
  1697                           	callstack 0
  1698  0000BC                     ___fltol@f1:
  1699                           	callstack 0
  1700                           
  1701                           ; 4 bytes @ 0x5C
  1702  0000BC                     	ds	4
  1703  0000C0                     ??___fltol:
  1704                           
  1705                           ; 1 bytes @ 0x60
  1706  0000C0                     	ds	4
  1707  0000C4                     ?_efgtoa:
  1708                           	callstack 0
  1709  0000C4                     efgtoa@fp:
  1710                           	callstack 0
  1711                           
  1712                           ; 2 bytes @ 0x64
  1713  0000C4                     	ds	2
  1714  0000C6                     efgtoa@f:
  1715                           	callstack 0
  1716                           
  1717                           ; 4 bytes @ 0x66
  1718  0000C6                     	ds	4
  1719  0000CA                     efgtoa@c:
  1720                           	callstack 0
  1721                           
  1722                           ; 1 bytes @ 0x6A
  1723  0000CA                     	ds	1
  1724  0000CB                     ??_efgtoa:
  1725                           
  1726                           ; 1 bytes @ 0x6B
  1727  0000CB                     	ds	5
  1728  0000D0                     ?_vfpfcnvrt:
  1729                           	callstack 0
  1730  0000D0                     vfpfcnvrt@fp:
  1731                           	callstack 0
  1732                           
  1733                           ; 2 bytes @ 0x70
  1734  0000D0                     	ds	2
  1735  0000D2                     vfpfcnvrt@fmt:
  1736                           	callstack 0
  1737                           
  1738                           ; 1 bytes @ 0x72
  1739  0000D2                     	ds	1
  1740  0000D3                     vfpfcnvrt@ap:
  1741                           	callstack 0
  1742                           
  1743                           ; 2 bytes @ 0x73
  1744  0000D3                     	ds	2
  1745  0000D5                     ??_vfpfcnvrt:
  1746                           
  1747                           ; 1 bytes @ 0x75
  1748  0000D5                     	ds	4
  1749  0000D9                     vfpfcnvrt@llu:
  1750                           	callstack 0
  1751                           
  1752                           ; 8 bytes @ 0x79
  1753  0000D9                     	ds	8
  1754  0000E1                     vfpfcnvrt@cp:
  1755                           	callstack 0
  1756                           
  1757                           ; 2 bytes @ 0x81
  1758  0000E1                     	ds	2
  1759  0000E3                     vfpfcnvrt@done:
  1760                           	callstack 0
  1761                           
  1762                           ; 2 bytes @ 0x83
  1763  0000E3                     	ds	2
  1764  0000E5                     _vfpfcnvrt$2452:
  1765                           	callstack 0
  1766                           
  1767                           ; 2 bytes @ 0x85
  1768  0000E5                     	ds	2
  1769  0000E7                     vfpfcnvrt@f:
  1770                           	callstack 0
  1771                           
  1772                           ; 4 bytes @ 0x87
  1773  0000E7                     	ds	4
  1774  0000EB                     vfpfcnvrt@ct:
  1775                           	callstack 0
  1776                           
  1777                           ; 3 bytes @ 0x8B
  1778  0000EB                     	ds	3
  1779  0000EE                     vfpfcnvrt@c:
  1780                           	callstack 0
  1781                           
  1782                           ; 1 bytes @ 0x8E
  1783  0000EE                     	ds	1
  1784  0000EF                     ?_vfprintf:
  1785                           	callstack 0
  1786  0000EF                     vfprintf@fp:
  1787                           	callstack 0
  1788                           
  1789                           ; 2 bytes @ 0x8F
  1790  0000EF                     	ds	2
  1791  0000F1                     vfprintf@fmt:
  1792                           	callstack 0
  1793                           
  1794                           ; 2 bytes @ 0x91
  1795  0000F1                     	ds	2
  1796  0000F3                     vfprintf@ap:
  1797                           	callstack 0
  1798                           
  1799                           ; 2 bytes @ 0x93
  1800  0000F3                     	ds	2
  1801  0000F5                     vfprintf@cfmt:
  1802                           	callstack 0
  1803                           
  1804                           ; 2 bytes @ 0x95
  1805  0000F5                     	ds	2
  1806  0000F7                     show_lcd_main@pwr_dsp:
  1807                           	callstack 0
  1808                           
  1809                           ; 2 bytes @ 0x97
  1810  0000F7                     	ds	2
  1811  0000F9                     ??_main:
  1812                           
  1813                           ; 1 bytes @ 0x99
  1814  0000F9                     	ds	4
  1815                           
  1816                           	psect	cstackCOMRAM
  1817  000001                     __pcstackCOMRAM:
  1818                           	callstack 0
  1819  000001                     ?i2___wmul:
  1820                           	callstack 0
  1821  000001                     ?i2___lmul:
  1822                           	callstack 0
  1823  000001                     i2___wmul@multiplier:
  1824                           	callstack 0
  1825  000001                     i2___lmul@multiplier:
  1826                           	callstack 0
  1827                           
  1828                           ; 4 bytes @ 0x0
  1829  000001                     	ds	2
  1830  000003                     i2___wmul@multiplicand:
  1831                           	callstack 0
  1832                           
  1833                           ; 2 bytes @ 0x2
  1834  000003                     	ds	2
  1835  000005                     i2___wmul@product:
  1836                           	callstack 0
  1837  000005                     i2___lmul@multiplicand:
  1838                           	callstack 0
  1839                           
  1840                           ; 4 bytes @ 0x4
  1841  000005                     	ds	4
  1842  000009                     i2___lmul@product:
  1843                           	callstack 0
  1844                           
  1845                           ; 4 bytes @ 0x8
  1846  000009                     	ds	4
  1847  00000D                     ??_Inter_hi:
  1848                           
  1849                           ; 1 bytes @ 0xC
  1850  00000D                     	ds	4
  1851  000011                     _Inter_hi$2885:
  1852                           	callstack 0
  1853                           
  1854                           ; 2 bytes @ 0x10
  1855  000011                     	ds	2
  1856  000013                     Inter_hi@lev:
  1857                           	callstack 0
  1858                           
  1859                           ; 2 bytes @ 0x12
  1860  000013                     	ds	2
  1861  000015                     Inter_hi@pulse:
  1862                           	callstack 0
  1863                           
  1864                           ; 2 bytes @ 0x14
  1865  000015                     	ds	2
  1866  000017                     ??_Inter_lo:
  1867                           
  1868                           ; 1 bytes @ 0x16
  1869  000017                     	ds	3
  1870  00001A                     ??_lcdNibble:
  1871  00001A                     ??_ow_reset:
  1872  00001A                     ??_read_byte:
  1873  00001A                     ?_strlen:
  1874                           	callstack 0
  1875  00001A                     ?___fpclassifyf:
  1876                           	callstack 0
  1877  00001A                     ?_isupper:
  1878                           	callstack 0
  1879  00001A                     ?_isdigit:
  1880                           	callstack 0
  1881  00001A                     ?_strncmp:
  1882                           	callstack 0
  1883  00001A                     ?_isspace:
  1884                           	callstack 0
  1885  00001A                     ?___awdiv:
  1886                           	callstack 0
  1887  00001A                     ?___awmod:
  1888                           	callstack 0
  1889  00001A                     ?___lwdiv:
  1890                           	callstack 0
  1891  00001A                     ?_nanf:
  1892                           	callstack 0
  1893  00001A                     ?___lmul:
  1894                           	callstack 0
  1895  00001A                     ?___lldiv:
  1896                           	callstack 0
  1897  00001A                     ?___flneg:
  1898                           	callstack 0
  1899  00001A                     ?___xxtofl:
  1900                           	callstack 0
  1901  00001A                     write_eep@data:
  1902                           	callstack 0
  1903  00001A                     putch@data:
  1904                           	callstack 0
  1905  00001A                     key_press@key:
  1906                           	callstack 0
  1907  00001A                     key_GetKey@key:
  1908                           	callstack 0
  1909  00001A                     write_bit@bitval:
  1910                           	callstack 0
  1911  00001A                     ___lomod@counter:
  1912                           	callstack 0
  1913  00001A                     read_eep@address:
  1914                           	callstack 0
  1915  00001A                     ds18b20_crc8@data_in:
  1916                           	callstack 0
  1917  00001A                     ___awdiv@dividend:
  1918                           	callstack 0
  1919  00001A                     ___awmod@dividend:
  1920                           	callstack 0
  1921  00001A                     ___lwdiv@dividend:
  1922                           	callstack 0
  1923  00001A                     isdigit@c:
  1924                           	callstack 0
  1925  00001A                     isspace@c:
  1926                           	callstack 0
  1927  00001A                     isupper@c:
  1928                           	callstack 0
  1929  00001A                     nanf@s:
  1930                           	callstack 0
  1931  00001A                     strcpy@dest:
  1932                           	callstack 0
  1933  00001A                     strlen@s:
  1934                           	callstack 0
  1935  00001A                     strncmp@_l:
  1936                           	callstack 0
  1937  00001A                     ___lmul@multiplier:
  1938                           	callstack 0
  1939  00001A                     ___lldiv@dividend:
  1940                           	callstack 0
  1941  00001A                     ___fleq@ff1:
  1942                           	callstack 0
  1943  00001A                     ___flneg@f1:
  1944                           	callstack 0
  1945  00001A                     ___xxtofl@val:
  1946                           	callstack 0
  1947  00001A                     ___fpclassifyf@x:
  1948                           	callstack 0
  1949  00001A                     ___lodiv@quotient:
  1950                           	callstack 0
  1951                           
  1952                           ; 8 bytes @ 0x19
  1953  00001A                     	ds	1
  1954  00001B                     ??_write_byte:
  1955  00001B                     write_eep@address:
  1956                           	callstack 0
  1957  00001B                     lcdNibble@nibble:
  1958                           	callstack 0
  1959  00001B                     ow_reset@presence:
  1960                           	callstack 0
  1961  00001B                     fputc@c:
  1962                           	callstack 0
  1963                           
  1964                           ; 2 bytes @ 0x1A
  1965  00001B                     	ds	1
  1966  00001C                     ??_isupper:
  1967  00001C                     ??_isdigit:
  1968  00001C                     ??_isspace:
  1969  00001C                     lcdWrite@type:
  1970                           	callstack 0
  1971  00001C                     ds18b20_crc8@num_bytes:
  1972                           	callstack 0
  1973  00001C                     read_byte@val:
  1974                           	callstack 0
  1975  00001C                     ___awdiv@divisor:
  1976                           	callstack 0
  1977  00001C                     ___awmod@divisor:
  1978                           	callstack 0
  1979  00001C                     ___lwdiv@divisor:
  1980                           	callstack 0
  1981  00001C                     strcpy@src:
  1982                           	callstack 0
  1983  00001C                     strlen@a:
  1984                           	callstack 0
  1985  00001C                     strncmp@_r:
  1986                           	callstack 0
  1987                           
  1988                           ; 2 bytes @ 0x1B
  1989  00001C                     	ds	1
  1990  00001D                     lcdWrite@byte:
  1991                           	callstack 0
  1992  00001D                     ds18b20_crc8@bit_counter:
  1993                           	callstack 0
  1994  00001D                     read_byte@i:
  1995                           	callstack 0
  1996  00001D                     write_byte@val:
  1997                           	callstack 0
  1998  00001D                     fputc@fp:
  1999                           	callstack 0
  2000                           
  2001                           ; 2 bytes @ 0x1C
  2002  00001D                     	ds	1
  2003  00001E                     ??_clearLCD:
  2004  00001E                     ??___fpclassifyf:
  2005  00001E                     ??_strcpy:
  2006  00001E                     ??___xxtofl:
  2007  00001E                     lcd_gotoxy@y:
  2008                           	callstack 0
  2009  00001E                     lcd_putc@c:
  2010                           	callstack 0
  2011  00001E                     ds18b20_crc8@data:
  2012                           	callstack 0
  2013  00001E                     write_byte@temp:
  2014                           	callstack 0
  2015  00001E                     ___awdiv@counter:
  2016                           	callstack 0
  2017  00001E                     ___awmod@counter:
  2018                           	callstack 0
  2019  00001E                     ___lwdiv@counter:
  2020                           	callstack 0
  2021  00001E                     cgrom_char@symbol:
  2022                           	callstack 0
  2023  00001E                     strncmp@n:
  2024                           	callstack 0
  2025  00001E                     ___lmul@multiplicand:
  2026                           	callstack 0
  2027  00001E                     ___lldiv@divisor:
  2028                           	callstack 0
  2029  00001E                     ___fleq@ff2:
  2030                           	callstack 0
  2031  00001E                     nanf@u:
  2032                           	callstack 0
  2033                           
  2034                           ; 4 bytes @ 0x1D
  2035  00001E                     	ds	1
  2036  00001F                     ??_fputc:
  2037  00001F                     ??_initLCD:
  2038  00001F                     ??_lcd_gotoxy:
  2039  00001F                     ds18b20_crc8@feedback_bit:
  2040                           	callstack 0
  2041  00001F                     write_byte@i:
  2042                           	callstack 0
  2043  00001F                     ___awdiv@sign:
  2044                           	callstack 0
  2045  00001F                     ___awmod@sign:
  2046                           	callstack 0
  2047  00001F                     ___lwdiv@quotient:
  2048                           	callstack 0
  2049                           
  2050                           ; 2 bytes @ 0x1E
  2051  00001F                     	ds	1
  2052  000020                     ??_strncmp:
  2053  000020                     ?_tolower:
  2054                           	callstack 0
  2055  000020                     cgrom_char@address:
  2056                           	callstack 0
  2057  000020                     ds18b20_crc8@loop_count:
  2058                           	callstack 0
  2059  000020                     _isspace$2517:
  2060                           	callstack 0
  2061  000020                     ___awdiv@quotient:
  2062                           	callstack 0
  2063  000020                     strcpy@s:
  2064                           	callstack 0
  2065  000020                     tolower@c:
  2066                           	callstack 0
  2067                           
  2068                           ; 2 bytes @ 0x1F
  2069  000020                     	ds	1
  2070  000021                     ?___lwmod:
  2071                           	callstack 0
  2072  000021                     lcd_gotoxy@x:
  2073                           	callstack 0
  2074  000021                     cgrom_char@i:
  2075                           	callstack 0
  2076  000021                     ds18b20_crc8@crc:
  2077                           	callstack 0
  2078  000021                     ___lwmod@dividend:
  2079                           	callstack 0
  2080  000021                     strncmp@l:
  2081                           	callstack 0
  2082                           
  2083                           ; 2 bytes @ 0x20
  2084  000021                     	ds	1
  2085  000022                     ??_init_cpu:
  2086  000022                     ??_readTemp_Single:
  2087  000022                     lcd_gotoxy@address:
  2088                           	callstack 0
  2089  000022                     ___fltol@sign1:
  2090                           	callstack 0
  2091  000022                     ___lodiv@counter:
  2092                           	callstack 0
  2093  000022                     strcpy@d:
  2094                           	callstack 0
  2095                           
  2096                           ; 2 bytes @ 0x21
  2097  000022                     	ds	1
  2098  000023                     ___fltol@exp1:
  2099                           	callstack 0
  2100  000023                     lcdPrint@t:
  2101                           	callstack 0
  2102  000023                     ___lwmod@divisor:
  2103                           	callstack 0
  2104  000023                     strncmp@r:
  2105                           	callstack 0
  2106                           
  2107                           ; 2 bytes @ 0x22
  2108  000023                     	ds	1
  2109  000024                     ??_pad:
  2110  000024                     ??_ctoa:
  2111  000024                     ??_stoa:
  2112                           
  2113                           ; 1 bytes @ 0x23
  2114  000024                     	ds	1
  2115  000025                     
  2116                           ; 1 bytes @ 0x24
  2117 ;;
  2118 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2119 ;;
  2120 ;; *************** function _main *****************
  2121 ;; Defined at:
  2122 ;;		line 87 in file "main.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 3F/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2136 ;;      Params:         0       0       0       0       0       0       0
  2137 ;;      Locals:         0       0       6       0       0       0       0
  2138 ;;      Temps:          0       4       0       0       0       0       0
  2139 ;;      Totals:         0       4       6       0       0       0       0
  2140 ;;Total ram usage:       10 bytes
  2141 ;; Hardware stack levels required when called: 12
  2142 ;; This function calls:
  2143 ;;		_EncPoll
  2144 ;;		___fladd
  2145 ;;		___fldiv
  2146 ;;		___flmul
  2147 ;;		___fltol
  2148 ;;		___lldiv
  2149 ;;		___lmul
  2150 ;;		___lwdiv
  2151 ;;		___xxtofl
  2152 ;;		_calc_power
  2153 ;;		_clearLCD
  2154 ;;		_init_cpu
  2155 ;;		_key_GetKey
  2156 ;;		_key_press
  2157 ;;		_lcdPrint
  2158 ;;		_lcd_gotoxy
  2159 ;;		_lcd_putc
  2160 ;;		_readTemp_Single
  2161 ;;		_read_eep
  2162 ;;		_show_lcd_main
  2163 ;;		_sprintf
  2164 ;;		_sqrtf
  2165 ;;		_write_eep
  2166 ;; This function is called by:
  2167 ;;		Startup code after reset
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text0
  2172  0000B2                     __ptext0:
  2173                           	callstack 0
  2174  0000B2                     _main:
  2175                           	callstack 19
  2176                           
  2177                           ;main.c: 89:     static __bit whole_dec = 0;;main.c: 90:     static __bit alarm_enable =
      +                           0;;main.c: 91:     static uint8_t powerOFF = 0;;main.c: 94:     init_cpu();
  2178                           
  2179                           ;incstack = 0
  2180  0000B2  EC0A  F014         	call	_init_cpu	;wreg free
  2181                           
  2182                           ;main.c: 95:     EncData = power;
  2183  0000B6  ECC0  F004         	call	PL134	;call to abstracted procedure
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;main.c: 96:     _delay((unsigned long)((10)*(64000000/4000.0)));
  2187  0000BA  0ED0               	movlw	208
  2188  0000BC  0100               	movlb	0	; () banked
  2189  0000BE  6FF9               	movwf	??_main& (0+255),b
  2190  0000C0  0EC9               	movlw	201
  2191  0000C2                     u12147:
  2192  0000C2  2EE8               	decfsz	wreg,f,c
  2193  0000C4  D7FE               	bra	u12147
  2194  0000C6  2FF9               	decfsz	??_main& (0+255),f,b
  2195  0000C8  D7FC               	bra	u12147
  2196  0000CA  F000 F000          	nop2	
  2197                           
  2198                           ;main.c: 99:     lcd_gotoxy(1, 1);
  2199  0000CE  0E01               	movlw	1
  2200  0000D0  6E1E               	movwf	lcd_gotoxy@y^0,c
  2201  0000D2  EC0D  F01D         	call	_lcd_gotoxy
  2202                           
  2203                           ;main.c: 100:     lcdPrint("---BRESENHAM STAB---");
  2204  0000D6  0EF0               	movlw	low STR_1
  2205  0000D8  6E23               	movwf	lcdPrint@t^0,c
  2206  0000DA  0E7E               	movlw	high STR_1
  2207  0000DC  6E24               	movwf	(lcdPrint@t+1)^0,c
  2208  0000DE  ECD9  F016         	call	_lcdPrint	;wreg free
  2209                           
  2210                           ;main.c: 101:     lcd_gotoxy(1, 2);
  2211  0000E2  ECBD  F004         	call	PL132	;call to abstracted procedure
  2212  0000E6  EC0D  F01D         	call	_lcd_gotoxy
  2213                           
  2214                           ;main.c: 102:     sprintf(TxtBuf, "(c)Ivan_fd v%s", "11.07.22");
  2215  0000EA  EC09  F00C         	call	PL30	;call to abstracted procedure
  2216  0000EE  0E62               	movlw	low STR_2
  2217  0000F0  6FD7               	movwf	sprintf@fmt& (0+255),b
  2218  0000F2  0E7F               	movlw	high STR_2
  2219  0000F4  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  2220  0000F6  0EC9               	movlw	low STR_3
  2221  0000F8  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  2222  0000FA  0E7F               	movlw	high STR_3
  2223  0000FC  6FDA               	movwf	(?_sprintf+5)& (0+255),b
  2224  0000FE  ECEA  F01C         	call	_sprintf	;wreg free
  2225                           
  2226                           ; BSR set to: 1
  2227                           ;main.c: 103:     lcdPrint(TxtBuf);
  2228  000102  EC0F  F00C         	call	PL32	;call to abstracted procedure
  2229  000106  ECD9  F016         	call	_lcdPrint	;wreg free
  2230                           
  2231                           ;main.c: 104:     lcd_gotoxy(1, 3);
  2232  00010A  ECBA  F004         	call	PL126	;call to abstracted procedure
  2233  00010E  EC0D  F01D         	call	_lcd_gotoxy
  2234                           
  2235                           ;main.c: 105:     sprintf(TxtBuf, "%s %s", compile_date, compile_time);
  2236  000112  EC09  F00C         	call	PL30	;call to abstracted procedure
  2237  000116  0EDB               	movlw	low STR_4
  2238  000118  6FD7               	movwf	sprintf@fmt& (0+255),b
  2239  00011A  0E7F               	movlw	high STR_4
  2240  00011C  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  2241  00011E  0E0D               	movlw	low _compile_date
  2242  000120  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  2243  000122  0E7E               	movlw	high _compile_date
  2244  000124  6FDA               	movwf	(?_sprintf+5)& (0+255),b
  2245  000126  0E19               	movlw	low _compile_time
  2246  000128  6FDB               	movwf	(?_sprintf+6)& (0+255),b
  2247  00012A  0E7E               	movlw	high _compile_time
  2248  00012C  6FDC               	movwf	(?_sprintf+7)& (0+255),b
  2249  00012E  ECEA  F01C         	call	_sprintf	;wreg free
  2250                           
  2251                           ; BSR set to: 1
  2252                           ;main.c: 106:     lcdPrint(TxtBuf);
  2253  000132  EC0F  F00C         	call	PL32	;call to abstracted procedure
  2254  000136  ECD9  F016         	call	_lcdPrint	;wreg free
  2255                           
  2256                           ;main.c: 109:     _delay((unsigned long)((2000)*(64000000/4000.0)));
  2257  00013A  0EA3               	movlw	163
  2258  00013C  0100               	movlb	0	; () banked
  2259  00013E  6FFA               	movwf	(??_main+1)& (0+255),b
  2260  000140  0E57               	movlw	87
  2261  000142  6FF9               	movwf	??_main& (0+255),b
  2262  000144  0E02               	movlw	2
  2263  000146                     u12157:
  2264  000146  2EE8               	decfsz	wreg,f,c
  2265  000148  D7FE               	bra	u12157
  2266  00014A  2FF9               	decfsz	??_main& (0+255),f,b
  2267  00014C  D7FC               	bra	u12157
  2268  00014E  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2269  000150  D7FA               	bra	u12157
  2270  000152  F000               	nop	
  2271  000154  0004               	clrwdt		;# 
  2272                           
  2273                           ;main.c: 111:     clearLCD();
  2274  000156  EC3A  F01F         	call	_clearLCD	;wreg free
  2275                           
  2276                           ;main.c: 112:     AlarmTemp = read_eep(3);
  2277  00015A  6A1B               	clrf	(read_eep@address+1)^0,c
  2278  00015C  0E03               	movlw	3
  2279  00015E  6E1A               	movwf	read_eep@address^0,c
  2280  000160  EC46  F01F         	call	_read_eep	;wreg free
  2281  000164  0101               	movlb	1	; () banked
  2282  000166  6F27               	movwf	_AlarmTemp& (0+255),b
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;main.c: 113:     TempEn = read_eep(4);
  2286  000168  6A1B               	clrf	(read_eep@address+1)^0,c
  2287  00016A  0E04               	movlw	4
  2288  00016C  6E1A               	movwf	read_eep@address^0,c
  2289  00016E  EC46  F01F         	call	_read_eep	;wreg free
  2290  000172  0101               	movlb	1	; () banked
  2291  000174  6F25               	movwf	_TempEn& (0+255),b
  2292                           
  2293                           ; BSR set to: 1
  2294                           ;main.c: 114:     power = read_eep(2);
  2295  000176  6A1B               	clrf	(read_eep@address+1)^0,c
  2296  000178  0E02               	movlw	2
  2297  00017A  6E1A               	movwf	read_eep@address^0,c
  2298  00017C  EC46  F01F         	call	_read_eep	;wreg free
  2299  000180  0101               	movlb	1	; () banked
  2300  000182  6F21               	movwf	_power& (0+255),b
  2301                           
  2302                           ; BSR set to: 1
  2303                           ;main.c: 115:     EncData = power;
  2304  000184  C121  F116         	movff	_power,_EncData
  2305  000188  6B17               	clrf	(_EncData+1)& (0+255),b
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;main.c: 116:     r_whole = read_eep(0);
  2309  00018A  6A1B               	clrf	(read_eep@address+1)^0,c
  2310  00018C  6A1A               	clrf	read_eep@address^0,c
  2311  00018E  EC46  F01F         	call	_read_eep	;wreg free
  2312  000192  0101               	movlb	1	; () banked
  2313  000194  6F1F               	movwf	_r_whole& (0+255),b
  2314                           
  2315                           ; BSR set to: 1
  2316                           ;main.c: 117:     r_dec = read_eep(1);
  2317  000196  6A1B               	clrf	(read_eep@address+1)^0,c
  2318  000198  0E01               	movlw	1
  2319  00019A  6E1A               	movwf	read_eep@address^0,c
  2320  00019C  EC46  F01F         	call	_read_eep	;wreg free
  2321  0001A0  0101               	movlb	1	; () banked
  2322  0001A2  6F1E               	movwf	_r_dec& (0+255),b
  2323                           
  2324                           ; BSR set to: 1
  2325                           ;main.c: 118:     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  2326  0001A4  DBA2               	call	PL20	;call to abstracted procedure
  2327  0001A6  EC04  F01C         	call	___lmul	;wreg free
  2328  0001AA  DBB8               	call	PL28	;call to abstracted procedure
  2329  0001AC                     l515:
  2330  0001AC  0004               	clrwdt		;# 
  2331                           
  2332                           ;main.c: 129:         if (read_key) {
  2333  0001AE  0101               	movlb	1	; () banked
  2334  0001B0  512A               	movf	_read_key& (0+255),w,b
  2335  0001B2  E003               	bz	l9892
  2336                           
  2337                           ; BSR set to: 1
  2338                           ;main.c: 130:             key_press();
  2339  0001B4  EC8D  F01D         	call	_key_press	;wreg free
  2340                           
  2341                           ; BSR set to: 1
  2342                           ;main.c: 131:             read_key = 0;
  2343  0001B8  6B2A               	clrf	_read_key& (0+255),b
  2344  0001BA                     l9892:
  2345                           
  2346                           ; BSR set to: 1
  2347                           ;main.c: 133:         pressed_key = key_GetKey();
  2348  0001BA  EC5B  F01F         	call	_key_GetKey	;wreg free
  2349  0001BE  6F22               	movwf	_pressed_key& (0+255),b
  2350                           
  2351                           ; BSR set to: 1
  2352                           ;main.c: 137:             isTempReady = readTemp_Single(&temperature, &minus, &time_flag
      +                          , &timer_val);
  2353  0001C0  0E9D               	movlw	low _temperature
  2354  0001C2  0100               	movlb	0	; () banked
  2355  0001C4  6F60               	movwf	readTemp_Single@buf& (0+255),b
  2356  0001C6  0E01               	movlw	high _temperature
  2357  0001C8  6F61               	movwf	(readTemp_Single@buf+1)& (0+255),b
  2358  0001CA  0EA1               	movlw	low _minus
  2359  0001CC  6F62               	movwf	readTemp_Single@minus& (0+255),b
  2360  0001CE  0E01               	movlw	high _minus
  2361  0001D0  6F63               	movwf	(readTemp_Single@minus+1)& (0+255),b
  2362  0001D2  0EA2               	movlw	low _time_flag
  2363  0001D4  6F64               	movwf	readTemp_Single@time_flag& (0+255),b
  2364  0001D6  0E01               	movlw	high _time_flag
  2365  0001D8  6F65               	movwf	(readTemp_Single@time_flag+1)& (0+255),b
  2366  0001DA  0E9F               	movlw	low _timer_val
  2367  0001DC  6F66               	movwf	readTemp_Single@timer_val& (0+255),b
  2368  0001DE  0E01               	movlw	high _timer_val
  2369  0001E0  6F67               	movwf	(readTemp_Single@timer_val+1)& (0+255),b
  2370  0001E2  ECA7  F014         	call	_readTemp_Single	;wreg free
  2371  0001E6  0101               	movlb	1	; () banked
  2372  0001E8  6F23               	movwf	_isTempReady& (0+255),b
  2373                           
  2374                           ; BSR set to: 1
  2375                           ;main.c: 139:         if (TempEn) {
  2376  0001EA  5125               	movf	_TempEn& (0+255),w,b
  2377  0001EC  E016               	bz	l9902
  2378                           
  2379                           ; BSR set to: 1
  2380                           ;main.c: 140:             if ((temperature / 10) >= AlarmTemp) {
  2381  0001EE  5127               	movf	_AlarmTemp& (0+255),w,b
  2382  0001F0  0100               	movlb	0	; () banked
  2383  0001F2  6FF9               	movwf	??_main& (0+255),b
  2384  0001F4  6BFA               	clrf	(??_main+1)& (0+255),b
  2385  0001F6  C19D  F01A         	movff	_temperature,___lwdiv@dividend
  2386  0001FA  C19E  F01B         	movff	_temperature+1,___lwdiv@dividend+1
  2387  0001FE  EC06  F014         	call	PL210	;call to abstracted procedure
  2388  000202  ECC5  F01C         	call	___lwdiv	;wreg free
  2389  000206  0100               	movlb	0	; () banked
  2390  000208  51F9               	movf	??_main& (0+255),w,b
  2391  00020A  5C1A               	subwf	?___lwdiv^0,w,c
  2392  00020C  51FA               	movf	(??_main+1)& (0+255),w,b
  2393  00020E  581B               	subwfb	(?___lwdiv+1)^0,w,c
  2394  000210  E304               	bnc	l9902
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 141:                 powerOFF = 1;
  2398  000212  0E01               	movlw	1
  2399  000214  0101               	movlb	1	; () banked
  2400  000216  6F1C               	movwf	main@powerOFF& (0+255),b
  2401                           
  2402                           ;main.c: 142:                 sound_enable = 1;
  2403  000218  6F29               	movwf	_sound_enable& (0+255),b
  2404  00021A                     l9902:
  2405                           
  2406                           ;main.c: 146:         if (isTempReady == 1)
  2407  00021A  0101               	movlb	1	; () banked
  2408  00021C  0523               	decf	_isTempReady& (0+255),w,b
  2409  00021E  E102               	bnz	l9906
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 147:             isTemp = 1;
  2413  000220  0E01               	movlw	1
  2414  000222  6F28               	movwf	_isTemp& (0+255),b
  2415  000224                     l9906:
  2416                           
  2417                           ; BSR set to: 1
  2418                           ;main.c: 148:         if (isTempReady == 3)
  2419  000224  0E03               	movlw	3
  2420  000226  1923               	xorwf	_isTempReady& (0+255),w,b
  2421  000228  E102               	bnz	l9910
  2422                           
  2423                           ; BSR set to: 1
  2424                           ;main.c: 149:             isTemp = 3;
  2425  00022A  0E03               	movlw	3
  2426  00022C  6F28               	movwf	_isTemp& (0+255),b
  2427  00022E                     l9910:
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;main.c: 152:         count_enc += EncPoll();
  2431  00022E  EC67  F01E         	call	_EncPoll	;wreg free
  2432  000232  2720               	addwf	_count_enc& (0+255),f,b
  2433                           
  2434                           ; BSR set to: 1
  2435                           ;main.c: 153:         if (((count_enc % 2) == 0) && !(count_enc == 0)) {
  2436  000234  B120               	btfsc	_count_enc& (0+255),0,b
  2437  000236  D01B               	goto	l9936
  2438                           
  2439                           ; BSR set to: 1
  2440  000238  5120               	movf	_count_enc& (0+255),w,b
  2441  00023A  E019               	bz	l9936
  2442                           
  2443                           ; BSR set to: 1
  2444                           ;main.c: 154:             if ((count_enc & (1 << (7)))) {
  2445  00023C  AF20               	btfss	_count_enc& (0+255),7,b
  2446  00023E  D00A               	goto	l522
  2447                           
  2448                           ; BSR set to: 1
  2449                           ;main.c: 155:                 if (inc_data)
  2450  000240  A444               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2451  000242  D004               	goto	l9922
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;main.c: 156:                     EncData -= 10;
  2455  000244  0EF6               	movlw	246
  2456  000246  2716               	addwf	_EncData& (0+255),f,b
  2457  000248  0EFF               	movlw	255
  2458  00024A  D009               	goto	L1
  2459  00024C                     l9922:
  2460                           
  2461                           ; BSR set to: 1
  2462                           ;main.c: 158:                     EncData--;
  2463  00024C  0716               	decf	_EncData& (0+255),f,b
  2464  00024E  A0D8               	btfss	status,0,c
  2465  000250  0717               	decf	(_EncData+1)& (0+255),f,b
  2466  000252  D009               	goto	l9928
  2467  000254                     l522:
  2468                           
  2469                           ; BSR set to: 1
  2470                           ;main.c: 160:                 if (inc_data)
  2471  000254  A444               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2472  000256  D005               	goto	l9926
  2473                           
  2474                           ; BSR set to: 1
  2475                           ;main.c: 161:                     EncData += 10;
  2476  000258  0E0A               	movlw	10
  2477  00025A  2716               	addwf	_EncData& (0+255),f,b
  2478  00025C  0E00               	movlw	0
  2479  00025E                     L1:
  2480  00025E  2317               	addwfc	(_EncData+1)& (0+255),f,b
  2481  000260  D002               	goto	l9928
  2482  000262                     l9926:
  2483                           
  2484                           ; BSR set to: 1
  2485                           ;main.c: 163:                     EncData++;
  2486  000262  4B16               	infsnz	_EncData& (0+255),f,b
  2487  000264  2B17               	incf	(_EncData+1)& (0+255),f,b
  2488  000266                     l9928:
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;main.c: 165:             count_enc = 0;
  2492  000266  6B20               	clrf	_count_enc& (0+255),b
  2493                           
  2494                           ; BSR set to: 1
  2495                           ;main.c: 166:             is_power = 0;
  2496  000268  9A44               	bcf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2497                           
  2498                           ; BSR set to: 1
  2499                           ;main.c: 167:             show_tp = 1;
  2500  00026A  8844               	bsf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  2501                           
  2502                           ; BSR set to: 1
  2503                           ;main.c: 168:             tick_t1_1 = 0;
  2504  00026C  6B2B               	clrf	_tick_t1_1& (0+255),b
  2505  00026E                     l9936:
  2506                           
  2507                           ; BSR set to: 1
  2508                           ;main.c: 172:         if (!getU && (zero == 50)) {
  2509  00026E  5040               	movf	_getU^0,w,c
  2510  000270  E001 D323          	bnz	l10252
  2511                           
  2512                           ; BSR set to: 1
  2513  000274  0E32               	movlw	50
  2514  000276  1841               	xorwf	_zero^0,w,c
  2515  000278  E001 D31F          	bnz	l10252
  2516                           
  2517                           ; BSR set to: 1
  2518                           ;main.c: 175:             sqrtU_sum = U_summ / cnt_adc;
  2519  00027C  C110  F01A         	movff	_U_summ,___lldiv@dividend
  2520  000280  C111  F01B         	movff	_U_summ+1,___lldiv@dividend+1
  2521  000284  C112  F01C         	movff	_U_summ+2,___lldiv@dividend+2
  2522  000288  C113  F01D         	movff	_U_summ+3,___lldiv@dividend+3
  2523  00028C  C11A  F01E         	movff	_cnt_adc,___lldiv@divisor
  2524  000290  C11B  F01F         	movff	_cnt_adc+1,___lldiv@divisor+1
  2525  000294  6A20               	clrf	(___lldiv@divisor+2)^0,c
  2526  000296  6A21               	clrf	(___lldiv@divisor+3)^0,c
  2527  000298  EC10  F01B         	call	___lldiv	;wreg free
  2528  00029C  C01A  F10C         	movff	?___lldiv,_sqrtU_sum
  2529  0002A0  C01B  F10D         	movff	?___lldiv+1,_sqrtU_sum+1
  2530  0002A4  C01C  F10E         	movff	?___lldiv+2,_sqrtU_sum+2
  2531  0002A8  C01D  F10F         	movff	?___lldiv+3,_sqrtU_sum+3
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 176:             U_real = sqrtf(sqrtU_sum);
  2535  0002AC  C10C  F01A         	movff	_sqrtU_sum,___xxtofl@val
  2536  0002B0  C10D  F01B         	movff	_sqrtU_sum+1,___xxtofl@val+1
  2537  0002B4  C10E  F01C         	movff	_sqrtU_sum+2,___xxtofl@val+2
  2538  0002B8  C10F  F01D         	movff	_sqrtU_sum+3,___xxtofl@val+3
  2539  0002BC  0E00               	movlw	0
  2540  0002BE  EC52  F016         	call	___xxtofl
  2541  0002C2  C01A  F08F         	movff	?___xxtofl,sqrtf@x
  2542  0002C6  C01B  F090         	movff	?___xxtofl+1,sqrtf@x+1
  2543  0002CA  C01C  F091         	movff	?___xxtofl+2,sqrtf@x+2
  2544  0002CE  C01D  F092         	movff	?___xxtofl+3,sqrtf@x+3
  2545  0002D2  EC46  F00C         	call	_sqrtf	;wreg free
  2546  0002D6  C08F  F0BC         	movff	?_sqrtf,___fltol@f1
  2547  0002DA  C090  F0BD         	movff	?_sqrtf+1,___fltol@f1+1
  2548  0002DE  C091  F0BE         	movff	?_sqrtf+2,___fltol@f1+2
  2549  0002E2  C092  F0BF         	movff	?_sqrtf+3,___fltol@f1+3
  2550  0002E6  EC28  F019         	call	___fltol	;wreg free
  2551  0002EA  C0BC  F19B         	movff	?___fltol,_U_real
  2552  0002EE  C0BD  F19C         	movff	?___fltol+1,_U_real+1
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 177:             U_real = U_real / 2;
  2556  0002F2  90D8               	bcf	status,0,c
  2557  0002F4  0101               	movlb	1	; () banked
  2558  0002F6  319C               	rrcf	(_U_real+1)& (0+255),w,b
  2559  0002F8  0100               	movlb	0	; () banked
  2560  0002FA  6FF9               	movwf	??_main& (0+255),b
  2561  0002FC  0101               	movlb	1	; () banked
  2562  0002FE  319B               	rrcf	_U_real& (0+255),w,b
  2563  000300  6F9B               	movwf	_U_real& (0+255),b
  2564  000302  C0F9  F19C         	movff	??_main,_U_real+1
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;main.c: 178:             coef = 220.0 / U_real;
  2568  000306  0100               	movlb	0	; () banked
  2569  000308  6B66               	clrf	___fldiv@b& (0+255),b
  2570  00030A  6B67               	clrf	(___fldiv@b+1)& (0+255),b
  2571  00030C  0E5C               	movlw	92
  2572  00030E  6F68               	movwf	(___fldiv@b+2)& (0+255),b
  2573  000310  0E43               	movlw	67
  2574  000312  6F69               	movwf	(___fldiv@b+3)& (0+255),b
  2575  000314  C19B  F01A         	movff	_U_real,___xxtofl@val
  2576  000318  C19C  F01B         	movff	_U_real+1,___xxtofl@val+1
  2577  00031C  6A1C               	clrf	(___xxtofl@val+2)^0,c
  2578  00031E  6A1D               	clrf	(___xxtofl@val+3)^0,c
  2579  000320  0E00               	movlw	0
  2580  000322  EC52  F016         	call	___xxtofl
  2581  000326  C01A  F06A         	movff	?___xxtofl,___fldiv@a
  2582  00032A  C01B  F06B         	movff	?___xxtofl+1,___fldiv@a+1
  2583  00032E  C01C  F06C         	movff	?___xxtofl+2,___fldiv@a+2
  2584  000332  C01D  F06D         	movff	?___xxtofl+3,___fldiv@a+3
  2585  000336  EC4C  F010         	call	___fldiv	;wreg free
  2586  00033A  C066  F108         	movff	?___fldiv,_coef
  2587  00033E  C067  F109         	movff	?___fldiv+1,_coef+1
  2588  000342  C068  F10A         	movff	?___fldiv+2,_coef+2
  2589  000346  C069  F10B         	movff	?___fldiv+3,_coef+3
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 179:             U_summ = 0;
  2593  00034A  0101               	movlb	1	; () banked
  2594  00034C  6B10               	clrf	_U_summ& (0+255),b
  2595  00034E  6B11               	clrf	(_U_summ+1)& (0+255),b
  2596  000350  6B12               	clrf	(_U_summ+2)& (0+255),b
  2597  000352  6B13               	clrf	(_U_summ+3)& (0+255),b
  2598                           
  2599                           ; BSR set to: 1
  2600                           ;main.c: 180:             getU = 1;
  2601  000354  0E01               	movlw	1
  2602  000356  6E40               	movwf	_getU^0,c
  2603                           
  2604                           ; BSR set to: 1
  2605                           ;main.c: 182:             if (powerOFF && TempEn)
  2606  000358  511C               	movf	main@powerOFF& (0+255),w,b
  2607  00035A  E005               	bz	l529
  2608                           
  2609                           ; BSR set to: 1
  2610  00035C  5125               	movf	_TempEn& (0+255),w,b
  2611  00035E  E003               	bz	l529
  2612                           
  2613                           ; BSR set to: 1
  2614                           ;main.c: 183:                 t_power = 0;
  2615  000360  6A39               	clrf	_t_power^0,c
  2616  000362  6A3A               	clrf	(_t_power+1)^0,c
  2617  000364  D04E               	goto	l9968
  2618  000366                     l529:
  2619                           
  2620                           ; BSR set to: 1
  2621                           ;main.c: 185:                 if (!power_100)
  2622  000366  B644               	btfsc	(_power_100/(0+8))^0,_power_100& (0+7),c
  2623  000368  D03D               	goto	l9960
  2624                           
  2625                           ; BSR set to: 1
  2626                           ;main.c: 186:                     t_power = (uint16_t) (power * coef * coef + 0.5);
  2627  00036A  DAF2               	call	PL90	;call to abstracted procedure
  2628  00036C  5121               	movf	_power& (0+255),w,b
  2629  00036E  6E1A               	movwf	___xxtofl@val^0,c
  2630  000370  6A1B               	clrf	(___xxtofl@val+1)^0,c
  2631  000372  6A1C               	clrf	(___xxtofl@val+2)^0,c
  2632  000374  6A1D               	clrf	(___xxtofl@val+3)^0,c
  2633  000376  0E01               	movlw	1
  2634  000378  EC52  F016         	call	___xxtofl
  2635  00037C  C01A  F066         	movff	?___xxtofl,___flmul@b
  2636  000380  C01B  F067         	movff	?___xxtofl+1,___flmul@b+1
  2637  000384  C01C  F068         	movff	?___xxtofl+2,___flmul@b+2
  2638  000388  C01D  F069         	movff	?___xxtofl+3,___flmul@b+3
  2639  00038C  EC37  F00F         	call	___flmul	;wreg free
  2640  000390  C066  F1F0         	movff	?___flmul,_main$2868
  2641  000394  C067  F1F1         	movff	?___flmul+1,_main$2868+1
  2642  000398  C068  F1F2         	movff	?___flmul+2,_main$2868+2
  2643  00039C  C069  F1F3         	movff	?___flmul+3,_main$2868+3
  2644                           
  2645                           ;main.c: 186:                     t_power = (uint16_t) (power * coef * coef + 0.5);
  2646  0003A0  6B83               	clrf	___fladd@a& (0+255),b
  2647  0003A2  6B84               	clrf	(___fladd@a+1)& (0+255),b
  2648  0003A4  6B85               	clrf	(___fladd@a+2)& (0+255),b
  2649  0003A6  0E3F               	movlw	63
  2650  0003A8  6F86               	movwf	(___fladd@a+3)& (0+255),b
  2651  0003AA  DAD2               	call	PL90	;call to abstracted procedure
  2652  0003AC  C1F0  F066         	movff	_main$2868,___flmul@b
  2653  0003B0  C1F1  F067         	movff	_main$2868+1,___flmul@b+1
  2654  0003B4  C1F2  F068         	movff	_main$2868+2,___flmul@b+2
  2655  0003B8  C1F3  F069         	movff	_main$2868+3,___flmul@b+3
  2656  0003BC  EC37  F00F         	call	___flmul	;wreg free
  2657  0003C0  DAD0               	call	PL100	;call to abstracted procedure
  2658  0003C2  EC09  F00E         	call	___fladd	;wreg free
  2659  0003C6  C07F  F0BC         	movff	?___fladd,___fltol@f1
  2660  0003CA  C080  F0BD         	movff	?___fladd+1,___fltol@f1+1
  2661  0003CE  C081  F0BE         	movff	?___fladd+2,___fltol@f1+2
  2662  0003D2  C082  F0BF         	movff	?___fladd+3,___fltol@f1+3
  2663  0003D6  EC28  F019         	call	___fltol	;wreg free
  2664  0003DA  C0BC  F039         	movff	?___fltol,_t_power
  2665  0003DE  C0BD  F03A         	movff	?___fltol+1,_t_power+1
  2666  0003E2  D004               	goto	l9962
  2667  0003E4                     l9960:
  2668                           
  2669                           ; BSR set to: 1
  2670                           ;main.c: 188:                     t_power = 100;
  2671  0003E4  0E00               	movlw	0
  2672  0003E6  6E3A               	movwf	(_t_power+1)^0,c
  2673  0003E8  0E64               	movlw	100
  2674  0003EA  6E39               	movwf	_t_power^0,c
  2675  0003EC                     l9962:
  2676                           
  2677                           ;main.c: 189:                 if (t_power > 100) {
  2678  0003EC  503A               	movf	(_t_power+1)^0,w,c
  2679  0003EE  E103               	bnz	u11780
  2680  0003F0  0E65               	movlw	101
  2681  0003F2  5C39               	subwf	_t_power^0,w,c
  2682  0003F4  E305               	bnc	l533
  2683  0003F6                     u11780:
  2684                           
  2685                           ;main.c: 190:                     t_power = 100;
  2686  0003F6  6A3A               	clrf	(_t_power+1)^0,c
  2687  0003F8  0E64               	movlw	100
  2688  0003FA  6E39               	movwf	_t_power^0,c
  2689                           
  2690                           ;main.c: 191:                     is_stab = 0;
  2691  0003FC  9C44               	bcf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2692                           
  2693                           ;main.c: 192:                 } else
  2694  0003FE  D001               	goto	l9968
  2695  000400                     l533:
  2696                           
  2697                           ;main.c: 193:                     is_stab = 1;
  2698  000400  8C44               	bsf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2699  000402                     l9968:
  2700                           
  2701                           ;main.c: 195:             LATAbits.LA3 = !LATAbits.LA3;
  2702  000402  B689               	btfsc	137,3,c	;volatile
  2703  000404  D004               	goto	u11790
  2704  000406  0100               	movlb	0	; () banked
  2705  000408  6BF9               	clrf	??_main& (0+255),b
  2706  00040A  2BF9               	incf	??_main& (0+255),f,b
  2707  00040C  D002               	goto	u11808
  2708  00040E                     u11790:
  2709  00040E  0100               	movlb	0	; () banked
  2710  000410  6BF9               	clrf	??_main& (0+255),b
  2711  000412                     u11808:
  2712  000412  47F9               	rlncf	??_main& (0+255),f,b
  2713  000414  47F9               	rlncf	??_main& (0+255),f,b
  2714  000416  47F9               	rlncf	??_main& (0+255),f,b
  2715  000418  5089               	movf	137,w,c	;volatile
  2716  00041A  19F9               	xorwf	??_main& (0+255),w,b
  2717  00041C  0BF7               	andlw	-9
  2718  00041E  19F9               	xorwf	??_main& (0+255),w,b
  2719  000420  6E89               	movwf	137,c	;volatile
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 196:             watt_disp = calc_power(t_power, t_res, U_real);
  2723  000422  EC26  F00C         	call	PL94	;call to abstracted procedure
  2724  000426  C19B  F06B         	movff	_U_real,calc_power@u_rl
  2725  00042A  C19C  F06C         	movff	_U_real+1,calc_power@u_rl+1
  2726  00042E  5039               	movf	_t_power^0,w,c
  2727  000430  EC60  F013         	call	_calc_power
  2728  000434  C067  F118         	movff	?_calc_power,_watt_disp
  2729  000438  C068  F119         	movff	?_calc_power+1,_watt_disp+1
  2730  00043C  D23E               	goto	l10252
  2731  00043E                     l9972:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;main.c: 204:                 if (tick_t1 >= 6) {
  2735  00043E  0E05               	movlw	5
  2736  000440  0101               	movlb	1	; () banked
  2737  000442  652C               	cpfsgt	_tick_t1& (0+255),b
  2738  000444  D003               	goto	l9978
  2739                           
  2740                           ; BSR set to: 1
  2741                           ;main.c: 205:                     tick_t1 = 0;
  2742  000446  6B2C               	clrf	_tick_t1& (0+255),b
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;main.c: 212:                     show_lcd_main();
  2746  000448  EC6E  F00A         	call	_show_lcd_main	;wreg free
  2747  00044C                     l9978:
  2748                           
  2749                           ;main.c: 217:                 if (EncData < 0)
  2750  00044C  0101               	movlb	1	; () banked
  2751  00044E  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2752  000450  D003               	goto	l9982
  2753                           
  2754                           ; BSR set to: 1
  2755                           ;main.c: 218:                     EncData = 0;
  2756  000452  6B16               	clrf	_EncData& (0+255),b
  2757  000454  6B17               	clrf	(_EncData+1)& (0+255),b
  2758  000456  D00A               	goto	l9986
  2759  000458                     l9982:
  2760                           
  2761                           ; BSR set to: 1
  2762  000458  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2763  00045A  D008               	goto	l9986
  2764  00045C  5117               	movf	(_EncData+1)& (0+255),w,b
  2765  00045E  E103               	bnz	u11830
  2766  000460  0E65               	movlw	101
  2767  000462  5D16               	subwf	_EncData& (0+255),w,b
  2768  000464  E303               	bnc	l9986
  2769  000466                     u11830:
  2770                           
  2771                           ; BSR set to: 1
  2772                           ;main.c: 220:                     EncData = 100;
  2773  000466  6B17               	clrf	(_EncData+1)& (0+255),b
  2774  000468  0E64               	movlw	100
  2775  00046A  6F16               	movwf	_EncData& (0+255),b
  2776  00046C                     l9986:
  2777                           
  2778                           ; BSR set to: 1
  2779                           ;main.c: 222:                 if (pressed_key == 1) {
  2780  00046C  0522               	decf	_pressed_key& (0+255),w,b
  2781  00046E  E107               	bnz	l9990
  2782                           
  2783                           ; BSR set to: 1
  2784                           ;main.c: 224:                     power = EncData;
  2785  000470  C116  F121         	movff	_EncData,_power
  2786                           
  2787                           ;main.c: 225:                     is_power = 1;
  2788  000474  8A44               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
  2789                           
  2790                           ;main.c: 226:                     power_100 = 0;
  2791  000476  9644               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2792                           
  2793                           ;main.c: 227:                     powerOFF = 0;
  2794  000478  6B1C               	clrf	main@powerOFF& (0+255),b
  2795                           
  2796                           ;main.c: 228:                     sound_enable = 0;
  2797  00047A  6B29               	clrf	_sound_enable& (0+255),b
  2798                           
  2799                           ;main.c: 229:                     LATCbits.LATC5 = 0;
  2800  00047C  9A8B               	bcf	139,5,c	;volatile
  2801  00047E                     l9990:
  2802                           
  2803                           ; BSR set to: 1
  2804                           ;main.c: 232:                 if (pressed_key == 2) {
  2805  00047E  0E02               	movlw	2
  2806  000480  1922               	xorwf	_pressed_key& (0+255),w,b
  2807  000482  E001 D693          	bnz	l515
  2808                           
  2809                           ; BSR set to: 1
  2810                           ;main.c: 233:                     clearLCD();
  2811  000486  EC3A  F01F         	call	_clearLCD	;wreg free
  2812                           
  2813                           ;main.c: 234:                     sel_main = 3;
  2814  00048A  0E03               	movlw	3
  2815  00048C  0101               	movlb	1	; () banked
  2816  00048E  6F1D               	movwf	_sel_main& (0+255),b
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;main.c: 235:                     lcd_gotoxy(5, 2);
  2820  000490  0E02               	movlw	2
  2821  000492  6E1E               	movwf	lcd_gotoxy@y^0,c
  2822  000494  0E05               	movlw	5
  2823  000496  EC0D  F01D         	call	_lcd_gotoxy
  2824                           
  2825                           ;main.c: 236:                     lcd_putc(0x04);
  2826  00049A  0E04               	movlw	4
  2827  00049C  EC55  F01F         	call	_lcd_putc
  2828                           
  2829                           ;main.c: 237:                     lcd_putc(0x05);
  2830  0004A0  0E05               	movlw	5
  2831  0004A2  EC55  F01F         	call	_lcd_putc
  2832                           
  2833                           ;main.c: 238:                     lcd_putc(0x05);
  2834  0004A6  0E05               	movlw	5
  2835  0004A8  EC55  F01F         	call	_lcd_putc
  2836                           
  2837                           ;main.c: 239:                     lcd_putc(0x05);
  2838  0004AC  0E05               	movlw	5
  2839  0004AE  EC55  F01F         	call	_lcd_putc
  2840                           
  2841                           ;main.c: 240:                     lcd_putc(0x05);
  2842  0004B2  0E05               	movlw	5
  2843  0004B4  EC55  F01F         	call	_lcd_putc
  2844                           
  2845                           ;main.c: 241:                     lcd_putc(' ');
  2846  0004B8  0E20               	movlw	32
  2847  0004BA  EC55  F01F         	call	_lcd_putc
  2848                           
  2849                           ;main.c: 242:                     lcd_putc(0x06);
  2850  0004BE  0E06               	movlw	6
  2851  0004C0  EC55  F01F         	call	_lcd_putc
  2852                           
  2853                           ;main.c: 243:                     lcd_putc(' ');
  2854  0004C4  0E20               	movlw	32
  2855  0004C6  EC55  F01F         	call	_lcd_putc
  2856                           
  2857                           ;main.c: 244:                     lcd_putc(0x05);
  2858  0004CA  0E05               	movlw	5
  2859  0004CC  EC55  F01F         	call	_lcd_putc
  2860                           
  2861                           ;main.c: 245:                     lcd_putc(0x05);
  2862  0004D0  0E05               	movlw	5
  2863  0004D2  EC55  F01F         	call	_lcd_putc
  2864                           
  2865                           ;main.c: 246:                     lcd_putc(0x05);
  2866  0004D6  0E05               	movlw	5
  2867  0004D8  EC55  F01F         	call	_lcd_putc
  2868                           
  2869                           ;main.c: 247:                     lcd_putc(0x05);
  2870  0004DC  0E05               	movlw	5
  2871  0004DE  EC55  F01F         	call	_lcd_putc
  2872                           
  2873                           ;main.c: 248:                     lcd_putc(0x03);
  2874  0004E2  0E03               	movlw	3
  2875  0004E4  EC55  F01F         	call	_lcd_putc
  2876                           
  2877                           ;main.c: 250:                     EncData = 0;
  2878  0004E8  0101               	movlb	1	; () banked
  2879  0004EA  6B16               	clrf	_EncData& (0+255),b
  2880  0004EC  D088               	goto	L2
  2881  0004EE                     l10026:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 258:                 if (EncData > 4)
  2885  0004EE  0101               	movlb	1	; () banked
  2886  0004F0  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  2887  0004F2  D008               	goto	l10030
  2888  0004F4  5117               	movf	(_EncData+1)& (0+255),w,b
  2889  0004F6  E103               	bnz	u11860
  2890  0004F8  0E05               	movlw	5
  2891  0004FA  5D16               	subwf	_EncData& (0+255),w,b
  2892  0004FC  E303               	bnc	l10030
  2893  0004FE                     u11860:
  2894                           
  2895                           ; BSR set to: 1
  2896                           ;main.c: 259:                     EncData = 4;
  2897  0004FE  6B17               	clrf	(_EncData+1)& (0+255),b
  2898  000500  0E04               	movlw	4
  2899  000502  6F16               	movwf	_EncData& (0+255),b
  2900  000504                     l10030:
  2901                           
  2902                           ; BSR set to: 1
  2903                           ;main.c: 260:                 if (EncData < 0)
  2904  000504  AF17               	btfss	(_EncData+1)& (0+255),7,b
  2905  000506  D032               	goto	l10056
  2906                           
  2907                           ; BSR set to: 1
  2908                           ;main.c: 261:                     EncData = 0;
  2909  000508  6B16               	clrf	_EncData& (0+255),b
  2910  00050A  6B17               	clrf	(_EncData+1)& (0+255),b
  2911  00050C  D02F               	goto	l10056
  2912  00050E                     l10034:
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;main.c: 265:                         lcd_gotoxy(1, 3);
  2916  00050E  DA32               	call	PL126	;call to abstracted procedure
  2917  000510  EC0D  F01D         	call	_lcd_gotoxy
  2918                           
  2919                           ;main.c: 266:                         lcdPrint("   EDIT RESISTANCE  ");
  2920  000514  0EC6               	movlw	low STR_5
  2921  000516  6E23               	movwf	lcdPrint@t^0,c
  2922  000518  0E7E               	movlw	high STR_5
  2923  00051A  6E24               	movwf	(lcdPrint@t+1)^0,c
  2924  00051C  ECD9  F016         	call	_lcdPrint	;wreg free
  2925                           
  2926                           ;main.c: 267:                         break;
  2927  000520  D031               	goto	l10058
  2928  000522                     l10038:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;main.c: 269:                         lcd_gotoxy(1, 3);
  2932  000522  DA28               	call	PL126	;call to abstracted procedure
  2933  000524  EC0D  F01D         	call	_lcd_gotoxy
  2934                           
  2935                           ;main.c: 270:                         lcdPrint("  SAVE LOAD DEFAULT ");
  2936  000528  0EDB               	movlw	low STR_6
  2937  00052A  6E23               	movwf	lcdPrint@t^0,c
  2938  00052C  0E7E               	movlw	high STR_6
  2939  00052E  6E24               	movwf	(lcdPrint@t+1)^0,c
  2940  000530  ECD9  F016         	call	_lcdPrint	;wreg free
  2941                           
  2942                           ;main.c: 271:                         break;
  2943  000534  D027               	goto	l10058
  2944  000536                     l10042:
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;main.c: 273:                         lcd_gotoxy(1, 3);
  2948  000536  DA1E               	call	PL126	;call to abstracted procedure
  2949  000538  EC0D  F01D         	call	_lcd_gotoxy
  2950                           
  2951                           ;main.c: 274:                         lcdPrint("   SET 100% POWER   ");
  2952  00053C  0EB1               	movlw	low STR_7
  2953  00053E  6E23               	movwf	lcdPrint@t^0,c
  2954  000540  0E7E               	movlw	high STR_7
  2955  000542  6E24               	movwf	(lcdPrint@t+1)^0,c
  2956  000544  ECD9  F016         	call	_lcdPrint	;wreg free
  2957                           
  2958                           ;main.c: 275:                         break;
  2959  000548  D01D               	goto	l10058
  2960  00054A                     l10046:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 277:                         lcd_gotoxy(1, 3);
  2964  00054A  DA14               	call	PL126	;call to abstracted procedure
  2965  00054C  EC0D  F01D         	call	_lcd_gotoxy
  2966                           
  2967                           ;main.c: 278:                         lcdPrint("     ALARM TEMP     ");
  2968  000550  DA23               	call	PL190	;call to abstracted procedure
  2969  000552  ECD9  F016         	call	_lcdPrint	;wreg free
  2970                           
  2971                           ;main.c: 279:                         break;
  2972  000556  D016               	goto	l10058
  2973  000558                     l10050:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 281:                         lcd_gotoxy(1, 3);
  2977  000558  DA0D               	call	PL126	;call to abstracted procedure
  2978  00055A  EC0D  F01D         	call	_lcd_gotoxy
  2979                           
  2980                           ;main.c: 282:                         lcdPrint("         EXIT        ");
  2981  00055E  0E5A               	movlw	low STR_9
  2982  000560  6E23               	movwf	lcdPrint@t^0,c
  2983  000562  0E7E               	movlw	high STR_9
  2984  000564  6E24               	movwf	(lcdPrint@t+1)^0,c
  2985  000566  ECD9  F016         	call	_lcdPrint	;wreg free
  2986                           
  2987                           ;main.c: 283:                         break; }
  2988  00056A  D00C               	goto	l10058
  2989  00056C                     l10056:
  2990                           
  2991                           ; BSR set to: 1
  2992                           
  2993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2994                           ; Switch size 1, requested type "space"
  2995                           ; Number of cases is 1, Range of values is 0 to 0
  2996                           ; switch strategies available:
  2997                           ; Name         Instructions Cycles
  2998                           ; simple_byte            4     3 (average)
  2999                           ;	Chosen strategy is simple_byte
  3000  00056C  DA0E               	call	PL146	;call to abstracted procedure
  3001  00056E  E10A               	bnz	l10058
  3002                           
  3003                           ; BSR set to: 0
  3004                           ; Switch size 1, requested type "space"
  3005                           ; Number of cases is 5, Range of values is 0 to 4
  3006                           ; switch strategies available:
  3007                           ; Name         Instructions Cycles
  3008                           ; simple_byte           16     9 (average)
  3009                           ;	Chosen strategy is simple_byte
  3010  000570  51F9               	movf	??_main& (0+255),w,b
  3011  000572  E0CD               	bz	l10034
  3012  000574  0A01               	xorlw	1	; case 1
  3013  000576  E0D5               	bz	l10038
  3014  000578  0A03               	xorlw	3	; case 2
  3015  00057A  E0DD               	bz	l10042
  3016  00057C  0A01               	xorlw	1	; case 3
  3017  00057E  E0E5               	bz	l10046
  3018  000580  0A07               	xorlw	7	; case 4
  3019  000582  E0EA               	bz	l10050
  3020  000584                     l10058:
  3021                           
  3022                           ;main.c: 284:                 if (pressed_key == 1) {
  3023  000584  0101               	movlb	1	; () banked
  3024  000586  0522               	decf	_pressed_key& (0+255),w,b
  3025  000588  E05D               	bz	l10116
  3026  00058A  D610               	goto	l515
  3027  00058C                     l556:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 287:                             t_power = 0;
  3031  00058C  6A39               	clrf	_t_power^0,c
  3032  00058E  6A3A               	clrf	(_t_power+1)^0,c
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;main.c: 288:                             clearLCD();
  3036  000590  EC3A  F01F         	call	_clearLCD	;wreg free
  3037                           
  3038                           ;main.c: 289:                             EncData = r_whole;
  3039  000594  C11F  F116         	movff	_r_whole,_EncData
  3040  000598  0101               	movlb	1	; () banked
  3041  00059A  6B17               	clrf	(_EncData+1)& (0+255),b
  3042                           
  3043                           ; BSR set to: 1
  3044                           ;main.c: 290:                             whole_dec = 1;
  3045  00059C  8244               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3046                           
  3047                           ;main.c: 291:                             lcd_gotoxy(1, 2);
  3048  00059E  D9ED               	call	PL132	;call to abstracted procedure
  3049  0005A0  EC0D  F01D         	call	_lcd_gotoxy
  3050                           
  3051                           ;main.c: 292:                             lcdPrint("  - Whole part -  ");
  3052  0005A4  D9FE               	call	PL196	;call to abstracted procedure
  3053  0005A6  ECD9  F016         	call	_lcdPrint	;wreg free
  3054                           
  3055                           ;main.c: 293:                             lcd_gotoxy(1, 3);
  3056  0005AA  D9E4               	call	PL126	;call to abstracted procedure
  3057  0005AC  EC0D  F01D         	call	_lcd_gotoxy
  3058                           
  3059                           ;main.c: 294:                             lcdPrint("Long press for save");
  3060  0005B0  0E19               	movlw	low STR_11
  3061  0005B2  6E23               	movwf	lcdPrint@t^0,c
  3062  0005B4  0E7F               	movlw	high STR_11
  3063  0005B6  6E24               	movwf	(lcdPrint@t+1)^0,c
  3064  0005B8  ECD9  F016         	call	_lcdPrint	;wreg free
  3065                           
  3066                           ;main.c: 295:                             lcd_gotoxy(1, 4);
  3067  0005BC  EC40  F00C         	call	PL206	;call to abstracted procedure
  3068  0005C0  EC0D  F01D         	call	_lcd_gotoxy
  3069                           
  3070                           ;main.c: 296:                             lcdPrint("    to EEPROM.");
  3071  0005C4  0E53               	movlw	low STR_12
  3072  0005C6  6E23               	movwf	lcdPrint@t^0,c
  3073  0005C8  0E7F               	movlw	high STR_12
  3074  0005CA  6E24               	movwf	(lcdPrint@t+1)^0,c
  3075  0005CC  ECD9  F016         	call	_lcdPrint	;wreg free
  3076                           
  3077                           ;main.c: 297:                             sel_main = 1;
  3078  0005D0  0E01               	movlw	1
  3079  0005D2  0101               	movlb	1	; () banked
  3080  0005D4  6F1D               	movwf	_sel_main& (0+255),b
  3081                           
  3082                           ;main.c: 298:                             break;
  3083  0005D6  D5EA               	goto	l515
  3084  0005D8                     l558:
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 300:                             sel_main = 0;
  3088  0005D8  0101               	movlb	1	; () banked
  3089  0005DA  6B1D               	clrf	_sel_main& (0+255),b
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;main.c: 301:                             write_eep(2, power);
  3093  0005DC  C121  F01A         	movff	_power,write_eep@data
  3094  0005E0  0E02               	movlw	2
  3095  0005E2  ECFC  F01E         	call	_write_eep
  3096                           
  3097                           ;main.c: 302:                             EncData = power;
  3098  0005E6  D9CC               	call	PL134	;call to abstracted procedure
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;main.c: 303:                             clearLCD();
  3102  0005E8  EC3A  F01F         	call	_clearLCD	;wreg free
  3103                           
  3104                           ;main.c: 304:                             break;
  3105  0005EC  D5DF               	goto	l515
  3106  0005EE                     l559:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 306:                             sel_main = 0;
  3110  0005EE  0101               	movlb	1	; () banked
  3111  0005F0  6B1D               	clrf	_sel_main& (0+255),b
  3112                           
  3113                           ; BSR set to: 1
  3114                           ;main.c: 307:                             clearLCD();
  3115  0005F2  EC3A  F01F         	call	_clearLCD	;wreg free
  3116                           
  3117                           ;main.c: 308:                             power_100 = 1;
  3118  0005F6  8644               	bsf	(_power_100/(0+8))^0,_power_100& (0+7),c
  3119  0005F8                     l10088:
  3120                           
  3121                           ;main.c: 309:                             EncData = power;
  3122  0005F8  C121  F116         	movff	_power,_EncData
  3123  0005FC  0101               	movlb	1	; () banked
  3124  0005FE                     L2:
  3125  0005FE  6B17               	clrf	(_EncData+1)& (0+255),b
  3126                           
  3127                           ;main.c: 310:                             break;
  3128  000600  D5D5               	goto	l515
  3129  000602                     l10090:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 312:                             sel_main = 4;
  3133  000602  0E04               	movlw	4
  3134  000604  0101               	movlb	1	; () banked
  3135  000606  6F1D               	movwf	_sel_main& (0+255),b
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 313:                             clearLCD();
  3139  000608  EC3A  F01F         	call	_clearLCD	;wreg free
  3140                           
  3141                           ;main.c: 314:                             AlarmTempT = AlarmTemp;
  3142  00060C  C127  F126         	movff	_AlarmTemp,_AlarmTempT
  3143                           
  3144                           ;main.c: 315:                             alarm_enable = 0;
  3145  000610  9044               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3146                           
  3147                           ;main.c: 316:                             EncData = AlarmTempT;
  3148  000612  C126  F116         	movff	_AlarmTempT,_EncData
  3149  000616  0101               	movlb	1	; () banked
  3150  000618  6B17               	clrf	(_EncData+1)& (0+255),b
  3151                           
  3152                           ; BSR set to: 1
  3153                           ;main.c: 317:                             TempEnT = TempEn;
  3154  00061A  C125  F124         	movff	_TempEn,_TempEnT
  3155                           
  3156                           ; BSR set to: 1
  3157                           ;main.c: 318:                             lcd_gotoxy(1, 1);
  3158  00061E  0E01               	movlw	1
  3159  000620  6E1E               	movwf	lcd_gotoxy@y^0,c
  3160  000622  EC0D  F01D         	call	_lcd_gotoxy
  3161                           
  3162                           ;main.c: 319:                             lcdPrint("     ALARM TEMP     ");
  3163  000626  D9B8               	call	PL190	;call to abstracted procedure
  3164  000628  ECD9  F016         	call	_lcdPrint	;wreg free
  3165                           
  3166                           ;main.c: 320:                             lcd_gotoxy(1, 2);
  3167  00062C  D9A6               	call	PL132	;call to abstracted procedure
  3168  00062E  EC0D  F01D         	call	_lcd_gotoxy
  3169                           
  3170                           ;main.c: 321:                             lcd_putc(0x03);
  3171  000632  0E03               	movlw	3
  3172  000634  EC55  F01F         	call	_lcd_putc
  3173                           
  3174                           ;main.c: 322:                             break;
  3175  000638  D5B9               	goto	l515
  3176  00063A                     l561:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 324:                             sel_main = 0;
  3180  00063A  0101               	movlb	1	; () banked
  3181  00063C  6B1D               	clrf	_sel_main& (0+255),b
  3182                           
  3183                           ; BSR set to: 1
  3184                           ;main.c: 325:                             clearLCD();
  3185  00063E  EC3A  F01F         	call	_clearLCD	;wreg free
  3186  000642  D7DA               	goto	l10088
  3187  000644                     l10116:
  3188                           
  3189                           ; BSR set to: 1
  3190                           
  3191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3192                           ; Switch size 1, requested type "space"
  3193                           ; Number of cases is 1, Range of values is 0 to 0
  3194                           ; switch strategies available:
  3195                           ; Name         Instructions Cycles
  3196                           ; simple_byte            4     3 (average)
  3197                           ;	Chosen strategy is simple_byte
  3198  000644  D9A2               	call	PL146	;call to abstracted procedure
  3199  000646  E001 D5B1          	bnz	l515
  3200                           
  3201                           ; BSR set to: 0
  3202                           ; Switch size 1, requested type "space"
  3203                           ; Number of cases is 5, Range of values is 0 to 4
  3204                           ; switch strategies available:
  3205                           ; Name         Instructions Cycles
  3206                           ; simple_byte           16     9 (average)
  3207                           ;	Chosen strategy is simple_byte
  3208  00064A  51F9               	movf	??_main& (0+255),w,b
  3209  00064C  E09F               	bz	l556
  3210  00064E  0A01               	xorlw	1	; case 1
  3211  000650  E0C3               	bz	l558
  3212  000652  0A03               	xorlw	3	; case 2
  3213  000654  E0CC               	bz	l559
  3214  000656  0A01               	xorlw	1	; case 3
  3215  000658  E0D4               	bz	l10090
  3216  00065A  0A07               	xorlw	7	; case 4
  3217  00065C  E0EE               	bz	l561
  3218  00065E  D5A6               	goto	l515
  3219  000660                     l562:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 337:                 if (whole_dec) {
  3223  000660  A244               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3224  000662  D012               	goto	l10126
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 338:                     if (EncData >= 100)
  3228  000664  0101               	movlb	1	; () banked
  3229  000666  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3230  000668  D008               	goto	l10122
  3231  00066A  5117               	movf	(_EncData+1)& (0+255),w,b
  3232  00066C  E103               	bnz	u11900
  3233  00066E  0E64               	movlw	100
  3234  000670  5D16               	subwf	_EncData& (0+255),w,b
  3235  000672  E303               	bnc	l10122
  3236  000674                     u11900:
  3237                           
  3238                           ; BSR set to: 1
  3239                           ;main.c: 339:                         EncData = 99;
  3240  000674  6B17               	clrf	(_EncData+1)& (0+255),b
  3241  000676  0E63               	movlw	99
  3242  000678  6F16               	movwf	_EncData& (0+255),b
  3243  00067A                     l10122:
  3244                           
  3245                           ; BSR set to: 1
  3246                           ;main.c: 340:                     if (EncData < 0)
  3247  00067A  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3248  00067C  D002               	goto	l565
  3249                           
  3250                           ; BSR set to: 1
  3251                           ;main.c: 341:                         EncData = 0;
  3252  00067E  6B16               	clrf	_EncData& (0+255),b
  3253  000680  6B17               	clrf	(_EncData+1)& (0+255),b
  3254  000682                     l565:
  3255                           
  3256                           ; BSR set to: 1
  3257                           ;main.c: 342:                     r_whole = (uint8_t) EncData;
  3258  000682  C116  F11F         	movff	_EncData,_r_whole
  3259                           
  3260                           ;main.c: 343:                 } else {
  3261  000686  D033               	goto	l10146
  3262  000688                     l10126:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 344:                     if (EncData >= 100)
  3266  000688  0101               	movlb	1	; () banked
  3267  00068A  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3268  00068C  D009               	goto	l10130
  3269  00068E  5117               	movf	(_EncData+1)& (0+255),w,b
  3270  000690  E103               	bnz	u11920
  3271  000692  0E64               	movlw	100
  3272  000694  5D16               	subwf	_EncData& (0+255),w,b
  3273  000696  E304               	bnc	l10130
  3274  000698                     u11920:
  3275                           
  3276                           ; BSR set to: 1
  3277                           ;main.c: 345:                         EncData = 99;
  3278  000698  0E00               	movlw	0
  3279  00069A  6F17               	movwf	(_EncData+1)& (0+255),b
  3280  00069C  0E63               	movlw	99
  3281  00069E  6F16               	movwf	_EncData& (0+255),b
  3282  0006A0                     l10130:
  3283                           
  3284                           ; BSR set to: 1
  3285                           ;main.c: 346:                     if ((EncData < 10) && (EncData > 5))
  3286  0006A0  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3287  0006A2  D005               	goto	u11930
  3288  0006A4  5117               	movf	(_EncData+1)& (0+255),w,b
  3289  0006A6  E10D               	bnz	l10136
  3290  0006A8  0E0A               	movlw	10
  3291  0006AA  5D16               	subwf	_EncData& (0+255),w,b
  3292  0006AC  E20A               	bc	l10136
  3293  0006AE                     u11930:
  3294                           
  3295                           ; BSR set to: 1
  3296  0006AE  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3297  0006B0  D008               	goto	l10136
  3298  0006B2  5117               	movf	(_EncData+1)& (0+255),w,b
  3299  0006B4  E103               	bnz	u11940
  3300  0006B6  0E06               	movlw	6
  3301  0006B8  5D16               	subwf	_EncData& (0+255),w,b
  3302  0006BA  E303               	bnc	l10136
  3303  0006BC                     u11940:
  3304                           
  3305                           ; BSR set to: 1
  3306                           ;main.c: 347:                         EncData = 0;
  3307  0006BC  6B16               	clrf	_EncData& (0+255),b
  3308  0006BE  6B17               	clrf	(_EncData+1)& (0+255),b
  3309  0006C0  D010               	goto	l10142
  3310  0006C2                     l10136:
  3311                           
  3312                           ; BSR set to: 1
  3313  0006C2  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3314  0006C4  D00E               	goto	l10142
  3315  0006C6  5117               	movf	(_EncData+1)& (0+255),w,b
  3316  0006C8  E102               	bnz	u11950
  3317  0006CA  0516               	decf	_EncData& (0+255),w,b
  3318  0006CC  E30A               	bnc	l10142
  3319  0006CE                     u11950:
  3320                           
  3321                           ; BSR set to: 1
  3322  0006CE  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3323  0006D0  D005               	goto	u11960
  3324  0006D2  5117               	movf	(_EncData+1)& (0+255),w,b
  3325  0006D4  E106               	bnz	l10142
  3326  0006D6  0E05               	movlw	5
  3327  0006D8  5D16               	subwf	_EncData& (0+255),w,b
  3328  0006DA  E203               	bc	l10142
  3329  0006DC                     u11960:
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;main.c: 349:                         EncData = 10;
  3333  0006DC  6B17               	clrf	(_EncData+1)& (0+255),b
  3334  0006DE  0E0A               	movlw	10
  3335  0006E0  6F16               	movwf	_EncData& (0+255),b
  3336  0006E2                     l10142:
  3337                           
  3338                           ; BSR set to: 1
  3339                           ;main.c: 350:                     if (EncData < 0)
  3340  0006E2  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3341  0006E4  D002               	goto	l571
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;main.c: 351:                         EncData = 0;
  3345  0006E6  6B16               	clrf	_EncData& (0+255),b
  3346  0006E8  6B17               	clrf	(_EncData+1)& (0+255),b
  3347  0006EA                     l571:
  3348                           
  3349                           ; BSR set to: 1
  3350                           ;main.c: 353:                     r_dec = (uint8_t) EncData;
  3351  0006EA  C116  F11E         	movff	_EncData,_r_dec
  3352  0006EE                     l10146:
  3353                           
  3354                           ; BSR set to: 1
  3355                           ;main.c: 355:                 sprintf(TxtBuf, "Resist:%02u.%u Ohm ", r_whole, r_dec);
  3356  0006EE  D92B               	call	PL86	;call to abstracted procedure
  3357  0006F0  0E05               	movlw	low STR_14
  3358  0006F2  6FD7               	movwf	sprintf@fmt& (0+255),b
  3359  0006F4  0E7F               	movlw	high STR_14
  3360  0006F6  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3361  0006F8  C11F  F1D9         	movff	_r_whole,?_sprintf+4
  3362  0006FC  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  3363  0006FE  C11E  F1DB         	movff	_r_dec,?_sprintf+6
  3364  000702  6BDC               	clrf	(?_sprintf+7)& (0+255),b
  3365  000704  ECEA  F01C         	call	_sprintf	;wreg free
  3366                           
  3367                           ; BSR set to: 1
  3368                           ;main.c: 356:                 lcd_gotoxy(1, 1);
  3369  000708  0E01               	movlw	1
  3370  00070A  6E1E               	movwf	lcd_gotoxy@y^0,c
  3371  00070C  EC0D  F01D         	call	_lcd_gotoxy
  3372                           
  3373                           ;main.c: 357:                 lcdPrint(TxtBuf);
  3374  000710  EC0F  F00C         	call	PL32	;call to abstracted procedure
  3375  000714  ECD9  F016         	call	_lcdPrint	;wreg free
  3376                           
  3377                           ;main.c: 359:                 if (pressed_key == 1) {
  3378  000718  0101               	movlb	1	; () banked
  3379  00071A  0522               	decf	_pressed_key& (0+255),w,b
  3380  00071C  E11D               	bnz	l10168
  3381                           
  3382                           ; BSR set to: 1
  3383                           ;main.c: 360:                     whole_dec = ~whole_dec;
  3384  00071E  B244               	btfsc	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3385  000720  D002               	goto	u11990
  3386  000722  8244               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3387  000724  D001               	goto	u12005
  3388  000726                     u11990:
  3389  000726  9244               	bcf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3390  000728                     u12005:
  3391                           
  3392                           ;main.c: 361:                     if (whole_dec) {
  3393  000728  A244               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  3394  00072A  D009               	goto	l10162
  3395                           
  3396                           ;main.c: 362:                         lcd_gotoxy(1, 2);
  3397  00072C  D926               	call	PL132	;call to abstracted procedure
  3398  00072E  EC0D  F01D         	call	_lcd_gotoxy
  3399                           
  3400                           ;main.c: 363:                         lcdPrint("  - Whole part -  ");
  3401  000732  D937               	call	PL196	;call to abstracted procedure
  3402  000734  ECD9  F016         	call	_lcdPrint	;wreg free
  3403                           
  3404                           ;main.c: 364:                         EncData = r_whole;
  3405  000738  C11F  F116         	movff	_r_whole,_EncData
  3406  00073C  D00B               	goto	L3
  3407  00073E                     l10162:
  3408                           
  3409                           ;main.c: 366:                         lcd_gotoxy(1, 2);
  3410  00073E  D91D               	call	PL132	;call to abstracted procedure
  3411  000740  EC0D  F01D         	call	_lcd_gotoxy
  3412                           
  3413                           ;main.c: 367:                         lcdPrint("  - Fract part -  ");
  3414  000744  0E40               	movlw	low STR_16
  3415  000746  6E23               	movwf	lcdPrint@t^0,c
  3416  000748  0E7F               	movlw	high STR_16
  3417  00074A  6E24               	movwf	(lcdPrint@t+1)^0,c
  3418  00074C  ECD9  F016         	call	_lcdPrint	;wreg free
  3419                           
  3420                           ;main.c: 368:                         EncData = r_dec;
  3421  000750  C11E  F116         	movff	_r_dec,_EncData
  3422  000754                     L3:
  3423  000754  0101               	movlb	1	; () banked
  3424  000756  6B17               	clrf	(_EncData+1)& (0+255),b
  3425  000758                     l10168:
  3426                           
  3427                           ; BSR set to: 1
  3428                           ;main.c: 372:                 if (pressed_key == 2) {
  3429  000758  0E02               	movlw	2
  3430  00075A  1922               	xorwf	_pressed_key& (0+255),w,b
  3431  00075C  E001 D526          	bnz	l515
  3432                           
  3433                           ; BSR set to: 1
  3434                           ;main.c: 373:                     clearLCD();
  3435  000760  EC3A  F01F         	call	_clearLCD	;wreg free
  3436                           
  3437                           ;main.c: 374:                     sel_main = 0;
  3438  000764  0101               	movlb	1	; () banked
  3439  000766  6B1D               	clrf	_sel_main& (0+255),b
  3440                           
  3441                           ; BSR set to: 1
  3442                           ;main.c: 376:                     t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  3443  000768  D8C0               	call	PL20	;call to abstracted procedure
  3444  00076A  EC04  F01C         	call	___lmul	;wreg free
  3445  00076E  D8D6               	call	PL28	;call to abstracted procedure
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;main.c: 378:                     write_eep(0, r_whole);
  3449  000770  C11F  F01A         	movff	_r_whole,write_eep@data
  3450  000774  0E00               	movlw	0
  3451  000776  ECFC  F01E         	call	_write_eep
  3452                           
  3453                           ;main.c: 379:                     write_eep(1, r_dec);
  3454  00077A  C11E  F01A         	movff	_r_dec,write_eep@data
  3455  00077E  0E01               	movlw	1
  3456  000780  ECFC  F01E         	call	_write_eep
  3457                           
  3458                           ;main.c: 380:                     EncData = power;
  3459  000784  D8FD               	call	PL134	;call to abstracted procedure
  3460                           
  3461                           ; BSR set to: 1
  3462                           ;main.c: 381:                         inc_data = 0;
  3463  000786  9444               	bcf	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  3464  000788  D511               	goto	l515
  3465  00078A                     l576:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;main.c: 388:                 if (!alarm_enable) {
  3469  00078A  B044               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3470  00078C  D012               	goto	l10192
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;main.c: 389:                     if (EncData > 105)
  3474  00078E  0101               	movlb	1	; () banked
  3475  000790  BF17               	btfsc	(_EncData+1)& (0+255),7,b
  3476  000792  D008               	goto	l10188
  3477  000794  5117               	movf	(_EncData+1)& (0+255),w,b
  3478  000796  E103               	bnz	u12040
  3479  000798  0E6A               	movlw	106
  3480  00079A  5D16               	subwf	_EncData& (0+255),w,b
  3481  00079C  E303               	bnc	l10188
  3482  00079E                     u12040:
  3483                           
  3484                           ; BSR set to: 1
  3485                           ;main.c: 390:                         EncData = 105;
  3486  00079E  6B17               	clrf	(_EncData+1)& (0+255),b
  3487  0007A0  0E69               	movlw	105
  3488  0007A2  6F16               	movwf	_EncData& (0+255),b
  3489  0007A4                     l10188:
  3490                           
  3491                           ; BSR set to: 1
  3492                           ;main.c: 391:                     if (EncData < 0)
  3493  0007A4  AF17               	btfss	(_EncData+1)& (0+255),7,b
  3494  0007A6  D002               	goto	l579
  3495                           
  3496                           ; BSR set to: 1
  3497                           ;main.c: 392:                         EncData = 0;
  3498  0007A8  6B16               	clrf	_EncData& (0+255),b
  3499  0007AA  6B17               	clrf	(_EncData+1)& (0+255),b
  3500  0007AC                     l579:
  3501                           
  3502                           ; BSR set to: 1
  3503                           ;main.c: 393:                     AlarmTempT = (uint8_t) EncData;
  3504  0007AC  C116  F126         	movff	_EncData,_AlarmTempT
  3505                           
  3506                           ;main.c: 395:                 } else {
  3507  0007B0  D009               	goto	l10200
  3508  0007B2                     l10192:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;main.c: 396:                     if (count_enc < 0)
  3512  0007B2  0101               	movlb	1	; () banked
  3513  0007B4  BF20               	btfsc	_count_enc& (0+255),7,b
  3514                           
  3515                           ; BSR set to: 1
  3516                           ;main.c: 397:                         TempEnT = 0;
  3517  0007B6  6B24               	clrf	_TempEnT& (0+255),b
  3518                           
  3519                           ; BSR set to: 1
  3520                           ;main.c: 398:                     if (count_enc > 0)
  3521  0007B8  5120               	movf	_count_enc& (0+255),w,b
  3522  0007BA  0A80               	xorlw	128
  3523  0007BC  0F7F               	addlw	-129
  3524  0007BE  E302               	bnc	l10200
  3525                           
  3526                           ; BSR set to: 1
  3527                           ;main.c: 399:                         TempEnT = 1;
  3528  0007C0  0E01               	movlw	1
  3529  0007C2  6F24               	movwf	_TempEnT& (0+255),b
  3530  0007C4                     l10200:
  3531                           
  3532                           ; BSR set to: 1
  3533                           ;main.c: 402:                 sprintf(TxtBuf, "Temp:%u%c%-4c", AlarmTempT, 7, 'C');
  3534  0007C4  D8C0               	call	PL86	;call to abstracted procedure
  3535  0007C6  0E71               	movlw	low STR_17
  3536  0007C8  6FD7               	movwf	sprintf@fmt& (0+255),b
  3537  0007CA  0E7F               	movlw	high STR_17
  3538  0007CC  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3539  0007CE  C126  F1D9         	movff	_AlarmTempT,?_sprintf+4
  3540  0007D2  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  3541  0007D4  6BDC               	clrf	(?_sprintf+7)& (0+255),b
  3542  0007D6  0E07               	movlw	7
  3543  0007D8  6FDB               	movwf	(?_sprintf+6)& (0+255),b
  3544  0007DA  6BDE               	clrf	(?_sprintf+9)& (0+255),b
  3545  0007DC  0E43               	movlw	67
  3546  0007DE  6FDD               	movwf	(?_sprintf+8)& (0+255),b
  3547  0007E0  ECEA  F01C         	call	_sprintf	;wreg free
  3548                           
  3549                           ; BSR set to: 1
  3550                           ;main.c: 403:                 lcd_gotoxy(2, 2);
  3551  0007E4  0E02               	movlw	2
  3552  0007E6  6E1E               	movwf	lcd_gotoxy@y^0,c
  3553  0007E8  EC0D  F01D         	call	_lcd_gotoxy
  3554                           
  3555                           ;main.c: 404:                 lcdPrint(TxtBuf);
  3556  0007EC  EC0F  F00C         	call	PL32	;call to abstracted procedure
  3557  0007F0  ECD9  F016         	call	_lcdPrint	;wreg free
  3558                           
  3559                           ;main.c: 406:                 sprintf(TxtBuf, "Alarm:%-3s", (TempEnT) ? "ON" : "OFF");
  3560  0007F4  0101               	movlb	1	; () banked
  3561  0007F6  5124               	movf	_TempEnT& (0+255),w,b
  3562  0007F8  E104               	bnz	l10210
  3563                           
  3564                           ; BSR set to: 1
  3565  0007FA  0EF5               	movlw	low STR_20
  3566  0007FC  6FF4               	movwf	_main$1544& (0+255),b
  3567  0007FE  0E7F               	movlw	high STR_20
  3568  000800  D003               	goto	L4
  3569  000802                     l10210:
  3570                           
  3571                           ; BSR set to: 1
  3572  000802  0EFC               	movlw	low STR_19
  3573  000804  6FF4               	movwf	_main$1544& (0+255),b
  3574  000806  0E7F               	movlw	high STR_19
  3575  000808                     L4:
  3576  000808  6FF5               	movwf	(_main$1544+1)& (0+255),b
  3577                           
  3578                           ; BSR set to: 1
  3579  00080A  D89D               	call	PL86	;call to abstracted procedure
  3580  00080C  0EA0               	movlw	low STR_18
  3581  00080E  6FD7               	movwf	sprintf@fmt& (0+255),b
  3582  000810  0E7F               	movlw	high STR_18
  3583  000812  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  3584  000814  C1F4  F1D9         	movff	_main$1544,?_sprintf+4
  3585  000818  C1F5  F1DA         	movff	_main$1544+1,?_sprintf+5
  3586  00081C  ECEA  F01C         	call	_sprintf	;wreg free
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;main.c: 407:                 lcd_gotoxy(2, 3);
  3590  000820  0E03               	movlw	3
  3591  000822  6E1E               	movwf	lcd_gotoxy@y^0,c
  3592  000824  0E02               	movlw	2
  3593  000826  EC0D  F01D         	call	_lcd_gotoxy
  3594                           
  3595                           ;main.c: 408:                 lcdPrint(TxtBuf);
  3596  00082A  EC0F  F00C         	call	PL32	;call to abstracted procedure
  3597  00082E  ECD9  F016         	call	_lcdPrint	;wreg free
  3598                           
  3599                           ;main.c: 410:                 if (pressed_key == 1) {
  3600  000832  0101               	movlb	1	; () banked
  3601  000834  0522               	decf	_pressed_key& (0+255),w,b
  3602  000836  E126               	bnz	l10234
  3603                           
  3604                           ; BSR set to: 1
  3605                           ;main.c: 411:                     alarm_enable = ~alarm_enable;
  3606  000838  B044               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3607  00083A  D002               	goto	u12100
  3608  00083C  8044               	bsf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3609  00083E  D001               	goto	u12115
  3610  000840                     u12100:
  3611  000840  9044               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3612  000842                     u12115:
  3613                           
  3614                           ;main.c: 412:                     if (alarm_enable) {
  3615  000842  A044               	btfss	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3616  000844  D00D               	goto	l10224
  3617                           
  3618                           ;main.c: 414:                         lcd_gotoxy(1, 3);
  3619  000846  D896               	call	PL126	;call to abstracted procedure
  3620  000848  EC0D  F01D         	call	_lcd_gotoxy
  3621                           
  3622                           ;main.c: 415:                         lcd_putc(0x03);
  3623  00084C  0E03               	movlw	3
  3624  00084E  EC55  F01F         	call	_lcd_putc
  3625                           
  3626                           ;main.c: 416:                         lcd_gotoxy(1, 2);
  3627  000852  D893               	call	PL132	;call to abstracted procedure
  3628  000854  EC0D  F01D         	call	_lcd_gotoxy
  3629                           
  3630                           ;main.c: 417:                         lcd_putc(' ');
  3631  000858  0E20               	movlw	32
  3632  00085A  EC55  F01F         	call	_lcd_putc
  3633                           
  3634                           ;main.c: 418:                     } else {
  3635  00085E  D012               	goto	l10234
  3636  000860                     l10224:
  3637                           
  3638                           ;main.c: 419:                         EncData = (int8_t) AlarmTempT;
  3639  000860  0101               	movlb	1	; () banked
  3640  000862  5126               	movf	_AlarmTempT& (0+255),w,b
  3641  000864  6F16               	movwf	_EncData& (0+255),b
  3642  000866  6B17               	clrf	(_EncData+1)& (0+255),b
  3643  000868  BF16               	btfsc	_EncData& (0+255),7,b
  3644  00086A  0717               	decf	(_EncData+1)& (0+255),f,b
  3645                           
  3646                           ; BSR set to: 1
  3647                           ;main.c: 420:                         lcd_gotoxy(1, 2);
  3648  00086C  D886               	call	PL132	;call to abstracted procedure
  3649  00086E  EC0D  F01D         	call	_lcd_gotoxy
  3650                           
  3651                           ;main.c: 421:                         lcd_putc(0x03);
  3652  000872  0E03               	movlw	3
  3653  000874  EC55  F01F         	call	_lcd_putc
  3654                           
  3655                           ;main.c: 422:                         lcd_gotoxy(1, 3);
  3656  000878  D87D               	call	PL126	;call to abstracted procedure
  3657  00087A  EC0D  F01D         	call	_lcd_gotoxy
  3658                           
  3659                           ;main.c: 423:                         lcd_putc(' ');
  3660  00087E  0E20               	movlw	32
  3661  000880  EC55  F01F         	call	_lcd_putc
  3662  000884                     l10234:
  3663                           
  3664                           ;main.c: 428:                 if (pressed_key == 2) {
  3665  000884  0E02               	movlw	2
  3666  000886  0101               	movlb	1	; () banked
  3667  000888  1922               	xorwf	_pressed_key& (0+255),w,b
  3668  00088A  E001 D48F          	bnz	l515
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;main.c: 429:                     clearLCD();
  3672  00088E  EC3A  F01F         	call	_clearLCD	;wreg free
  3673                           
  3674                           ;main.c: 430:                     sel_main = 0;
  3675  000892  0101               	movlb	1	; () banked
  3676  000894  6B1D               	clrf	_sel_main& (0+255),b
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;main.c: 432:                     EncData = power;
  3680  000896  C121  F116         	movff	_power,_EncData
  3681  00089A  6B17               	clrf	(_EncData+1)& (0+255),b
  3682                           
  3683                           ; BSR set to: 1
  3684                           ;main.c: 433:                     AlarmTemp = AlarmTempT;
  3685  00089C  C126  F127         	movff	_AlarmTempT,_AlarmTemp
  3686                           
  3687                           ; BSR set to: 1
  3688                           ;main.c: 434:                     TempEn = TempEnT;
  3689  0008A0  C124  F125         	movff	_TempEnT,_TempEn
  3690                           
  3691                           ; BSR set to: 1
  3692                           ;main.c: 435:                     write_eep(3, AlarmTemp);
  3693  0008A4  C127  F01A         	movff	_AlarmTemp,write_eep@data
  3694  0008A8  0E03               	movlw	3
  3695  0008AA  ECFC  F01E         	call	_write_eep
  3696                           
  3697                           ;main.c: 436:                     write_eep(4, TempEn);
  3698  0008AE  C125  F01A         	movff	_TempEn,write_eep@data
  3699  0008B2  0E04               	movlw	4
  3700  0008B4  ECFC  F01E         	call	_write_eep
  3701  0008B8  D479               	goto	l515
  3702  0008BA                     l10252:
  3703  0008BA  0101               	movlb	1	; () banked
  3704  0008BC  511D               	movf	_sel_main& (0+255),w,b
  3705  0008BE  0100               	movlb	0	; () banked
  3706  0008C0  6FF9               	movwf	??_main& (0+255),b
  3707  0008C2  6BFA               	clrf	(??_main+1)& (0+255),b
  3708                           
  3709                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3710                           ; Switch size 1, requested type "space"
  3711                           ; Number of cases is 1, Range of values is 0 to 0
  3712                           ; switch strategies available:
  3713                           ; Name         Instructions Cycles
  3714                           ; simple_byte            4     3 (average)
  3715                           ;	Chosen strategy is simple_byte
  3716  0008C4  51FA               	movf	(??_main+1)& (0+255),w,b
  3717  0008C6  E001 D471          	bnz	l515
  3718                           
  3719                           ; BSR set to: 0
  3720                           ; Switch size 1, requested type "space"
  3721                           ; Number of cases is 5, Range of values is 0 to 4
  3722                           ; switch strategies available:
  3723                           ; Name         Instructions Cycles
  3724                           ; simple_byte           16     9 (average)
  3725                           ;	Chosen strategy is simple_byte
  3726  0008CA  51F9               	movf	??_main& (0+255),w,b
  3727  0008CC  E101 D5B7          	bz	l9972
  3728  0008D0  0A01               	xorlw	1	; case 1
  3729  0008D2  E101 D6C5          	bz	l562
  3730  0008D6  0A03               	xorlw	3	; case 2
  3731  0008D8  E101 D468          	bz	l515
  3732  0008DC  0A01               	xorlw	1	; case 3
  3733  0008DE  E101 D606          	bz	l10026
  3734  0008E2  0A07               	xorlw	7	; case 4
  3735  0008E4  E101 D751          	bz	l576
  3736                           
  3737                           ; BSR set to: 0
  3738  0008E8  D461               	goto	l515
  3739  0008EA                     __end_of_main:
  3740                           	callstack 0
  3741  0008EA                     PL20:
  3742                           	callstack 19
  3743  0008EA  511E               	movf	_r_dec& (0+255),w,b
  3744  0008EC  0D0A               	mullw	10
  3745  0008EE  CFF3 F0F9          	movff	prodl,??_main
  3746  0008F2  CFF4 F0FA          	movff	prodh,??_main+1
  3747  0008F6  0E00               	movlw	0
  3748  0008F8  0100               	movlb	0	; () banked
  3749  0008FA  BFFA               	btfsc	(??_main+1)& (0+255),7,b
  3750  0008FC  0EFF               	movlw	255
  3751  0008FE  6FFB               	movwf	(??_main+2)& (0+255),b
  3752  000900  6FFC               	movwf	(??_main+3)& (0+255),b
  3753  000902  0101               	movlb	1	; () banked
  3754  000904  511F               	movf	_r_whole& (0+255),w,b
  3755  000906  6E1A               	movwf	___lmul@multiplier^0,c
  3756  000908  6A1B               	clrf	(___lmul@multiplier+1)^0,c
  3757  00090A  6A1C               	clrf	(___lmul@multiplier+2)^0,c
  3758  00090C  6A1D               	clrf	(___lmul@multiplier+3)^0,c
  3759  00090E  0EE8               	movlw	232
  3760  000910  6E1E               	movwf	___lmul@multiplicand^0,c
  3761  000912  0E03               	movlw	3
  3762  000914  6E1F               	movwf	(___lmul@multiplicand+1)^0,c
  3763  000916  6A20               	clrf	(___lmul@multiplicand+2)^0,c
  3764  000918  6A21               	clrf	(___lmul@multiplicand+3)^0,c
  3765  00091A  0C03               	retlw	3
  3766  00091C                     __end_ofPL20:
  3767                           	callstack 0
  3768  00091C                     PL28:
  3769                           	callstack 19
  3770  00091C  0100               	movlb	0	; () banked
  3771  00091E  51F9               	movf	??_main& (0+255),w,b
  3772  000920  241A               	addwf	?___lmul^0,w,c
  3773  000922  0101               	movlb	1	; () banked
  3774  000924  6F04               	movwf	_t_res& (0+255),b
  3775  000926  0100               	movlb	0	; () banked
  3776  000928  51FA               	movf	(??_main+1)& (0+255),w,b
  3777  00092A  201B               	addwfc	(?___lmul+1)^0,w,c
  3778  00092C  0101               	movlb	1	; () banked
  3779  00092E  6F05               	movwf	(_t_res+1)& (0+255),b
  3780  000930  0100               	movlb	0	; () banked
  3781  000932  51FB               	movf	(??_main+2)& (0+255),w,b
  3782  000934  201C               	addwfc	(?___lmul+2)^0,w,c
  3783  000936  0101               	movlb	1	; () banked
  3784  000938  6F06               	movwf	(_t_res+2)& (0+255),b
  3785  00093A  0100               	movlb	0	; () banked
  3786  00093C  51FC               	movf	(??_main+3)& (0+255),w,b
  3787  00093E  201D               	addwfc	(?___lmul+3)^0,w,c
  3788  000940  0101               	movlb	1	; () banked
  3789  000942  6F07               	movwf	(_t_res+3)& (0+255),b
  3790  000944  0012               	return	
  3791  000946                     __end_ofPL28:
  3792                           	callstack 0
  3793  000946                     PL86:
  3794                           	callstack 19
  3795  000946  0E7D               	movlw	low _TxtBuf
  3796  000948  6FD5               	movwf	sprintf@s& (0+255),b
  3797  00094A  0E01               	movlw	high _TxtBuf
  3798  00094C  6FD6               	movwf	(sprintf@s+1)& (0+255),b
  3799  00094E  0012               	return	
  3800  000950                     __end_ofPL86:
  3801                           	callstack 0
  3802  000950                     PL90:
  3803                           	callstack 19
  3804  000950  C108  F06A         	movff	_coef,___flmul@a
  3805  000954  C109  F06B         	movff	_coef+1,___flmul@a+1
  3806  000958  C10A  F06C         	movff	_coef+2,___flmul@a+2
  3807  00095C  C10B  F06D         	movff	_coef+3,___flmul@a+3
  3808  000960  0012               	return	
  3809  000962                     __end_ofPL90:
  3810                           	callstack 0
  3811  000962                     PL100:
  3812                           	callstack 26
  3813  000962  C066  F07F         	movff	?___flmul,___fladd@b
  3814  000966  C067  F080         	movff	?___flmul+1,___fladd@b+1
  3815  00096A  C068  F081         	movff	?___flmul+2,___fladd@b+2
  3816  00096E  C069  F082         	movff	?___flmul+3,___fladd@b+3
  3817  000972  0012               	return	
  3818  000974                     __end_ofPL100:
  3819                           	callstack 0
  3820  000974                     PL126:
  3821                           	callstack 19
  3822  000974  0E03               	movlw	3
  3823  000976  6E1E               	movwf	lcd_gotoxy@y^0,c
  3824  000978  0C01               	retlw	1
  3825  00097A                     __end_ofPL126:
  3826                           	callstack 0
  3827  00097A                     PL132:
  3828                           	callstack 19
  3829  00097A  0E02               	movlw	2
  3830  00097C  6E1E               	movwf	lcd_gotoxy@y^0,c
  3831  00097E  0C01               	retlw	1
  3832  000980                     __end_ofPL132:
  3833                           	callstack 0
  3834  000980                     PL134:
  3835                           	callstack 19
  3836  000980  C121  F116         	movff	_power,_EncData
  3837  000984  0101               	movlb	1	; () banked
  3838  000986  6B17               	clrf	(_EncData+1)& (0+255),b
  3839  000988  0012               	return	
  3840  00098A                     __end_ofPL134:
  3841                           	callstack 0
  3842  00098A                     PL146:
  3843                           	callstack 19
  3844  00098A  C116  F0F9         	movff	_EncData,??_main
  3845  00098E  C117  F0FA         	movff	_EncData+1,??_main+1
  3846  000992  0100               	movlb	0	; () banked
  3847  000994  51FA               	movf	(??_main+1)& (0+255),w,b
  3848  000996  0012               	return	
  3849  000998                     __end_ofPL146:
  3850                           	callstack 0
  3851  000998                     PL190:
  3852                           	callstack 19
  3853  000998  0E9C               	movlw	low STR_8
  3854  00099A  6E23               	movwf	lcdPrint@t^0,c
  3855  00099C  0E7E               	movlw	high STR_8
  3856  00099E  6E24               	movwf	(lcdPrint@t+1)^0,c
  3857  0009A0  0012               	return	
  3858  0009A2                     __end_ofPL190:
  3859                           	callstack 0
  3860  0009A2                     PL196:
  3861                           	callstack 19
  3862  0009A2  0E2D               	movlw	low STR_10
  3863  0009A4  6E23               	movwf	lcdPrint@t^0,c
  3864  0009A6  0E7F               	movlw	high STR_10
  3865  0009A8  6E24               	movwf	(lcdPrint@t+1)^0,c
  3866  0009AA  0012               	return	
  3867  0009AC                     __end_ofPL196:
  3868                           	callstack 0
  3869                           
  3870 ;; *************** function _write_eep *****************
  3871 ;; Defined at:
  3872 ;;		line 5 in file "eeprom.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  address         1    wreg     unsigned char 
  3875 ;;  data            1   25[COMRAM] unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  address         1   26[COMRAM] unsigned char 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/1
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3887 ;;      Params:         1       0       0       0       0       0       0
  3888 ;;      Locals:         1       0       0       0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0
  3890 ;;      Totals:         2       0       0       0       0       0       0
  3891 ;;Total ram usage:        2 bytes
  3892 ;; Hardware stack levels used: 1
  3893 ;; Hardware stack levels required when called: 3
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text1
  3902  003DF8                     __ptext1:
  3903                           	callstack 0
  3904  003DF8                     _write_eep:
  3905                           	callstack 27
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;incstack = 0
  3909                           ;write_eep@address stored from wreg
  3910  003DF8  6E1B               	movwf	write_eep@address^0,c
  3911  003DFA                     
  3912                           ;eeprom.c: 7:     while( EECON1bits.WR )
  3913                           
  3914                           ;eeprom.c: 8:     {}
  3915  003DFA  B2A6               	btfsc	166,1,c	;volsfr
  3916  003DFC  D7FE               	goto	l6488
  3917                           
  3918                           ;eeprom.c: 11:     EEADR = address;
  3919  003DFE  C01B  FFA9         	movff	write_eep@address,4009	;volatile
  3920                           
  3921                           ;eeprom.c: 12:     EEDATA = data;
  3922  003E02  C01A  FFA8         	movff	write_eep@data,4008	;volatile
  3923                           
  3924                           ;eeprom.c: 13:     EECON1bits.EEPGD = 0;
  3925  003E06  9EA6               	bcf	166,7,c	;volsfr
  3926                           
  3927                           ;eeprom.c: 14:     EECON1bits.CFGS = 0;
  3928  003E08  9CA6               	bcf	166,6,c	;volsfr
  3929                           
  3930                           ;eeprom.c: 15:     EECON1bits.WREN = 1;
  3931  003E0A  84A6               	bsf	166,2,c	;volsfr
  3932                           
  3933                           ;eeprom.c: 16:     INTCONbits.GIE = 0;
  3934  003E0C  9EF2               	bcf	242,7,c	;volatile
  3935                           
  3936                           ;eeprom.c: 18:     EECON2 = 0x55;
  3937  003E0E  0E55               	movlw	85
  3938  003E10  6EA7               	movwf	167,c	;volsfr
  3939                           
  3940                           ;eeprom.c: 19:     EECON2 = 0xAA;
  3941  003E12  0EAA               	movlw	170
  3942  003E14  6EA7               	movwf	167,c	;volsfr
  3943                           
  3944                           ;eeprom.c: 20:     EECON1bits.WR = 1;
  3945  003E16  82A6               	bsf	166,1,c	;volsfr
  3946                           
  3947                           ;eeprom.c: 22:     INTCONbits.GIE = 1;
  3948  003E18  8EF2               	bsf	242,7,c	;volatile
  3949  003E1A  0CAA               	retlw	170	;funcret
  3950  003E1C                     __end_of_write_eep:
  3951                           	callstack 0
  3952                           
  3953 ;; *************** function _sqrtf *****************
  3954 ;; Defined at:
  3955 ;;		line 22 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sqrtf.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  x               4   47[BANK0 ] float 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  ix              4   88[BANK0 ] long 
  3960 ;;  r               4   84[BANK0 ] unsigned long 
  3961 ;;  m               4   80[BANK0 ] long 
  3962 ;;  z               4   76[BANK0 ] float 
  3963 ;;  t               4   72[BANK0 ] long 
  3964 ;;  q               4   68[BANK0 ] long 
  3965 ;;  __xc8_float_    4   64[BANK0 ] struct .
  3966 ;;  i               4   60[BANK0 ] long 
  3967 ;;  s               4   56[BANK0 ] long 
  3968 ;;  sign            4    0        long 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  4   47[BANK0 ] float 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 3F/0
  3975 ;;		On exit  : 3F/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3978 ;;      Params:         0       4       0       0       0       0       0
  3979 ;;      Locals:         0      36       0       0       0       0       0
  3980 ;;      Temps:          0       5       0       0       0       0       0
  3981 ;;      Totals:         0      45       0       0       0       0       0
  3982 ;;Total ram usage:       45 bytes
  3983 ;; Hardware stack levels used: 1
  3984 ;; Hardware stack levels required when called: 4
  3985 ;; This function calls:
  3986 ;;		___fladd
  3987 ;;		___flge
  3988 ;;		___flmul
  3989 ;;		_nanf
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text2
  3996  00188C                     __ptext2:
  3997                           	callstack 0
  3998  00188C                     _sqrtf:
  3999                           	callstack 26
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004                           
  4005                           ;incstack = 0
  4006  00188C  C08F  F0A0         	movff	sqrtf@x,sqrtf@__xc8_float_word
  4007  001890  C090  F0A1         	movff	sqrtf@x+1,sqrtf@__xc8_float_word+1
  4008  001894  C091  F0A2         	movff	sqrtf@x+2,sqrtf@__xc8_float_word+2
  4009  001898  C092  F0A3         	movff	sqrtf@x+3,sqrtf@__xc8_float_word+3
  4010                           
  4011                           ; BSR set to: 0
  4012  00189C  C0A0  F0B8         	movff	sqrtf@__xc8_float_word,sqrtf@ix
  4013  0018A0  C0A1  F0B9         	movff	sqrtf@__xc8_float_word+1,sqrtf@ix+1
  4014  0018A4  C0A2  F0BA         	movff	sqrtf@__xc8_float_word+2,sqrtf@ix+2
  4015  0018A8  C0A3  F0BB         	movff	sqrtf@__xc8_float_word+3,sqrtf@ix+3
  4016                           
  4017                           ; BSR set to: 0
  4018  0018AC  6B93               	clrf	??_sqrtf& (0+255),b
  4019  0018AE  6B94               	clrf	(??_sqrtf+1)& (0+255),b
  4020  0018B0  0E80               	movlw	128
  4021  0018B2  15BA               	andwf	(sqrtf@ix+2)& (0+255),w,b
  4022  0018B4  D9A9               	call	PL186	;call to abstracted procedure
  4023  0018B6  0E80               	movlw	128
  4024  0018B8  1995               	xorwf	(??_sqrtf+2)& (0+255),w,b
  4025  0018BA  E12C               	bnz	l9648
  4026  0018BC  0E7F               	movlw	127
  4027  0018BE  1996               	xorwf	(??_sqrtf+3)& (0+255),w,b
  4028  0018C0  1193               	iorwf	??_sqrtf& (0+255),w,b
  4029  0018C2  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4030  0018C4  E127               	bnz	l9648
  4031                           
  4032                           ; BSR set to: 0
  4033  0018C6  C08F  F06A         	movff	sqrtf@x,___flmul@a
  4034  0018CA  C090  F06B         	movff	sqrtf@x+1,___flmul@a+1
  4035  0018CE  C091  F06C         	movff	sqrtf@x+2,___flmul@a+2
  4036  0018D2  C092  F06D         	movff	sqrtf@x+3,___flmul@a+3
  4037  0018D6  C08F  F066         	movff	sqrtf@x,___flmul@b
  4038  0018DA  C090  F067         	movff	sqrtf@x+1,___flmul@b+1
  4039  0018DE  C091  F068         	movff	sqrtf@x+2,___flmul@b+2
  4040  0018E2  C092  F069         	movff	sqrtf@x+3,___flmul@b+3
  4041  0018E6  EC37  F00F         	call	___flmul	;wreg free
  4042  0018EA  ECB1  F004         	call	PL100	;call to abstracted procedure
  4043  0018EE  C08F  F083         	movff	sqrtf@x,___fladd@a
  4044  0018F2  C090  F084         	movff	sqrtf@x+1,___fladd@a+1
  4045  0018F6  C091  F085         	movff	sqrtf@x+2,___fladd@a+2
  4046  0018FA  C092  F086         	movff	sqrtf@x+3,___fladd@a+3
  4047  0018FE  EC09  F00E         	call	___fladd	;wreg free
  4048  001902  C07F  F08F         	movff	?___fladd,?_sqrtf
  4049  001906  C080  F090         	movff	?___fladd+1,?_sqrtf+1
  4050  00190A  C081  F091         	movff	?___fladd+2,?_sqrtf+2
  4051  00190E  C082  F092         	movff	?___fladd+3,?_sqrtf+3
  4052  001912  0012               	return	
  4053  001914                     l9648:
  4054                           
  4055                           ; BSR set to: 0
  4056  001914  BFBB               	btfsc	(sqrtf@ix+3)& (0+255),7,b
  4057  001916  D006               	goto	u11310
  4058  001918  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4059  00191A  11BA               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  4060  00191C  11B9               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  4061  00191E  E124               	bnz	l9660
  4062  001920  05B8               	decf	sqrtf@ix& (0+255),w,b
  4063  001922  E222               	bc	l9660
  4064  001924                     u11310:
  4065                           
  4066                           ; BSR set to: 0
  4067  001924  D96C               	call	PL182	;call to abstracted procedure
  4068  001926  51BA               	movf	(sqrtf@ix+2)& (0+255),w,b
  4069  001928  D96F               	call	PL186	;call to abstracted procedure
  4070  00192A  5193               	movf	??_sqrtf& (0+255),w,b
  4071  00192C  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4072  00192E  1195               	iorwf	(??_sqrtf+2)& (0+255),w,b
  4073  001930  1196               	iorwf	(??_sqrtf+3)& (0+255),w,b
  4074  001932  E109               	bnz	l9654
  4075                           
  4076                           ; BSR set to: 0
  4077  001934  C08F  F08F         	movff	sqrtf@x,?_sqrtf
  4078  001938  C090  F090         	movff	sqrtf@x+1,?_sqrtf+1
  4079  00193C  C091  F091         	movff	sqrtf@x+2,?_sqrtf+2
  4080  001940  C092  F092         	movff	sqrtf@x+3,?_sqrtf+3
  4081  001944  0012               	return	
  4082  001946                     l9654:
  4083                           
  4084                           ; BSR set to: 0
  4085  001946  AFBB               	btfss	(sqrtf@ix+3)& (0+255),7,b
  4086  001948  D00F               	goto	l9660
  4087                           
  4088                           ; BSR set to: 0
  4089  00194A  0E6F               	movlw	low (STR_9+21)
  4090  00194C  6E1A               	movwf	nanf@s^0,c
  4091  00194E  0E7E               	movlw	high (STR_9+21)
  4092  001950  6E1B               	movwf	(nanf@s+1)^0,c
  4093  001952  EC1E  F01F         	call	_nanf	;wreg free
  4094  001956  C01A  F08F         	movff	?_nanf,?_sqrtf
  4095  00195A  C01B  F090         	movff	?_nanf+1,?_sqrtf+1
  4096  00195E  C01C  F091         	movff	?_nanf+2,?_sqrtf+2
  4097  001962  C01D  F092         	movff	?_nanf+3,?_sqrtf+3
  4098  001966  0012               	return	
  4099  001968                     l9660:
  4100                           
  4101                           ; BSR set to: 0
  4102  001968  0E17               	movlw	23
  4103  00196A  6F93               	movwf	??_sqrtf& (0+255),b
  4104  00196C  C0B8  F094         	movff	sqrtf@ix,??_sqrtf+1
  4105  001970  C0B9  F095         	movff	sqrtf@ix+1,??_sqrtf+2
  4106  001974  C0BA  F096         	movff	sqrtf@ix+2,??_sqrtf+3
  4107  001978  C0BB  F097         	movff	sqrtf@ix+3,??_sqrtf+4
  4108  00197C                     u11345:
  4109  00197C  6793               	tstfsz	??_sqrtf& (0+255),b
  4110  00197E  D001               	goto	u11346
  4111  001980  D007               	goto	u11347
  4112  001982                     u11346:
  4113  001982  3597               	rlcf	(??_sqrtf+4)& (0+255),w,b
  4114  001984  3397               	rrcf	(??_sqrtf+4)& (0+255),f,b
  4115  001986  3396               	rrcf	(??_sqrtf+3)& (0+255),f,b
  4116  001988  3395               	rrcf	(??_sqrtf+2)& (0+255),f,b
  4117  00198A  3394               	rrcf	(??_sqrtf+1)& (0+255),f,b
  4118  00198C  2F93               	decfsz	??_sqrtf& (0+255),f,b
  4119  00198E  D7F6               	goto	u11345
  4120  001990                     u11347:
  4121  001990  C094  F0B0         	movff	??_sqrtf+1,sqrtf@m
  4122  001994  C095  F0B1         	movff	??_sqrtf+2,sqrtf@m+1
  4123  001998  C096  F0B2         	movff	??_sqrtf+3,sqrtf@m+2
  4124  00199C  C097  F0B3         	movff	??_sqrtf+4,sqrtf@m+3
  4125  0019A0  0100               	movlb	0	; () banked
  4126  0019A2  51B0               	movf	sqrtf@m& (0+255),w,b
  4127  0019A4  11B1               	iorwf	(sqrtf@m+1)& (0+255),w,b
  4128  0019A6  11B2               	iorwf	(sqrtf@m+2)& (0+255),w,b
  4129  0019A8  11B3               	iorwf	(sqrtf@m+3)& (0+255),w,b
  4130  0019AA  E125               	bnz	l1759
  4131                           
  4132                           ; BSR set to: 0
  4133  0019AC  6B9C               	clrf	sqrtf@i& (0+255),b
  4134  0019AE  6B9D               	clrf	(sqrtf@i+1)& (0+255),b
  4135  0019B0  6B9E               	clrf	(sqrtf@i+2)& (0+255),b
  4136  0019B2  6B9F               	clrf	(sqrtf@i+3)& (0+255),b
  4137  0019B4  D00A               	goto	l9668
  4138  0019B6                     l9664:
  4139                           
  4140                           ; BSR set to: 0
  4141  0019B6  90D8               	bcf	status,0,c
  4142  0019B8  37B8               	rlcf	sqrtf@ix& (0+255),f,b
  4143  0019BA  37B9               	rlcf	(sqrtf@ix+1)& (0+255),f,b
  4144  0019BC  37BA               	rlcf	(sqrtf@ix+2)& (0+255),f,b
  4145  0019BE  37BB               	rlcf	(sqrtf@ix+3)& (0+255),f,b
  4146                           
  4147                           ; BSR set to: 0
  4148  0019C0  2B9C               	incf	sqrtf@i& (0+255),f,b
  4149  0019C2  0E00               	movlw	0
  4150  0019C4  239D               	addwfc	(sqrtf@i+1)& (0+255),f,b
  4151  0019C6  239E               	addwfc	(sqrtf@i+2)& (0+255),f,b
  4152  0019C8  239F               	addwfc	(sqrtf@i+3)& (0+255),f,b
  4153  0019CA                     l9668:
  4154                           
  4155                           ; BSR set to: 0
  4156  0019CA  AFBA               	btfss	(sqrtf@ix+2)& (0+255),7,b
  4157  0019CC  D7F4               	goto	l9664
  4158                           
  4159                           ; BSR set to: 0
  4160  0019CE  0EFF               	movlw	255
  4161  0019D0  259C               	addwf	sqrtf@i& (0+255),w,b
  4162  0019D2  6F93               	movwf	??_sqrtf& (0+255),b
  4163  0019D4  0EFF               	movlw	255
  4164  0019D6  219D               	addwfc	(sqrtf@i+1)& (0+255),w,b
  4165  0019D8  6F94               	movwf	(??_sqrtf+1)& (0+255),b
  4166  0019DA  0EFF               	movlw	255
  4167  0019DC  219E               	addwfc	(sqrtf@i+2)& (0+255),w,b
  4168  0019DE  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4169  0019E0  0EFF               	movlw	255
  4170  0019E2  219F               	addwfc	(sqrtf@i+3)& (0+255),w,b
  4171  0019E4  6F96               	movwf	(??_sqrtf+3)& (0+255),b
  4172  0019E6  5193               	movf	??_sqrtf& (0+255),w,b
  4173  0019E8  5FB0               	subwf	sqrtf@m& (0+255),f,b
  4174  0019EA  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4175  0019EC  5BB1               	subwfb	(sqrtf@m+1)& (0+255),f,b
  4176  0019EE  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4177  0019F0  5BB2               	subwfb	(sqrtf@m+2)& (0+255),f,b
  4178  0019F2  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4179  0019F4  5BB3               	subwfb	(sqrtf@m+3)& (0+255),f,b
  4180  0019F6                     l1759:
  4181                           
  4182                           ; BSR set to: 0
  4183  0019F6  0E81               	movlw	129
  4184  0019F8  27B0               	addwf	sqrtf@m& (0+255),f,b
  4185  0019FA  0EFF               	movlw	255
  4186  0019FC  23B1               	addwfc	(sqrtf@m+1)& (0+255),f,b
  4187  0019FE  23B2               	addwfc	(sqrtf@m+2)& (0+255),f,b
  4188  001A00  23B3               	addwfc	(sqrtf@m+3)& (0+255),f,b
  4189  001A02  D8FD               	call	PL182	;call to abstracted procedure
  4190  001A04  0E7F               	movlw	127
  4191  001A06  15BA               	andwf	(sqrtf@ix+2)& (0+255),w,b
  4192  001A08  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4193  001A0A  0E00               	movlw	0
  4194  001A0C  6B96               	clrf	(??_sqrtf+3)& (0+255),b
  4195  001A0E  1193               	iorwf	??_sqrtf& (0+255),w,b
  4196  001A10  6FB8               	movwf	sqrtf@ix& (0+255),b
  4197  001A12  0E00               	movlw	0
  4198  001A14  1194               	iorwf	(??_sqrtf+1)& (0+255),w,b
  4199  001A16  6FB9               	movwf	(sqrtf@ix+1)& (0+255),b
  4200  001A18  0E80               	movlw	128
  4201  001A1A  1195               	iorwf	(??_sqrtf+2)& (0+255),w,b
  4202  001A1C  6FBA               	movwf	(sqrtf@ix+2)& (0+255),b
  4203  001A1E  0E00               	movlw	0
  4204  001A20  1196               	iorwf	(??_sqrtf+3)& (0+255),w,b
  4205  001A22  6FBB               	movwf	(sqrtf@ix+3)& (0+255),b
  4206                           
  4207                           ; BSR set to: 0
  4208  001A24  B1B0               	btfsc	sqrtf@m& (0+255),0,b
  4209                           
  4210                           ; BSR set to: 0
  4211  001A26  D8DB               	call	PL54	;call to abstracted procedure
  4212  001A28                     l1763:
  4213                           
  4214                           ; BSR set to: 0
  4215  001A28  35B3               	rlcf	(sqrtf@m+3)& (0+255),w,b
  4216  001A2A  33B3               	rrcf	(sqrtf@m+3)& (0+255),f,b
  4217  001A2C  33B2               	rrcf	(sqrtf@m+2)& (0+255),f,b
  4218  001A2E  33B1               	rrcf	(sqrtf@m+1)& (0+255),f,b
  4219  001A30  33B0               	rrcf	sqrtf@m& (0+255),f,b
  4220  001A32  D8D5               	call	PL54	;call to abstracted procedure
  4221                           
  4222                           ; BSR set to: 0
  4223  001A34  6B98               	clrf	sqrtf@s& (0+255),b
  4224  001A36  6B99               	clrf	(sqrtf@s+1)& (0+255),b
  4225  001A38  6B9A               	clrf	(sqrtf@s+2)& (0+255),b
  4226  001A3A  6B9B               	clrf	(sqrtf@s+3)& (0+255),b
  4227  001A3C  6BA4               	clrf	sqrtf@q& (0+255),b
  4228  001A3E  6BA5               	clrf	(sqrtf@q+1)& (0+255),b
  4229  001A40  6BA6               	clrf	(sqrtf@q+2)& (0+255),b
  4230  001A42  6BA7               	clrf	(sqrtf@q+3)& (0+255),b
  4231                           
  4232                           ; BSR set to: 0
  4233  001A44  6BB4               	clrf	sqrtf@r& (0+255),b
  4234  001A46  6BB5               	clrf	(sqrtf@r+1)& (0+255),b
  4235  001A48  6BB6               	clrf	(sqrtf@r+2)& (0+255),b
  4236  001A4A  0E01               	movlw	1
  4237  001A4C  6FB7               	movwf	(sqrtf@r+3)& (0+255),b
  4238  001A4E  D03B               	goto	l9686
  4239  001A50                     l9680:
  4240                           
  4241                           ; BSR set to: 0
  4242  001A50  5198               	movf	sqrtf@s& (0+255),w,b
  4243  001A52  25B4               	addwf	sqrtf@r& (0+255),w,b
  4244  001A54  6FA8               	movwf	sqrtf@t& (0+255),b
  4245  001A56  5199               	movf	(sqrtf@s+1)& (0+255),w,b
  4246  001A58  21B5               	addwfc	(sqrtf@r+1)& (0+255),w,b
  4247  001A5A  6FA9               	movwf	(sqrtf@t+1)& (0+255),b
  4248  001A5C  519A               	movf	(sqrtf@s+2)& (0+255),w,b
  4249  001A5E  21B6               	addwfc	(sqrtf@r+2)& (0+255),w,b
  4250  001A60  6FAA               	movwf	(sqrtf@t+2)& (0+255),b
  4251  001A62  519B               	movf	(sqrtf@s+3)& (0+255),w,b
  4252  001A64  21B7               	addwfc	(sqrtf@r+3)& (0+255),w,b
  4253  001A66  6FAB               	movwf	(sqrtf@t+3)& (0+255),b
  4254  001A68  51A8               	movf	sqrtf@t& (0+255),w,b
  4255  001A6A  5DB8               	subwf	sqrtf@ix& (0+255),w,b
  4256  001A6C  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4257  001A6E  59B9               	subwfb	(sqrtf@ix+1)& (0+255),w,b
  4258  001A70  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4259  001A72  59BA               	subwfb	(sqrtf@ix+2)& (0+255),w,b
  4260  001A74  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4261  001A76  0A80               	xorlw	128
  4262  001A78  6F93               	movwf	??_sqrtf& (0+255),b
  4263  001A7A  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4264  001A7C  0A80               	xorlw	128
  4265  001A7E  5993               	subwfb	??_sqrtf& (0+255),w,b
  4266  001A80  E31C               	bnc	l1766
  4267                           
  4268                           ; BSR set to: 0
  4269  001A82  51A8               	movf	sqrtf@t& (0+255),w,b
  4270  001A84  25B4               	addwf	sqrtf@r& (0+255),w,b
  4271  001A86  6F98               	movwf	sqrtf@s& (0+255),b
  4272  001A88  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4273  001A8A  21B5               	addwfc	(sqrtf@r+1)& (0+255),w,b
  4274  001A8C  6F99               	movwf	(sqrtf@s+1)& (0+255),b
  4275  001A8E  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4276  001A90  21B6               	addwfc	(sqrtf@r+2)& (0+255),w,b
  4277  001A92  6F9A               	movwf	(sqrtf@s+2)& (0+255),b
  4278  001A94  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4279  001A96  21B7               	addwfc	(sqrtf@r+3)& (0+255),w,b
  4280  001A98  6F9B               	movwf	(sqrtf@s+3)& (0+255),b
  4281  001A9A  51A8               	movf	sqrtf@t& (0+255),w,b
  4282  001A9C  5FB8               	subwf	sqrtf@ix& (0+255),f,b
  4283  001A9E  51A9               	movf	(sqrtf@t+1)& (0+255),w,b
  4284  001AA0  5BB9               	subwfb	(sqrtf@ix+1)& (0+255),f,b
  4285  001AA2  51AA               	movf	(sqrtf@t+2)& (0+255),w,b
  4286  001AA4  5BBA               	subwfb	(sqrtf@ix+2)& (0+255),f,b
  4287  001AA6  51AB               	movf	(sqrtf@t+3)& (0+255),w,b
  4288  001AA8  5BBB               	subwfb	(sqrtf@ix+3)& (0+255),f,b
  4289  001AAA  51B4               	movf	sqrtf@r& (0+255),w,b
  4290  001AAC  27A4               	addwf	sqrtf@q& (0+255),f,b
  4291  001AAE  51B5               	movf	(sqrtf@r+1)& (0+255),w,b
  4292  001AB0  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4293  001AB2  51B6               	movf	(sqrtf@r+2)& (0+255),w,b
  4294  001AB4  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4295  001AB6  51B7               	movf	(sqrtf@r+3)& (0+255),w,b
  4296  001AB8  23A7               	addwfc	(sqrtf@q+3)& (0+255),f,b
  4297  001ABA                     l1766:
  4298                           
  4299                           ; BSR set to: 0
  4300  001ABA  D891               	call	PL54	;call to abstracted procedure
  4301                           
  4302                           ; BSR set to: 0
  4303  001ABC  90D8               	bcf	status,0,c
  4304  001ABE  33B7               	rrcf	(sqrtf@r+3)& (0+255),f,b
  4305  001AC0  33B6               	rrcf	(sqrtf@r+2)& (0+255),f,b
  4306  001AC2  33B5               	rrcf	(sqrtf@r+1)& (0+255),f,b
  4307  001AC4  33B4               	rrcf	sqrtf@r& (0+255),f,b
  4308  001AC6                     l9686:
  4309                           
  4310                           ; BSR set to: 0
  4311  001AC6  51B4               	movf	sqrtf@r& (0+255),w,b
  4312  001AC8  11B5               	iorwf	(sqrtf@r+1)& (0+255),w,b
  4313  001ACA  11B6               	iorwf	(sqrtf@r+2)& (0+255),w,b
  4314  001ACC  11B7               	iorwf	(sqrtf@r+3)& (0+255),w,b
  4315  001ACE  E1C0               	bnz	l9680
  4316                           
  4317                           ; BSR set to: 0
  4318  001AD0  51B8               	movf	sqrtf@ix& (0+255),w,b
  4319  001AD2  11B9               	iorwf	(sqrtf@ix+1)& (0+255),w,b
  4320  001AD4  11BA               	iorwf	(sqrtf@ix+2)& (0+255),w,b
  4321  001AD6  11BB               	iorwf	(sqrtf@ix+3)& (0+255),w,b
  4322  001AD8  E038               	bz	l1768
  4323                           
  4324                           ; BSR set to: 0
  4325  001ADA  D88A               	call	PL150	;call to abstracted procedure
  4326                           
  4327                           ; BSR set to: 0
  4328  001ADC  C0AC  F07F         	movff	sqrtf@z,___flge@ff1
  4329  001AE0  C0AD  F080         	movff	sqrtf@z+1,___flge@ff1+1
  4330  001AE4  C0AE  F081         	movff	sqrtf@z+2,___flge@ff1+2
  4331  001AE8  C0AF  F082         	movff	sqrtf@z+3,___flge@ff1+3
  4332  001AEC  6B83               	clrf	___flge@ff2& (0+255),b
  4333  001AEE  6B84               	clrf	(___flge@ff2+1)& (0+255),b
  4334  001AF0  0E80               	movlw	128
  4335  001AF2  6F85               	movwf	(___flge@ff2+2)& (0+255),b
  4336  001AF4  0E3F               	movlw	63
  4337  001AF6  6F86               	movwf	(___flge@ff2+3)& (0+255),b
  4338  001AF8  ECC1  F019         	call	___flge	;wreg free
  4339  001AFC  E326               	bnc	l1768
  4340                           
  4341                           ; BSR set to: 0
  4342  001AFE  D878               	call	PL150	;call to abstracted procedure
  4343                           
  4344                           ; BSR set to: 0
  4345  001B00  6B7F               	clrf	___flge@ff1& (0+255),b
  4346  001B02  6B80               	clrf	(___flge@ff1+1)& (0+255),b
  4347  001B04  0E80               	movlw	128
  4348  001B06  6F81               	movwf	(___flge@ff1+2)& (0+255),b
  4349  001B08  0E3F               	movlw	63
  4350  001B0A  6F82               	movwf	(___flge@ff1+3)& (0+255),b
  4351  001B0C  C0AC  F083         	movff	sqrtf@z,___flge@ff2
  4352  001B10  C0AD  F084         	movff	sqrtf@z+1,___flge@ff2+1
  4353  001B14  C0AE  F085         	movff	sqrtf@z+2,___flge@ff2+2
  4354  001B18  C0AF  F086         	movff	sqrtf@z+3,___flge@ff2+3
  4355  001B1C  ECC1  F019         	call	___flge	;wreg free
  4356  001B20  E206               	bc	l9700
  4357                           
  4358                           ; BSR set to: 0
  4359  001B22  0E02               	movlw	2
  4360  001B24  27A4               	addwf	sqrtf@q& (0+255),f,b
  4361  001B26  0E00               	movlw	0
  4362  001B28  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4363  001B2A  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4364  001B2C  D00D               	goto	L5
  4365  001B2E                     l9700:
  4366                           
  4367                           ; BSR set to: 0
  4368  001B2E  0E01               	movlw	1
  4369  001B30  15A4               	andwf	sqrtf@q& (0+255),w,b
  4370  001B32  6F93               	movwf	??_sqrtf& (0+255),b
  4371  001B34  6B94               	clrf	(??_sqrtf+1)& (0+255),b
  4372  001B36  6B95               	clrf	(??_sqrtf+2)& (0+255),b
  4373  001B38  6B96               	clrf	(??_sqrtf+3)& (0+255),b
  4374  001B3A  5193               	movf	??_sqrtf& (0+255),w,b
  4375  001B3C  27A4               	addwf	sqrtf@q& (0+255),f,b
  4376  001B3E  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4377  001B40  23A5               	addwfc	(sqrtf@q+1)& (0+255),f,b
  4378  001B42  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4379  001B44  23A6               	addwfc	(sqrtf@q+2)& (0+255),f,b
  4380  001B46  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4381  001B48                     L5:
  4382  001B48  23A7               	addwfc	(sqrtf@q+3)& (0+255),f,b
  4383  001B4A                     l1768:
  4384                           
  4385                           ; BSR set to: 0
  4386  001B4A  C0A4  F093         	movff	sqrtf@q,??_sqrtf
  4387  001B4E  C0A5  F094         	movff	sqrtf@q+1,??_sqrtf+1
  4388  001B52  C0A6  F095         	movff	sqrtf@q+2,??_sqrtf+2
  4389  001B56  C0A7  F096         	movff	sqrtf@q+3,??_sqrtf+3
  4390  001B5A  3596               	rlcf	(??_sqrtf+3)& (0+255),w,b
  4391  001B5C  3396               	rrcf	(??_sqrtf+3)& (0+255),f,b
  4392  001B5E  3395               	rrcf	(??_sqrtf+2)& (0+255),f,b
  4393  001B60  3394               	rrcf	(??_sqrtf+1)& (0+255),f,b
  4394  001B62  3393               	rrcf	??_sqrtf& (0+255),f,b
  4395  001B64  0E00               	movlw	0
  4396  001B66  2593               	addwf	??_sqrtf& (0+255),w,b
  4397  001B68  6FB8               	movwf	sqrtf@ix& (0+255),b
  4398  001B6A  0E00               	movlw	0
  4399  001B6C  2194               	addwfc	(??_sqrtf+1)& (0+255),w,b
  4400  001B6E  6FB9               	movwf	(sqrtf@ix+1)& (0+255),b
  4401  001B70  0E00               	movlw	0
  4402  001B72  2195               	addwfc	(??_sqrtf+2)& (0+255),w,b
  4403  001B74  6FBA               	movwf	(sqrtf@ix+2)& (0+255),b
  4404  001B76  0E3F               	movlw	63
  4405  001B78  2196               	addwfc	(??_sqrtf+3)& (0+255),w,b
  4406  001B7A  6FBB               	movwf	(sqrtf@ix+3)& (0+255),b
  4407  001B7C  C0B0  F093         	movff	sqrtf@m,??_sqrtf
  4408  001B80  C0B1  F094         	movff	sqrtf@m+1,??_sqrtf+1
  4409  001B84  C0B2  F095         	movff	sqrtf@m+2,??_sqrtf+2
  4410  001B88  C0B3  F096         	movff	sqrtf@m+3,??_sqrtf+3
  4411  001B8C  0E17               	movlw	23
  4412  001B8E                     u11435:
  4413  001B8E  90D8               	bcf	status,0,c
  4414  001B90  3793               	rlcf	??_sqrtf& (0+255),f,b
  4415  001B92  3794               	rlcf	(??_sqrtf+1)& (0+255),f,b
  4416  001B94  3795               	rlcf	(??_sqrtf+2)& (0+255),f,b
  4417  001B96  3796               	rlcf	(??_sqrtf+3)& (0+255),f,b
  4418  001B98  2EE8               	decfsz	wreg,f,c
  4419  001B9A  D7F9               	goto	u11435
  4420  001B9C  5193               	movf	??_sqrtf& (0+255),w,b
  4421  001B9E  27B8               	addwf	sqrtf@ix& (0+255),f,b
  4422  001BA0  5194               	movf	(??_sqrtf+1)& (0+255),w,b
  4423  001BA2  23B9               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  4424  001BA4  5195               	movf	(??_sqrtf+2)& (0+255),w,b
  4425  001BA6  23BA               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  4426  001BA8  5196               	movf	(??_sqrtf+3)& (0+255),w,b
  4427  001BAA  23BB               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  4428                           
  4429                           ; BSR set to: 0
  4430  001BAC  C0B8  F0A0         	movff	sqrtf@ix,sqrtf@__xc8_float_word
  4431  001BB0  C0B9  F0A1         	movff	sqrtf@ix+1,sqrtf@__xc8_float_word+1
  4432  001BB4  C0BA  F0A2         	movff	sqrtf@ix+2,sqrtf@__xc8_float_word+2
  4433  001BB8  C0BB  F0A3         	movff	sqrtf@ix+3,sqrtf@__xc8_float_word+3
  4434                           
  4435                           ; BSR set to: 0
  4436  001BBC  C0A0  F0AC         	movff	sqrtf@__xc8_float_word,sqrtf@z
  4437  001BC0  C0A1  F0AD         	movff	sqrtf@__xc8_float_word+1,sqrtf@z+1
  4438  001BC4  C0A2  F0AE         	movff	sqrtf@__xc8_float_word+2,sqrtf@z+2
  4439  001BC8  C0A3  F0AF         	movff	sqrtf@__xc8_float_word+3,sqrtf@z+3
  4440                           
  4441                           ; BSR set to: 0
  4442  001BCC  C0AC  F08F         	movff	sqrtf@z,?_sqrtf
  4443  001BD0  C0AD  F090         	movff	sqrtf@z+1,?_sqrtf+1
  4444  001BD4  C0AE  F091         	movff	sqrtf@z+2,?_sqrtf+2
  4445  001BD8  C0AF  F092         	movff	sqrtf@z+3,?_sqrtf+3
  4446                           
  4447                           ; BSR set to: 0
  4448  001BDC  0012               	return		;funcret
  4449  001BDE                     __end_of_sqrtf:
  4450                           	callstack 0
  4451  001BDE                     PL54:
  4452                           	callstack 26
  4453  001BDE  51B8               	movf	sqrtf@ix& (0+255),w,b
  4454  001BE0  27B8               	addwf	sqrtf@ix& (0+255),f,b
  4455  001BE2  51B9               	movf	(sqrtf@ix+1)& (0+255),w,b
  4456  001BE4  23B9               	addwfc	(sqrtf@ix+1)& (0+255),f,b
  4457  001BE6  51BA               	movf	(sqrtf@ix+2)& (0+255),w,b
  4458  001BE8  23BA               	addwfc	(sqrtf@ix+2)& (0+255),f,b
  4459  001BEA  51BB               	movf	(sqrtf@ix+3)& (0+255),w,b
  4460  001BEC  23BB               	addwfc	(sqrtf@ix+3)& (0+255),f,b
  4461  001BEE  0012               	return	
  4462  001BF0                     __end_ofPL54:
  4463                           	callstack 0
  4464  001BF0                     PL150:
  4465                           	callstack 26
  4466  001BF0  6BAC               	clrf	sqrtf@z& (0+255),b
  4467  001BF2  6BAD               	clrf	(sqrtf@z+1)& (0+255),b
  4468  001BF4  0E80               	movlw	128
  4469  001BF6  6FAE               	movwf	(sqrtf@z+2)& (0+255),b
  4470  001BF8  0E3F               	movlw	63
  4471  001BFA  6FAF               	movwf	(sqrtf@z+3)& (0+255),b
  4472  001BFC  0C3F               	retlw	63
  4473  001BFE                     __end_ofPL150:
  4474                           	callstack 0
  4475  001BFE                     PL182:
  4476                           	callstack 26
  4477  001BFE  51B8               	movf	sqrtf@ix& (0+255),w,b
  4478  001C00  6F93               	movwf	??_sqrtf& (0+255),b
  4479  001C02  51B9               	movf	(sqrtf@ix+1)& (0+255),w,b
  4480  001C04  6F94               	movwf	(??_sqrtf+1)& (0+255),b
  4481  001C06  0012               	return	
  4482  001C08                     __end_ofPL182:
  4483                           	callstack 0
  4484  001C08                     PL186:
  4485                           	callstack 26
  4486  001C08  6F95               	movwf	(??_sqrtf+2)& (0+255),b
  4487  001C0A  0E7F               	movlw	127
  4488  001C0C  15BB               	andwf	(sqrtf@ix+3)& (0+255),w,b
  4489  001C0E  6F96               	movwf	(??_sqrtf+3)& (0+255),b
  4490  001C10  0012               	return	
  4491  001C12                     __end_ofPL186:
  4492                           	callstack 0
  4493                           
  4494 ;; *************** function _nanf *****************
  4495 ;; Defined at:
  4496 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nanf.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  s               2   25[COMRAM] PTR const unsigned char 
  4499 ;;		 -> STR_49(1), 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  u               4   29[COMRAM] struct .
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  4   25[COMRAM] float 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2
  4506 ;; Tracked objects:
  4507 ;;		On entry : 3F/0
  4508 ;;		On exit  : 3F/0
  4509 ;;		Unchanged: 3F/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4511 ;;      Params:         4       0       0       0       0       0       0
  4512 ;;      Locals:         4       0       0       0       0       0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0
  4514 ;;      Totals:         8       0       0       0       0       0       0
  4515 ;;Total ram usage:        8 bytes
  4516 ;; Hardware stack levels used: 1
  4517 ;; Hardware stack levels required when called: 3
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_sqrtf
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text3
  4526  003E3C                     __ptext3:
  4527                           	callstack 0
  4528  003E3C                     _nanf:
  4529                           	callstack 26
  4530                           
  4531                           ; BSR set to: 0
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;incstack = 0
  4535  003E3C  681E               	setf	nanf@u^0,c
  4536  003E3E  681F               	setf	(nanf@u+1)^0,c
  4537  003E40  6820               	setf	(nanf@u+2)^0,c
  4538  003E42  0E7F               	movlw	127
  4539  003E44  6E21               	movwf	(nanf@u+3)^0,c
  4540                           
  4541                           ; BSR set to: 0
  4542  003E46  C01E  F01A         	movff	nanf@u,?_nanf
  4543  003E4A  C01F  F01B         	movff	nanf@u+1,?_nanf+1
  4544  003E4E  C020  F01C         	movff	nanf@u+2,?_nanf+2
  4545  003E52  C021  F01D         	movff	nanf@u+3,?_nanf+3
  4546                           
  4547                           ; BSR set to: 0
  4548  003E56  0C7F               	retlw	127	;funcret
  4549  003E58                     __end_of_nanf:
  4550                           	callstack 0
  4551                           
  4552 ;; *************** function _show_lcd_main *****************
  4553 ;; Defined at:
  4554 ;;		line 600 in file "main.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  pwr_dsp         2  151[BANK0 ] unsigned short 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 3F/1
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4568 ;;      Params:         0       0       0       0       0       0       0
  4569 ;;      Locals:         0       2       0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0
  4571 ;;      Totals:         0       2       0       0       0       0       0
  4572 ;;Total ram usage:        2 bytes
  4573 ;; Hardware stack levels used: 1
  4574 ;; Hardware stack levels required when called: 11
  4575 ;; This function calls:
  4576 ;;		___lwdiv
  4577 ;;		___lwmod
  4578 ;;		_calc_power
  4579 ;;		_lcdPrint
  4580 ;;		_lcd_gotoxy
  4581 ;;		_lcd_putc
  4582 ;;		_sprintf
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text4
  4589  0014DC                     __ptext4:
  4590                           	callstack 0
  4591  0014DC                     _show_lcd_main:
  4592                           	callstack 0
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;main.c: 601:     uint16_t pwr_dsp;;main.c: 603:     sprintf(TxtBuf, "U_In:%uV ", U_real
      +                          );
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;incstack = 0
  4599  0014DC  ECA3  F004         	call	PL86	;call to abstracted procedure
  4600  0014E0  0EB5               	movlw	low STR_21
  4601  0014E2  6FD7               	movwf	sprintf@fmt& (0+255),b
  4602  0014E4  0E7F               	movlw	high STR_21
  4603  0014E6  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4604  0014E8  C19B  F1D9         	movff	_U_real,?_sprintf+4
  4605  0014EC  C19C  F1DA         	movff	_U_real+1,?_sprintf+5
  4606  0014F0  ECEA  F01C         	call	_sprintf	;wreg free
  4607                           
  4608                           ; BSR set to: 1
  4609                           ;main.c: 604:     lcd_gotoxy(1, 1);
  4610  0014F4  0E01               	movlw	1
  4611  0014F6  6E1E               	movwf	lcd_gotoxy@y^0,c
  4612  0014F8  EC0D  F01D         	call	_lcd_gotoxy
  4613                           
  4614                           ;main.c: 605:     lcdPrint(TxtBuf);
  4615  0014FC  D990               	call	PL32	;call to abstracted procedure
  4616  0014FE  ECD9  F016         	call	_lcdPrint	;wreg free
  4617                           
  4618                           ;main.c: 607:     if (!is_stab) {
  4619  001502  BC44               	btfsc	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  4620  001504  D00A               	goto	l9722
  4621                           
  4622                           ;main.c: 608:         lcd_gotoxy(11, 1);
  4623  001506  D9BF               	call	PL208	;call to abstracted procedure
  4624  001508  EC0D  F01D         	call	_lcd_gotoxy
  4625                           
  4626                           ;main.c: 609:         lcdPrint("NOT STAB! ");
  4627  00150C  0E8A               	movlw	low STR_22
  4628  00150E  6E23               	movwf	lcdPrint@t^0,c
  4629  001510  0E7F               	movlw	high STR_22
  4630  001512  6E24               	movwf	(lcdPrint@t+1)^0,c
  4631  001514  ECD9  F016         	call	_lcdPrint	;wreg free
  4632                           
  4633                           ;main.c: 610:     } else {
  4634  001518  D009               	goto	l9726
  4635  00151A                     l9722:
  4636                           
  4637                           ;main.c: 611:         lcd_gotoxy(11, 1);
  4638  00151A  D9B5               	call	PL208	;call to abstracted procedure
  4639  00151C  EC0D  F01D         	call	_lcd_gotoxy
  4640                           
  4641                           ;main.c: 612:         lcdPrint("STABILIZE ");
  4642  001520  0E95               	movlw	low STR_23
  4643  001522  6E23               	movwf	lcdPrint@t^0,c
  4644  001524  0E7F               	movlw	high STR_23
  4645  001526  6E24               	movwf	(lcdPrint@t+1)^0,c
  4646  001528  ECD9  F016         	call	_lcdPrint	;wreg free
  4647  00152C                     l9726:
  4648                           
  4649                           ;main.c: 615:     sprintf(TxtBuf, "PwR:%u%% ", t_power);
  4650  00152C  D972               	call	PL30	;call to abstracted procedure
  4651  00152E  0EAB               	movlw	low STR_24
  4652  001530  6FD7               	movwf	sprintf@fmt& (0+255),b
  4653  001532  0E7F               	movlw	high STR_24
  4654  001534  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4655  001536  C039  F1D9         	movff	_t_power,?_sprintf+4
  4656  00153A  C03A  F1DA         	movff	_t_power+1,?_sprintf+5
  4657  00153E  ECEA  F01C         	call	_sprintf	;wreg free
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;main.c: 616:     lcd_gotoxy(11, 2);
  4661  001542  0E02               	movlw	2
  4662  001544  6E1E               	movwf	lcd_gotoxy@y^0,c
  4663  001546  0E0B               	movlw	11
  4664  001548  EC0D  F01D         	call	_lcd_gotoxy
  4665                           
  4666                           ;main.c: 617:     lcdPrint(TxtBuf);
  4667  00154C  D968               	call	PL32	;call to abstracted procedure
  4668  00154E  ECD9  F016         	call	_lcdPrint	;wreg free
  4669                           
  4670                           ;main.c: 619:     sprintf(TxtBuf, "Coe:%.4f", coef);
  4671  001552  D95F               	call	PL30	;call to abstracted procedure
  4672  001554  0ED2               	movlw	low STR_25
  4673  001556  6FD7               	movwf	sprintf@fmt& (0+255),b
  4674  001558  0E7F               	movlw	high STR_25
  4675  00155A  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  4676  00155C  C108  F1D9         	movff	_coef,?_sprintf+4
  4677  001560  C109  F1DA         	movff	_coef+1,?_sprintf+5
  4678  001564  C10A  F1DB         	movff	_coef+2,?_sprintf+6
  4679  001568  C10B  F1DC         	movff	_coef+3,?_sprintf+7
  4680  00156C  ECEA  F01C         	call	_sprintf	;wreg free
  4681                           
  4682                           ; BSR set to: 1
  4683                           ;main.c: 620:     lcd_gotoxy(1, 4);
  4684  001570  D987               	call	PL206	;call to abstracted procedure
  4685  001572  EC0D  F01D         	call	_lcd_gotoxy
  4686                           
  4687                           ;main.c: 621:     lcdPrint(TxtBuf);
  4688  001576  D953               	call	PL32	;call to abstracted procedure
  4689  001578  ECD9  F016         	call	_lcdPrint	;wreg free
  4690                           
  4691                           ;main.c: 623:     lcd_gotoxy(12, 4);
  4692  00157C  0E04               	movlw	4
  4693  00157E  6E1E               	movwf	lcd_gotoxy@y^0,c
  4694  001580  0E0C               	movlw	12
  4695  001582  EC0D  F01D         	call	_lcd_gotoxy
  4696                           
  4697                           ;main.c: 624:     lcd_putc('T');
  4698  001586  0E54               	movlw	84
  4699  001588  EC55  F01F         	call	_lcd_putc
  4700                           
  4701                           ;main.c: 625:     lcd_putc(':');
  4702  00158C  0E3A               	movlw	58
  4703  00158E  EC55  F01F         	call	_lcd_putc
  4704                           
  4705                           ;main.c: 626:     if (TempEn) {
  4706  001592  0101               	movlb	1	; () banked
  4707  001594  5125               	movf	_TempEn& (0+255),w,b
  4708  001596  E101 D0B8          	bz	l9764
  4709                           
  4710                           ; BSR set to: 1
  4711                           ;main.c: 627:         if (isTemp == 1) {
  4712  00159A  0528               	decf	_isTemp& (0+255),w,b
  4713  00159C  E001 D098          	bnz	l9756
  4714                           
  4715                           ; BSR set to: 1
  4716                           ;main.c: 628:             if (((temperature / 1000) % 10) == 0) {
  4717  0015A0  D967               	call	PL120	;call to abstracted procedure
  4718  0015A2  D931               	call	PL26	;call to abstracted procedure
  4719  0015A4  ECC5  F01C         	call	___lwdiv	;wreg free
  4720  0015A8  D926               	call	PL10	;call to abstracted procedure
  4721  0015AA  EC2E  F01D         	call	___lwmod	;wreg free
  4722  0015AE  5021               	movf	?___lwmod^0,w,c
  4723  0015B0  1022               	iorwf	(?___lwmod+1)^0,w,c
  4724  0015B2  E15A               	bnz	l9754
  4725                           
  4726                           ;main.c: 629:                 if (((temperature / 100) % 10) == 0) {
  4727  0015B4  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4728  0015B6  0E64               	movlw	100
  4729  0015B8  D926               	call	PL26	;call to abstracted procedure
  4730  0015BA  ECC5  F01C         	call	___lwdiv	;wreg free
  4731  0015BE  D91B               	call	PL10	;call to abstracted procedure
  4732  0015C0  EC2E  F01D         	call	___lwmod	;wreg free
  4733  0015C4  5021               	movf	?___lwmod^0,w,c
  4734  0015C6  1022               	iorwf	(?___lwmod+1)^0,w,c
  4735  0015C8  E123               	bnz	l9752
  4736                           
  4737                           ;main.c: 630:                     lcd_putc(((temperature / 10) % 10) + 48);
  4738  0015CA  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4739  0015CC  0E0A               	movlw	10
  4740  0015CE  D91B               	call	PL26	;call to abstracted procedure
  4741  0015D0  ECC5  F01C         	call	___lwdiv	;wreg free
  4742  0015D4  D910               	call	PL10	;call to abstracted procedure
  4743  0015D6  EC2E  F01D         	call	___lwmod	;wreg free
  4744  0015DA  5021               	movf	?___lwmod^0,w,c
  4745  0015DC  0F30               	addlw	48
  4746  0015DE  EC55  F01F         	call	_lcd_putc
  4747                           
  4748                           ;main.c: 631:                     lcd_putc('.');
  4749  0015E2  0E2E               	movlw	46
  4750  0015E4  EC55  F01F         	call	_lcd_putc
  4751                           
  4752                           ;main.c: 632:                     lcd_putc((temperature % 10) + 48);
  4753  0015E8  D91F               	call	PL62	;call to abstracted procedure
  4754  0015EA  EC2E  F01D         	call	___lwmod	;wreg free
  4755  0015EE  5021               	movf	?___lwmod^0,w,c
  4756  0015F0  0F30               	addlw	48
  4757  0015F2  EC55  F01F         	call	_lcd_putc
  4758                           
  4759                           ;main.c: 633:                     lcd_putc(7);
  4760  0015F6  0E07               	movlw	7
  4761  0015F8  EC55  F01F         	call	_lcd_putc
  4762                           
  4763                           ;main.c: 634:                     lcd_putc(' ');
  4764  0015FC  0E20               	movlw	32
  4765  0015FE  EC55  F01F         	call	_lcd_putc
  4766                           
  4767                           ;main.c: 635:                     lcd_putc(' ');
  4768  001602  0E20               	movlw	32
  4769  001604  EC55  F01F         	call	_lcd_putc
  4770                           
  4771                           ;main.c: 636:                     lcd_putc(' ');
  4772  001608  0E20               	movlw	32
  4773  00160A  EC55  F01F         	call	_lcd_putc
  4774                           
  4775                           ;main.c: 638:                 } else {
  4776  00160E  D092               	goto	l9766
  4777  001610                     l9752:
  4778                           
  4779                           ;main.c: 639:                     lcd_putc(((temperature / 100) % 10) + 48);
  4780  001610  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4781  001612  0E64               	movlw	100
  4782  001614  D8F8               	call	PL26	;call to abstracted procedure
  4783  001616  ECC5  F01C         	call	___lwdiv	;wreg free
  4784  00161A  D8ED               	call	PL10	;call to abstracted procedure
  4785  00161C  EC2E  F01D         	call	___lwmod	;wreg free
  4786  001620  5021               	movf	?___lwmod^0,w,c
  4787  001622  0F30               	addlw	48
  4788  001624  EC55  F01F         	call	_lcd_putc
  4789                           
  4790                           ;main.c: 640:                     lcd_putc(((temperature / 10) % 10) + 48);
  4791  001628  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4792  00162A  0E0A               	movlw	10
  4793  00162C  D8EC               	call	PL26	;call to abstracted procedure
  4794  00162E  ECC5  F01C         	call	___lwdiv	;wreg free
  4795  001632  D8E1               	call	PL10	;call to abstracted procedure
  4796  001634  EC2E  F01D         	call	___lwmod	;wreg free
  4797  001638  5021               	movf	?___lwmod^0,w,c
  4798  00163A  0F30               	addlw	48
  4799  00163C  EC55  F01F         	call	_lcd_putc
  4800                           
  4801                           ;main.c: 641:                     lcd_putc('.');
  4802  001640  0E2E               	movlw	46
  4803  001642  EC55  F01F         	call	_lcd_putc
  4804                           
  4805                           ;main.c: 642:                     lcd_putc((temperature % 10) + 48);
  4806  001646  D8F0               	call	PL62	;call to abstracted procedure
  4807  001648  EC2E  F01D         	call	___lwmod	;wreg free
  4808  00164C  5021               	movf	?___lwmod^0,w,c
  4809  00164E  0F30               	addlw	48
  4810  001650  EC55  F01F         	call	_lcd_putc
  4811                           
  4812                           ;main.c: 643:                     lcd_putc(7);
  4813  001654  0E07               	movlw	7
  4814  001656  EC55  F01F         	call	_lcd_putc
  4815                           
  4816                           ;main.c: 644:                     lcd_putc(' ');
  4817  00165A  0E20               	movlw	32
  4818  00165C  EC55  F01F         	call	_lcd_putc
  4819                           
  4820                           ;main.c: 645:                     lcd_putc(' ');
  4821  001660  0E20               	movlw	32
  4822  001662  EC55  F01F         	call	_lcd_putc
  4823  001666  D066               	goto	l9766
  4824  001668                     l9754:
  4825                           
  4826                           ;main.c: 649:                 lcd_putc(((temperature / 1000) % 10) + 48);
  4827  001668  D903               	call	PL120	;call to abstracted procedure
  4828  00166A  D8CD               	call	PL26	;call to abstracted procedure
  4829  00166C  ECC5  F01C         	call	___lwdiv	;wreg free
  4830  001670  D8C2               	call	PL10	;call to abstracted procedure
  4831  001672  EC2E  F01D         	call	___lwmod	;wreg free
  4832  001676  5021               	movf	?___lwmod^0,w,c
  4833  001678  0F30               	addlw	48
  4834  00167A  EC55  F01F         	call	_lcd_putc
  4835                           
  4836                           ;main.c: 650:                 lcd_putc(((temperature / 100) % 10) + 48);
  4837  00167E  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4838  001680  0E64               	movlw	100
  4839  001682  D8C1               	call	PL26	;call to abstracted procedure
  4840  001684  ECC5  F01C         	call	___lwdiv	;wreg free
  4841  001688  D8B6               	call	PL10	;call to abstracted procedure
  4842  00168A  EC2E  F01D         	call	___lwmod	;wreg free
  4843  00168E  5021               	movf	?___lwmod^0,w,c
  4844  001690  0F30               	addlw	48
  4845  001692  EC55  F01F         	call	_lcd_putc
  4846                           
  4847                           ;main.c: 651:                 lcd_putc(((temperature / 10) % 10) + 48);
  4848  001696  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
  4849  001698  0E0A               	movlw	10
  4850  00169A  D8B5               	call	PL26	;call to abstracted procedure
  4851  00169C  ECC5  F01C         	call	___lwdiv	;wreg free
  4852  0016A0  D8AA               	call	PL10	;call to abstracted procedure
  4853  0016A2  EC2E  F01D         	call	___lwmod	;wreg free
  4854  0016A6  5021               	movf	?___lwmod^0,w,c
  4855  0016A8  0F30               	addlw	48
  4856  0016AA  EC55  F01F         	call	_lcd_putc
  4857                           
  4858                           ;main.c: 652:                 lcd_putc('.');
  4859  0016AE  0E2E               	movlw	46
  4860  0016B0  EC55  F01F         	call	_lcd_putc
  4861                           
  4862                           ;main.c: 653:                 lcd_putc((temperature % 10) + 48);
  4863  0016B4  D8B9               	call	PL62	;call to abstracted procedure
  4864  0016B6  EC2E  F01D         	call	___lwmod	;wreg free
  4865  0016BA  5021               	movf	?___lwmod^0,w,c
  4866  0016BC  0F30               	addlw	48
  4867  0016BE  EC55  F01F         	call	_lcd_putc
  4868                           
  4869                           ;main.c: 654:                 lcd_putc(7);
  4870  0016C2  0E07               	movlw	7
  4871  0016C4  EC55  F01F         	call	_lcd_putc
  4872                           
  4873                           ;main.c: 655:                 lcd_putc(' ');
  4874  0016C8  0E20               	movlw	32
  4875  0016CA  EC55  F01F         	call	_lcd_putc
  4876  0016CE  D032               	goto	l9766
  4877  0016D0                     l9756:
  4878                           
  4879                           ; BSR set to: 1
  4880  0016D0  0E03               	movlw	3
  4881  0016D2  1928               	xorwf	_isTemp& (0+255),w,b
  4882  0016D4  E12F               	bnz	l9766
  4883                           
  4884                           ; BSR set to: 1
  4885                           ;main.c: 659:             lcd_putc('?');
  4886  0016D6  0E3F               	movlw	63
  4887  0016D8  EC55  F01F         	call	_lcd_putc
  4888                           
  4889                           ;main.c: 660:             lcd_putc('?');
  4890  0016DC  0E3F               	movlw	63
  4891  0016DE  EC55  F01F         	call	_lcd_putc
  4892                           
  4893                           ;main.c: 661:             lcd_putc('?');
  4894  0016E2  0E3F               	movlw	63
  4895  0016E4  EC55  F01F         	call	_lcd_putc
  4896                           
  4897                           ;main.c: 662:             lcd_putc(' ');
  4898  0016E8  0E20               	movlw	32
  4899  0016EA  EC55  F01F         	call	_lcd_putc
  4900                           
  4901                           ;main.c: 663:             lcd_putc(' ');
  4902  0016EE  0E20               	movlw	32
  4903  0016F0  EC55  F01F         	call	_lcd_putc
  4904                           
  4905                           ;main.c: 664:             lcd_putc(' ');
  4906  0016F4  0E20               	movlw	32
  4907  0016F6  EC55  F01F         	call	_lcd_putc
  4908                           
  4909                           ;main.c: 665:             lcd_putc(' ');
  4910  0016FA  0E20               	movlw	32
  4911  0016FC  EC55  F01F         	call	_lcd_putc
  4912                           
  4913                           ;main.c: 666:             sound_enable = 1;
  4914  001700  0E01               	movlw	1
  4915  001702  0101               	movlb	1	; () banked
  4916  001704  6F29               	movwf	_sound_enable& (0+255),b
  4917                           
  4918                           ; BSR set to: 1
  4919                           ;main.c: 667:             TMR2ON = 1;
  4920  001706  84CA               	bsf	4042,2,c	;volatile
  4921  001708  D015               	goto	l9766
  4922  00170A                     l9764:
  4923                           
  4924                           ; BSR set to: 1
  4925                           ;main.c: 670:         lcd_putc('-');
  4926  00170A  0E2D               	movlw	45
  4927  00170C  EC55  F01F         	call	_lcd_putc
  4928                           
  4929                           ;main.c: 671:         lcd_putc('O');
  4930  001710  0E4F               	movlw	79
  4931  001712  EC55  F01F         	call	_lcd_putc
  4932                           
  4933                           ;main.c: 672:         lcd_putc('F');
  4934  001716  0E46               	movlw	70
  4935  001718  EC55  F01F         	call	_lcd_putc
  4936                           
  4937                           ;main.c: 673:         lcd_putc('F');
  4938  00171C  0E46               	movlw	70
  4939  00171E  EC55  F01F         	call	_lcd_putc
  4940                           
  4941                           ;main.c: 674:         lcd_putc('-');
  4942  001722  0E2D               	movlw	45
  4943  001724  EC55  F01F         	call	_lcd_putc
  4944                           
  4945                           ;main.c: 675:         lcd_putc(' ');
  4946  001728  0E20               	movlw	32
  4947  00172A  EC55  F01F         	call	_lcd_putc
  4948                           
  4949                           ;main.c: 676:         lcd_putc(' ');
  4950  00172E  0E20               	movlw	32
  4951  001730  EC55  F01F         	call	_lcd_putc
  4952  001734                     l9766:
  4953                           
  4954                           ;main.c: 679:     if ((tick_t1_1 <= 100) && (show_tp)) {
  4955  001734  0E65               	movlw	101
  4956  001736  0101               	movlb	1	; () banked
  4957  001738  612B               	cpfslt	_tick_t1_1& (0+255),b
  4958  00173A  D03B               	goto	l9788
  4959                           
  4960                           ; BSR set to: 1
  4961  00173C  A844               	btfss	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4962  00173E  D039               	goto	l9788
  4963                           
  4964                           ; BSR set to: 1
  4965                           ;main.c: 681:         pwr_dsp = calc_power((uint8_t) EncData, t_res, 220);
  4966  001740  D885               	call	PL94	;call to abstracted procedure
  4967  001742  0100               	movlb	0	; () banked
  4968  001744  6B6C               	clrf	(calc_power@u_rl+1)& (0+255),b
  4969  001746  0EDC               	movlw	220
  4970  001748  6F6B               	movwf	calc_power@u_rl& (0+255),b
  4971  00174A  0101               	movlb	1	; () banked
  4972  00174C  5116               	movf	_EncData& (0+255),w,b
  4973  00174E  EC60  F013         	call	_calc_power
  4974  001752  C067  F0F7         	movff	?_calc_power,show_lcd_main@pwr_dsp
  4975  001756  C068  F0F8         	movff	?_calc_power+1,show_lcd_main@pwr_dsp+1
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 682:         sprintf(TxtBuf, "ClcP:%c%-4uW %c=%u.%u", 0x01, pwr_dsp, 0x02, r_wh
      +                          ole, r_dec);
  4979  00175A  D85B               	call	PL30	;call to abstracted procedure
  4980  00175C  0E70               	movlw	low STR_26
  4981  00175E  6FD7               	movwf	sprintf@fmt& (0+255),b
  4982  001760  0E7E               	movlw	high STR_26
  4983  001762  D889               	call	PL198	;call to abstracted procedure
  4984  001764  C0F7  F1DB         	movff	show_lcd_main@pwr_dsp,?_sprintf+6
  4985  001768  C0F8  F1DC         	movff	show_lcd_main@pwr_dsp+1,?_sprintf+7
  4986  00176C  D865               	call	PL82	;call to abstracted procedure
  4987  00176E  ECEA  F01C         	call	_sprintf	;wreg free
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;main.c: 683:         lcd_gotoxy(1, 3);
  4991  001772  ECBA  F004         	call	PL126	;call to abstracted procedure
  4992  001776  EC0D  F01D         	call	_lcd_gotoxy
  4993                           
  4994                           ;main.c: 684:         lcdPrint(TxtBuf);
  4995  00177A  D851               	call	PL32	;call to abstracted procedure
  4996  00177C  ECD9  F016         	call	_lcdPrint	;wreg free
  4997                           
  4998                           ;main.c: 685:         if (is_power) {
  4999  001780  AA44               	btfss	(_is_power/(0+8))^0,_is_power& (0+7),c
  5000  001782  D005               	goto	l9782
  5001                           
  5002                           ;main.c: 686:             sprintf(TxtBuf, "PwU:%u%%*", EncData);
  5003  001784  D846               	call	PL30	;call to abstracted procedure
  5004  001786  D86B               	call	PL118	;call to abstracted procedure
  5005  001788  ECEA  F01C         	call	_sprintf	;wreg free
  5006                           
  5007                           ;main.c: 687:         } else {
  5008  00178C  D00B               	goto	l9784
  5009  00178E                     l9782:
  5010                           
  5011                           ;main.c: 688:             sprintf(TxtBuf, "PwU:%u%%  ", EncData);
  5012  00178E  D841               	call	PL30	;call to abstracted procedure
  5013  001790  0E7F               	movlw	low STR_28
  5014  001792  6FD7               	movwf	sprintf@fmt& (0+255),b
  5015  001794  0E7F               	movlw	high STR_28
  5016  001796  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  5017  001798  C116  F1D9         	movff	_EncData,?_sprintf+4
  5018  00179C  C117  F1DA         	movff	_EncData+1,?_sprintf+5
  5019  0017A0  ECEA  F01C         	call	_sprintf	;wreg free
  5020  0017A4                     l9784:
  5021                           
  5022                           ; BSR set to: 1
  5023                           ;main.c: 690:         lcd_gotoxy(1, 2);
  5024  0017A4  ECBD  F004         	call	PL132	;call to abstracted procedure
  5025  0017A8  EC0D  F01D         	call	_lcd_gotoxy
  5026                           
  5027                           ;main.c: 691:         lcdPrint(TxtBuf);
  5028  0017AC  D838               	call	PL32	;call to abstracted procedure
  5029  0017AE  EFD9  F016         	goto	_lcdPrint	;wreg free
  5030  0017B2                     l9788:
  5031                           
  5032                           ; BSR set to: 1
  5033                           ;main.c: 694:         sprintf(TxtBuf, "ApxP:%c%-4uW %c=%u.%u", 0x01, watt_disp, 0x02, r_
      +                          whole, r_dec);
  5034  0017B2  ECA3  F004         	call	PL86	;call to abstracted procedure
  5035  0017B6  0E86               	movlw	low STR_29
  5036  0017B8  6FD7               	movwf	sprintf@fmt& (0+255),b
  5037  0017BA  0E7E               	movlw	high STR_29
  5038  0017BC  D85C               	call	PL198	;call to abstracted procedure
  5039  0017BE  C118  F1DB         	movff	_watt_disp,?_sprintf+6
  5040  0017C2  C119  F1DC         	movff	_watt_disp+1,?_sprintf+7
  5041  0017C6  D838               	call	PL82	;call to abstracted procedure
  5042  0017C8  ECEA  F01C         	call	_sprintf	;wreg free
  5043                           
  5044                           ; BSR set to: 1
  5045                           ;main.c: 695:         show_tp = 0;
  5046  0017CC  9844               	bcf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  5047                           
  5048                           ; BSR set to: 1
  5049                           ;main.c: 696:         lcd_gotoxy(1, 3);
  5050  0017CE  ECBA  F004         	call	PL126	;call to abstracted procedure
  5051  0017D2  EC0D  F01D         	call	_lcd_gotoxy
  5052                           
  5053                           ;main.c: 697:         lcdPrint(TxtBuf);
  5054  0017D6  D823               	call	PL32	;call to abstracted procedure
  5055  0017D8  ECD9  F016         	call	_lcdPrint	;wreg free
  5056                           
  5057                           ;main.c: 698:         sprintf(TxtBuf, "PwU:%u%%*", EncData);
  5058  0017DC  D81A               	call	PL30	;call to abstracted procedure
  5059  0017DE  D83F               	call	PL118	;call to abstracted procedure
  5060  0017E0  ECEA  F01C         	call	_sprintf	;wreg free
  5061                           
  5062                           ; BSR set to: 1
  5063                           ;main.c: 699:         lcd_gotoxy(1, 2);
  5064  0017E4  ECBD  F004         	call	PL132	;call to abstracted procedure
  5065  0017E8  EC0D  F01D         	call	_lcd_gotoxy
  5066                           
  5067                           ;main.c: 700:         lcdPrint(TxtBuf);
  5068  0017EC  D818               	call	PL32	;call to abstracted procedure
  5069  0017EE  ECD9  F016         	call	_lcdPrint	;wreg free
  5070                           
  5071                           ;main.c: 701:         EncData = power;
  5072  0017F2  EFC0  F004         	goto	PL134	;call to abstracted procedure
  5073  0017F6                     __end_of_show_lcd_main:
  5074                           	callstack 0
  5075  0017F6                     PL10:
  5076                           	callstack 19
  5077  0017F6  C01A  F021         	movff	?___lwdiv,___lwmod@dividend
  5078  0017FA  C01B  F022         	movff	?___lwdiv+1,___lwmod@dividend+1
  5079  0017FE  6A24               	clrf	(___lwmod@divisor+1)^0,c
  5080  001800  0E0A               	movlw	10
  5081  001802  6E23               	movwf	___lwmod@divisor^0,c
  5082  001804  0C0A               	retlw	10
  5083  001806                     __end_ofPL10:
  5084                           	callstack 0
  5085  001806                     PL26:
  5086                           	callstack 19
  5087  001806  6E1C               	movwf	___lwdiv@divisor^0,c
  5088  001808  C19D  F01A         	movff	_temperature,___lwdiv@dividend
  5089  00180C  C19E  F01B         	movff	_temperature+1,___lwdiv@dividend+1
  5090  001810  0012               	return	
  5091  001812                     __end_ofPL26:
  5092                           	callstack 0
  5093  001812                     PL30:
  5094                           	callstack 19
  5095  001812  0E7D               	movlw	low _TxtBuf
  5096  001814  0101               	movlb	1	; () banked
  5097  001816  6FD5               	movwf	sprintf@s& (0+255),b
  5098  001818  0E01               	movlw	high _TxtBuf
  5099  00181A  6FD6               	movwf	(sprintf@s+1)& (0+255),b
  5100  00181C  0012               	return	
  5101  00181E                     __end_ofPL30:
  5102                           	callstack 0
  5103  00181E                     PL32:
  5104                           	callstack 19
  5105  00181E  0E7D               	movlw	low _TxtBuf
  5106  001820  6E23               	movwf	lcdPrint@t^0,c
  5107  001822  0E01               	movlw	high _TxtBuf
  5108  001824  6E24               	movwf	(lcdPrint@t+1)^0,c
  5109  001826  0012               	return	
  5110  001828                     __end_ofPL32:
  5111                           	callstack 0
  5112  001828                     PL62:
  5113                           	callstack 19
  5114  001828  C19D  F021         	movff	_temperature,___lwmod@dividend
  5115  00182C  C19E  F022         	movff	_temperature+1,___lwmod@dividend+1
  5116  001830  6A24               	clrf	(___lwmod@divisor+1)^0,c
  5117  001832  0E0A               	movlw	10
  5118  001834  6E23               	movwf	___lwmod@divisor^0,c
  5119  001836  0C0A               	retlw	10
  5120  001838                     __end_ofPL62:
  5121                           	callstack 0
  5122  001838                     PL82:
  5123                           	callstack 19
  5124  001838  6BDE               	clrf	(?_sprintf+9)& (0+255),b
  5125  00183A  0E02               	movlw	2
  5126  00183C  6FDD               	movwf	(?_sprintf+8)& (0+255),b
  5127  00183E  C11F  F1DF         	movff	_r_whole,?_sprintf+10
  5128  001842  6BE0               	clrf	(?_sprintf+11)& (0+255),b
  5129  001844  C11E  F1E1         	movff	_r_dec,?_sprintf+12
  5130  001848  6BE2               	clrf	(?_sprintf+13)& (0+255),b
  5131  00184A  0012               	return	
  5132  00184C                     __end_ofPL82:
  5133                           	callstack 0
  5134  00184C                     PL94:
  5135                           	callstack 19
  5136  00184C  C104  F067         	movff	_t_res,calc_power@res
  5137  001850  C105  F068         	movff	_t_res+1,calc_power@res+1
  5138  001854  C106  F069         	movff	_t_res+2,calc_power@res+2
  5139  001858  C107  F06A         	movff	_t_res+3,calc_power@res+3
  5140  00185C  0012               	return	
  5141  00185E                     __end_ofPL94:
  5142                           	callstack 0
  5143  00185E                     PL118:
  5144                           	callstack 19
  5145  00185E  0EBF               	movlw	low STR_27
  5146  001860  6FD7               	movwf	sprintf@fmt& (0+255),b
  5147  001862  0E7F               	movlw	high STR_27
  5148  001864  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  5149  001866  C116  F1D9         	movff	_EncData,?_sprintf+4
  5150  00186A  C117  F1DA         	movff	_EncData+1,?_sprintf+5
  5151  00186E  0012               	return	
  5152  001870                     __end_ofPL118:
  5153                           	callstack 0
  5154  001870                     PL120:
  5155                           	callstack 19
  5156  001870  0E03               	movlw	3
  5157  001872  6E1D               	movwf	(___lwdiv@divisor+1)^0,c
  5158  001874  0CE8               	retlw	232
  5159  001876                     __end_ofPL120:
  5160                           	callstack 0
  5161  001876                     PL198:
  5162                           	callstack 19
  5163  001876  6FD8               	movwf	(sprintf@fmt+1)& (0+255),b
  5164  001878  6BDA               	clrf	(?_sprintf+5)& (0+255),b
  5165  00187A  0E01               	movlw	1
  5166  00187C  6FD9               	movwf	(?_sprintf+4)& (0+255),b
  5167  00187E  0C01               	retlw	1
  5168  001880                     __end_ofPL198:
  5169                           	callstack 0
  5170  001880                     PL206:
  5171                           	callstack 19
  5172  001880  0E04               	movlw	4
  5173  001882  6E1E               	movwf	lcd_gotoxy@y^0,c
  5174  001884  0C01               	retlw	1
  5175  001886                     __end_ofPL206:
  5176                           	callstack 0
  5177  001886                     PL208:
  5178                           	callstack 19
  5179  001886  0E01               	movlw	1
  5180  001888  6E1E               	movwf	lcd_gotoxy@y^0,c
  5181  00188A  0C0B               	retlw	11
  5182  00188C                     __end_ofPL208:
  5183                           	callstack 0
  5184                           
  5185 ;; *************** function _sprintf *****************
  5186 ;; Defined at:
  5187 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  s               2   50[BANK1 ] PTR unsigned char 
  5190 ;;		 -> TxtBuf(21), 
  5191 ;;  fmt             2   52[BANK1 ] PTR const unsigned char 
  5192 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5193 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5194 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5195 ;;		 -> STR_2(15), 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  f              11   66[BANK1 ] struct _IO_FILE
  5198 ;;  ap              2   64[BANK1 ] PTR void [1]
  5199 ;;		 -> ?_sprintf(2), 
  5200 ;;  ret             2    0        int 
  5201 ;; Return value:  Size  Location     Type
  5202 ;;                  2   50[BANK1 ] int 
  5203 ;; Registers used:
  5204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 3F/1
  5207 ;;		On exit  : 3F/1
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5210 ;;      Params:         0       0      14       0       0       0       0
  5211 ;;      Locals:         0       0      13       0       0       0       0
  5212 ;;      Temps:          0       0       0       0       0       0       0
  5213 ;;      Totals:         0       0      27       0       0       0       0
  5214 ;;Total ram usage:       27 bytes
  5215 ;; Hardware stack levels used: 1
  5216 ;; Hardware stack levels required when called: 10
  5217 ;; This function calls:
  5218 ;;		_vfprintf
  5219 ;; This function is called by:
  5220 ;;		_main
  5221 ;;		_show_lcd_main
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text5
  5226  0039D4                     __ptext5:
  5227                           	callstack 0
  5228  0039D4                     _sprintf:
  5229                           	callstack 20
  5230                           
  5231                           ; BSR set to: 1
  5232                           
  5233                           ;incstack = 0
  5234  0039D4  0ED9               	movlw	low (?_sprintf+4)
  5235  0039D6  6FE3               	movwf	sprintf@ap& (0+255),b
  5236  0039D8  0E01               	movlw	high (?_sprintf+4)
  5237  0039DA  6FE4               	movwf	(sprintf@ap+1)& (0+255),b
  5238  0039DC  C1D5  F1E5         	movff	sprintf@s,sprintf@f
  5239  0039E0  C1D6  F1E6         	movff	sprintf@s+1,sprintf@f+1
  5240                           
  5241                           ; BSR set to: 1
  5242  0039E4  6BE8               	clrf	(sprintf@f+3)& (0+255),b
  5243  0039E6  6BE9               	clrf	(sprintf@f+4)& (0+255),b
  5244                           
  5245                           ; BSR set to: 1
  5246  0039E8  6BEE               	clrf	(sprintf@f+9)& (0+255),b
  5247  0039EA  6BEF               	clrf	(sprintf@f+10)& (0+255),b
  5248                           
  5249                           ; BSR set to: 1
  5250  0039EC  0EE5               	movlw	low sprintf@f
  5251  0039EE  0100               	movlb	0	; () banked
  5252  0039F0  6FEF               	movwf	vfprintf@fp& (0+255),b
  5253  0039F2  0E01               	movlw	high sprintf@f
  5254  0039F4  6FF0               	movwf	(vfprintf@fp+1)& (0+255),b
  5255  0039F6  C1D7  F0F1         	movff	sprintf@fmt,vfprintf@fmt
  5256  0039FA  C1D8  F0F2         	movff	sprintf@fmt+1,vfprintf@fmt+1
  5257  0039FE  0EE3               	movlw	low sprintf@ap
  5258  003A00  6FF3               	movwf	vfprintf@ap& (0+255),b
  5259  003A02  0E01               	movlw	high sprintf@ap
  5260  003A04  6FF4               	movwf	(vfprintf@ap+1)& (0+255),b
  5261  003A06  ECDC  F01B         	call	_vfprintf	;wreg free
  5262                           
  5263                           ; BSR set to: 1
  5264  003A0A  51E8               	movf	(sprintf@f+3)& (0+255),w,b
  5265  003A0C  25D5               	addwf	sprintf@s& (0+255),w,b
  5266  003A0E  6ED9               	movwf	fsr2l,c
  5267  003A10  51E9               	movf	(sprintf@f+4)& (0+255),w,b
  5268  003A12  21D6               	addwfc	(sprintf@s+1)& (0+255),w,b
  5269  003A14  6EDA               	movwf	fsr2h,c
  5270  003A16  6ADF               	clrf	indf2,c
  5271                           
  5272                           ; BSR set to: 1
  5273  003A18  0C00               	retlw	0	;funcret
  5274  003A1A                     __end_of_sprintf:
  5275                           	callstack 0
  5276                           
  5277 ;; *************** function _vfprintf *****************
  5278 ;; Defined at:
  5279 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  fp              2  143[BANK0 ] PTR struct _IO_FILE
  5282 ;;		 -> sprintf@f(11), 
  5283 ;;  fmt             2  145[BANK0 ] PTR const unsigned char 
  5284 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5285 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5286 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5287 ;;		 -> STR_2(15), 
  5288 ;;  ap              2  147[BANK0 ] PTR PTR void 
  5289 ;;		 -> sprintf@ap(2), 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  cfmt            2  149[BANK0 ] PTR unsigned char 
  5292 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
  5293 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
  5294 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  5295 ;;		 -> STR_2(15), 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2  143[BANK0 ] int 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 3F/0
  5302 ;;		On exit  : 3F/1
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       6       0       0       0       0       0
  5306 ;;      Locals:         0       2       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         0       8       0       0       0       0       0
  5309 ;;Total ram usage:        8 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 9
  5312 ;; This function calls:
  5313 ;;		_vfpfcnvrt
  5314 ;; This function is called by:
  5315 ;;		_sprintf
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text6
  5320  0037B8                     __ptext6:
  5321                           	callstack 0
  5322  0037B8                     _vfprintf:
  5323                           	callstack 20
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  5327                           
  5328                           ; BSR set to: 1
  5329                           ;incstack = 0
  5330  0037B8  C0F1  F0F5         	movff	vfprintf@fmt,vfprintf@cfmt
  5331  0037BC  C0F2  F0F6         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  5335  0037C0  0101               	movlb	1	; () banked
  5336  0037C2  6B14               	clrf	_nout& (0+255),b
  5337  0037C4  6B15               	clrf	(_nout+1)& (0+255),b
  5338                           
  5339                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  5340  0037C6  D014               	goto	l9278
  5341  0037C8                     l9276:
  5342                           
  5343                           ; BSR set to: 1
  5344                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  5345  0037C8  C0EF  F0D0         	movff	vfprintf@fp,vfpfcnvrt@fp
  5346  0037CC  C0F0  F0D1         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  5347  0037D0  0EF5               	movlw	low vfprintf@cfmt
  5348  0037D2  0100               	movlb	0	; () banked
  5349  0037D4  6FD2               	movwf	vfpfcnvrt@fmt& (0+255),b
  5350  0037D6  C0F3  F0D3         	movff	vfprintf@ap,vfpfcnvrt@ap
  5351  0037DA  C0F4  F0D4         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  5352  0037DE  EC8B  F008         	call	_vfpfcnvrt	;wreg free
  5353  0037E2  51D0               	movf	?_vfpfcnvrt& (0+255),w,b
  5354  0037E4  0101               	movlb	1	; () banked
  5355  0037E6  2714               	addwf	_nout& (0+255),f,b
  5356  0037E8  0100               	movlb	0	; () banked
  5357  0037EA  51D1               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  5358  0037EC  0101               	movlb	1	; () banked
  5359  0037EE  2315               	addwfc	(_nout+1)& (0+255),f,b
  5360  0037F0                     l9278:
  5361                           
  5362                           ; BSR set to: 1
  5363                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  5364  0037F0  C0F5  FFF6         	movff	vfprintf@cfmt,tblptrl
  5365  0037F4  C0F6  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  5366  0037F8                     	if	0	;tblptru may be non-zero
  5367  0037F8                     	endif
  5368  0037F8                     	if	0	;tblptru may be non-zero
  5369  0037F8                     	endif
  5370  0037F8  0008               	tblrd		*
  5371  0037FA  50F5               	movf	tablat,w,c
  5372  0037FC  E1E5               	bnz	l9276
  5373                           
  5374                           ; BSR set to: 1
  5375                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  5376  0037FE  C114  F0EF         	movff	_nout,?_vfprintf
  5377  003802  C115  F0F0         	movff	_nout+1,?_vfprintf+1
  5378                           
  5379                           ; BSR set to: 1
  5380  003806  0012               	return		;funcret
  5381  003808                     __end_of_vfprintf:
  5382                           	callstack 0
  5383                           
  5384 ;; *************** function _vfpfcnvrt *****************
  5385 ;; Defined at:
  5386 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  fp              2  112[BANK0 ] PTR struct _IO_FILE
  5389 ;;		 -> sprintf@f(11), 
  5390 ;;  fmt             1  114[BANK0 ] PTR PTR unsigned char 
  5391 ;;		 -> vfprintf@cfmt(2), 
  5392 ;;  ap              2  115[BANK0 ] PTR PTR void 
  5393 ;;		 -> sprintf@ap(2), 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  llu             8  121[BANK0 ] unsigned long long 
  5396 ;;  ll              8    0        long long 
  5397 ;;  f               4  135[BANK0 ] long long 
  5398 ;;  ct              3  139[BANK0 ] unsigned char [3]
  5399 ;;  vp              3    0        PTR void 
  5400 ;;  done            2  131[BANK0 ] int 
  5401 ;;  cp              2  129[BANK0 ] PTR unsigned char 
  5402 ;;		 -> ?_sprintf(2), STR_20(4), STR_19(3), U_real(2), 
  5403 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  5404 ;;  i               2    0        int 
  5405 ;;  c               1  142[BANK0 ] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  2  112[BANK0 ] int 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 3F/0
  5412 ;;		On exit  : 3F/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5415 ;;      Params:         0       5       0       0       0       0       0
  5416 ;;      Locals:         0      22       0       0       0       0       0
  5417 ;;      Temps:          0       4       0       0       0       0       0
  5418 ;;      Totals:         0      31       0       0       0       0       0
  5419 ;;Total ram usage:       31 bytes
  5420 ;; Hardware stack levels used: 1
  5421 ;; Hardware stack levels required when called: 8
  5422 ;; This function calls:
  5423 ;;		_atoi
  5424 ;;		_ctoa
  5425 ;;		_efgtoa
  5426 ;;		_fputc
  5427 ;;		_isdigit
  5428 ;;		_isupper
  5429 ;;		_stoa
  5430 ;;		_strncmp
  5431 ;;		_tolower
  5432 ;;		_utoa
  5433 ;; This function is called by:
  5434 ;;		_vfprintf
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text7
  5439  001116                     __ptext7:
  5440                           	callstack 0
  5441  001116                     _vfpfcnvrt:
  5442                           	callstack 0
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  5446                           
  5447                           ; BSR set to: 1
  5448                           ;incstack = 0
  5449  001116  D975               	call	PL2	;call to abstracted procedure
  5450  001118  0A25               	xorlw	37
  5451  00111A  E001 D169          	bnz	l9130
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  5455  00111E  D9A6               	call	PL8	;call to abstracted procedure
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  5459  001120  6A2D               	clrf	_width^0,c
  5460  001122  6A2E               	clrf	(_width+1)^0,c
  5461  001124  6A31               	clrf	_flags^0,c
  5462  001126  6A32               	clrf	(_flags+1)^0,c
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  5466  001128  682F               	setf	_prec^0,c
  5467  00112A  6830               	setf	(_prec+1)^0,c
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
  5471  00112C  6BE3               	clrf	vfpfcnvrt@done& (0+255),b
  5472  00112E  6BE4               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  5473                           
  5474                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  5475  001130  D020               	goto	l9004
  5476  001132                     l8978:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
  5480  001132  8031               	bsf	_flags^0,0,c
  5481  001134                     l8980:
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
  5485  001134  D99B               	call	PL8	;call to abstracted procedure
  5486                           
  5487                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
  5488  001136  D01D               	goto	l9004
  5489  001138                     l8982:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
  5493  001138  8231               	bsf	_flags^0,1,c
  5494  00113A  D7FC               	goto	l8980
  5495  00113C                     l8986:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
  5499  00113C  8431               	bsf	_flags^0,2,c
  5500  00113E  D7FA               	goto	l8980
  5501  001140                     l8990:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
  5505  001140  8631               	bsf	_flags^0,3,c
  5506  001142  D7F8               	goto	l8980
  5507  001144                     l8994:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
  5511  001144  8831               	bsf	_flags^0,4,c
  5512  001146  D7F6               	goto	l8980
  5513  001148                     l8998:
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  5517  001148  6BE4               	clrf	(vfpfcnvrt@done+1)& (0+255),b
  5518  00114A  0E01               	movlw	1
  5519  00114C  6FE3               	movwf	vfpfcnvrt@done& (0+255),b
  5520                           
  5521                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  5522  00114E  D011               	goto	l9004
  5523  001150                     l9002:
  5524                           
  5525                           ; BSR set to: 0
  5526  001150  D958               	call	PL2	;call to abstracted procedure
  5527  001152  6FD5               	movwf	??_vfpfcnvrt& (0+255),b
  5528  001154  6BD6               	clrf	(??_vfpfcnvrt+1)& (0+255),b
  5529                           
  5530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5531                           ; Switch size 1, requested type "space"
  5532                           ; Number of cases is 1, Range of values is 0 to 0
  5533                           ; switch strategies available:
  5534                           ; Name         Instructions Cycles
  5535                           ; simple_byte            4     3 (average)
  5536                           ;	Chosen strategy is simple_byte
  5537  001156  51D6               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  5538  001158  E1F7               	bnz	l8998
  5539                           
  5540                           ; BSR set to: 0
  5541                           ; Switch size 1, requested type "space"
  5542                           ; Number of cases is 5, Range of values is 32 to 48
  5543                           ; switch strategies available:
  5544                           ; Name         Instructions Cycles
  5545                           ; simple_byte           16     9 (average)
  5546                           ;	Chosen strategy is simple_byte
  5547  00115A  51D5               	movf	??_vfpfcnvrt& (0+255),w,b
  5548  00115C  0A20               	xorlw	32	; case 32
  5549  00115E  E0F0               	bz	l8990
  5550  001160  0A03               	xorlw	3	; case 35
  5551  001162  E0F0               	bz	l8994
  5552  001164  0A08               	xorlw	8	; case 43
  5553  001166  E0EA               	bz	l8986
  5554  001168  0A06               	xorlw	6	; case 45
  5555  00116A  E0E3               	bz	l8978
  5556  00116C  0A1D               	xorlw	29	; case 48
  5557  00116E  E0E4               	bz	l8982
  5558  001170  D7EB               	goto	l8998
  5559  001172                     l9004:
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  5563  001172  51E3               	movf	vfpfcnvrt@done& (0+255),w,b
  5564  001174  11E4               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  5565  001176  E0EC               	bz	l9002
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  5569  001178  B031               	btfsc	_flags^0,0,c
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  5573  00117A  9231               	bcf	_flags^0,1,c
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  5577  00117C  D942               	call	PL2	;call to abstracted procedure
  5578  00117E  0A2A               	xorlw	42
  5579  001180  E10F               	bnz	l9016
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  5583  001182  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5584  001184  D97A               	call	PL12	;call to abstracted procedure
  5585                           
  5586                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  5587  001186  D947               	call	PL4	;call to abstracted procedure
  5588  001188  CFDE F02D          	movff	postinc2,_width
  5589  00118C  CFDD F02E          	movff	postdec2,_width+1
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  5593  001190  AE2E               	btfss	(_width+1)^0,7,c
  5594  001192  D016               	goto	u10790
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  5598  001194  8031               	bsf	_flags^0,0,c
  5599                           
  5600                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  5601  001196  6C2D               	negf	_width^0,c
  5602  001198  1E2E               	comf	(_width+1)^0,f,c
  5603  00119A  B0D8               	btfsc	status,0,c
  5604  00119C  2A2E               	incf	(_width+1)^0,f,c
  5605  00119E  D010               	goto	u10790
  5606  0011A0                     l9016:
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  5610  0011A0  D98C               	call	PL138	;call to abstracted procedure
  5611  0011A2  ECC0  F017         	call	_atoi	;wreg free
  5612  0011A6  C067  F02D         	movff	?_atoi,_width
  5613  0011AA  C068  F02E         	movff	?_atoi+1,_width+1
  5614                           
  5615                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  5616  0011AE  D001               	goto	l9022
  5617  0011B0                     l9018:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  5621  0011B0  D95D               	call	PL8	;call to abstracted procedure
  5622  0011B2                     l9022:
  5623                           
  5624                           ; BSR set to: 0
  5625  0011B2  D967               	call	PL34	;call to abstracted procedure
  5626  0011B4  D926               	call	PL2	;call to abstracted procedure
  5627  0011B6  D979               	call	PL70	;call to abstracted procedure
  5628  0011B8  E103               	bnz	u10790
  5629  0011BA  0E0A               	movlw	10
  5630  0011BC  5DD7               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  5631  0011BE  E3F8               	bnc	l9018
  5632  0011C0                     u10790:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 762:         if (
      +                          (*fmt)[0] == '.') {
  5636  0011C0  D920               	call	PL2	;call to abstracted procedure
  5637  0011C2  0A2E               	xorlw	46
  5638  0011C4  E11E               	bnz	u10820
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 763:             
      +                          prec = 0;
  5642  0011C6  6A2F               	clrf	_prec^0,c
  5643  0011C8  6A30               	clrf	(_prec+1)^0,c
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 764:             
      +                          ++*fmt;
  5647  0011CA  D950               	call	PL8	;call to abstracted procedure
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 765:             
      +                          if ((*fmt)[0] == '*') {
  5651  0011CC  D91A               	call	PL2	;call to abstracted procedure
  5652  0011CE  0A2A               	xorlw	42
  5653  0011D0  E108               	bnz	l9034
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 766:             
      +                              ++*fmt;
  5657  0011D2  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5658  0011D4  D952               	call	PL12	;call to abstracted procedure
  5659                           
  5660                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 767:             
      +                              prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  5661  0011D6  D91F               	call	PL4	;call to abstracted procedure
  5662  0011D8  CFDE F02F          	movff	postinc2,_prec
  5663  0011DC  CFDD F030          	movff	postdec2,_prec+1
  5664                           
  5665                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 768:             
      +                          } else {
  5666  0011E0  D010               	goto	u10820
  5667  0011E2                     l9034:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 769:             
      +                              prec = atoi(*fmt);
  5671  0011E2  D96B               	call	PL138	;call to abstracted procedure
  5672  0011E4  ECC0  F017         	call	_atoi	;wreg free
  5673  0011E8  C067  F02F         	movff	?_atoi,_prec
  5674  0011EC  C068  F030         	movff	?_atoi+1,_prec+1
  5675                           
  5676                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 770:             
      +                              while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  5677  0011F0  D001               	goto	l9040
  5678  0011F2                     l9036:
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 771:             
      +                                  ++*fmt;
  5682  0011F2  D93C               	call	PL8	;call to abstracted procedure
  5683  0011F4                     l9040:
  5684                           
  5685                           ; BSR set to: 0
  5686  0011F4  D946               	call	PL34	;call to abstracted procedure
  5687  0011F6  D905               	call	PL2	;call to abstracted procedure
  5688  0011F8  D958               	call	PL70	;call to abstracted procedure
  5689  0011FA  E103               	bnz	u10820
  5690  0011FC  0E0A               	movlw	10
  5691  0011FE  5DD7               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  5692  001200  E3F8               	bnc	l9036
  5693  001202                     u10820:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 779:         ct[0
      +                          ] = (char)tolower((int)(*fmt)[0]);
  5697  001202  D8FF               	call	PL2	;call to abstracted procedure
  5698  001204  6E20               	movwf	tolower@c^0,c
  5699  001206  6A21               	clrf	(tolower@c+1)^0,c
  5700  001208  ECE5  F01D         	call	_tolower	;wreg free
  5701  00120C  5020               	movf	?_tolower^0,w,c
  5702  00120E  6FEB               	movwf	vfpfcnvrt@ct& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 780:         if (
      +                          ct[0]) {
  5706  001210  51EB               	movf	vfpfcnvrt@ct& (0+255),w,b
  5707  001212  E013               	bz	l9052
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 781:             
      +                          ct[1] = (char)tolower((int)(*fmt)[1]);
  5711  001214  D942               	call	PL68	;call to abstracted procedure
  5712  001216  2BD5               	incf	??_vfpfcnvrt& (0+255),f,b
  5713  001218  D938               	call	PL66	;call to abstracted procedure
  5714  00121A  D95C               	call	PL204	;call to abstracted procedure
  5715  00121C  ECE5  F01D         	call	_tolower	;wreg free
  5716  001220  5020               	movf	?_tolower^0,w,c
  5717  001222  6FEC               	movwf	(vfpfcnvrt@ct+1)& (0+255),b
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 782:             
      +                          if (ct[1]) {
  5721  001224  51EC               	movf	(vfpfcnvrt@ct+1)& (0+255),w,b
  5722  001226  E009               	bz	l9052
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 783:             
      +                              ct[2] = (char)tolower((int)(*fmt)[2]);
  5726  001228  D938               	call	PL68	;call to abstracted procedure
  5727  00122A  0E02               	movlw	2
  5728  00122C  27D5               	addwf	??_vfpfcnvrt& (0+255),f,b
  5729  00122E  D92D               	call	PL66	;call to abstracted procedure
  5730  001230  D951               	call	PL204	;call to abstracted procedure
  5731  001232  ECE5  F01D         	call	_tolower	;wreg free
  5732  001236  5020               	movf	?_tolower^0,w,c
  5733  001238  6FED               	movwf	(vfpfcnvrt@ct+2)& (0+255),b
  5734  00123A                     l9052:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 814:         if (
      +                          *fmt[0] == 'c') {
  5738  00123A  D8E3               	call	PL2	;call to abstracted procedure
  5739  00123C  0A63               	xorlw	99
  5740  00123E  E112               	bnz	l9060
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 815:             
      +                          ++*fmt;
  5744  001240  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5745  001242  D91B               	call	PL12	;call to abstracted procedure
  5746                           
  5747                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 816:             
      +                          c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5748  001244  D8E8               	call	PL4	;call to abstracted procedure
  5749  001246  50DF               	movf	indf2,w,c
  5750  001248  6FEE               	movwf	vfpfcnvrt@c& (0+255),b
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 817:             
      +                          return ctoa(fp, c);
  5754  00124A  C0D0  F060         	movff	vfpfcnvrt@fp,ctoa@fp
  5755  00124E  C0D1  F061         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  5756  001252  C0EE  F062         	movff	vfpfcnvrt@c,ctoa@c
  5757  001256  EC08  F01A         	call	_ctoa	;wreg free
  5758  00125A  C060  F0D0         	movff	?_ctoa,?_vfpfcnvrt
  5759  00125E  C061  F0D1         	movff	?_ctoa+1,?_vfpfcnvrt+1
  5760  001262  0012               	return	
  5761  001264                     l9060:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 942:         if (
      +                          ct[0] == 'f') {
  5765  001264  0E66               	movlw	102
  5766  001266  19EB               	xorwf	vfpfcnvrt@ct& (0+255),w,b
  5767  001268  E121               	bnz	l9072
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 944:             
      +                          c = (*fmt)[0];
  5771  00126A  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5772  00126C  6ED9               	movwf	fsr2l,c
  5773  00126E  6ADA               	clrf	fsr2h,c
  5774  001270  CFDE FFF6          	movff	postinc2,tblptrl
  5775  001274  CFDD FFF7          	movff	postdec2,tblptrh
  5776  001278                     	if	0	;tblptru may be non-zero
  5777  001278                     	endif
  5778  001278                     	if	0	;tblptru may be non-zero
  5779  001278                     	endif
  5780  001278  0008               	tblrd		*
  5781  00127A  CFF5 F0EE          	movff	tablat,vfpfcnvrt@c
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 945:             
      +                          ++*fmt;
  5785  00127E  D8F6               	call	PL8	;call to abstracted procedure
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 946:             
      +                          f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5789  001280  D8DC               	call	PL6	;call to abstracted procedure
  5790  001282                     l9068:
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 948:             
      +                          return efgtoa(fp, f, c);
  5794  001282  C0D0  F0C4         	movff	vfpfcnvrt@fp,efgtoa@fp
  5795  001286  C0D1  F0C5         	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  5796  00128A  C0E7  F0C6         	movff	vfpfcnvrt@f,efgtoa@f
  5797  00128E  C0E8  F0C7         	movff	vfpfcnvrt@f+1,efgtoa@f+1
  5798  001292  C0E9  F0C8         	movff	vfpfcnvrt@f+2,efgtoa@f+2
  5799  001296  C0EA  F0C9         	movff	vfpfcnvrt@f+3,efgtoa@f+3
  5800  00129A  C0EE  F0CA         	movff	vfpfcnvrt@c,efgtoa@c
  5801  00129E  ECD6  F004         	call	_efgtoa	;wreg free
  5802  0012A2  C0C4  F0D0         	movff	?_efgtoa,?_vfpfcnvrt
  5803  0012A6  C0C5  F0D1         	movff	?_efgtoa+1,?_vfpfcnvrt+1
  5804  0012AA  0012               	return	
  5805  0012AC                     l9072:
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 950:         if (
      +                          !strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  5809  0012AC  0EEB               	movlw	low vfpfcnvrt@ct
  5810  0012AE  6E1A               	movwf	strncmp@_l^0,c
  5811  0012B0  6A1B               	clrf	(strncmp@_l+1)^0,c
  5812  0012B2  0EF9               	movlw	low STR_39
  5813  0012B4  6E1C               	movwf	strncmp@_r^0,c
  5814  0012B6  0E7F               	movlw	high STR_39
  5815  0012B8  6E1D               	movwf	(strncmp@_r+1)^0,c
  5816  0012BA  6A1F               	clrf	(strncmp@n+1)^0,c
  5817  0012BC  0E02               	movlw	2
  5818  0012BE  6E1E               	movwf	strncmp@n^0,c
  5819  0012C0  ECD4  F018         	call	_strncmp	;wreg free
  5820  0012C4  501A               	movf	?_strncmp^0,w,c
  5821  0012C6  101B               	iorwf	(?_strncmp+1)^0,w,c
  5822  0012C8  E115               	bnz	l9088
  5823                           
  5824                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 952:             
      +                          c = (*fmt)[1];
  5825  0012CA  0100               	movlb	0	; () banked
  5826  0012CC  D8E6               	call	PL68	;call to abstracted procedure
  5827  0012CE  2BD5               	incf	??_vfpfcnvrt& (0+255),f,b
  5828  0012D0  D8DC               	call	PL66	;call to abstracted procedure
  5829  0012D2  CFF5 F0EE          	movff	tablat,vfpfcnvrt@c
  5830                           
  5831                           ; BSR set to: 0
  5832                           
  5833                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 953:             
      +                          if ((0 && isupper((int)(*fmt)[0]), ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  5834  0012D6  0EBF               	movlw	191
  5835  0012D8  6FD5               	movwf	??_vfpfcnvrt& (0+255),b
  5836  0012DA  69D6               	setf	(??_vfpfcnvrt+1)& (0+255),b
  5837  0012DC  D892               	call	PL2	;call to abstracted procedure
  5838  0012DE  D8E5               	call	PL70	;call to abstracted procedure
  5839  0012E0  E100               	bnz	l9082
  5840  0012E2                     l9082:
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 956:             
      +                              f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5844  0012E2  D8AB               	call	PL6	;call to abstracted procedure
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 958:             
      +                          *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
  5848                           
  5849                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 957:             
      +                          }
  5850  0012E4  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5851  0012E6  6ED9               	movwf	fsr2l,c
  5852  0012E8  6ADA               	clrf	fsr2h,c
  5853  0012EA  0E02               	movlw	2
  5854  0012EC  26DE               	addwf	postinc2,f,c
  5855  0012EE  0E00               	movlw	0
  5856  0012F0  22DD               	addwfc	postdec2,f,c
  5857  0012F2  D7C7               	goto	l9068
  5858  0012F4                     l9088:
  5859                           
  5860                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1171:         if 
      +                          (*fmt[0] == 's' || !strncmp(*fmt, "lls", ((sizeof("lls")/sizeof("lls"[0]))-1))) {
  5861  0012F4  0100               	movlb	0	; () banked
  5862  0012F6  D885               	call	PL2	;call to abstracted procedure
  5863  0012F8  0A73               	xorlw	115
  5864  0012FA  E013               	bz	u10900
  5865                           
  5866                           ; BSR set to: 0
  5867  0012FC  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5868  0012FE  6ED9               	movwf	fsr2l,c
  5869  001300  6ADA               	clrf	fsr2h,c
  5870  001302  CFDE F01A          	movff	postinc2,strncmp@_l
  5871  001306  CFDD F01B          	movff	postdec2,strncmp@_l+1
  5872  00130A  0EF1               	movlw	low STR_44
  5873  00130C  6E1C               	movwf	strncmp@_r^0,c
  5874  00130E  0E7F               	movlw	high STR_44
  5875  001310  6E1D               	movwf	(strncmp@_r+1)^0,c
  5876  001312  6A1F               	clrf	(strncmp@n+1)^0,c
  5877  001314  0E03               	movlw	3
  5878  001316  6E1E               	movwf	strncmp@n^0,c
  5879  001318  ECD4  F018         	call	_strncmp	;wreg free
  5880  00131C  501A               	movf	?_strncmp^0,w,c
  5881  00131E  101B               	iorwf	(?_strncmp+1)^0,w,c
  5882  001320  E124               	bnz	l9106
  5883  001322                     u10900:
  5884                           
  5885                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1173:    *fmt += 
      +                          *fmt[0] == 's' ? 1 : ((sizeof("lls")/sizeof("lls"[0]))-1);
  5886  001322  0100               	movlb	0	; () banked
  5887  001324  D86E               	call	PL2	;call to abstracted procedure
  5888  001326  0A73               	xorlw	115
  5889  001328  E003               	bz	l9096
  5890                           
  5891                           ; BSR set to: 0
  5892  00132A  6BE6               	clrf	(_vfpfcnvrt$2452+1)& (0+255),b
  5893  00132C  0E03               	movlw	3
  5894  00132E  D002               	goto	L6
  5895  001330                     l9096:
  5896                           
  5897                           ; BSR set to: 0
  5898  001330  6BE6               	clrf	(_vfpfcnvrt$2452+1)& (0+255),b
  5899  001332  0E01               	movlw	1
  5900  001334                     L6:
  5901  001334  6FE5               	movwf	_vfpfcnvrt$2452& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904  001336  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5905  001338  6ED9               	movwf	fsr2l,c
  5906  00133A  6ADA               	clrf	fsr2h,c
  5907  00133C  51E5               	movf	_vfpfcnvrt$2452& (0+255),w,b
  5908  00133E  26DE               	addwf	postinc2,f,c
  5909  001340  51E6               	movf	(_vfpfcnvrt$2452+1)& (0+255),w,b
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1174:            
      +                           cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  5913  001342  D869               	call	PL4	;call to abstracted procedure
  5914  001344  CFDE F0E1          	movff	postinc2,vfpfcnvrt@cp
  5915  001348  CFDD F0E2          	movff	postdec2,vfpfcnvrt@cp+1
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1176:            
      +                           return stoa(fp, cp);
  5919  00134C  C0D0  F060         	movff	vfpfcnvrt@fp,stoa@fp
  5920  001350  C0D1  F061         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  5921  001354  C0E1  F062         	movff	vfpfcnvrt@cp,stoa@s
  5922  001358  C0E2  F063         	movff	vfpfcnvrt@cp+1,stoa@s+1
  5923  00135C  EC40  F015         	call	_stoa	;wreg free
  5924  001360  C060  F0D0         	movff	?_stoa,?_vfpfcnvrt
  5925  001364  C061  F0D1         	movff	?_stoa+1,?_vfpfcnvrt+1
  5926  001368  0012               	return	
  5927  00136A                     l9106:
  5928                           
  5929                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
  5930  00136A  0100               	movlb	0	; () banked
  5931  00136C  D84A               	call	PL2	;call to abstracted procedure
  5932  00136E  0A75               	xorlw	117
  5933  001370  E12C               	bnz	l9114
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
  5937  001372  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  5938  001374  D882               	call	PL12	;call to abstracted procedure
  5939                           
  5940                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
  5941  001376  D84F               	call	PL4	;call to abstracted procedure
  5942  001378  CFDE F0D7          	movff	postinc2,??_vfpfcnvrt+2
  5943  00137C  CFDD F0D8          	movff	postdec2,??_vfpfcnvrt+3
  5944  001380  C0D7  F0D9         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  5945  001384  C0D8  F0DA         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  5946  001388  6BDB               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  5947  00138A  6BDC               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  5948  00138C  6BDD               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  5949  00138E  6BDE               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  5950  001390  6BDF               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  5951  001392  6BE0               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
  5955  001394  C0D0  F071         	movff	vfpfcnvrt@fp,utoa@fp
  5956  001398  C0D1  F072         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  5957  00139C  C0D9  F073         	movff	vfpfcnvrt@llu,utoa@d
  5958  0013A0  C0DA  F074         	movff	vfpfcnvrt@llu+1,utoa@d+1
  5959  0013A4  C0DB  F075         	movff	vfpfcnvrt@llu+2,utoa@d+2
  5960  0013A8  C0DC  F076         	movff	vfpfcnvrt@llu+3,utoa@d+3
  5961  0013AC  C0DD  F077         	movff	vfpfcnvrt@llu+4,utoa@d+4
  5962  0013B0  C0DE  F078         	movff	vfpfcnvrt@llu+5,utoa@d+5
  5963  0013B4  C0DF  F079         	movff	vfpfcnvrt@llu+6,utoa@d+6
  5964  0013B8  C0E0  F07A         	movff	vfpfcnvrt@llu+7,utoa@d+7
  5965  0013BC  EC2F  F011         	call	_utoa	;wreg free
  5966  0013C0  C071  F0D0         	movff	?_utoa,?_vfpfcnvrt
  5967  0013C4  C072  F0D1         	movff	?_utoa+1,?_vfpfcnvrt+1
  5968  0013C8  0012               	return	
  5969  0013CA                     l9114:
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  5973  0013CA  D81B               	call	PL2	;call to abstracted procedure
  5974  0013CC  0A25               	xorlw	37
  5975  0013CE  E10C               	bnz	l9124
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  5979  0013D0  D84D               	call	PL8	;call to abstracted procedure
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  5983  0013D2  6A1C               	clrf	(fputc@c+1)^0,c
  5984  0013D4  0E25               	movlw	37
  5985  0013D6  6E1B               	movwf	fputc@c^0,c
  5986  0013D8  D878               	call	PL176	;call to abstracted procedure
  5987  0013DA  EC4D  F01A         	call	_fputc	;wreg free
  5988  0013DE                     l9120:
  5989                           
  5990                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  5991  0013DE  0100               	movlb	0	; () banked
  5992  0013E0  6BD1               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  5993  0013E2  0E01               	movlw	1
  5994  0013E4  6FD0               	movwf	?_vfpfcnvrt& (0+255),b
  5995  0013E6  0C01               	retlw	1
  5996  0013E8                     l9124:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  6000  0013E8  D841               	call	PL8	;call to abstracted procedure
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  6004  0013EA  6BD0               	clrf	?_vfpfcnvrt& (0+255),b
  6005  0013EC  6BD1               	clrf	(?_vfpfcnvrt+1)& (0+255),b
  6006  0013EE  0012               	return	
  6007  0013F0                     l9130:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  6011  0013F0  D808               	call	PL2	;call to abstracted procedure
  6012  0013F2  6E1B               	movwf	fputc@c^0,c
  6013  0013F4  6A1C               	clrf	(fputc@c+1)^0,c
  6014  0013F6  D869               	call	PL176	;call to abstracted procedure
  6015  0013F8  EC4D  F01A         	call	_fputc	;wreg free
  6016                           
  6017                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  6018  0013FC  0100               	movlb	0	; () banked
  6019  0013FE  D836               	call	PL8	;call to abstracted procedure
  6020  001400  D7EE               	goto	l9120
  6021  001402                     __end_of_vfpfcnvrt:
  6022                           	callstack 0
  6023  001402                     PL2:
  6024                           	callstack 20
  6025  001402  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6026  001404  6ED9               	movwf	fsr2l,c
  6027  001406  6ADA               	clrf	fsr2h,c
  6028  001408  CFDE FFF6          	movff	postinc2,tblptrl
  6029  00140C  CFDD FFF7          	movff	postdec2,tblptrh
  6030  001410                     	if	0	;tblptru may be non-zero
  6031  001410                     	endif
  6032  001410                     	if	0	;tblptru may be non-zero
  6033  001410                     	endif
  6034  001410  0008               	tblrd		*
  6035  001412  50F5               	movf	tablat,w,c
  6036  001414  0012               	return	
  6037  001416                     __end_ofPL2:
  6038                           	callstack 0
  6039  001416                     PL4:
  6040                           	callstack 20
  6041  001416  22DD               	addwfc	postdec2,f,c
  6042  001418  C0D3  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  6043  00141C  C0D4  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  6044  001420  CFDF F0D5          	movff	indf2,??_vfpfcnvrt
  6045  001424  0E02               	movlw	2
  6046  001426  26DE               	addwf	postinc2,f,c
  6047  001428  CFDF F0D6          	movff	indf2,??_vfpfcnvrt+1
  6048  00142C  0E00               	movlw	0
  6049  00142E  22DD               	addwfc	postdec2,f,c
  6050  001430  C0D5  FFD9         	movff	??_vfpfcnvrt,fsr2l
  6051  001434  C0D6  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  6052  001438  0C00               	retlw	0
  6053  00143A                     __end_ofPL4:
  6054                           	callstack 0
  6055  00143A                     PL6:
  6056                           	callstack 20
  6057  00143A  C0D3  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  6058  00143E  C0D4  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  6059  001442  CFDF F0D5          	movff	indf2,??_vfpfcnvrt
  6060  001446  0E04               	movlw	4
  6061  001448  26DE               	addwf	postinc2,f,c
  6062  00144A  CFDF F0D6          	movff	indf2,??_vfpfcnvrt+1
  6063  00144E  0E00               	movlw	0
  6064  001450  22DD               	addwfc	postdec2,f,c
  6065  001452  C0D5  FFD9         	movff	??_vfpfcnvrt,fsr2l
  6066  001456  C0D6  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  6067  00145A  CFDE F0E7          	movff	postinc2,vfpfcnvrt@f
  6068  00145E  CFDE F0E8          	movff	postinc2,vfpfcnvrt@f+1
  6069  001462  CFDE F0E9          	movff	postinc2,vfpfcnvrt@f+2
  6070  001466  CFDE F0EA          	movff	postinc2,vfpfcnvrt@f+3
  6071  00146A  0C00               	retlw	0
  6072  00146C                     __end_ofPL6:
  6073                           	callstack 0
  6074  00146C                     PL8:
  6075                           	callstack 20
  6076  00146C  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6077  00146E  6ED9               	movwf	fsr2l,c
  6078  001470  6ADA               	clrf	fsr2h,c
  6079  001472  2ADE               	incf	postinc2,f,c
  6080  001474  0E00               	movlw	0
  6081  001476  22DD               	addwfc	postdec2,f,c
  6082  001478  0C00               	retlw	0
  6083  00147A                     __end_ofPL8:
  6084                           	callstack 0
  6085  00147A                     PL12:
  6086                           	callstack 20
  6087  00147A  6ED9               	movwf	fsr2l,c
  6088  00147C  6ADA               	clrf	fsr2h,c
  6089  00147E  2ADE               	incf	postinc2,f,c
  6090  001480  0C00               	retlw	0
  6091  001482                     __end_ofPL12:
  6092                           	callstack 0
  6093  001482                     PL34:
  6094                           	callstack 20
  6095  001482  0ED0               	movlw	208
  6096  001484  6FD5               	movwf	??_vfpfcnvrt& (0+255),b
  6097  001486  69D6               	setf	(??_vfpfcnvrt+1)& (0+255),b
  6098  001488  0CD0               	retlw	208
  6099  00148A                     __end_ofPL34:
  6100                           	callstack 0
  6101  00148A                     PL66:
  6102                           	callstack 20
  6103  00148A  0E00               	movlw	0
  6104  00148C  23D6               	addwfc	(??_vfpfcnvrt+1)& (0+255),f,b
  6105  00148E  C0D5  FFF6         	movff	??_vfpfcnvrt,tblptrl
  6106  001492  C0D6  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  6107  001496                     	if	0	;tblptru may be non-zero
  6108  001496                     	endif
  6109  001496                     	if	0	;tblptru may be non-zero
  6110  001496                     	endif
  6111  001496  0008               	tblrd		*
  6112  001498  0C00               	retlw	0
  6113  00149A                     __end_ofPL66:
  6114                           	callstack 0
  6115  00149A                     PL68:
  6116                           	callstack 20
  6117  00149A  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6118  00149C  6ED9               	movwf	fsr2l,c
  6119  00149E  6ADA               	clrf	fsr2h,c
  6120  0014A0  CFDE F0D5          	movff	postinc2,??_vfpfcnvrt
  6121  0014A4  CFDD F0D6          	movff	postdec2,??_vfpfcnvrt+1
  6122  0014A8  0012               	return	
  6123  0014AA                     __end_ofPL68:
  6124                           	callstack 0
  6125  0014AA                     PL70:
  6126                           	callstack 20
  6127  0014AA  6FD7               	movwf	(??_vfpfcnvrt+2)& (0+255),b
  6128  0014AC  6BD8               	clrf	(??_vfpfcnvrt+3)& (0+255),b
  6129  0014AE  51D5               	movf	??_vfpfcnvrt& (0+255),w,b
  6130  0014B0  27D7               	addwf	(??_vfpfcnvrt+2)& (0+255),f,b
  6131  0014B2  51D6               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  6132  0014B4  23D8               	addwfc	(??_vfpfcnvrt+3)& (0+255),f,b
  6133  0014B6  51D8               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
  6134  0014B8  0012               	return	
  6135  0014BA                     __end_ofPL70:
  6136                           	callstack 0
  6137  0014BA                     PL138:
  6138                           	callstack 20
  6139  0014BA  51D2               	movf	vfpfcnvrt@fmt& (0+255),w,b
  6140  0014BC  6ED9               	movwf	fsr2l,c
  6141  0014BE  6ADA               	clrf	fsr2h,c
  6142  0014C0  CFDE F067          	movff	postinc2,atoi@s
  6143  0014C4  CFDD F068          	movff	postdec2,atoi@s+1
  6144  0014C8  0012               	return	
  6145  0014CA                     __end_ofPL138:
  6146                           	callstack 0
  6147  0014CA                     PL176:
  6148                           	callstack 20
  6149  0014CA  C0D0  F01D         	movff	vfpfcnvrt@fp,fputc@fp
  6150  0014CE  C0D1  F01E         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  6151  0014D2  0012               	return	
  6152  0014D4                     __end_ofPL176:
  6153                           	callstack 0
  6154  0014D4                     PL204:
  6155                           	callstack 20
  6156  0014D4  50F5               	movf	tablat,w,c
  6157  0014D6  6E20               	movwf	tolower@c^0,c
  6158  0014D8  6A21               	clrf	(tolower@c+1)^0,c
  6159  0014DA  0012               	return	
  6160  0014DC                     __end_ofPL204:
  6161                           	callstack 0
  6162                           
  6163 ;; *************** function _utoa *****************
  6164 ;; Defined at:
  6165 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  fp              2   17[BANK0 ] PTR struct _IO_FILE
  6168 ;;		 -> sprintf@f(11), 
  6169 ;;  d               8   19[BANK0 ] unsigned long long 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  n               8   39[BANK0 ] unsigned long long 
  6172 ;;  i               2   47[BANK0 ] int 
  6173 ;;  w               2   37[BANK0 ] int 
  6174 ;;  p               2   35[BANK0 ] int 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  2   17[BANK0 ] int 
  6177 ;; Registers used:
  6178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 3F/0
  6181 ;;		On exit  : 3F/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6184 ;;      Params:         0      10       0       0       0       0       0
  6185 ;;      Locals:         0      14       0       0       0       0       0
  6186 ;;      Temps:          0       8       0       0       0       0       0
  6187 ;;      Totals:         0      32       0       0       0       0       0
  6188 ;;Total ram usage:       32 bytes
  6189 ;; Hardware stack levels used: 1
  6190 ;; Hardware stack levels required when called: 7
  6191 ;; This function calls:
  6192 ;;		___lodiv
  6193 ;;		___lomod
  6194 ;;		_pad
  6195 ;; This function is called by:
  6196 ;;		_vfpfcnvrt
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text8
  6201  00225E                     __ptext8:
  6202                           	callstack 0
  6203  00225E                     _utoa:
  6204                           	callstack 20
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;incstack = 0
  6211  00225E  AE30               	btfss	(_prec+1)^0,7,c
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  6215  002260  9231               	bcf	_flags^0,1,c
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  6219  002262  BE30               	btfsc	(_prec+1)^0,7,c
  6220  002264  D004               	goto	u10550
  6221  002266  5030               	movf	(_prec+1)^0,w,c
  6222  002268  E106               	bnz	l1588
  6223  00226A  042F               	decf	_prec^0,w,c
  6224  00226C  E204               	bc	l1588
  6225  00226E                     u10550:
  6226                           
  6227                           ; BSR set to: 0
  6228  00226E  6B84               	clrf	(utoa@p+1)& (0+255),b
  6229  002270  0E01               	movlw	1
  6230  002272  6F83               	movwf	utoa@p& (0+255),b
  6231  002274  D004               	goto	l1590
  6232  002276                     l1588:
  6233                           
  6234                           ; BSR set to: 0
  6235  002276  C02F  F083         	movff	_prec,utoa@p
  6236  00227A  C030  F084         	movff	_prec+1,utoa@p+1
  6237  00227E                     l1590:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  6241  00227E  C02D  F085         	movff	_width,utoa@w
  6242  002282  C02E  F086         	movff	_width+1,utoa@w+1
  6243                           
  6244                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 628:     n = d;
  6245  002286  C073  F087         	movff	utoa@d,utoa@n
  6246  00228A  C074  F088         	movff	utoa@d+1,utoa@n+1
  6247  00228E  C075  F089         	movff	utoa@d+2,utoa@n+2
  6248  002292  C076  F08A         	movff	utoa@d+3,utoa@n+3
  6249  002296  C077  F08B         	movff	utoa@d+4,utoa@n+4
  6250  00229A  C078  F08C         	movff	utoa@d+5,utoa@n+5
  6251  00229E  C079  F08D         	movff	utoa@d+6,utoa@n+6
  6252  0022A2  C07A  F08E         	movff	utoa@d+7,utoa@n+7
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  6256  0022A6  6B90               	clrf	(utoa@i+1)& (0+255),b
  6257  0022A8  0E4F               	movlw	79
  6258  0022AA  6F8F               	movwf	utoa@i& (0+255),b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  6262  0022AC  0101               	movlb	1	; () banked
  6263  0022AE  6B7C               	clrf	(_dbuf+79)& (0+255),b
  6264                           
  6265                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  6266  0022B0  D068               	goto	l8880
  6267  0022B2                     l8870:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 632:         --i;
  6271  0022B2  078F               	decf	utoa@i& (0+255),f,b
  6272  0022B4  A0D8               	btfss	status,0,c
  6273  0022B6  0790               	decf	(utoa@i+1)& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  6277  0022B8  0E2D               	movlw	low _dbuf
  6278  0022BA  258F               	addwf	utoa@i& (0+255),w,b
  6279  0022BC  6ED9               	movwf	fsr2l,c
  6280  0022BE  0E01               	movlw	high _dbuf
  6281  0022C0  2190               	addwfc	(utoa@i+1)& (0+255),w,b
  6282  0022C2  6EDA               	movwf	fsr2h,c
  6283  0022C4  C087  F060         	movff	utoa@n,___lomod@dividend
  6284  0022C8  C088  F061         	movff	utoa@n+1,___lomod@dividend+1
  6285  0022CC  C089  F062         	movff	utoa@n+2,___lomod@dividend+2
  6286  0022D0  C08A  F063         	movff	utoa@n+3,___lomod@dividend+3
  6287  0022D4  C08B  F064         	movff	utoa@n+4,___lomod@dividend+4
  6288  0022D8  C08C  F065         	movff	utoa@n+5,___lomod@dividend+5
  6289  0022DC  C08D  F066         	movff	utoa@n+6,___lomod@dividend+6
  6290  0022E0  C08E  F067         	movff	utoa@n+7,___lomod@dividend+7
  6291  0022E4  0E0A               	movlw	10
  6292  0022E6  6F68               	movwf	___lomod@divisor& (0+255),b
  6293  0022E8  6B69               	clrf	(___lomod@divisor+1)& (0+255),b
  6294  0022EA  6B6A               	clrf	(___lomod@divisor+2)& (0+255),b
  6295  0022EC  6B6B               	clrf	(___lomod@divisor+3)& (0+255),b
  6296  0022EE  6B6C               	clrf	(___lomod@divisor+4)& (0+255),b
  6297  0022F0  6B6D               	clrf	(___lomod@divisor+5)& (0+255),b
  6298  0022F2  6B6E               	clrf	(___lomod@divisor+6)& (0+255),b
  6299  0022F4  6B6F               	clrf	(___lomod@divisor+7)& (0+255),b
  6300  0022F6  EC7F  F018         	call	___lomod	;wreg free
  6301  0022FA  C060  F07B         	movff	?___lomod,??_utoa
  6302  0022FE  C061  F07C         	movff	?___lomod+1,??_utoa+1
  6303  002302  C062  F07D         	movff	?___lomod+2,??_utoa+2
  6304  002306  C063  F07E         	movff	?___lomod+3,??_utoa+3
  6305  00230A  C064  F07F         	movff	?___lomod+4,??_utoa+4
  6306  00230E  C065  F080         	movff	?___lomod+5,??_utoa+5
  6307  002312  C066  F081         	movff	?___lomod+6,??_utoa+6
  6308  002316  C067  F082         	movff	?___lomod+7,??_utoa+7
  6309  00231A  517B               	movf	??_utoa& (0+255),w,b
  6310  00231C  0F30               	addlw	48
  6311  00231E  6EDF               	movwf	indf2,c
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 634:         --p;
  6315  002320  0783               	decf	utoa@p& (0+255),f,b
  6316  002322  A0D8               	btfss	status,0,c
  6317  002324  0784               	decf	(utoa@p+1)& (0+255),f,b
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 635:         --w;
  6321  002326  0785               	decf	utoa@w& (0+255),f,b
  6322  002328  A0D8               	btfss	status,0,c
  6323  00232A  0786               	decf	(utoa@w+1)& (0+255),f,b
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  6327  00232C  C087  F060         	movff	utoa@n,___lodiv@dividend
  6328  002330  C088  F061         	movff	utoa@n+1,___lodiv@dividend+1
  6329  002334  C089  F062         	movff	utoa@n+2,___lodiv@dividend+2
  6330  002338  C08A  F063         	movff	utoa@n+3,___lodiv@dividend+3
  6331  00233C  C08B  F064         	movff	utoa@n+4,___lodiv@dividend+4
  6332  002340  C08C  F065         	movff	utoa@n+5,___lodiv@dividend+5
  6333  002344  C08D  F066         	movff	utoa@n+6,___lodiv@dividend+6
  6334  002348  C08E  F067         	movff	utoa@n+7,___lodiv@dividend+7
  6335  00234C  0E0A               	movlw	10
  6336  00234E  6F68               	movwf	___lodiv@divisor& (0+255),b
  6337  002350  6B69               	clrf	(___lodiv@divisor+1)& (0+255),b
  6338  002352  6B6A               	clrf	(___lodiv@divisor+2)& (0+255),b
  6339  002354  6B6B               	clrf	(___lodiv@divisor+3)& (0+255),b
  6340  002356  6B6C               	clrf	(___lodiv@divisor+4)& (0+255),b
  6341  002358  6B6D               	clrf	(___lodiv@divisor+5)& (0+255),b
  6342  00235A  6B6E               	clrf	(___lodiv@divisor+6)& (0+255),b
  6343  00235C  6B6F               	clrf	(___lodiv@divisor+7)& (0+255),b
  6344  00235E  EC59  F017         	call	___lodiv	;wreg free
  6345  002362  C060  F087         	movff	?___lodiv,utoa@n
  6346  002366  C061  F088         	movff	?___lodiv+1,utoa@n+1
  6347  00236A  C062  F089         	movff	?___lodiv+2,utoa@n+2
  6348  00236E  C063  F08A         	movff	?___lodiv+3,utoa@n+3
  6349  002372  C064  F08B         	movff	?___lodiv+4,utoa@n+4
  6350  002376  C065  F08C         	movff	?___lodiv+5,utoa@n+5
  6351  00237A  C066  F08D         	movff	?___lodiv+6,utoa@n+6
  6352  00237E  C067  F08E         	movff	?___lodiv+7,utoa@n+7
  6353  002382                     l8880:
  6354                           
  6355                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  6356  002382  0100               	movlb	0	; () banked
  6357  002384  518F               	movf	utoa@i& (0+255),w,b
  6358  002386  1190               	iorwf	(utoa@i+1)& (0+255),w,b
  6359  002388  E017               	bz	u10600
  6360                           
  6361                           ; BSR set to: 0
  6362  00238A  5187               	movf	utoa@n& (0+255),w,b
  6363  00238C  1188               	iorwf	(utoa@n+1)& (0+255),w,b
  6364  00238E  1189               	iorwf	(utoa@n+2)& (0+255),w,b
  6365  002390  118A               	iorwf	(utoa@n+3)& (0+255),w,b
  6366  002392  118B               	iorwf	(utoa@n+4)& (0+255),w,b
  6367  002394  118C               	iorwf	(utoa@n+5)& (0+255),w,b
  6368  002396  118D               	iorwf	(utoa@n+6)& (0+255),w,b
  6369  002398  118E               	iorwf	(utoa@n+7)& (0+255),w,b
  6370  00239A  E18B               	bnz	l8870
  6371                           
  6372                           ; BSR set to: 0
  6373  00239C  BF84               	btfsc	(utoa@p+1)& (0+255),7,b
  6374  00239E  D004               	goto	u10580
  6375  0023A0  5184               	movf	(utoa@p+1)& (0+255),w,b
  6376  0023A2  E187               	bnz	l8870
  6377  0023A4  0583               	decf	utoa@p& (0+255),w,b
  6378  0023A6  E285               	bc	l8870
  6379  0023A8                     u10580:
  6380                           
  6381                           ; BSR set to: 0
  6382  0023A8  BF86               	btfsc	(utoa@w+1)& (0+255),7,b
  6383  0023AA  D006               	goto	u10600
  6384  0023AC  5186               	movf	(utoa@w+1)& (0+255),w,b
  6385  0023AE  E102               	bnz	u10590
  6386  0023B0  0585               	decf	utoa@w& (0+255),w,b
  6387  0023B2  E302               	bnc	u10600
  6388  0023B4                     u10590:
  6389                           
  6390                           ; BSR set to: 0
  6391  0023B4  B231               	btfsc	_flags^0,1,c
  6392  0023B6  D77D               	goto	l8870
  6393  0023B8                     u10600:
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  6397  0023B8  C071  F067         	movff	utoa@fp,pad@fp
  6398  0023BC  C072  F068         	movff	utoa@fp+1,pad@fp+1
  6399  0023C0  0E2D               	movlw	low _dbuf
  6400  0023C2  258F               	addwf	utoa@i& (0+255),w,b
  6401  0023C4  6F69               	movwf	pad@buf& (0+255),b
  6402  0023C6  0E01               	movlw	high _dbuf
  6403  0023C8  2190               	addwfc	(utoa@i+1)& (0+255),w,b
  6404  0023CA  6F6A               	movwf	(pad@buf+1)& (0+255),b
  6405  0023CC  C085  F06B         	movff	utoa@w,pad@p
  6406  0023D0  C086  F06C         	movff	utoa@w+1,pad@p+1
  6407  0023D4  EC92  F01A         	call	_pad	;wreg free
  6408  0023D8  C067  F071         	movff	?_pad,?_utoa
  6409  0023DC  C068  F072         	movff	?_pad+1,?_utoa+1
  6410                           
  6411                           ; BSR set to: 0
  6412  0023E0  0012               	return		;funcret
  6413  0023E2                     __end_of_utoa:
  6414                           	callstack 0
  6415                           
  6416 ;; *************** function ___lomod *****************
  6417 ;; Defined at:
  6418 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lomod.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  dividend        8    0[BANK0 ] unsigned long long 
  6421 ;;  divisor         8    8[BANK0 ] unsigned long long 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  counter         1   25[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  8    0[BANK0 ] unsigned long long 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0
  6428 ;; Tracked objects:
  6429 ;;		On entry : 3F/0
  6430 ;;		On exit  : 3F/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6433 ;;      Params:         0      16       0       0       0       0       0
  6434 ;;      Locals:         1       0       0       0       0       0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0
  6436 ;;      Totals:         1      16       0       0       0       0       0
  6437 ;;Total ram usage:       17 bytes
  6438 ;; Hardware stack levels used: 1
  6439 ;; Hardware stack levels required when called: 3
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_utoa
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text9
  6448  0030FE                     __ptext9:
  6449                           	callstack 0
  6450  0030FE                     ___lomod:
  6451                           	callstack 23
  6452                           
  6453                           ; BSR set to: 0
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;incstack = 0
  6457  0030FE  5168               	movf	___lomod@divisor& (0+255),w,b
  6458  003100  1169               	iorwf	(___lomod@divisor+1)& (0+255),w,b
  6459  003102  116A               	iorwf	(___lomod@divisor+2)& (0+255),w,b
  6460  003104  116B               	iorwf	(___lomod@divisor+3)& (0+255),w,b
  6461  003106  116C               	iorwf	(___lomod@divisor+4)& (0+255),w,b
  6462  003108  116D               	iorwf	(___lomod@divisor+5)& (0+255),w,b
  6463  00310A  116E               	iorwf	(___lomod@divisor+6)& (0+255),w,b
  6464  00310C  116F               	iorwf	(___lomod@divisor+7)& (0+255),w,b
  6465  00310E  E03B               	bz	l1181
  6466                           
  6467                           ; BSR set to: 0
  6468  003110  0E01               	movlw	1
  6469  003112  6E1A               	movwf	___lomod@counter^0,c
  6470  003114  D00A               	goto	l8370
  6471  003116                     l8368:
  6472                           
  6473                           ; BSR set to: 0
  6474  003116  90D8               	bcf	status,0,c
  6475  003118  3768               	rlcf	___lomod@divisor& (0+255),f,b
  6476  00311A  3769               	rlcf	(___lomod@divisor+1)& (0+255),f,b
  6477  00311C  376A               	rlcf	(___lomod@divisor+2)& (0+255),f,b
  6478  00311E  376B               	rlcf	(___lomod@divisor+3)& (0+255),f,b
  6479  003120  376C               	rlcf	(___lomod@divisor+4)& (0+255),f,b
  6480  003122  376D               	rlcf	(___lomod@divisor+5)& (0+255),f,b
  6481  003124  376E               	rlcf	(___lomod@divisor+6)& (0+255),f,b
  6482  003126  376F               	rlcf	(___lomod@divisor+7)& (0+255),f,b
  6483  003128  2A1A               	incf	___lomod@counter^0,f,c
  6484  00312A                     l8370:
  6485                           
  6486                           ; BSR set to: 0
  6487  00312A  AF6F               	btfss	(___lomod@divisor+7)& (0+255),7,b
  6488  00312C  D7F4               	goto	l8368
  6489  00312E                     u9530:
  6490                           
  6491                           ; BSR set to: 0
  6492  00312E  5168               	movf	___lomod@divisor& (0+255),w,b
  6493  003130  5D60               	subwf	___lomod@dividend& (0+255),w,b
  6494  003132  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  6495  003134  5961               	subwfb	(___lomod@dividend+1)& (0+255),w,b
  6496  003136  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  6497  003138  5962               	subwfb	(___lomod@dividend+2)& (0+255),w,b
  6498  00313A  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  6499  00313C  5963               	subwfb	(___lomod@dividend+3)& (0+255),w,b
  6500  00313E  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  6501  003140  5964               	subwfb	(___lomod@dividend+4)& (0+255),w,b
  6502  003142  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  6503  003144  5965               	subwfb	(___lomod@dividend+5)& (0+255),w,b
  6504  003146  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  6505  003148  5966               	subwfb	(___lomod@dividend+6)& (0+255),w,b
  6506  00314A  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  6507  00314C  5967               	subwfb	(___lomod@dividend+7)& (0+255),w,b
  6508  00314E  E310               	bnc	l8376
  6509                           
  6510                           ; BSR set to: 0
  6511  003150  5168               	movf	___lomod@divisor& (0+255),w,b
  6512  003152  5F60               	subwf	___lomod@dividend& (0+255),f,b
  6513  003154  5169               	movf	(___lomod@divisor+1)& (0+255),w,b
  6514  003156  5B61               	subwfb	(___lomod@dividend+1)& (0+255),f,b
  6515  003158  516A               	movf	(___lomod@divisor+2)& (0+255),w,b
  6516  00315A  5B62               	subwfb	(___lomod@dividend+2)& (0+255),f,b
  6517  00315C  516B               	movf	(___lomod@divisor+3)& (0+255),w,b
  6518  00315E  5B63               	subwfb	(___lomod@dividend+3)& (0+255),f,b
  6519  003160  516C               	movf	(___lomod@divisor+4)& (0+255),w,b
  6520  003162  5B64               	subwfb	(___lomod@dividend+4)& (0+255),f,b
  6521  003164  516D               	movf	(___lomod@divisor+5)& (0+255),w,b
  6522  003166  5B65               	subwfb	(___lomod@dividend+5)& (0+255),f,b
  6523  003168  516E               	movf	(___lomod@divisor+6)& (0+255),w,b
  6524  00316A  5B66               	subwfb	(___lomod@dividend+6)& (0+255),f,b
  6525  00316C  516F               	movf	(___lomod@divisor+7)& (0+255),w,b
  6526  00316E  5B67               	subwfb	(___lomod@dividend+7)& (0+255),f,b
  6527  003170                     l8376:
  6528                           
  6529                           ; BSR set to: 0
  6530  003170  90D8               	bcf	status,0,c
  6531  003172  336F               	rrcf	(___lomod@divisor+7)& (0+255),f,b
  6532  003174  336E               	rrcf	(___lomod@divisor+6)& (0+255),f,b
  6533  003176  336D               	rrcf	(___lomod@divisor+5)& (0+255),f,b
  6534  003178  336C               	rrcf	(___lomod@divisor+4)& (0+255),f,b
  6535  00317A  336B               	rrcf	(___lomod@divisor+3)& (0+255),f,b
  6536  00317C  336A               	rrcf	(___lomod@divisor+2)& (0+255),f,b
  6537  00317E  3369               	rrcf	(___lomod@divisor+1)& (0+255),f,b
  6538  003180  3368               	rrcf	___lomod@divisor& (0+255),f,b
  6539                           
  6540                           ; BSR set to: 0
  6541  003182  2E1A               	decfsz	___lomod@counter^0,f,c
  6542  003184  D7D4               	goto	u9530
  6543  003186                     l1181:
  6544                           
  6545                           ; BSR set to: 0
  6546  003186  C060  F060         	movff	___lomod@dividend,?___lomod
  6547  00318A  C061  F061         	movff	___lomod@dividend+1,?___lomod+1
  6548  00318E  C062  F062         	movff	___lomod@dividend+2,?___lomod+2
  6549  003192  C063  F063         	movff	___lomod@dividend+3,?___lomod+3
  6550  003196  C064  F064         	movff	___lomod@dividend+4,?___lomod+4
  6551  00319A  C065  F065         	movff	___lomod@dividend+5,?___lomod+5
  6552  00319E  C066  F066         	movff	___lomod@dividend+6,?___lomod+6
  6553  0031A2  C067  F067         	movff	___lomod@dividend+7,?___lomod+7
  6554                           
  6555                           ; BSR set to: 0
  6556  0031A6  0012               	return		;funcret
  6557  0031A8                     __end_of___lomod:
  6558                           	callstack 0
  6559                           
  6560 ;; *************** function ___lodiv *****************
  6561 ;; Defined at:
  6562 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lodiv.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  dividend        8    0[BANK0 ] unsigned long long 
  6565 ;;  divisor         8    8[BANK0 ] unsigned long long 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  quotient        8   25[COMRAM] unsigned long long 
  6568 ;;  counter         1   33[COMRAM] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  8    0[BANK0 ] unsigned long long 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0
  6573 ;; Tracked objects:
  6574 ;;		On entry : 3F/0
  6575 ;;		On exit  : 3F/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6578 ;;      Params:         0      16       0       0       0       0       0
  6579 ;;      Locals:         9       0       0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0
  6581 ;;      Totals:         9      16       0       0       0       0       0
  6582 ;;Total ram usage:       25 bytes
  6583 ;; Hardware stack levels used: 1
  6584 ;; Hardware stack levels required when called: 3
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_utoa
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text10
  6593  002EB2                     __ptext10:
  6594                           	callstack 0
  6595  002EB2                     ___lodiv:
  6596                           	callstack 23
  6597                           
  6598                           ; BSR set to: 0
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;incstack = 0
  6602  002EB2  6A1A               	clrf	___lodiv@quotient^0,c
  6603  002EB4  6A1B               	clrf	(___lodiv@quotient+1)^0,c
  6604  002EB6  6A1C               	clrf	(___lodiv@quotient+2)^0,c
  6605  002EB8  6A1D               	clrf	(___lodiv@quotient+3)^0,c
  6606  002EBA  6A1E               	clrf	(___lodiv@quotient+4)^0,c
  6607  002EBC  6A1F               	clrf	(___lodiv@quotient+5)^0,c
  6608  002EBE  6A20               	clrf	(___lodiv@quotient+6)^0,c
  6609  002EC0  6A21               	clrf	(___lodiv@quotient+7)^0,c
  6610                           
  6611                           ; BSR set to: 0
  6612  002EC2  5168               	movf	___lodiv@divisor& (0+255),w,b
  6613  002EC4  1169               	iorwf	(___lodiv@divisor+1)& (0+255),w,b
  6614  002EC6  116A               	iorwf	(___lodiv@divisor+2)& (0+255),w,b
  6615  002EC8  116B               	iorwf	(___lodiv@divisor+3)& (0+255),w,b
  6616  002ECA  116C               	iorwf	(___lodiv@divisor+4)& (0+255),w,b
  6617  002ECC  116D               	iorwf	(___lodiv@divisor+5)& (0+255),w,b
  6618  002ECE  116E               	iorwf	(___lodiv@divisor+6)& (0+255),w,b
  6619  002ED0  116F               	iorwf	(___lodiv@divisor+7)& (0+255),w,b
  6620  002ED2  E045               	bz	l1171
  6621                           
  6622                           ; BSR set to: 0
  6623  002ED4  0E01               	movlw	1
  6624  002ED6  6E22               	movwf	___lodiv@counter^0,c
  6625  002ED8  D00A               	goto	l8350
  6626  002EDA                     l8348:
  6627                           
  6628                           ; BSR set to: 0
  6629  002EDA  90D8               	bcf	status,0,c
  6630  002EDC  3768               	rlcf	___lodiv@divisor& (0+255),f,b
  6631  002EDE  3769               	rlcf	(___lodiv@divisor+1)& (0+255),f,b
  6632  002EE0  376A               	rlcf	(___lodiv@divisor+2)& (0+255),f,b
  6633  002EE2  376B               	rlcf	(___lodiv@divisor+3)& (0+255),f,b
  6634  002EE4  376C               	rlcf	(___lodiv@divisor+4)& (0+255),f,b
  6635  002EE6  376D               	rlcf	(___lodiv@divisor+5)& (0+255),f,b
  6636  002EE8  376E               	rlcf	(___lodiv@divisor+6)& (0+255),f,b
  6637  002EEA  376F               	rlcf	(___lodiv@divisor+7)& (0+255),f,b
  6638  002EEC  2A22               	incf	___lodiv@counter^0,f,c
  6639  002EEE                     l8350:
  6640                           
  6641                           ; BSR set to: 0
  6642  002EEE  AF6F               	btfss	(___lodiv@divisor+7)& (0+255),7,b
  6643  002EF0  D7F4               	goto	l8348
  6644  002EF2                     u9500:
  6645                           
  6646                           ; BSR set to: 0
  6647  002EF2  90D8               	bcf	status,0,c
  6648  002EF4  361A               	rlcf	___lodiv@quotient^0,f,c
  6649  002EF6  361B               	rlcf	(___lodiv@quotient+1)^0,f,c
  6650  002EF8  361C               	rlcf	(___lodiv@quotient+2)^0,f,c
  6651  002EFA  361D               	rlcf	(___lodiv@quotient+3)^0,f,c
  6652  002EFC  361E               	rlcf	(___lodiv@quotient+4)^0,f,c
  6653  002EFE  361F               	rlcf	(___lodiv@quotient+5)^0,f,c
  6654  002F00  3620               	rlcf	(___lodiv@quotient+6)^0,f,c
  6655  002F02  3621               	rlcf	(___lodiv@quotient+7)^0,f,c
  6656                           
  6657                           ; BSR set to: 0
  6658  002F04  5168               	movf	___lodiv@divisor& (0+255),w,b
  6659  002F06  5D60               	subwf	___lodiv@dividend& (0+255),w,b
  6660  002F08  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  6661  002F0A  5961               	subwfb	(___lodiv@dividend+1)& (0+255),w,b
  6662  002F0C  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  6663  002F0E  5962               	subwfb	(___lodiv@dividend+2)& (0+255),w,b
  6664  002F10  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  6665  002F12  5963               	subwfb	(___lodiv@dividend+3)& (0+255),w,b
  6666  002F14  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  6667  002F16  5964               	subwfb	(___lodiv@dividend+4)& (0+255),w,b
  6668  002F18  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  6669  002F1A  5965               	subwfb	(___lodiv@dividend+5)& (0+255),w,b
  6670  002F1C  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  6671  002F1E  5966               	subwfb	(___lodiv@dividend+6)& (0+255),w,b
  6672  002F20  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  6673  002F22  5967               	subwfb	(___lodiv@dividend+7)& (0+255),w,b
  6674  002F24  E311               	bnc	l8360
  6675                           
  6676                           ; BSR set to: 0
  6677  002F26  5168               	movf	___lodiv@divisor& (0+255),w,b
  6678  002F28  5F60               	subwf	___lodiv@dividend& (0+255),f,b
  6679  002F2A  5169               	movf	(___lodiv@divisor+1)& (0+255),w,b
  6680  002F2C  5B61               	subwfb	(___lodiv@dividend+1)& (0+255),f,b
  6681  002F2E  516A               	movf	(___lodiv@divisor+2)& (0+255),w,b
  6682  002F30  5B62               	subwfb	(___lodiv@dividend+2)& (0+255),f,b
  6683  002F32  516B               	movf	(___lodiv@divisor+3)& (0+255),w,b
  6684  002F34  5B63               	subwfb	(___lodiv@dividend+3)& (0+255),f,b
  6685  002F36  516C               	movf	(___lodiv@divisor+4)& (0+255),w,b
  6686  002F38  5B64               	subwfb	(___lodiv@dividend+4)& (0+255),f,b
  6687  002F3A  516D               	movf	(___lodiv@divisor+5)& (0+255),w,b
  6688  002F3C  5B65               	subwfb	(___lodiv@dividend+5)& (0+255),f,b
  6689  002F3E  516E               	movf	(___lodiv@divisor+6)& (0+255),w,b
  6690  002F40  5B66               	subwfb	(___lodiv@dividend+6)& (0+255),f,b
  6691  002F42  516F               	movf	(___lodiv@divisor+7)& (0+255),w,b
  6692  002F44  5B67               	subwfb	(___lodiv@dividend+7)& (0+255),f,b
  6693                           
  6694                           ; BSR set to: 0
  6695  002F46  801A               	bsf	___lodiv@quotient^0,0,c
  6696  002F48                     l8360:
  6697                           
  6698                           ; BSR set to: 0
  6699  002F48  90D8               	bcf	status,0,c
  6700  002F4A  336F               	rrcf	(___lodiv@divisor+7)& (0+255),f,b
  6701  002F4C  336E               	rrcf	(___lodiv@divisor+6)& (0+255),f,b
  6702  002F4E  336D               	rrcf	(___lodiv@divisor+5)& (0+255),f,b
  6703  002F50  336C               	rrcf	(___lodiv@divisor+4)& (0+255),f,b
  6704  002F52  336B               	rrcf	(___lodiv@divisor+3)& (0+255),f,b
  6705  002F54  336A               	rrcf	(___lodiv@divisor+2)& (0+255),f,b
  6706  002F56  3369               	rrcf	(___lodiv@divisor+1)& (0+255),f,b
  6707  002F58  3368               	rrcf	___lodiv@divisor& (0+255),f,b
  6708                           
  6709                           ; BSR set to: 0
  6710  002F5A  2E22               	decfsz	___lodiv@counter^0,f,c
  6711  002F5C  D7CA               	goto	u9500
  6712  002F5E                     l1171:
  6713                           
  6714                           ; BSR set to: 0
  6715  002F5E  C01A  F060         	movff	___lodiv@quotient,?___lodiv
  6716  002F62  C01B  F061         	movff	___lodiv@quotient+1,?___lodiv+1
  6717  002F66  C01C  F062         	movff	___lodiv@quotient+2,?___lodiv+2
  6718  002F6A  C01D  F063         	movff	___lodiv@quotient+3,?___lodiv+3
  6719  002F6E  C01E  F064         	movff	___lodiv@quotient+4,?___lodiv+4
  6720  002F72  C01F  F065         	movff	___lodiv@quotient+5,?___lodiv+5
  6721  002F76  C020  F066         	movff	___lodiv@quotient+6,?___lodiv+6
  6722  002F7A  C021  F067         	movff	___lodiv@quotient+7,?___lodiv+7
  6723                           
  6724                           ; BSR set to: 0
  6725  002F7E  0012               	return		;funcret
  6726  002F80                     __end_of___lodiv:
  6727                           	callstack 0
  6728                           
  6729 ;; *************** function _strncmp *****************
  6730 ;; Defined at:
  6731 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strncmp.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;  _l              2   25[COMRAM] PTR const unsigned char 
  6734 ;;		 -> vfpfcnvrt@ct(3), STR_30(10), STR_29(22), STR_28(11), 
  6735 ;;		 -> STR_27(10), STR_26(22), STR_25(9), STR_24(10), 
  6736 ;;		 -> STR_21(10), STR_18(11), STR_17(14), STR_14(20), 
  6737 ;;		 -> STR_4(6), STR_2(15), 
  6738 ;;  _r              2   27[COMRAM] PTR const unsigned char 
  6739 ;;		 -> STR_46(4), STR_41(3), 
  6740 ;;  n               2   29[COMRAM] unsigned int 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  r               2   34[COMRAM] PTR const unsigned char 
  6743 ;;		 -> STR_46(4), STR_41(3), 
  6744 ;;  l               2   32[COMRAM] PTR const unsigned char 
  6745 ;;		 -> vfpfcnvrt@ct(3), STR_30(10), STR_29(22), STR_28(11), 
  6746 ;;		 -> STR_27(10), STR_26(22), STR_25(9), STR_24(10), 
  6747 ;;		 -> STR_21(10), STR_18(11), STR_17(14), STR_14(20), 
  6748 ;;		 -> STR_4(6), STR_2(15), 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  2   25[COMRAM] int 
  6751 ;; Registers used:
  6752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  6753 ;; Tracked objects:
  6754 ;;		On entry : 3F/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6758 ;;      Params:         6       0       0       0       0       0       0
  6759 ;;      Locals:         4       0       0       0       0       0       0
  6760 ;;      Temps:          1       0       0       0       0       0       0
  6761 ;;      Totals:        11       0       0       0       0       0       0
  6762 ;;Total ram usage:       11 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 3
  6765 ;; This function calls:
  6766 ;;		Nothing
  6767 ;; This function is called by:
  6768 ;;		_vfpfcnvrt
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           	psect	text11
  6773  0031A8                     __ptext11:
  6774                           	callstack 0
  6775  0031A8                     _strncmp:
  6776                           	callstack 24
  6777                           
  6778                           ; BSR set to: 0
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;incstack = 0
  6782  0031A8  C01A  F021         	movff	strncmp@_l,strncmp@l
  6783  0031AC  C01B  F022         	movff	strncmp@_l+1,strncmp@l+1
  6784  0031B0  C01C  F023         	movff	strncmp@_r,strncmp@r
  6785  0031B4  C01D  F024         	movff	strncmp@_r+1,strncmp@r+1
  6786  0031B8  061E               	decf	strncmp@n^0,f,c
  6787  0031BA  A0D8               	btfss	status,0,c
  6788  0031BC  061F               	decf	(strncmp@n+1)^0,f,c
  6789  0031BE  281E               	incf	strncmp@n^0,w,c
  6790  0031C0  E10C               	bnz	l8932
  6791  0031C2  281F               	incf	(strncmp@n+1)^0,w,c
  6792  0031C4  E10A               	bnz	l8932
  6793                           
  6794                           ; BSR set to: 0
  6795  0031C6  6A1A               	clrf	?_strncmp^0,c
  6796  0031C8  6A1B               	clrf	(?_strncmp+1)^0,c
  6797  0031CA  0012               	return	
  6798  0031CC                     l8930:
  6799  0031CC  4A21               	infsnz	strncmp@l^0,f,c
  6800  0031CE  2A22               	incf	(strncmp@l+1)^0,f,c
  6801  0031D0  4A23               	infsnz	strncmp@r^0,f,c
  6802  0031D2  2A24               	incf	(strncmp@r+1)^0,f,c
  6803  0031D4  061E               	decf	strncmp@n^0,f,c
  6804  0031D6  A0D8               	btfss	status,0,c
  6805  0031D8  061F               	decf	(strncmp@n+1)^0,f,c
  6806  0031DA                     l8932:
  6807  0031DA  D82D               	call	PL76	;call to abstracted procedure
  6808  0031DC  64F7               	cpfsgt	tblptrh,c
  6809  0031DE  D003               	bra	u10667
  6810  0031E0  0008               	tblrd		*
  6811  0031E2  50F5               	movf	tablat,w,c
  6812  0031E4  D002               	bra	u10660
  6813  0031E6                     u10667:
  6814  0031E6  EC49  F017         	call	PL14	;call to abstracted procedure
  6815  0031EA                     u10660:
  6816  0031EA  0900               	iorlw	0
  6817  0031EC  E013               	bz	u10700
  6818  0031EE  D82A               	call	PL124	;call to abstracted procedure
  6819  0031F0  50F5               	movf	tablat,w,c
  6820  0031F2  E010               	bz	u10700
  6821  0031F4  501E               	movf	strncmp@n^0,w,c
  6822  0031F6  101F               	iorwf	(strncmp@n+1)^0,w,c
  6823  0031F8  E00D               	bz	u10700
  6824  0031FA  D824               	call	PL124	;call to abstracted procedure
  6825  0031FC  CFF5 F020          	movff	tablat,??_strncmp
  6826  003200  D81A               	call	PL76	;call to abstracted procedure
  6827  003202  64F7               	cpfsgt	tblptrh,c
  6828  003204  D003               	bra	u10707
  6829  003206  0008               	tblrd		*
  6830  003208  50F5               	movf	tablat,w,c
  6831  00320A  D002               	bra	u10705
  6832  00320C                     u10707:
  6833  00320C  EC49  F017         	call	PL14	;call to abstracted procedure
  6834  003210                     u10705:
  6835  003210  1820               	xorwf	??_strncmp^0,w,c
  6836  003212  E0DC               	bz	l8930
  6837  003214                     u10700:
  6838  003214  D810               	call	PL76	;call to abstracted procedure
  6839  003216  64F7               	cpfsgt	tblptrh,c
  6840  003218  D003               	bra	u10717
  6841  00321A  0008               	tblrd		*
  6842  00321C  50F5               	movf	tablat,w,c
  6843  00321E  D002               	bra	u10710
  6844  003220                     u10717:
  6845  003220  EC49  F017         	call	PL14	;call to abstracted procedure
  6846  003224                     u10710:
  6847  003224  6E20               	movwf	??_strncmp^0,c
  6848  003226  D80E               	call	PL124	;call to abstracted procedure
  6849  003228  50F5               	movf	tablat,w,c
  6850  00322A  5C20               	subwf	??_strncmp^0,w,c
  6851  00322C  6E1A               	movwf	?_strncmp^0,c
  6852  00322E  6A1B               	clrf	(?_strncmp+1)^0,c
  6853  003230  A0D8               	btfss	status,0,c
  6854  003232  061B               	decf	(?_strncmp+1)^0,f,c
  6855  003234  0012               	return		;funcret
  6856  003236                     __end_of_strncmp:
  6857                           	callstack 0
  6858  003236                     PL76:
  6859                           	callstack 24
  6860  003236  C021  FFF6         	movff	strncmp@l,tblptrl
  6861  00323A  C022  FFF7         	movff	strncmp@l+1,tblptrh
  6862  00323E  6AF8               	clrf	tblptru,c
  6863  003240  0E05               	movlw	(high __ramtop+-1)
  6864  003242  0012               	return	
  6865  003244                     __end_ofPL76:
  6866                           	callstack 0
  6867  003244                     PL124:
  6868                           	callstack 24
  6869  003244  C023  FFF6         	movff	strncmp@r,tblptrl
  6870  003248  C024  FFF7         	movff	strncmp@r+1,tblptrh
  6871  00324C                     	if	0	;tblptru may be non-zero
  6872  00324C                     	endif
  6873  00324C                     	if	0	;tblptru may be non-zero
  6874  00324C                     	endif
  6875  00324C  0008               	tblrd		*
  6876  00324E  0012               	return	
  6877  003250                     __end_ofPL124:
  6878                           	callstack 0
  6879                           
  6880 ;; *************** function _stoa *****************
  6881 ;; Defined at:
  6882 ;;		line 568 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  6885 ;;		 -> sprintf@f(11), 
  6886 ;;  s               2    2[BANK0 ] PTR unsigned char 
  6887 ;;		 -> ?_sprintf(2), STR_20(4), STR_19(3), U_real(2), 
  6888 ;;		 -> compile_time(9), compile_date(12), STR_3(9), 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  nuls            7    4[BANK0 ] unsigned char [7]
  6891 ;;  l               2   19[BANK0 ] int 
  6892 ;;  p               2   17[BANK0 ] int 
  6893 ;;  cp              2   15[BANK0 ] PTR unsigned char 
  6894 ;;		 -> stoa@nuls(7), ?_sprintf(2), STR_20(4), STR_19(3), 
  6895 ;;		 -> U_real(2), compile_time(9), compile_date(12), STR_3(9), 
  6896 ;;  w               2   13[BANK0 ] int 
  6897 ;;  i               2   11[BANK0 ] int 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  2    0[BANK0 ] int 
  6900 ;; Registers used:
  6901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 3F/0
  6904 ;;		On exit  : 3F/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6907 ;;      Params:         0       4       0       0       0       0       0
  6908 ;;      Locals:         0      17       0       0       0       0       0
  6909 ;;      Temps:          1       0       0       0       0       0       0
  6910 ;;      Totals:         1      21       0       0       0       0       0
  6911 ;;Total ram usage:       22 bytes
  6912 ;; Hardware stack levels used: 1
  6913 ;; Hardware stack levels required when called: 5
  6914 ;; This function calls:
  6915 ;;		_fputc
  6916 ;;		_strlen
  6917 ;; This function is called by:
  6918 ;;		_vfpfcnvrt
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text12
  6923  002A80                     __ptext12:
  6924                           	callstack 0
  6925  002A80                     _stoa:
  6926                           	callstack 22
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 568: static int s
      +                          toa(FILE *fp, char *s);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprn
      +                          t.c: 569: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 570:  
      +                             char *cp, nuls[] = "(null)";
  6930                           
  6931                           ;incstack = 0
  6932  002A80  EE21  F0F6         	lfsr	2,stoa@F1169
  6933  002A84  EE10  F064         	lfsr	1,stoa@nuls
  6934  002A88  0E06               	movlw	6
  6935  002A8A                     u10441:
  6936  002A8A  CFDB FFE3          	movff	plusw2,plusw1
  6937  002A8E  06E8               	decf	wreg,f,c
  6938  002A90  E2FC               	bc	u10441
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 571:     int i, l
      +                          , p, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 574:     c
      +                          p = s;
  6942  002A92  C062  F06F         	movff	stoa@s,stoa@cp
  6943  002A96  C063  F070         	movff	stoa@s+1,stoa@cp+1
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 575:     if (!cp)
      +                           {
  6947  002A9A  516F               	movf	stoa@cp& (0+255),w,b
  6948  002A9C  1170               	iorwf	(stoa@cp+1)& (0+255),w,b
  6949  002A9E  E103               	bnz	l8826
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 576:         cp =
      +                           nuls;
  6953  002AA0  0E64               	movlw	low stoa@nuls
  6954  002AA2  6F6F               	movwf	stoa@cp& (0+255),b
  6955  002AA4  6B70               	clrf	(stoa@cp+1)& (0+255),b
  6956  002AA6                     l8826:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 580:     l = (int
      +                          )strlen(cp);
  6960  002AA6  C06F  F01A         	movff	stoa@cp,strlen@s
  6961  002AAA  C070  F01B         	movff	stoa@cp+1,strlen@s+1
  6962  002AAE  ECAB  F01D         	call	_strlen	;wreg free
  6963  002AB2  C01A  F073         	movff	?_strlen,stoa@l
  6964  002AB6  C01B  F074         	movff	?_strlen+1,stoa@l+1
  6965                           
  6966                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 581:     p = prec
      +                          ;
  6967  002ABA  C02F  F071         	movff	_prec,stoa@p
  6968  002ABE  C030  F072         	movff	_prec+1,stoa@p+1
  6969                           
  6970                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 582:     l = (!(p
      +                           < 0) && (p < l)) ? p : l;
  6971  002AC2  0100               	movlb	0	; () banked
  6972  002AC4  BF72               	btfsc	(stoa@p+1)& (0+255),7,b
  6973  002AC6  D00D               	goto	l1569
  6974                           
  6975                           ; BSR set to: 0
  6976  002AC8  5173               	movf	stoa@l& (0+255),w,b
  6977  002ACA  5D71               	subwf	stoa@p& (0+255),w,b
  6978  002ACC  5172               	movf	(stoa@p+1)& (0+255),w,b
  6979  002ACE  0A80               	xorlw	128
  6980  002AD0  6E24               	movwf	??_stoa^0,c
  6981  002AD2  5174               	movf	(stoa@l+1)& (0+255),w,b
  6982  002AD4  0A80               	xorlw	128
  6983  002AD6  5824               	subwfb	??_stoa^0,w,c
  6984  002AD8  E204               	bc	l1569
  6985                           
  6986                           ; BSR set to: 0
  6987  002ADA  C071  F073         	movff	stoa@p,stoa@l
  6988  002ADE  C072  F074         	movff	stoa@p+1,stoa@l+1
  6989  002AE2                     l1569:
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 583:     p = l;
  6993  002AE2  C073  F071         	movff	stoa@l,stoa@p
  6994  002AE6  C074  F072         	movff	stoa@l+1,stoa@p+1
  6995                           
  6996                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 584:     w = widt
      +                          h;
  6997  002AEA  C02D  F06D         	movff	_width,stoa@w
  6998  002AEE  C02E  F06E         	movff	_width+1,stoa@w+1
  6999                           
  7000                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 587:     if (!(fl
      +                          ags & (1 << 0))) {
  7001  002AF2  B031               	btfsc	_flags^0,0,c
  7002  002AF4  D009               	goto	u10490
  7003  002AF6  D006               	goto	l8840
  7004  002AF8                     l8836:
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 589:             
      +                          fputc(' ', fp);
  7008  002AF8  D846               	call	PL140	;call to abstracted procedure
  7009  002AFA  EC4D  F01A         	call	_fputc	;wreg free
  7010                           
  7011                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 590:             
      +                          ++l;
  7012  002AFE  0100               	movlb	0	; () banked
  7013  002B00  4B73               	infsnz	stoa@l& (0+255),f,b
  7014  002B02  2B74               	incf	(stoa@l+1)& (0+255),f,b
  7015  002B04                     l8840:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 588:         whil
      +                          e (l < w) {
  7019  002B04  D837               	call	PL116	;call to abstracted procedure
  7020  002B06  E3F8               	bnc	l8836
  7021  002B08                     u10490:
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 595:     i = 0;
  7025                           
  7026                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 592:     }
  7027  002B08  6B6B               	clrf	stoa@i& (0+255),b
  7028  002B0A  6B6C               	clrf	(stoa@i+1)& (0+255),b
  7029                           
  7030                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  7031  002B0C  D01A               	goto	l8848
  7032  002B0E                     l8842:
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 597:         fput
      +                          c(*cp, fp);
  7036  002B0E  C06F  FFF6         	movff	stoa@cp,tblptrl
  7037  002B12  C070  FFF7         	movff	stoa@cp+1,tblptrh
  7038  002B16  6AF8               	clrf	tblptru,c
  7039  002B18  0E05               	movlw	(high __ramtop+-1)
  7040  002B1A  64F7               	cpfsgt	tblptrh,c
  7041  002B1C  D003               	bra	u10507
  7042  002B1E  0008               	tblrd		*
  7043  002B20  50F5               	movf	tablat,w,c
  7044  002B22  D002               	bra	u10500
  7045  002B24                     u10507:
  7046  002B24  EC49  F017         	call	PL14	;call to abstracted procedure
  7047  002B28                     u10500:
  7048  002B28  6E1B               	movwf	fputc@c^0,c
  7049  002B2A  6A1C               	clrf	(fputc@c+1)^0,c
  7050  002B2C  C060  F01D         	movff	stoa@fp,fputc@fp
  7051  002B30  C061  F01E         	movff	stoa@fp+1,fputc@fp+1
  7052  002B34  EC4D  F01A         	call	_fputc	;wreg free
  7053                           
  7054                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 598:         ++cp
      +                          ;
  7055  002B38  0100               	movlb	0	; () banked
  7056  002B3A  4B6F               	infsnz	stoa@cp& (0+255),f,b
  7057  002B3C  2B70               	incf	(stoa@cp+1)& (0+255),f,b
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 599:         ++i;
  7061  002B3E  4B6B               	infsnz	stoa@i& (0+255),f,b
  7062  002B40  2B6C               	incf	(stoa@i+1)& (0+255),f,b
  7063  002B42                     l8848:
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 596:     while (i
      +                           < p) {
  7067  002B42  5171               	movf	stoa@p& (0+255),w,b
  7068  002B44  5D6B               	subwf	stoa@i& (0+255),w,b
  7069  002B46  516C               	movf	(stoa@i+1)& (0+255),w,b
  7070  002B48  0A80               	xorlw	128
  7071  002B4A  6E24               	movwf	??_stoa^0,c
  7072  002B4C  5172               	movf	(stoa@p+1)& (0+255),w,b
  7073  002B4E  0A80               	xorlw	128
  7074  002B50  5824               	subwfb	??_stoa^0,w,c
  7075  002B52  E3DD               	bnc	l8842
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 603:     if (flag
      +                          s & (1 << 0)) {
  7079  002B54  A031               	btfss	_flags^0,0,c
  7080  002B56  D009               	goto	u10530
  7081  002B58  D006               	goto	l8856
  7082  002B5A                     l8852:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 605:             
      +                          fputc(' ', fp);
  7086  002B5A  D815               	call	PL140	;call to abstracted procedure
  7087  002B5C  EC4D  F01A         	call	_fputc	;wreg free
  7088                           
  7089                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 606:             
      +                          ++l;
  7090  002B60  0100               	movlb	0	; () banked
  7091  002B62  4B73               	infsnz	stoa@l& (0+255),f,b
  7092  002B64  2B74               	incf	(stoa@l+1)& (0+255),f,b
  7093  002B66                     l8856:
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 604:         whil
      +                          e (l < w) {
  7097  002B66  D806               	call	PL116	;call to abstracted procedure
  7098  002B68  E3F8               	bnc	l8852
  7099  002B6A                     u10530:
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 610:     return l
      +                          ;
  7103                           
  7104                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 608:     }
  7105  002B6A  C073  F060         	movff	stoa@l,?_stoa
  7106  002B6E  C074  F061         	movff	stoa@l+1,?_stoa+1
  7107                           
  7108                           ; BSR set to: 0
  7109  002B72  0012               	return		;funcret
  7110  002B74                     __end_of_stoa:
  7111                           	callstack 0
  7112  002B74                     PL116:
  7113                           	callstack 22
  7114  002B74  516D               	movf	stoa@w& (0+255),w,b
  7115  002B76  5D73               	subwf	stoa@l& (0+255),w,b
  7116  002B78  5174               	movf	(stoa@l+1)& (0+255),w,b
  7117  002B7A  0A80               	xorlw	128
  7118  002B7C  6E24               	movwf	??_stoa^0,c
  7119  002B7E  516E               	movf	(stoa@w+1)& (0+255),w,b
  7120  002B80  0A80               	xorlw	128
  7121  002B82  5824               	subwfb	??_stoa^0,w,c
  7122  002B84  0012               	return	
  7123  002B86                     __end_ofPL116:
  7124                           	callstack 0
  7125  002B86                     PL140:
  7126                           	callstack 22
  7127  002B86  6A1C               	clrf	(fputc@c+1)^0,c
  7128  002B88  0E20               	movlw	32
  7129  002B8A  6E1B               	movwf	fputc@c^0,c
  7130  002B8C  C060  F01D         	movff	stoa@fp,fputc@fp
  7131  002B90  C061  F01E         	movff	stoa@fp+1,fputc@fp+1
  7132  002B94  0C20               	retlw	32
  7133  002B96                     __end_ofPL140:
  7134                           	callstack 0
  7135                           
  7136 ;; *************** function _efgtoa *****************
  7137 ;; Defined at:
  7138 ;;		line 332 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  fp              2  100[BANK0 ] PTR struct _IO_FILE
  7141 ;;		 -> sprintf@f(11), 
  7142 ;;  f               4  102[BANK0 ] PTR struct _IO_FILE
  7143 ;;  c               1  106[BANK0 ] unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  u               4   46[BANK1 ] unsigned char 
  7146 ;;  g               4   38[BANK1 ] unsigned char 
  7147 ;;  l               4   32[BANK1 ] unsigned char 
  7148 ;;  h               4   28[BANK1 ] unsigned char 
  7149 ;;  ou              4   14[BANK1 ] unsigned char 
  7150 ;;  n               2   44[BANK1 ] int 
  7151 ;;  e               2   42[BANK1 ] int 
  7152 ;;  i               2   36[BANK1 ] int 
  7153 ;;  w               2   24[BANK1 ] int 
  7154 ;;  p               2   22[BANK1 ] int 
  7155 ;;  sign            2   20[BANK1 ] int 
  7156 ;;  d               2   18[BANK1 ] int 
  7157 ;;  m               2   12[BANK1 ] int 
  7158 ;;  ne              2   10[BANK1 ] int 
  7159 ;;  pp              2    8[BANK1 ] int 
  7160 ;;  t               2    6[BANK1 ] int 
  7161 ;;  mode            1   27[BANK1 ] unsigned char 
  7162 ;;  nmode           1   26[BANK1 ] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  2  100[BANK0 ] int 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 3F/0
  7169 ;;		On exit  : 3F/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7172 ;;      Params:         0       7       0       0       0       0       0
  7173 ;;      Locals:         0       0      50       0       0       0       0
  7174 ;;      Temps:          0       5       0       0       0       0       0
  7175 ;;      Totals:         0      12      50       0       0       0       0
  7176 ;;Total ram usage:       62 bytes
  7177 ;; Hardware stack levels used: 1
  7178 ;; Hardware stack levels required when called: 7
  7179 ;; This function calls:
  7180 ;;		___awdiv
  7181 ;;		___awmod
  7182 ;;		___fladd
  7183 ;;		___fldiv
  7184 ;;		___fleq
  7185 ;;		___flge
  7186 ;;		___flmul
  7187 ;;		___flneg
  7188 ;;		___flsub
  7189 ;;		___fltol
  7190 ;;		___fpclassifyf
  7191 ;;		_floorf
  7192 ;;		_isupper
  7193 ;;		_pad
  7194 ;;		_strcpy
  7195 ;;		_tolower
  7196 ;; This function is called by:
  7197 ;;		_vfpfcnvrt
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           	psect	text13
  7202  0009AC                     __ptext13:
  7203                           	callstack 0
  7204  0009AC                     _efgtoa:
  7205                           	callstack 20
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 332: static int e
      +                          fgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.36\pic\sources\
      +                          c99\common\doprnt.c: 333: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\
      +                          doprnt.c: 334:     char mode, nmode;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c9
      +                          9\common\doprnt.c: 335:     int d, e, i, m, n, ne, p, pp, sign, t, w;;C:\Program Files\M
      +                          icrochip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 336:     long double g, h, l, ou, u;
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;incstack = 0
  7212  0009AC  0101               	movlb	1	; () banked
  7213  0009AE  6BB7               	clrf	efgtoa@sign& (0+255),b
  7214  0009B0  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  7215                           
  7216                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 340:     g = f;
  7217  0009B2  C0C6  F1C9         	movff	efgtoa@f,efgtoa@g
  7218  0009B6  C0C7  F1CA         	movff	efgtoa@f+1,efgtoa@g+1
  7219  0009BA  C0C8  F1CB         	movff	efgtoa@f+2,efgtoa@g+2
  7220  0009BE  C0C9  F1CC         	movff	efgtoa@f+3,efgtoa@g+3
  7221                           
  7222                           ; BSR set to: 1
  7223                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 341:     if (g < 
      +                          0.0) {
  7224  0009C2  AFCC               	btfss	(efgtoa@g+3)& (0+255),7,b
  7225  0009C4  D015               	goto	l8520
  7226                           
  7227                           ; BSR set to: 1
  7228                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 342:         sign
      +                           = 1;
  7229  0009C6  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  7230  0009C8  0E01               	movlw	1
  7231  0009CA  6FB7               	movwf	efgtoa@sign& (0+255),b
  7232                           
  7233                           ; BSR set to: 1
  7234                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 343:         g = 
      +                          -g;
  7235  0009CC  C1C9  F01A         	movff	efgtoa@g,___flneg@f1
  7236  0009D0  C1CA  F01B         	movff	efgtoa@g+1,___flneg@f1+1
  7237  0009D4  C1CB  F01C         	movff	efgtoa@g+2,___flneg@f1+2
  7238  0009D8  C1CC  F01D         	movff	efgtoa@g+3,___flneg@f1+3
  7239  0009DC  EC0E  F01F         	call	___flneg	;wreg free
  7240  0009E0  C01A  F1C9         	movff	?___flneg,efgtoa@g
  7241  0009E4  C01B  F1CA         	movff	?___flneg+1,efgtoa@g+1
  7242  0009E8  C01C  F1CB         	movff	?___flneg+2,efgtoa@g+2
  7243  0009EC  C01D  F1CC         	movff	?___flneg+3,efgtoa@g+3
  7244  0009F0                     l8520:
  7245                           
  7246                           ; BSR set to: 1
  7247                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 347:     n = 0;
  7248  0009F0  6BCF               	clrf	efgtoa@n& (0+255),b
  7249  0009F2  6BD0               	clrf	(efgtoa@n+1)& (0+255),b
  7250                           
  7251                           ; BSR set to: 1
  7252                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 348:     w = widt
      +                          h;
  7253  0009F4  C02D  F1BB         	movff	_width,efgtoa@w
  7254  0009F8  C02E  F1BC         	movff	_width+1,efgtoa@w+1
  7255                           
  7256                           ; BSR set to: 1
  7257                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 349:     if (sign
      +                           || (flags & (1 << 2))) {
  7258  0009FC  51B7               	movf	efgtoa@sign& (0+255),w,b
  7259  0009FE  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  7260  000A00  E102               	bnz	u9980
  7261                           
  7262                           ; BSR set to: 1
  7263  000A02  A431               	btfss	_flags^0,2,c
  7264  000A04  D010               	goto	l8540
  7265  000A06                     u9980:
  7266                           
  7267                           ; BSR set to: 1
  7268                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 350:         dbuf
      +                          [n] = sign ? '-' : '+';
  7269  000A06  51B7               	movf	efgtoa@sign& (0+255),w,b
  7270  000A08  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  7271  000A0A  E103               	bnz	l8532
  7272                           
  7273                           ; BSR set to: 1
  7274  000A0C  6BA4               	clrf	(_efgtoa$2403+1)& (0+255),b
  7275  000A0E  0E2B               	movlw	43
  7276  000A10  D002               	goto	L7
  7277  000A12                     l8532:
  7278                           
  7279                           ; BSR set to: 1
  7280  000A12  6BA4               	clrf	(_efgtoa$2403+1)& (0+255),b
  7281  000A14  0E2D               	movlw	45
  7282  000A16                     L7:
  7283  000A16  6FA3               	movwf	_efgtoa$2403& (0+255),b
  7284                           
  7285                           ; BSR set to: 1
  7286  000A18  C1A3  F12D         	movff	_efgtoa$2403,_dbuf
  7287                           
  7288                           ; BSR set to: 1
  7289                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 351:         ++n;
  7290  000A1C  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  7291  000A1E  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  7292                           
  7293                           ; BSR set to: 1
  7294                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 352:         --w;
  7295  000A20  07BB               	decf	efgtoa@w& (0+255),f,b
  7296  000A22  A0D8               	btfss	status,0,c
  7297  000A24  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7298  000A26                     l8540:
  7299                           
  7300                           ; BSR set to: 1
  7301                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 356:     if (( __
      +                          fpclassifyf(g) == 1 )) {
  7302  000A26  DB20               	call	PL88	;call to abstracted procedure
  7303  000A28  EC26  F018         	call	___fpclassifyf	;wreg free
  7304  000A2C  041A               	decf	?___fpclassifyf^0,w,c
  7305  000A2E  101B               	iorwf	(?___fpclassifyf+1)^0,w,c
  7306  000A30  E12E               	bnz	l8558
  7307                           
  7308                           ; BSR set to: 0
  7309  000A32  0EBF               	movlw	191
  7310  000A34  DAB0               	call	PL36	;call to abstracted procedure
  7311  000A36  E10B               	bnz	l8550
  7312  000A38  0E1A               	movlw	26
  7313  000A3A  5DCD               	subwf	(??_efgtoa+2)& (0+255),w,b
  7314  000A3C  E208               	bc	l8550
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 358:             
      +                          strcpy(&dbuf[n], "INF");
  7318  000A3E  DADF               	call	PL48	;call to abstracted procedure
  7319  000A40  0EE1               	movlw	low STR_31
  7320  000A42  6E1C               	movwf	strcpy@src^0,c
  7321  000A44  0E7F               	movlw	high STR_31
  7322  000A46  6E1D               	movwf	(strcpy@src+1)^0,c
  7323  000A48  ECA0  F01C         	call	_strcpy	;wreg free
  7324                           
  7325                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 359:         } el
      +                          se {
  7326  000A4C  D007               	goto	l8552
  7327  000A4E                     l8550:
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 360:             
      +                          strcpy(&dbuf[n], "inf");
  7331  000A4E  DAD7               	call	PL48	;call to abstracted procedure
  7332  000A50  0EE9               	movlw	low STR_32
  7333  000A52  6E1C               	movwf	strcpy@src^0,c
  7334  000A54  0E7F               	movlw	high STR_32
  7335  000A56  6E1D               	movwf	(strcpy@src+1)^0,c
  7336  000A58  ECA0  F01C         	call	_strcpy	;wreg free
  7337  000A5C                     l8552:
  7338                           
  7339                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 362:         w -=
      +                           ((sizeof("inf")/sizeof("inf"[0]))-1);
  7340  000A5C  0101               	movlb	1	; () banked
  7341  000A5E  0EFD               	movlw	253
  7342  000A60  27BB               	addwf	efgtoa@w& (0+255),f,b
  7343  000A62  0EFF               	movlw	255
  7344  000A64  23BC               	addwfc	(efgtoa@w+1)& (0+255),f,b
  7345  000A66                     l8554:
  7346                           
  7347                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 363:         retu
      +                          rn pad(fp, &dbuf[0], w);
  7348  000A66  C0C4  F067         	movff	efgtoa@fp,pad@fp
  7349  000A6A  C0C5  F068         	movff	efgtoa@fp+1,pad@fp+1
  7350  000A6E  0E2D               	movlw	low _dbuf
  7351  000A70  0100               	movlb	0	; () banked
  7352  000A72  6F69               	movwf	pad@buf& (0+255),b
  7353  000A74  0E01               	movlw	high _dbuf
  7354  000A76  6F6A               	movwf	(pad@buf+1)& (0+255),b
  7355  000A78  C1BB  F06B         	movff	efgtoa@w,pad@p
  7356  000A7C  C1BC  F06C         	movff	efgtoa@w+1,pad@p+1
  7357  000A80  EC92  F01A         	call	_pad	;wreg free
  7358  000A84  C067  F0C4         	movff	?_pad,?_efgtoa
  7359  000A88  C068  F0C5         	movff	?_pad+1,?_efgtoa+1
  7360  000A8C  0012               	return	
  7361  000A8E                     l8558:
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 365:     if (( __
      +                          fpclassifyf(g) == 0 )) {
  7365  000A8E  DAEC               	call	PL88	;call to abstracted procedure
  7366  000A90  EC26  F018         	call	___fpclassifyf	;wreg free
  7367  000A94  501A               	movf	?___fpclassifyf^0,w,c
  7368  000A96  101B               	iorwf	(?___fpclassifyf+1)^0,w,c
  7369  000A98  E116               	bnz	l8576
  7370                           
  7371                           ; BSR set to: 0
  7372  000A9A  0EBF               	movlw	191
  7373  000A9C  DA7C               	call	PL36	;call to abstracted procedure
  7374  000A9E  E10B               	bnz	l8568
  7375  000AA0  0E1A               	movlw	26
  7376  000AA2  5DCD               	subwf	(??_efgtoa+2)& (0+255),w,b
  7377  000AA4  E208               	bc	l8568
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 367:             
      +                          strcpy(&dbuf[n], "NAN");
  7381  000AA6  DAAB               	call	PL48	;call to abstracted procedure
  7382  000AA8  0EE5               	movlw	low STR_35
  7383  000AAA  6E1C               	movwf	strcpy@src^0,c
  7384  000AAC  0E7F               	movlw	high STR_35
  7385  000AAE  6E1D               	movwf	(strcpy@src+1)^0,c
  7386  000AB0  ECA0  F01C         	call	_strcpy	;wreg free
  7387                           
  7388                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 368:         } el
      +                          se {
  7389  000AB4  D7D3               	goto	l8552
  7390  000AB6                     l8568:
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 369:             
      +                          strcpy(&dbuf[n], "nan");
  7394  000AB6  DAA3               	call	PL48	;call to abstracted procedure
  7395  000AB8  0EED               	movlw	low STR_36
  7396  000ABA  6E1C               	movwf	strcpy@src^0,c
  7397  000ABC  0E7F               	movlw	high STR_36
  7398  000ABE  6E1D               	movwf	(strcpy@src+1)^0,c
  7399  000AC0  ECA0  F01C         	call	_strcpy	;wreg free
  7400  000AC4  D7CB               	goto	l8552
  7401  000AC6                     l8576:
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 376:     u = 1.0;
  7405  000AC6  0101               	movlb	1	; () banked
  7406                           
  7407                           ; BSR set to: 1
  7408                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 377:     e = 0;
  7409  000AC8  DB0E               	call	PL122	;call to abstracted procedure
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 378:     if (!(g 
      +                          == 0.0)) {
  7413  000ACA  C1C9  F01A         	movff	efgtoa@g,___fleq@ff1
  7414  000ACE  C1CA  F01B         	movff	efgtoa@g+1,___fleq@ff1+1
  7415  000AD2  C1CB  F01C         	movff	efgtoa@g+2,___fleq@ff1+2
  7416  000AD6  C1CC  F01D         	movff	efgtoa@g+3,___fleq@ff1+3
  7417  000ADA  DB18               	call	PL180	;call to abstracted procedure
  7418  000ADC  EC80  F01B         	call	___fleq	;wreg free
  7419  000AE0  E310               	bnc	l8588
  7420  000AE2  D02D               	goto	u10060
  7421  000AE4                     l8584:
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 380:             
      +                          u = u*10.0;
  7425  000AE4  DA9E               	call	PL52	;call to abstracted procedure
  7426  000AE6  DAAD               	call	PL58	;call to abstracted procedure
  7427  000AE8  EC37  F00F         	call	___flmul	;wreg free
  7428  000AEC  C066  F1D1         	movff	?___flmul,efgtoa@u
  7429  000AF0  C067  F1D2         	movff	?___flmul+1,efgtoa@u+1
  7430  000AF4  C068  F1D3         	movff	?___flmul+2,efgtoa@u+2
  7431  000AF8  C069  F1D4         	movff	?___flmul+3,efgtoa@u+3
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 381:             
      +                          ++e;
  7435  000AFC  0101               	movlb	1	; () banked
  7436  000AFE  4BCD               	infsnz	efgtoa@e& (0+255),f,b
  7437  000B00  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  7438  000B02                     l8588:
  7439                           
  7440                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 379:         whil
      +                          e (!(g < (u*10.0))) {
  7441  000B02  DAC4               	call	PL96	;call to abstracted procedure
  7442  000B04  0100               	movlb	0	; () banked
  7443  000B06  DA9D               	call	PL58	;call to abstracted procedure
  7444  000B08  DA8C               	call	PL52	;call to abstracted procedure
  7445  000B0A  EC37  F00F         	call	___flmul	;wreg free
  7446  000B0E  DAB5               	call	PL92	;call to abstracted procedure
  7447  000B10  ECC1  F019         	call	___flge	;wreg free
  7448  000B14  E308               	bnc	l8594
  7449  000B16  D7E6               	goto	l8584
  7450  000B18                     l8590:
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 384:             
      +                          u = u/10.0;
  7454  000B18  DA0D               	call	PL16	;call to abstracted procedure
  7455  000B1A  EC4C  F010         	call	___fldiv	;wreg free
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 385:             
      +                          --e;
  7459  000B1E  DA77               	call	PL50	;call to abstracted procedure
  7460  000B20  07CD               	decf	efgtoa@e& (0+255),f,b
  7461  000B22  A0D8               	btfss	status,0,c
  7462  000B24  07CE               	decf	(efgtoa@e+1)& (0+255),f,b
  7463  000B26                     l8594:
  7464                           
  7465                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 383:         whil
      +                          e (g < u) {
  7466  000B26  DAB2               	call	PL96	;call to abstracted procedure
  7467  000B28  C1D1  F083         	movff	efgtoa@u,___flge@ff2
  7468  000B2C  C1D2  F084         	movff	efgtoa@u+1,___flge@ff2+1
  7469  000B30  C1D3  F085         	movff	efgtoa@u+2,___flge@ff2+2
  7470  000B34  C1D4  F086         	movff	efgtoa@u+3,___flge@ff2+3
  7471  000B38  ECC1  F019         	call	___flge	;wreg free
  7472  000B3C  E3ED               	bnc	l8590
  7473  000B3E                     u10060:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 390:     mode = (
      +                          char)tolower((int)c);
  7477  000B3E  C0CA  F020         	movff	efgtoa@c,tolower@c
  7478  000B42  6A21               	clrf	(tolower@c+1)^0,c
  7479  000B44  ECE5  F01D         	call	_tolower	;wreg free
  7480  000B48  5020               	movf	?_tolower^0,w,c
  7481  000B4A  0101               	movlb	1	; () banked
  7482  000B4C  6FBE               	movwf	efgtoa@mode& (0+255),b
  7483                           
  7484                           ; BSR set to: 1
  7485                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 391:     nmode = 
      +                          mode;
  7486  000B4E  C1BE  F1BD         	movff	efgtoa@mode,efgtoa@nmode
  7487                           
  7488                           ; BSR set to: 1
  7489                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 392:     if (mode
      +                           == 'g') {
  7490  000B52  0E67               	movlw	103
  7491  000B54  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7492  000B56  E116               	bnz	l8610
  7493                           
  7494                           ; BSR set to: 1
  7495                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 393:   if (prec =
      +                          = 0) {
  7496  000B58  502F               	movf	_prec^0,w,c
  7497  000B5A  1030               	iorwf	(_prec+1)^0,w,c
  7498  000B5C  E104               	bnz	l8606
  7499                           
  7500                           ; BSR set to: 1
  7501                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 394:    prec = 1;
  7502  000B5E  0E00               	movlw	0
  7503  000B60  6E30               	movwf	(_prec+1)^0,c
  7504  000B62  0E01               	movlw	1
  7505  000B64  6E2F               	movwf	_prec^0,c
  7506  000B66                     l8606:
  7507                           
  7508                           ; BSR set to: 1
  7509                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 396:         p = 
      +                          (0 < prec) ? prec : 6;
  7510  000B66  BE30               	btfsc	(_prec+1)^0,7,c
  7511  000B68  D004               	goto	u10090
  7512  000B6A  5030               	movf	(_prec+1)^0,w,c
  7513  000B6C  E106               	bnz	l1505
  7514  000B6E  042F               	decf	_prec^0,w,c
  7515  000B70  E204               	bc	l1505
  7516  000B72                     u10090:
  7517                           
  7518                           ; BSR set to: 1
  7519  000B72  6BBA               	clrf	(efgtoa@p+1)& (0+255),b
  7520  000B74  0E06               	movlw	6
  7521  000B76  6FB9               	movwf	efgtoa@p& (0+255),b
  7522  000B78  D008               	goto	l8616
  7523  000B7A                     l1505:
  7524                           
  7525                           ; BSR set to: 1
  7526  000B7A  C02F  F1B9         	movff	_prec,efgtoa@p
  7527  000B7E  C030  F1BA         	movff	_prec+1,efgtoa@p+1
  7528  000B82  D003               	goto	l8616
  7529  000B84                     l8610:
  7530                           
  7531                           ; BSR set to: 1
  7532                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 398:         p = 
      +                          (prec < 0) ? 6 : prec;
  7533  000B84  BE30               	btfsc	(_prec+1)^0,7,c
  7534  000B86  D7F5               	goto	u10090
  7535  000B88  D7F8               	goto	l1505
  7536  000B8A                     l8616:
  7537                           
  7538                           ; BSR set to: 1
  7539                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 402:     if (mode
      +                           == 'g') {
  7540  000B8A  0E67               	movlw	103
  7541  000B8C  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7542  000B8E  E124               	bnz	l8626
  7543                           
  7544                           ; BSR set to: 1
  7545                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 403:         if (
      +                          !(e < -4) && !((p - 1) < e)) {
  7546  000B90  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  7547  000B92  D005               	goto	u10120
  7548  000B94  0EFC               	movlw	252
  7549  000B96  5DCD               	subwf	efgtoa@e& (0+255),w,b
  7550  000B98  0EFF               	movlw	255
  7551  000B9A  59CE               	subwfb	(efgtoa@e+1)& (0+255),w,b
  7552  000B9C  E31A               	bnc	l8624
  7553  000B9E                     u10120:
  7554                           
  7555                           ; BSR set to: 1
  7556  000B9E  0100               	movlb	0	; () banked
  7557  000BA0  69CB               	setf	??_efgtoa& (0+255),b
  7558  000BA2  69CC               	setf	(??_efgtoa+1)& (0+255),b
  7559  000BA4  C1B9  F0CD         	movff	efgtoa@p,??_efgtoa+2
  7560  000BA8  C1BA  F0CE         	movff	efgtoa@p+1,??_efgtoa+3
  7561  000BAC  51CB               	movf	??_efgtoa& (0+255),w,b
  7562  000BAE  27CD               	addwf	(??_efgtoa+2)& (0+255),f,b
  7563  000BB0  51CC               	movf	(??_efgtoa+1)& (0+255),w,b
  7564  000BB2  23CE               	addwfc	(??_efgtoa+3)& (0+255),f,b
  7565  000BB4  0101               	movlb	1	; () banked
  7566  000BB6  51CD               	movf	efgtoa@e& (0+255),w,b
  7567  000BB8  0100               	movlb	0	; () banked
  7568  000BBA  5DCD               	subwf	(??_efgtoa+2)& (0+255),w,b
  7569  000BBC  51CE               	movf	(??_efgtoa+3)& (0+255),w,b
  7570  000BBE  0A80               	xorlw	128
  7571  000BC0  6FCF               	movwf	(??_efgtoa+4)& (0+255),b
  7572  000BC2  0101               	movlb	1	; () banked
  7573  000BC4  51CE               	movf	(efgtoa@e+1)& (0+255),w,b
  7574  000BC6  0A80               	xorlw	128
  7575  000BC8  0100               	movlb	0	; () banked
  7576  000BCA  59CF               	subwfb	(??_efgtoa+4)& (0+255),w,b
  7577  000BCC  E302               	bnc	l8624
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 404:             
      +                          nmode = 'f';
  7581  000BCE  0E66               	movlw	102
  7582  000BD0  D001               	goto	L8
  7583  000BD2                     l8624:
  7584                           
  7585                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 406:             
      +                          nmode = 'e';
  7586  000BD2  0E65               	movlw	101
  7587  000BD4                     L8:
  7588  000BD4  0101               	movlb	1	; () banked
  7589  000BD6  6FBD               	movwf	efgtoa@nmode& (0+255),b
  7590  000BD8                     l8626:
  7591                           
  7592                           ; BSR set to: 1
  7593                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 411:     m = p;
  7594  000BD8  C1B9  F1AF         	movff	efgtoa@p,efgtoa@m
  7595  000BDC  C1BA  F1B0         	movff	efgtoa@p+1,efgtoa@m+1
  7596                           
  7597                           ; BSR set to: 1
  7598                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 412:     if (!(mo
      +                          de == 'g') || ((nmode == 'f') && (e < 0))) {
  7599  000BE0  0E67               	movlw	103
  7600  000BE2  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7601  000BE4  E105               	bnz	u10160
  7602                           
  7603                           ; BSR set to: 1
  7604  000BE6  0E66               	movlw	102
  7605  000BE8  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7606  000BEA  E104               	bnz	l8636
  7607                           
  7608                           ; BSR set to: 1
  7609  000BEC  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  7610  000BEE  D002               	goto	l8636
  7611  000BF0                     u10160:
  7612                           
  7613                           ; BSR set to: 1
  7614                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 413:         ++m;
  7615  000BF0  4BAF               	infsnz	efgtoa@m& (0+255),f,b
  7616  000BF2  2BB0               	incf	(efgtoa@m+1)& (0+255),f,b
  7617  000BF4                     l8636:
  7618                           
  7619                           ; BSR set to: 1
  7620                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 417:     if (nmod
      +                          e == 'f') {
  7621  000BF4  0E66               	movlw	102
  7622  000BF6  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7623  000BF8  E109               	bnz	l8648
  7624                           
  7625                           ; BSR set to: 1
  7626                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 418:         if (
      +                          e < 0) {
  7627  000BFA  BFCE               	btfsc	(efgtoa@e+1)& (0+255),7,b
  7628                           
  7629                           ; BSR set to: 1
  7630                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 419:             
      +                          u = 1.0;
  7631                           
  7632                           ; BSR set to: 1
  7633                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 420:             
      +                          e = 0;
  7634  000BFC  DA74               	call	PL122	;call to abstracted procedure
  7635  000BFE                     l8644:
  7636                           
  7637                           ; BSR set to: 1
  7638                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 422:         if (
      +                          !(mode == 'g')) {
  7639  000BFE  0E67               	movlw	103
  7640  000C00  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7641  000C02  E004               	bz	l8648
  7642                           
  7643                           ; BSR set to: 1
  7644                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 423:             
      +                          m += e;
  7645  000C04  51CD               	movf	efgtoa@e& (0+255),w,b
  7646  000C06  27AF               	addwf	efgtoa@m& (0+255),f,b
  7647  000C08  51CE               	movf	(efgtoa@e+1)& (0+255),w,b
  7648  000C0A  23B0               	addwfc	(efgtoa@m+1)& (0+255),f,b
  7649  000C0C                     l8648:
  7650                           
  7651                           ; BSR set to: 1
  7652                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 428:     i = 0;
  7653  000C0C  6BC7               	clrf	efgtoa@i& (0+255),b
  7654  000C0E  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 429:     h = g;
  7658  000C10  C1C9  F1BF         	movff	efgtoa@g,efgtoa@h
  7659  000C14  C1CA  F1C0         	movff	efgtoa@g+1,efgtoa@h+1
  7660  000C18  C1CB  F1C1         	movff	efgtoa@g+2,efgtoa@h+2
  7661  000C1C  C1CC  F1C2         	movff	efgtoa@g+3,efgtoa@h+3
  7662                           
  7663                           ; BSR set to: 1
  7664                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 430:     ou = u;
  7665  000C20  C1D1  F1B1         	movff	efgtoa@u,efgtoa@ou
  7666  000C24  C1D2  F1B2         	movff	efgtoa@u+1,efgtoa@ou+1
  7667  000C28  C1D3  F1B3         	movff	efgtoa@u+2,efgtoa@ou+2
  7668  000C2C  C1D4  F1B4         	movff	efgtoa@u+3,efgtoa@ou+3
  7669                           
  7670                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  7671  000C30  D017               	goto	l8662
  7672  000C32                     l8654:
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 432:         l = 
      +                          floorf(h/u);
  7676  000C32  D9D4               	call	PL46	;call to abstracted procedure
  7677  000C34  EC4C  F010         	call	___fldiv	;wreg free
  7678  000C38  DA32               	call	PL98	;call to abstracted procedure
  7679  000C3A  ECF1  F011         	call	_floorf	;wreg free
  7680                           
  7681                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 433:         d = 
      +                          (int)l;
  7682  000C3E  D9BD               	call	PL44	;call to abstracted procedure
  7683  000C40  EC28  F019         	call	___fltol	;wreg free
  7684  000C44  DA5E               	call	PL178	;call to abstracted procedure
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 434:         h -=
      +                           l*u;
  7688  000C46  D985               	call	PL18	;call to abstracted procedure
  7689  000C48  EC37  F00F         	call	___flmul	;wreg free
  7690  000C4C  DA31               	call	PL102	;call to abstracted procedure
  7691  000C4E  ECC8  F01D         	call	___flsub	;wreg free
  7692  000C52  D998               	call	PL24	;call to abstracted procedure
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 435:         u = 
      +                          u/10.0;
  7696  000C54  D96F               	call	PL16	;call to abstracted procedure
  7697  000C56  EC4C  F010         	call	___fldiv	;wreg free
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 436:         ++i;
  7701  000C5A  D9D9               	call	PL50	;call to abstracted procedure
  7702  000C5C  4BC7               	infsnz	efgtoa@i& (0+255),f,b
  7703  000C5E  2BC8               	incf	(efgtoa@i+1)& (0+255),f,b
  7704  000C60                     l8662:
  7705                           
  7706                           ; BSR set to: 1
  7707                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 431:     while (i
      +                           < m) {
  7708  000C60  D9F7               	call	PL74	;call to abstracted procedure
  7709  000C62  E3E7               	bnc	l8654
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 440:     l = u*5.
      +                          0;
  7713  000C64  D9DE               	call	PL52	;call to abstracted procedure
  7714  000C66  6B6A               	clrf	___flmul@a& (0+255),b
  7715  000C68  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  7716  000C6A  0EA0               	movlw	160
  7717  000C6C  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  7718  000C6E  0E40               	movlw	64
  7719  000C70  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  7720  000C72  EC37  F00F         	call	___flmul	;wreg free
  7721  000C76  C066  F1C3         	movff	?___flmul,efgtoa@l
  7722  000C7A  C067  F1C4         	movff	?___flmul+1,efgtoa@l+1
  7723  000C7E  C068  F1C5         	movff	?___flmul+2,efgtoa@l+2
  7724  000C82  C069  F1C6         	movff	?___flmul+3,efgtoa@l+3
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 441:     if (h < 
      +                          l) {
  7728  000C86  DA26               	call	PL112	;call to abstracted procedure
  7729  000C88  C1C3  F083         	movff	efgtoa@l,___flge@ff2
  7730  000C8C  C1C4  F084         	movff	efgtoa@l+1,___flge@ff2+1
  7731  000C90  C1C5  F085         	movff	efgtoa@l+2,___flge@ff2+2
  7732  000C94  C1C6  F086         	movff	efgtoa@l+3,___flge@ff2+3
  7733  000C98  ECC1  F019         	call	___flge	;wreg free
  7734  000C9C  E202               	bc	l8670
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 442:         l = 
      +                          0.0;
  7738  000C9E  0101               	movlb	1	; () banked
  7739  000CA0  D016               	goto	u10230
  7740  000CA2                     l8670:
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 445:         if (
      +                          (h == l) && !(d % 2)) {
  7744  000CA2  C1BF  F01A         	movff	efgtoa@h,___fleq@ff1
  7745  000CA6  C1C0  F01B         	movff	efgtoa@h+1,___fleq@ff1+1
  7746  000CAA  C1C1  F01C         	movff	efgtoa@h+2,___fleq@ff1+2
  7747  000CAE  C1C2  F01D         	movff	efgtoa@h+3,___fleq@ff1+3
  7748  000CB2  C1C3  F01E         	movff	efgtoa@l,___fleq@ff2
  7749  000CB6  C1C4  F01F         	movff	efgtoa@l+1,___fleq@ff2+1
  7750  000CBA  C1C5  F020         	movff	efgtoa@l+2,___fleq@ff2+2
  7751  000CBE  C1C6  F021         	movff	efgtoa@l+3,___fleq@ff2+3
  7752  000CC2  EC80  F01B         	call	___fleq	;wreg free
  7753  000CC6  E307               	bnc	l8676
  7754                           
  7755                           ; BSR set to: 0
  7756  000CC8  0101               	movlb	1	; () banked
  7757  000CCA  B1B5               	btfsc	efgtoa@d& (0+255),0,b
  7758  000CCC  D004               	goto	l8676
  7759  000CCE                     u10230:
  7760                           
  7761                           ; BSR set to: 1
  7762                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 446:             
      +                          l = 0.0;
  7763  000CCE  6BC3               	clrf	efgtoa@l& (0+255),b
  7764  000CD0  6BC4               	clrf	(efgtoa@l+1)& (0+255),b
  7765  000CD2  6BC5               	clrf	(efgtoa@l+2)& (0+255),b
  7766  000CD4  6BC6               	clrf	(efgtoa@l+3)& (0+255),b
  7767  000CD6                     l8676:
  7768                           
  7769                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 451:     h = g + 
      +                          l;
  7770  000CD6  C1C9  F07F         	movff	efgtoa@g,___fladd@b
  7771  000CDA  C1CA  F080         	movff	efgtoa@g+1,___fladd@b+1
  7772  000CDE  C1CB  F081         	movff	efgtoa@g+2,___fladd@b+2
  7773  000CE2  C1CC  F082         	movff	efgtoa@g+3,___fladd@b+3
  7774  000CE6  C1C3  F083         	movff	efgtoa@l,___fladd@a
  7775  000CEA  C1C4  F084         	movff	efgtoa@l+1,___fladd@a+1
  7776  000CEE  C1C5  F085         	movff	efgtoa@l+2,___fladd@a+2
  7777  000CF2  C1C6  F086         	movff	efgtoa@l+3,___fladd@a+3
  7778  000CF6  EC09  F00E         	call	___fladd	;wreg free
  7779  000CFA  C07F  F1BF         	movff	?___fladd,efgtoa@h
  7780  000CFE  C080  F1C0         	movff	?___fladd+1,efgtoa@h+1
  7781  000D02  C081  F1C1         	movff	?___fladd+2,efgtoa@h+2
  7782  000D06  C082  F1C2         	movff	?___fladd+3,efgtoa@h+3
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 453:  if (h >= (o
      +                          u*10.0)) {
  7786  000D0A  D9E4               	call	PL112	;call to abstracted procedure
  7787  000D0C  D99A               	call	PL58	;call to abstracted procedure
  7788  000D0E  D9D9               	call	PL104	;call to abstracted procedure
  7789  000D10  EC37  F00F         	call	___flmul	;wreg free
  7790  000D14  D9B2               	call	PL92	;call to abstracted procedure
  7791  000D16  ECC1  F019         	call	___flge	;wreg free
  7792  000D1A  E316               	bnc	l8688
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 454:   e++;
  7796  000D1C  0101               	movlb	1	; () banked
  7797  000D1E  4BCD               	infsnz	efgtoa@e& (0+255),f,b
  7798  000D20  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  7799                           
  7800                           ; BSR set to: 1
  7801                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 455:   ou *= 10.0
      +                          ;
  7802  000D22  D9CF               	call	PL104	;call to abstracted procedure
  7803  000D24  0100               	movlb	0	; () banked
  7804  000D26  D98D               	call	PL58	;call to abstracted procedure
  7805  000D28  EC37  F00F         	call	___flmul	;wreg free
  7806  000D2C  C066  F1B1         	movff	?___flmul,efgtoa@ou
  7807  000D30  C067  F1B2         	movff	?___flmul+1,efgtoa@ou+1
  7808  000D34  C068  F1B3         	movff	?___flmul+2,efgtoa@ou+2
  7809  000D38  C069  F1B4         	movff	?___flmul+3,efgtoa@ou+3
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 456:   if (nmode 
      +                          == 'f') {
  7813  000D3C  0E66               	movlw	102
  7814  000D3E  0101               	movlb	1	; () banked
  7815  000D40  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7816  000D42  E102               	bnz	l8688
  7817                           
  7818                           ; BSR set to: 1
  7819                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 458:    m++;
  7820  000D44  4BAF               	infsnz	efgtoa@m& (0+255),f,b
  7821  000D46  2BB0               	incf	(efgtoa@m+1)& (0+255),f,b
  7822  000D48                     l8688:
  7823                           
  7824                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 463:     u = ou;
  7825  000D48  C1B1  F1D1         	movff	efgtoa@ou,efgtoa@u
  7826  000D4C  C1B2  F1D2         	movff	efgtoa@ou+1,efgtoa@u+1
  7827  000D50  C1B3  F1D3         	movff	efgtoa@ou+2,efgtoa@u+2
  7828  000D54  C1B4  F1D4         	movff	efgtoa@ou+3,efgtoa@u+3
  7829                           
  7830                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 464:     ne = (nm
      +                          ode == 'e') ? 0 : e;
  7831  000D58  0E65               	movlw	101
  7832  000D5A  0101               	movlb	1	; () banked
  7833  000D5C  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  7834  000D5E  E005               	bz	l1531
  7835                           
  7836                           ; BSR set to: 1
  7837  000D60  C1CD  F1AD         	movff	efgtoa@e,efgtoa@ne
  7838  000D64  C1CE  F1AE         	movff	efgtoa@e+1,efgtoa@ne+1
  7839  000D68  D002               	goto	l1533
  7840  000D6A                     l1531:
  7841                           
  7842                           ; BSR set to: 1
  7843  000D6A  6BAD               	clrf	efgtoa@ne& (0+255),b
  7844  000D6C  6BAE               	clrf	(efgtoa@ne+1)& (0+255),b
  7845  000D6E                     l1533:
  7846                           
  7847                           ; BSR set to: 1
  7848                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 465:     pp = 0;
  7849  000D6E  6BAB               	clrf	efgtoa@pp& (0+255),b
  7850  000D70  6BAC               	clrf	(efgtoa@pp+1)& (0+255),b
  7851                           
  7852                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 466:     t = 0;
  7853  000D72  6BA9               	clrf	efgtoa@t& (0+255),b
  7854  000D74  6BAA               	clrf	(efgtoa@t+1)& (0+255),b
  7855                           
  7856                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 467:     i = 0;
  7857  000D76  6BC7               	clrf	efgtoa@i& (0+255),b
  7858  000D78  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  7859                           
  7860                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  7861  000D7A  D048               	goto	l8742
  7862  000D7C                     l8694:
  7863                           
  7864                           ; BSR set to: 1
  7865                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 469:         l = 
      +                          floorf(h/u);
  7866  000D7C  D92F               	call	PL46	;call to abstracted procedure
  7867  000D7E  EC4C  F010         	call	___fldiv	;wreg free
  7868  000D82  D98D               	call	PL98	;call to abstracted procedure
  7869  000D84  ECF1  F011         	call	_floorf	;wreg free
  7870                           
  7871                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 470:         d = 
      +                          (int)l;
  7872  000D88  D918               	call	PL44	;call to abstracted procedure
  7873  000D8A  EC28  F019         	call	___fltol	;wreg free
  7874  000D8E  D9B9               	call	PL178	;call to abstracted procedure
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 471:         if (
      +                          !(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
  7878  000D90  B831               	btfsc	_flags^0,4,c
  7879  000D92  D00C               	goto	l8706
  7880                           
  7881                           ; BSR set to: 0
  7882  000D94  0101               	movlb	1	; () banked
  7883  000D96  51B5               	movf	efgtoa@d& (0+255),w,b
  7884  000D98  11B6               	iorwf	(efgtoa@d+1)& (0+255),w,b
  7885  000D9A  E108               	bnz	l8706
  7886                           
  7887                           ; BSR set to: 1
  7888  000D9C  0E67               	movlw	103
  7889  000D9E  19BE               	xorwf	efgtoa@mode& (0+255),w,b
  7890  000DA0  E105               	bnz	l8706
  7891                           
  7892                           ; BSR set to: 1
  7893  000DA2  AFAE               	btfss	(efgtoa@ne+1)& (0+255),7,b
  7894  000DA4  D003               	goto	l8706
  7895                           
  7896                           ; BSR set to: 1
  7897                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 472:             
      +                          ++t;
  7898  000DA6  4BA9               	infsnz	efgtoa@t& (0+255),f,b
  7899  000DA8  2BAA               	incf	(efgtoa@t+1)& (0+255),f,b
  7900                           
  7901                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 473:         } el
      +                          se {
  7902  000DAA  D020               	goto	l8734
  7903  000DAC                     l8706:
  7904                           
  7905                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 474:             
      +                          if (!pp && (ne < 0)) {
  7906  000DAC  0101               	movlb	1	; () banked
  7907  000DAE  51AB               	movf	efgtoa@pp& (0+255),w,b
  7908  000DB0  11AC               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  7909  000DB2  E113               	bnz	l8726
  7910                           
  7911                           ; BSR set to: 1
  7912  000DB4  AFAE               	btfss	(efgtoa@ne+1)& (0+255),7,b
  7913  000DB6  D011               	goto	l8726
  7914                           
  7915                           ; BSR set to: 1
  7916                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 475:             
      +                              dbuf[n++] = '.';
  7917  000DB8  D8F9               	call	PL42	;call to abstracted procedure
  7918  000DBA  0E2E               	movlw	46
  7919                           
  7920                           ; BSR set to: 1
  7921                           
  7922                           ; BSR set to: 1
  7923                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 476:             
      +                              --w;
  7924  000DBC  D99D               	call	PL152	;call to abstracted procedure
  7925  000DBE  A0D8               	btfss	status,0,c
  7926  000DC0  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7927                           
  7928                           ; BSR set to: 1
  7929                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 477:             
      +                              pp = 1;
  7930  000DC2  6BAC               	clrf	(efgtoa@pp+1)& (0+255),b
  7931  000DC4  0E01               	movlw	1
  7932  000DC6  6FAB               	movwf	efgtoa@pp& (0+255),b
  7933  000DC8  D008               	goto	l8726
  7934  000DCA                     l8718:
  7935                           
  7936                           ; BSR set to: 1
  7937                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 480:             
      +                              dbuf[n++] = '0';
  7938  000DCA  D8F0               	call	PL42	;call to abstracted procedure
  7939  000DCC  0E30               	movlw	48
  7940                           
  7941                           ; BSR set to: 1
  7942                           
  7943                           ; BSR set to: 1
  7944                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 481:             
      +                              --w;
  7945  000DCE  D994               	call	PL152	;call to abstracted procedure
  7946  000DD0  A0D8               	btfss	status,0,c
  7947  000DD2  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7948                           
  7949                           ; BSR set to: 1
  7950                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 482:             
      +                              --t;
  7951  000DD4  07A9               	decf	efgtoa@t& (0+255),f,b
  7952  000DD6  A0D8               	btfss	status,0,c
  7953  000DD8  07AA               	decf	(efgtoa@t+1)& (0+255),f,b
  7954  000DDA                     l8726:
  7955                           
  7956                           ; BSR set to: 1
  7957                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 479:             
      +                          while (t) {
  7958  000DDA  51A9               	movf	efgtoa@t& (0+255),w,b
  7959  000DDC  11AA               	iorwf	(efgtoa@t+1)& (0+255),w,b
  7960  000DDE  E1F5               	bnz	l8718
  7961                           
  7962                           ; BSR set to: 1
  7963                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 484:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  7964  000DE0  D8E5               	call	PL42	;call to abstracted procedure
  7965  000DE2  51B5               	movf	efgtoa@d& (0+255),w,b
  7966  000DE4  0F30               	addlw	48
  7967                           
  7968                           ; BSR set to: 1
  7969                           
  7970                           ; BSR set to: 1
  7971                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 485:             
      +                          --w;
  7972  000DE6  D988               	call	PL152	;call to abstracted procedure
  7973  000DE8  A0D8               	btfss	status,0,c
  7974  000DEA  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  7975  000DEC                     l8734:
  7976                           
  7977                           ; BSR set to: 1
  7978                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 487:         h -=
      +                           l*u;
  7979  000DEC  D8B2               	call	PL18	;call to abstracted procedure
  7980  000DEE  EC37  F00F         	call	___flmul	;wreg free
  7981  000DF2  D95E               	call	PL102	;call to abstracted procedure
  7982  000DF4  ECC8  F01D         	call	___flsub	;wreg free
  7983  000DF8  D8C5               	call	PL24	;call to abstracted procedure
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 488:         u = 
      +                          u/10.0;
  7987  000DFA  D89C               	call	PL16	;call to abstracted procedure
  7988  000DFC  EC4C  F010         	call	___fldiv	;wreg free
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 489:         --ne
      +                          ;
  7992  000E00  D906               	call	PL50	;call to abstracted procedure
  7993  000E02  07AD               	decf	efgtoa@ne& (0+255),f,b
  7994  000E04  A0D8               	btfss	status,0,c
  7995  000E06  07AE               	decf	(efgtoa@ne+1)& (0+255),f,b
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 490:         ++i;
  7999  000E08  4BC7               	infsnz	efgtoa@i& (0+255),f,b
  8000  000E0A  2BC8               	incf	(efgtoa@i+1)& (0+255),f,b
  8001  000E0C                     l8742:
  8002                           
  8003                           ; BSR set to: 1
  8004                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 468:     while ((
      +                          i < m) && (n < (80 - 5))) {
  8005  000E0C  D921               	call	PL74	;call to abstracted procedure
  8006  000E0E  E208               	bc	u10350
  8007                           
  8008                           ; BSR set to: 0
  8009  000E10  0101               	movlb	1	; () banked
  8010  000E12  BFD0               	btfsc	(efgtoa@n+1)& (0+255),7,b
  8011  000E14  D7B3               	goto	l8694
  8012  000E16  51D0               	movf	(efgtoa@n+1)& (0+255),w,b
  8013  000E18  E103               	bnz	u10350
  8014  000E1A  0E4B               	movlw	75
  8015  000E1C  5DCF               	subwf	efgtoa@n& (0+255),w,b
  8016  000E1E  E3AE               	bnc	l8694
  8017  000E20                     u10350:
  8018                           
  8019                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 492:     if (!pp 
      +                          && (flags & (1 << 4))) {
  8020  000E20  0101               	movlb	1	; () banked
  8021  000E22  51AB               	movf	efgtoa@pp& (0+255),w,b
  8022  000E24  11AC               	iorwf	(efgtoa@pp+1)& (0+255),w,b
  8023  000E26  E107               	bnz	l8754
  8024                           
  8025                           ; BSR set to: 1
  8026  000E28  A831               	btfss	_flags^0,4,c
  8027  000E2A  D005               	goto	l8754
  8028                           
  8029                           ; BSR set to: 1
  8030                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 493:         dbuf
      +                          [n++] = '.';
  8031  000E2C  D8BF               	call	PL42	;call to abstracted procedure
  8032  000E2E  0E2E               	movlw	46
  8033  000E30  6EDF               	movwf	indf2,c
  8034                           
  8035                           ; BSR set to: 1
  8036  000E32  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  8037  000E34  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  8038  000E36                     l8754:
  8039                           
  8040                           ; BSR set to: 1
  8041                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 495:     dbuf[n] 
      +                          = '\0';
  8042  000E36  D8BA               	call	PL42	;call to abstracted procedure
  8043  000E38  6ADF               	clrf	indf2,c
  8044                           
  8045                           ; BSR set to: 1
  8046                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 498:     if (nmod
      +                          e == 'e') {
  8047  000E3A  0E65               	movlw	101
  8048  000E3C  19BD               	xorwf	efgtoa@nmode& (0+255),w,b
  8049  000E3E  E001 D612          	bnz	l8554
  8050                           
  8051                           ; BSR set to: 1
  8052                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 499:         i = 
      +                          sizeof(dbuf) - 1;
  8053  000E42  6BC8               	clrf	(efgtoa@i+1)& (0+255),b
  8054  000E44  0E4F               	movlw	79
  8055  000E46  6FC7               	movwf	efgtoa@i& (0+255),b
  8056                           
  8057                           ; BSR set to: 1
  8058                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 500:         dbuf
      +                          [i] = '\0';
  8059  000E48  D8F5               	call	PL56	;call to abstracted procedure
  8060  000E4A  6ADF               	clrf	indf2,c
  8061                           
  8062                           ; BSR set to: 1
  8063                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 501:         sign
      +                           = 0;
  8064  000E4C  6BB7               	clrf	efgtoa@sign& (0+255),b
  8065  000E4E  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  8066                           
  8067                           ; BSR set to: 1
  8068                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 502:         if (
      +                          e < 0) {
  8069  000E50  AFCE               	btfss	(efgtoa@e+1)& (0+255),7,b
  8070  000E52  D007               	goto	l8770
  8071                           
  8072                           ; BSR set to: 1
  8073                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 503:             
      +                          sign = 1;
  8074  000E54  6BB8               	clrf	(efgtoa@sign+1)& (0+255),b
  8075  000E56  0E01               	movlw	1
  8076  000E58  6FB7               	movwf	efgtoa@sign& (0+255),b
  8077                           
  8078                           ; BSR set to: 1
  8079                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 504:             
      +                          e = -e;
  8080  000E5A  6DCD               	negf	efgtoa@e& (0+255),b
  8081  000E5C  1FCE               	comf	(efgtoa@e+1)& (0+255),f,b
  8082  000E5E  B0D8               	btfsc	status,0,c
  8083  000E60  2BCE               	incf	(efgtoa@e+1)& (0+255),f,b
  8084  000E62                     l8770:
  8085                           
  8086                           ; BSR set to: 1
  8087                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 506:         p = 
      +                          2;
  8088  000E62  6BBA               	clrf	(efgtoa@p+1)& (0+255),b
  8089  000E64  0E02               	movlw	2
  8090  000E66  6FB9               	movwf	efgtoa@p& (0+255),b
  8091                           
  8092                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  8093  000E68  D023               	goto	l8782
  8094  000E6A                     l8772:
  8095                           
  8096                           ; BSR set to: 1
  8097                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 508:             
      +                          --i;
  8098  000E6A  07C7               	decf	efgtoa@i& (0+255),f,b
  8099  000E6C  A0D8               	btfss	status,0,c
  8100  000E6E  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8101                           
  8102                           ; BSR set to: 1
  8103                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 509:             
      +                          dbuf[i] = '0' + (e % 10);
  8104  000E70  D8E1               	call	PL56	;call to abstracted procedure
  8105  000E72  C1CD  F01A         	movff	efgtoa@e,___awmod@dividend
  8106  000E76  C1CE  F01B         	movff	efgtoa@e+1,___awmod@dividend+1
  8107  000E7A  6A1D               	clrf	(___awmod@divisor+1)^0,c
  8108  000E7C  0E0A               	movlw	10
  8109  000E7E  6E1C               	movwf	___awmod@divisor^0,c
  8110  000E80  EC4C  F01B         	call	___awmod	;wreg free
  8111  000E84  501A               	movf	?___awmod^0,w,c
  8112  000E86  0F30               	addlw	48
  8113  000E88  6EDF               	movwf	indf2,c
  8114                           
  8115                           ; BSR set to: 1
  8116                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 510:             
      +                          e = e / 10;
  8117  000E8A  C1CD  F01A         	movff	efgtoa@e,___awdiv@dividend
  8118  000E8E  C1CE  F01B         	movff	efgtoa@e+1,___awdiv@dividend+1
  8119  000E92  6A1D               	clrf	(___awdiv@divisor+1)^0,c
  8120  000E94  0E0A               	movlw	10
  8121  000E96  6E1C               	movwf	___awdiv@divisor^0,c
  8122  000E98  ECD4  F01A         	call	___awdiv	;wreg free
  8123  000E9C  C01A  F1CD         	movff	?___awdiv,efgtoa@e
  8124  000EA0  C01B  F1CE         	movff	?___awdiv+1,efgtoa@e+1
  8125                           
  8126                           ; BSR set to: 1
  8127                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 511:             
      +                          --p;
  8128  000EA4  07B9               	decf	efgtoa@p& (0+255),f,b
  8129  000EA6  A0D8               	btfss	status,0,c
  8130  000EA8  07BA               	decf	(efgtoa@p+1)& (0+255),f,b
  8131                           
  8132                           ; BSR set to: 1
  8133                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 512:             
      +                          --w;
  8134  000EAA  07BB               	decf	efgtoa@w& (0+255),f,b
  8135  000EAC  A0D8               	btfss	status,0,c
  8136  000EAE  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8137  000EB0                     l8782:
  8138                           
  8139                           ; BSR set to: 1
  8140                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 507:         whil
      +                          e (e || (0 < p)) {
  8141  000EB0  51CD               	movf	efgtoa@e& (0+255),w,b
  8142  000EB2  11CE               	iorwf	(efgtoa@e+1)& (0+255),w,b
  8143  000EB4  E1DA               	bnz	l8772
  8144                           
  8145                           ; BSR set to: 1
  8146  000EB6  BFBA               	btfsc	(efgtoa@p+1)& (0+255),7,b
  8147  000EB8  D004               	goto	u10410
  8148  000EBA  51BA               	movf	(efgtoa@p+1)& (0+255),w,b
  8149  000EBC  E1D6               	bnz	l8772
  8150  000EBE  05B9               	decf	efgtoa@p& (0+255),w,b
  8151  000EC0  E2D4               	bc	l8772
  8152  000EC2                     u10410:
  8153                           
  8154                           ; BSR set to: 1
  8155                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 514:         --i;
  8156  000EC2  07C7               	decf	efgtoa@i& (0+255),f,b
  8157  000EC4  A0D8               	btfss	status,0,c
  8158  000EC6  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8159                           
  8160                           ; BSR set to: 1
  8161                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 515:         dbuf
      +                          [i] = sign ? '-' : '+';
  8162  000EC8  51B7               	movf	efgtoa@sign& (0+255),w,b
  8163  000ECA  11B8               	iorwf	(efgtoa@sign+1)& (0+255),w,b
  8164  000ECC  E103               	bnz	l8792
  8165                           
  8166                           ; BSR set to: 1
  8167  000ECE  6BA6               	clrf	(_efgtoa$2411+1)& (0+255),b
  8168  000ED0  0E2B               	movlw	43
  8169  000ED2  D002               	goto	L9
  8170  000ED4                     l8792:
  8171                           
  8172                           ; BSR set to: 1
  8173  000ED4  6BA6               	clrf	(_efgtoa$2411+1)& (0+255),b
  8174  000ED6  0E2D               	movlw	45
  8175  000ED8                     L9:
  8176  000ED8  6FA5               	movwf	_efgtoa$2411& (0+255),b
  8177                           
  8178                           ; BSR set to: 1
  8179  000EDA  D8AC               	call	PL56	;call to abstracted procedure
  8180  000EDC  C1A5  FFDF         	movff	_efgtoa$2411,indf2
  8181                           
  8182                           ; BSR set to: 1
  8183                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 516:         --w;
  8184  000EE0  07BB               	decf	efgtoa@w& (0+255),f,b
  8185  000EE2  A0D8               	btfss	status,0,c
  8186  000EE4  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8187                           
  8188                           ; BSR set to: 1
  8189                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 517:         --i;
  8190  000EE6  07C7               	decf	efgtoa@i& (0+255),f,b
  8191  000EE8  A0D8               	btfss	status,0,c
  8192  000EEA  07C8               	decf	(efgtoa@i+1)& (0+255),f,b
  8193                           
  8194                           ; BSR set to: 1
  8195                           
  8196                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 518:         dbuf
      +                          [i] = (0 && isupper((int)c), ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  8197  000EEC  0EBF               	movlw	191
  8198  000EEE  0100               	movlb	0	; () banked
  8199  000EF0  D852               	call	PL36	;call to abstracted procedure
  8200  000EF2  E103               	bnz	u10430
  8201  000EF4  0E1A               	movlw	26
  8202  000EF6  5DCD               	subwf	(??_efgtoa+2)& (0+255),w,b
  8203  000EF8  E304               	bnc	l8806
  8204  000EFA                     u10430:
  8205                           
  8206                           ; BSR set to: 0
  8207  000EFA  0101               	movlb	1	; () banked
  8208  000EFC  6BA8               	clrf	(_efgtoa$2412+1)& (0+255),b
  8209  000EFE  0E65               	movlw	101
  8210  000F00  D003               	goto	L10
  8211  000F02                     l8806:
  8212                           
  8213                           ; BSR set to: 0
  8214  000F02  0101               	movlb	1	; () banked
  8215  000F04  6BA8               	clrf	(_efgtoa$2412+1)& (0+255),b
  8216  000F06  0E45               	movlw	69
  8217  000F08                     L10:
  8218  000F08  6FA7               	movwf	_efgtoa$2412& (0+255),b
  8219                           
  8220                           ; BSR set to: 1
  8221  000F0A  D894               	call	PL56	;call to abstracted procedure
  8222  000F0C  C1A7  FFDF         	movff	_efgtoa$2412,indf2
  8223                           
  8224                           ; BSR set to: 1
  8225                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 519:         --w;
  8226  000F10  07BB               	decf	efgtoa@w& (0+255),f,b
  8227  000F12  A0D8               	btfss	status,0,c
  8228  000F14  07BC               	decf	(efgtoa@w+1)& (0+255),f,b
  8229                           
  8230                           ; BSR set to: 1
  8231                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 520:         strc
      +                          py(&dbuf[n], &dbuf[i]);
  8232  000F16  0E2D               	movlw	low _dbuf
  8233  000F18  25CF               	addwf	efgtoa@n& (0+255),w,b
  8234  000F1A  6E1A               	movwf	strcpy@dest^0,c
  8235  000F1C  0E01               	movlw	high _dbuf
  8236  000F1E  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8237  000F20  6E1B               	movwf	(strcpy@dest+1)^0,c
  8238  000F22  0E2D               	movlw	low _dbuf
  8239  000F24  25C7               	addwf	efgtoa@i& (0+255),w,b
  8240  000F26  6E1C               	movwf	strcpy@src^0,c
  8241  000F28  0E01               	movlw	high _dbuf
  8242  000F2A  21C8               	addwfc	(efgtoa@i+1)& (0+255),w,b
  8243  000F2C  6E1D               	movwf	(strcpy@src+1)^0,c
  8244  000F2E  ECA0  F01C         	call	_strcpy	;wreg free
  8245  000F32  D599               	goto	l8554
  8246  000F34                     __end_of_efgtoa:
  8247                           	callstack 0
  8248  000F34                     PL16:
  8249                           	callstack 20
  8250  000F34  C1D1  F066         	movff	efgtoa@u,___fldiv@b
  8251  000F38  C1D2  F067         	movff	efgtoa@u+1,___fldiv@b+1
  8252  000F3C  C1D3  F068         	movff	efgtoa@u+2,___fldiv@b+2
  8253  000F40  C1D4  F069         	movff	efgtoa@u+3,___fldiv@b+3
  8254  000F44  6B6A               	clrf	___fldiv@a& (0+255),b
  8255  000F46  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
  8256  000F48  0E20               	movlw	32
  8257  000F4A  6F6C               	movwf	(___fldiv@a+2)& (0+255),b
  8258  000F4C  0E41               	movlw	65
  8259  000F4E  6F6D               	movwf	(___fldiv@a+3)& (0+255),b
  8260  000F50  0C41               	retlw	65
  8261  000F52                     __end_ofPL16:
  8262                           	callstack 0
  8263  000F52                     PL18:
  8264                           	callstack 20
  8265  000F52  C1BF  F08F         	movff	efgtoa@h,___flsub@b
  8266  000F56  C1C0  F090         	movff	efgtoa@h+1,___flsub@b+1
  8267  000F5A  C1C1  F091         	movff	efgtoa@h+2,___flsub@b+2
  8268  000F5E  C1C2  F092         	movff	efgtoa@h+3,___flsub@b+3
  8269  000F62  C1D1  F06A         	movff	efgtoa@u,___flmul@a
  8270  000F66  C1D2  F06B         	movff	efgtoa@u+1,___flmul@a+1
  8271  000F6A  C1D3  F06C         	movff	efgtoa@u+2,___flmul@a+2
  8272  000F6E  C1D4  F06D         	movff	efgtoa@u+3,___flmul@a+3
  8273  000F72  C1C3  F066         	movff	efgtoa@l,___flmul@b
  8274  000F76  C1C4  F067         	movff	efgtoa@l+1,___flmul@b+1
  8275  000F7A  C1C5  F068         	movff	efgtoa@l+2,___flmul@b+2
  8276  000F7E  C1C6  F069         	movff	efgtoa@l+3,___flmul@b+3
  8277  000F82  0012               	return	
  8278  000F84                     __end_ofPL18:
  8279                           	callstack 0
  8280  000F84                     PL24:
  8281                           	callstack 20
  8282  000F84  C08F  F1BF         	movff	?___flsub,efgtoa@h
  8283  000F88  C090  F1C0         	movff	?___flsub+1,efgtoa@h+1
  8284  000F8C  C091  F1C1         	movff	?___flsub+2,efgtoa@h+2
  8285  000F90  C092  F1C2         	movff	?___flsub+3,efgtoa@h+3
  8286  000F94  0012               	return	
  8287  000F96                     __end_ofPL24:
  8288                           	callstack 0
  8289  000F96                     PL36:
  8290                           	callstack 20
  8291  000F96  6FCB               	movwf	??_efgtoa& (0+255),b
  8292  000F98  69CC               	setf	(??_efgtoa+1)& (0+255),b
  8293  000F9A  51CA               	movf	efgtoa@c& (0+255),w,b
  8294  000F9C  6FCD               	movwf	(??_efgtoa+2)& (0+255),b
  8295  000F9E  6BCE               	clrf	(??_efgtoa+3)& (0+255),b
  8296  000FA0  51CB               	movf	??_efgtoa& (0+255),w,b
  8297  000FA2  27CD               	addwf	(??_efgtoa+2)& (0+255),f,b
  8298  000FA4  51CC               	movf	(??_efgtoa+1)& (0+255),w,b
  8299  000FA6  23CE               	addwfc	(??_efgtoa+3)& (0+255),f,b
  8300  000FA8  51CE               	movf	(??_efgtoa+3)& (0+255),w,b
  8301  000FAA  0012               	return	
  8302  000FAC                     __end_ofPL36:
  8303                           	callstack 0
  8304  000FAC                     PL42:
  8305                           	callstack 20
  8306  000FAC  0E2D               	movlw	low _dbuf
  8307  000FAE  25CF               	addwf	efgtoa@n& (0+255),w,b
  8308  000FB0  6ED9               	movwf	fsr2l,c
  8309  000FB2  0E01               	movlw	high _dbuf
  8310  000FB4  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8311  000FB6  6EDA               	movwf	fsr2h,c
  8312  000FB8  0012               	return	
  8313  000FBA                     __end_ofPL42:
  8314                           	callstack 0
  8315  000FBA                     PL44:
  8316                           	callstack 20
  8317  000FBA  C07F  F1C3         	movff	?_floorf,efgtoa@l
  8318  000FBE  C080  F1C4         	movff	?_floorf+1,efgtoa@l+1
  8319  000FC2  C081  F1C5         	movff	?_floorf+2,efgtoa@l+2
  8320  000FC6  C082  F1C6         	movff	?_floorf+3,efgtoa@l+3
  8321  000FCA  C1C3  F0BC         	movff	efgtoa@l,___fltol@f1
  8322  000FCE  C1C4  F0BD         	movff	efgtoa@l+1,___fltol@f1+1
  8323  000FD2  C1C5  F0BE         	movff	efgtoa@l+2,___fltol@f1+2
  8324  000FD6  C1C6  F0BF         	movff	efgtoa@l+3,___fltol@f1+3
  8325  000FDA  0012               	return	
  8326  000FDC                     __end_ofPL44:
  8327                           	callstack 0
  8328  000FDC                     PL46:
  8329                           	callstack 20
  8330  000FDC  C1BF  F066         	movff	efgtoa@h,___fldiv@b
  8331  000FE0  C1C0  F067         	movff	efgtoa@h+1,___fldiv@b+1
  8332  000FE4  C1C1  F068         	movff	efgtoa@h+2,___fldiv@b+2
  8333  000FE8  C1C2  F069         	movff	efgtoa@h+3,___fldiv@b+3
  8334  000FEC  C1D1  F06A         	movff	efgtoa@u,___fldiv@a
  8335  000FF0  C1D2  F06B         	movff	efgtoa@u+1,___fldiv@a+1
  8336  000FF4  C1D3  F06C         	movff	efgtoa@u+2,___fldiv@a+2
  8337  000FF8  C1D4  F06D         	movff	efgtoa@u+3,___fldiv@a+3
  8338  000FFC  0012               	return	
  8339  000FFE                     __end_ofPL46:
  8340                           	callstack 0
  8341  000FFE                     PL48:
  8342                           	callstack 20
  8343  000FFE  0E2D               	movlw	low _dbuf
  8344  001000  0101               	movlb	1	; () banked
  8345  001002  25CF               	addwf	efgtoa@n& (0+255),w,b
  8346  001004  6E1A               	movwf	strcpy@dest^0,c
  8347  001006  0E01               	movlw	high _dbuf
  8348  001008  21D0               	addwfc	(efgtoa@n+1)& (0+255),w,b
  8349  00100A  6E1B               	movwf	(strcpy@dest+1)^0,c
  8350  00100C  0012               	return	
  8351  00100E                     __end_ofPL48:
  8352                           	callstack 0
  8353  00100E                     PL50:
  8354                           	callstack 20
  8355  00100E  C066  F1D1         	movff	?___fldiv,efgtoa@u
  8356  001012  C067  F1D2         	movff	?___fldiv+1,efgtoa@u+1
  8357  001016  C068  F1D3         	movff	?___fldiv+2,efgtoa@u+2
  8358  00101A  C069  F1D4         	movff	?___fldiv+3,efgtoa@u+3
  8359  00101E  0101               	movlb	1	; () banked
  8360  001020  0012               	return	
  8361  001022                     __end_ofPL50:
  8362                           	callstack 0
  8363  001022                     PL52:
  8364                           	callstack 20
  8365  001022  C1D1  F066         	movff	efgtoa@u,___flmul@b
  8366  001026  C1D2  F067         	movff	efgtoa@u+1,___flmul@b+1
  8367  00102A  C1D3  F068         	movff	efgtoa@u+2,___flmul@b+2
  8368  00102E  C1D4  F069         	movff	efgtoa@u+3,___flmul@b+3
  8369  001032  0012               	return	
  8370  001034                     __end_ofPL52:
  8371                           	callstack 0
  8372  001034                     PL56:
  8373                           	callstack 20
  8374  001034  0E2D               	movlw	low _dbuf
  8375  001036  25C7               	addwf	efgtoa@i& (0+255),w,b
  8376  001038  6ED9               	movwf	fsr2l,c
  8377  00103A  0E01               	movlw	high _dbuf
  8378  00103C  21C8               	addwfc	(efgtoa@i+1)& (0+255),w,b
  8379  00103E  6EDA               	movwf	fsr2h,c
  8380  001040  0012               	return	
  8381  001042                     __end_ofPL56:
  8382                           	callstack 0
  8383  001042                     PL58:
  8384                           	callstack 20
  8385  001042  6B6A               	clrf	___flmul@a& (0+255),b
  8386  001044  6B6B               	clrf	(___flmul@a+1)& (0+255),b
  8387  001046  0E20               	movlw	32
  8388  001048  6F6C               	movwf	(___flmul@a+2)& (0+255),b
  8389  00104A  0E41               	movlw	65
  8390  00104C  6F6D               	movwf	(___flmul@a+3)& (0+255),b
  8391  00104E  0C41               	retlw	65
  8392  001050                     __end_ofPL58:
  8393                           	callstack 0
  8394  001050                     PL74:
  8395                           	callstack 20
  8396  001050  51AF               	movf	efgtoa@m& (0+255),w,b
  8397  001052  5DC7               	subwf	efgtoa@i& (0+255),w,b
  8398  001054  51C8               	movf	(efgtoa@i+1)& (0+255),w,b
  8399  001056  0A80               	xorlw	128
  8400  001058  0100               	movlb	0	; () banked
  8401  00105A  6FCB               	movwf	??_efgtoa& (0+255),b
  8402  00105C  0101               	movlb	1	; () banked
  8403  00105E  51B0               	movf	(efgtoa@m+1)& (0+255),w,b
  8404  001060  0A80               	xorlw	128
  8405  001062  0100               	movlb	0	; () banked
  8406  001064  59CB               	subwfb	??_efgtoa& (0+255),w,b
  8407  001066  0012               	return	
  8408  001068                     __end_ofPL74:
  8409                           	callstack 0
  8410  001068                     PL88:
  8411                           	callstack 20
  8412  001068  C1C9  F01A         	movff	efgtoa@g,___fpclassifyf@x
  8413  00106C  C1CA  F01B         	movff	efgtoa@g+1,___fpclassifyf@x+1
  8414  001070  C1CB  F01C         	movff	efgtoa@g+2,___fpclassifyf@x+2
  8415  001074  C1CC  F01D         	movff	efgtoa@g+3,___fpclassifyf@x+3
  8416  001078  0012               	return	
  8417  00107A                     __end_ofPL88:
  8418                           	callstack 0
  8419  00107A                     PL92:
  8420                           	callstack 20
  8421  00107A  C066  F083         	movff	?___flmul,___flge@ff2
  8422  00107E  C067  F084         	movff	?___flmul+1,___flge@ff2+1
  8423  001082  C068  F085         	movff	?___flmul+2,___flge@ff2+2
  8424  001086  C069  F086         	movff	?___flmul+3,___flge@ff2+3
  8425  00108A  0012               	return	
  8426  00108C                     __end_ofPL92:
  8427                           	callstack 0
  8428  00108C                     PL96:
  8429                           	callstack 20
  8430  00108C  C1C9  F07F         	movff	efgtoa@g,___flge@ff1
  8431  001090  C1CA  F080         	movff	efgtoa@g+1,___flge@ff1+1
  8432  001094  C1CB  F081         	movff	efgtoa@g+2,___flge@ff1+2
  8433  001098  C1CC  F082         	movff	efgtoa@g+3,___flge@ff1+3
  8434  00109C  0012               	return	
  8435  00109E                     __end_ofPL96:
  8436                           	callstack 0
  8437  00109E                     PL98:
  8438                           	callstack 20
  8439  00109E  C066  F07F         	movff	?___fldiv,floorf@x
  8440  0010A2  C067  F080         	movff	?___fldiv+1,floorf@x+1
  8441  0010A6  C068  F081         	movff	?___fldiv+2,floorf@x+2
  8442  0010AA  C069  F082         	movff	?___fldiv+3,floorf@x+3
  8443  0010AE  0012               	return	
  8444  0010B0                     __end_ofPL98:
  8445                           	callstack 0
  8446  0010B0                     PL102:
  8447                           	callstack 20
  8448  0010B0  C066  F093         	movff	?___flmul,___flsub@a
  8449  0010B4  C067  F094         	movff	?___flmul+1,___flsub@a+1
  8450  0010B8  C068  F095         	movff	?___flmul+2,___flsub@a+2
  8451  0010BC  C069  F096         	movff	?___flmul+3,___flsub@a+3
  8452  0010C0  0012               	return	
  8453  0010C2                     __end_ofPL102:
  8454                           	callstack 0
  8455  0010C2                     PL104:
  8456                           	callstack 20
  8457  0010C2  C1B1  F066         	movff	efgtoa@ou,___flmul@b
  8458  0010C6  C1B2  F067         	movff	efgtoa@ou+1,___flmul@b+1
  8459  0010CA  C1B3  F068         	movff	efgtoa@ou+2,___flmul@b+2
  8460  0010CE  C1B4  F069         	movff	efgtoa@ou+3,___flmul@b+3
  8461  0010D2  0012               	return	
  8462  0010D4                     __end_ofPL104:
  8463                           	callstack 0
  8464  0010D4                     PL112:
  8465                           	callstack 20
  8466  0010D4  C1BF  F07F         	movff	efgtoa@h,___flge@ff1
  8467  0010D8  C1C0  F080         	movff	efgtoa@h+1,___flge@ff1+1
  8468  0010DC  C1C1  F081         	movff	efgtoa@h+2,___flge@ff1+2
  8469  0010E0  C1C2  F082         	movff	efgtoa@h+3,___flge@ff1+3
  8470  0010E4  0012               	return	
  8471  0010E6                     __end_ofPL112:
  8472                           	callstack 0
  8473  0010E6                     PL122:
  8474                           	callstack 20
  8475  0010E6  6BD1               	clrf	efgtoa@u& (0+255),b
  8476  0010E8  6BD2               	clrf	(efgtoa@u+1)& (0+255),b
  8477  0010EA  0E80               	movlw	128
  8478  0010EC  6FD3               	movwf	(efgtoa@u+2)& (0+255),b
  8479  0010EE  0E3F               	movlw	63
  8480  0010F0  6FD4               	movwf	(efgtoa@u+3)& (0+255),b
  8481  0010F2  6BCD               	clrf	efgtoa@e& (0+255),b
  8482  0010F4  6BCE               	clrf	(efgtoa@e+1)& (0+255),b
  8483  0010F6  0012               	return	
  8484  0010F8                     __end_ofPL122:
  8485                           	callstack 0
  8486  0010F8                     PL152:
  8487                           	callstack 20
  8488  0010F8  6EDF               	movwf	indf2,c
  8489  0010FA  4BCF               	infsnz	efgtoa@n& (0+255),f,b
  8490  0010FC  2BD0               	incf	(efgtoa@n+1)& (0+255),f,b
  8491  0010FE  07BB               	decf	efgtoa@w& (0+255),f,b
  8492  001100  0012               	return	
  8493  001102                     __end_ofPL152:
  8494                           	callstack 0
  8495  001102                     PL178:
  8496                           	callstack 20
  8497  001102  C0BC  F1B5         	movff	?___fltol,efgtoa@d
  8498  001106  C0BD  F1B6         	movff	?___fltol+1,efgtoa@d+1
  8499  00110A  0012               	return	
  8500  00110C                     __end_ofPL178:
  8501                           	callstack 0
  8502  00110C                     PL180:
  8503                           	callstack 23
  8504  00110C  6A1E               	clrf	___fleq@ff2^0,c
  8505  00110E  6A1F               	clrf	(___fleq@ff2+1)^0,c
  8506  001110  6A20               	clrf	(___fleq@ff2+2)^0,c
  8507  001112  6A21               	clrf	(___fleq@ff2+3)^0,c
  8508  001114  0012               	return	
  8509  001116                     __end_ofPL180:
  8510                           	callstack 0
  8511                           
  8512 ;; *************** function _tolower *****************
  8513 ;; Defined at:
  8514 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\tolower.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  c               2   31[COMRAM] int 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;		None
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  2   31[COMRAM] int 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2, status,0
  8523 ;; Tracked objects:
  8524 ;;		On entry : 3F/0
  8525 ;;		On exit  : 3F/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8528 ;;      Params:         2       0       0       0       0       0       0
  8529 ;;      Locals:         0       0       0       0       0       0       0
  8530 ;;      Temps:          0       4       0       0       0       0       0
  8531 ;;      Totals:         2       4       0       0       0       0       0
  8532 ;;Total ram usage:        6 bytes
  8533 ;; Hardware stack levels used: 1
  8534 ;; Hardware stack levels required when called: 4
  8535 ;; This function calls:
  8536 ;;		_isupper
  8537 ;; This function is called by:
  8538 ;;		_efgtoa
  8539 ;;		_vfpfcnvrt
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text14
  8544  003BCA                     __ptext14:
  8545                           	callstack 0
  8546  003BCA                     _tolower:
  8547                           	callstack 23
  8548                           
  8549                           ; BSR set to: 0
  8550                           
  8551                           ; BSR set to: 0
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;incstack = 0
  8555  003BCA  0EBF               	movlw	191
  8556  003BCC  6F60               	movwf	??_tolower& (0+255),b
  8557  003BCE  6961               	setf	(??_tolower+1)& (0+255),b
  8558  003BD0  C020  F062         	movff	tolower@c,??_tolower+2
  8559  003BD4  C021  F063         	movff	tolower@c+1,??_tolower+3
  8560  003BD8  5160               	movf	??_tolower& (0+255),w,b
  8561  003BDA  2762               	addwf	(??_tolower+2)& (0+255),f,b
  8562  003BDC  5161               	movf	(??_tolower+1)& (0+255),w,b
  8563  003BDE  2363               	addwfc	(??_tolower+3)& (0+255),f,b
  8564  003BE0  5163               	movf	(??_tolower+3)& (0+255),w,b
  8565  003BE2  E109               	bnz	l1804
  8566  003BE4  0E1A               	movlw	26
  8567  003BE6  5D62               	subwf	(??_tolower+2)& (0+255),w,b
  8568  003BE8  E206               	bc	l1804
  8569                           
  8570                           ; BSR set to: 0
  8571  003BEA  0E20               	movlw	32
  8572  003BEC  1020               	iorwf	tolower@c^0,w,c
  8573  003BEE  6E20               	movwf	?_tolower^0,c
  8574  003BF0  5021               	movf	(tolower@c+1)^0,w,c
  8575  003BF2  6E21               	movwf	(?_tolower+1)^0,c
  8576  003BF4  0012               	return	
  8577  003BF6                     l1804:
  8578                           
  8579                           ; BSR set to: 0
  8580  003BF6  C020  F020         	movff	tolower@c,?_tolower
  8581  003BFA  C021  F021         	movff	tolower@c+1,?_tolower+1
  8582                           
  8583                           ; BSR set to: 0
  8584  003BFE  0012               	return		;funcret
  8585  003C00                     __end_of_tolower:
  8586                           	callstack 0
  8587                           
  8588 ;; *************** function _isupper *****************
  8589 ;; Defined at:
  8590 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isupper.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  c               2   25[COMRAM] int 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  2   25[COMRAM] int 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8604 ;;      Params:         2       0       0       0       0       0       0
  8605 ;;      Locals:         0       0       0       0       0       0       0
  8606 ;;      Temps:          4       0       0       0       0       0       0
  8607 ;;      Totals:         6       0       0       0       0       0       0
  8608 ;;Total ram usage:        6 bytes
  8609 ;; Hardware stack levels used: 1
  8610 ;; Hardware stack levels required when called: 3
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		_efgtoa
  8615 ;;		_vfpfcnvrt
  8616 ;;		_tolower
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text15
  8621  003D00                     __ptext15:
  8622                           	callstack 0
  8623  003D00                     _isupper:
  8624                           	callstack 23
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;incstack = 0
  8628  003D00  0EBF               	movlw	191
  8629  003D02  6E1C               	movwf	??_isupper^0,c
  8630  003D04  681D               	setf	(??_isupper+1)^0,c
  8631  003D06  C01A  F01E         	movff	isupper@c,??_isupper+2
  8632  003D0A  C01B  F01F         	movff	isupper@c+1,??_isupper+3
  8633  003D0E  501C               	movf	??_isupper^0,w,c
  8634  003D10  261E               	addwf	(??_isupper+2)^0,f,c
  8635  003D12  501D               	movf	(??_isupper+1)^0,w,c
  8636  003D14  221F               	addwfc	(??_isupper+3)^0,f,c
  8637  003D16  501F               	movf	(??_isupper+3)^0,w,c
  8638  003D18  E105               	bnz	u8780
  8639  003D1A  0E1A               	movlw	26
  8640  003D1C  5C1E               	subwf	(??_isupper+2)^0,w,c
  8641  003D1E  E202               	bc	u8780
  8642  003D20  0E01               	movlw	1
  8643  003D22  D001               	goto	u8790
  8644  003D24                     u8780:
  8645  003D24  0E00               	movlw	0
  8646  003D26                     u8790:
  8647  003D26  6E1A               	movwf	?_isupper^0,c
  8648  003D28  6A1B               	clrf	(?_isupper+1)^0,c
  8649  003D2A  0012               	return		;funcret
  8650  003D2C                     __end_of_isupper:
  8651                           	callstack 0
  8652                           
  8653 ;; *************** function _strcpy *****************
  8654 ;; Defined at:
  8655 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strcpy.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  dest            2   25[COMRAM] PTR unsigned char 
  8658 ;;		 -> dbuf(80), 
  8659 ;;  src             2   27[COMRAM] PTR const unsigned char 
  8660 ;;		 -> STR_36(4), STR_35(4), STR_32(4), STR_31(4), 
  8661 ;;		 -> dbuf(80), 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  d               2   33[COMRAM] PTR unsigned char 
  8664 ;;		 -> dbuf(80), 
  8665 ;;  s               2   31[COMRAM] PTR const unsigned char 
  8666 ;;		 -> STR_36(4), STR_35(4), STR_32(4), STR_31(4), 
  8667 ;;		 -> dbuf(80), 
  8668 ;; Return value:  Size  Location     Type
  8669 ;;                  2   25[COMRAM] PTR unsigned char 
  8670 ;; Registers used:
  8671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8672 ;; Tracked objects:
  8673 ;;		On entry : 3F/1
  8674 ;;		On exit  : 0/0
  8675 ;;		Unchanged: 0/0
  8676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8677 ;;      Params:         4       0       0       0       0       0       0
  8678 ;;      Locals:         4       0       0       0       0       0       0
  8679 ;;      Temps:          2       0       0       0       0       0       0
  8680 ;;      Totals:        10       0       0       0       0       0       0
  8681 ;;Total ram usage:       10 bytes
  8682 ;; Hardware stack levels used: 1
  8683 ;; Hardware stack levels required when called: 3
  8684 ;; This function calls:
  8685 ;;		Nothing
  8686 ;; This function is called by:
  8687 ;;		_efgtoa
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           	psect	text16
  8692  003940                     __ptext16:
  8693                           	callstack 0
  8694  003940                     _strcpy:
  8695                           	callstack 23
  8696                           
  8697                           ; BSR set to: 1
  8698                           
  8699                           ;incstack = 0
  8700  003940  C01C  F020         	movff	strcpy@src,strcpy@s
  8701  003944  C01D  F021         	movff	strcpy@src+1,strcpy@s+1
  8702  003948  C01A  F022         	movff	strcpy@dest,strcpy@d
  8703  00394C  C01B  F023         	movff	strcpy@dest+1,strcpy@d+1
  8704  003950                     l8424:
  8705  003950  5020               	movf	strcpy@s^0,w,c
  8706  003952  6E1E               	movwf	??_strcpy^0,c
  8707  003954  5021               	movf	(strcpy@s+1)^0,w,c
  8708  003956  6E1F               	movwf	(??_strcpy+1)^0,c
  8709  003958  4A20               	infsnz	strcpy@s^0,f,c
  8710  00395A  2A21               	incf	(strcpy@s+1)^0,f,c
  8711  00395C  C01E  FFF6         	movff	??_strcpy,tblptrl
  8712  003960  C01F  FFF7         	movff	??_strcpy+1,tblptrh
  8713  003964  6AF8               	clrf	tblptru,c
  8714  003966  C022  FFD9         	movff	strcpy@d,fsr2l
  8715  00396A  C023  FFDA         	movff	strcpy@d+1,fsr2h
  8716  00396E  4A22               	infsnz	strcpy@d^0,f,c
  8717  003970  2A23               	incf	(strcpy@d+1)^0,f,c
  8718  003972  0E05               	movlw	(high __ramtop+-1)
  8719  003974  64F7               	cpfsgt	tblptrh,c
  8720  003976  D003               	bra	u9667
  8721  003978  0008               	tblrd		*
  8722  00397A  50F5               	movf	tablat,w,c
  8723  00397C  D002               	bra	u9660
  8724  00397E                     u9667:
  8725  00397E  EC49  F017         	call	PL14	;call to abstracted procedure
  8726  003982                     u9660:
  8727  003982  6EDF               	movwf	indf2,c
  8728  003984  50DF               	movf	indf2,w,c
  8729  003986  E1E4               	bnz	l8424
  8730  003988  0012               	return		;funcret
  8731  00398A                     __end_of_strcpy:
  8732                           	callstack 0
  8733                           
  8734 ;; *************** function _pad *****************
  8735 ;; Defined at:
  8736 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;  fp              2    7[BANK0 ] PTR struct _IO_FILE
  8739 ;;		 -> sprintf@f(11), 
  8740 ;;  buf             2    9[BANK0 ] PTR unsigned char 
  8741 ;;		 -> dbuf(80), 
  8742 ;;  p               2   11[BANK0 ] int 
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  w               2   15[BANK0 ] int 
  8745 ;;  i               2   13[BANK0 ] int 
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  2    7[BANK0 ] int 
  8748 ;; Registers used:
  8749 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 3F/0
  8752 ;;		On exit  : 3F/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8755 ;;      Params:         0       6       0       0       0       0       0
  8756 ;;      Locals:         0       4       0       0       0       0       0
  8757 ;;      Temps:          1       0       0       0       0       0       0
  8758 ;;      Totals:         1      10       0       0       0       0       0
  8759 ;;Total ram usage:       11 bytes
  8760 ;; Hardware stack levels used: 1
  8761 ;; Hardware stack levels required when called: 6
  8762 ;; This function calls:
  8763 ;;		_fputc
  8764 ;;		_fputs
  8765 ;;		_strlen
  8766 ;; This function is called by:
  8767 ;;		_efgtoa
  8768 ;;		_utoa
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           	psect	text17
  8773  003524                     __ptext17:
  8774                           	callstack 0
  8775  003524                     _pad:
  8776                           	callstack 20
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  8780                           
  8781                           ;incstack = 0
  8782  003524  A031               	btfss	_flags^0,0,c
  8783  003526  D003               	goto	l8384
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  8787  003528  D836               	call	PL110	;call to abstracted procedure
  8788  00352A  EC1B  F01E         	call	_fputs	;wreg free
  8789  00352E                     l8384:
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  8793  00352E  BF6C               	btfsc	(pad@p+1)& (0+255),7,b
  8794  003530  D005               	goto	l1450
  8795                           
  8796                           ; BSR set to: 0
  8797  003532  C06B  F06F         	movff	pad@p,pad@w
  8798  003536  C06C  F070         	movff	pad@p+1,pad@w+1
  8799  00353A  D002               	goto	l1452
  8800  00353C                     l1450:
  8801                           
  8802                           ; BSR set to: 0
  8803  00353C  6B6F               	clrf	pad@w& (0+255),b
  8804  00353E  6B70               	clrf	(pad@w+1)& (0+255),b
  8805  003540                     l1452:
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  8809  003540  6B6D               	clrf	pad@i& (0+255),b
  8810  003542  6B6E               	clrf	(pad@i+1)& (0+255),b
  8811                           
  8812                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  8813  003544  D00C               	goto	l8392
  8814  003546                     l8388:
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  8818  003546  6A1C               	clrf	(fputc@c+1)^0,c
  8819  003548  0E20               	movlw	32
  8820  00354A  6E1B               	movwf	fputc@c^0,c
  8821  00354C  C067  F01D         	movff	pad@fp,fputc@fp
  8822  003550  C068  F01E         	movff	pad@fp+1,fputc@fp+1
  8823  003554  EC4D  F01A         	call	_fputc	;wreg free
  8824                           
  8825                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  8826  003558  0100               	movlb	0	; () banked
  8827  00355A  4B6D               	infsnz	pad@i& (0+255),f,b
  8828  00355C  2B6E               	incf	(pad@i+1)& (0+255),f,b
  8829  00355E                     l8392:
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  8833  00355E  516F               	movf	pad@w& (0+255),w,b
  8834  003560  5D6D               	subwf	pad@i& (0+255),w,b
  8835  003562  516E               	movf	(pad@i+1)& (0+255),w,b
  8836  003564  0A80               	xorlw	128
  8837  003566  6E24               	movwf	??_pad^0,c
  8838  003568  5170               	movf	(pad@w+1)& (0+255),w,b
  8839  00356A  0A80               	xorlw	128
  8840  00356C  5824               	subwfb	??_pad^0,w,c
  8841  00356E  E3EB               	bnc	l8388
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  8845  003570  B031               	btfsc	_flags^0,0,c
  8846  003572  D003               	goto	l8396
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  8850  003574  D810               	call	PL110	;call to abstracted procedure
  8851  003576  EC1B  F01E         	call	_fputs	;wreg free
  8852  00357A                     l8396:
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  8856  00357A  C069  F01A         	movff	pad@buf,strlen@s
  8857  00357E  C06A  F01B         	movff	pad@buf+1,strlen@s+1
  8858  003582  ECAB  F01D         	call	_strlen	;wreg free
  8859  003586  0100               	movlb	0	; () banked
  8860  003588  516F               	movf	pad@w& (0+255),w,b
  8861  00358A  241A               	addwf	?_strlen^0,w,c
  8862  00358C  6F67               	movwf	?_pad& (0+255),b
  8863  00358E  5170               	movf	(pad@w+1)& (0+255),w,b
  8864  003590  201B               	addwfc	(?_strlen+1)^0,w,c
  8865  003592  6F68               	movwf	(?_pad+1)& (0+255),b
  8866                           
  8867                           ; BSR set to: 0
  8868  003594  0012               	return		;funcret
  8869  003596                     __end_of_pad:
  8870                           	callstack 0
  8871  003596                     PL110:
  8872                           	callstack 20
  8873  003596  C069  F060         	movff	pad@buf,fputs@s
  8874  00359A  C06A  F061         	movff	pad@buf+1,fputs@s+1
  8875  00359E  C067  F062         	movff	pad@fp,fputs@fp
  8876  0035A2  C068  F063         	movff	pad@fp+1,fputs@fp+1
  8877  0035A6  0012               	return	
  8878  0035A8                     __end_ofPL110:
  8879                           	callstack 0
  8880                           
  8881 ;; *************** function _strlen *****************
  8882 ;; Defined at:
  8883 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  s               2   25[COMRAM] PTR const unsigned char 
  8886 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), STR_20(4), 
  8887 ;;		 -> STR_19(3), U_real(2), compile_time(9), compile_date(12), 
  8888 ;;		 -> STR_3(9), 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  a               2   27[COMRAM] PTR const unsigned char 
  8891 ;;		 -> stoa@nuls(7), dbuf(80), ?_sprintf(2), STR_20(4), 
  8892 ;;		 -> STR_19(3), U_real(2), compile_time(9), compile_date(12), 
  8893 ;;		 -> STR_3(9), 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  2   25[COMRAM] unsigned int 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  8898 ;; Tracked objects:
  8899 ;;		On entry : 3F/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8903 ;;      Params:         2       0       0       0       0       0       0
  8904 ;;      Locals:         2       0       0       0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0
  8906 ;;      Totals:         4       0       0       0       0       0       0
  8907 ;;Total ram usage:        4 bytes
  8908 ;; Hardware stack levels used: 1
  8909 ;; Hardware stack levels required when called: 3
  8910 ;; This function calls:
  8911 ;;		Nothing
  8912 ;; This function is called by:
  8913 ;;		_pad
  8914 ;;		_stoa
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text18
  8919  003B56                     __ptext18:
  8920                           	callstack 0
  8921  003B56                     _strlen:
  8922                           	callstack 22
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;incstack = 0
  8928  003B56  C01A  F01C         	movff	strlen@s,strlen@a
  8929  003B5A  C01B  F01D         	movff	strlen@s+1,strlen@a+1
  8930  003B5E  D002               	goto	l7920
  8931  003B60                     l7918:
  8932  003B60  4A1A               	infsnz	strlen@s^0,f,c
  8933  003B62  2A1B               	incf	(strlen@s+1)^0,f,c
  8934  003B64                     l7920:
  8935  003B64  C01A  FFF6         	movff	strlen@s,tblptrl
  8936  003B68  C01B  FFF7         	movff	strlen@s+1,tblptrh
  8937  003B6C  6AF8               	clrf	tblptru,c
  8938  003B6E  0E05               	movlw	(high __ramtop+-1)
  8939  003B70  64F7               	cpfsgt	tblptrh,c
  8940  003B72  D003               	bra	u8767
  8941  003B74  0008               	tblrd		*
  8942  003B76  50F5               	movf	tablat,w,c
  8943  003B78  D002               	bra	u8760
  8944  003B7A                     u8767:
  8945  003B7A  EC49  F017         	call	PL14	;call to abstracted procedure
  8946  003B7E                     u8760:
  8947  003B7E  0900               	iorlw	0
  8948  003B80  E1EF               	bnz	l7918
  8949  003B82  501C               	movf	strlen@a^0,w,c
  8950  003B84  5C1A               	subwf	strlen@s^0,w,c
  8951  003B86  6E1A               	movwf	?_strlen^0,c
  8952  003B88  501D               	movf	(strlen@a+1)^0,w,c
  8953  003B8A  581B               	subwfb	(strlen@s+1)^0,w,c
  8954  003B8C  6E1B               	movwf	(?_strlen+1)^0,c
  8955  003B8E  0012               	return		;funcret
  8956  003B90                     __end_of_strlen:
  8957                           	callstack 0
  8958                           
  8959 ;; *************** function _fputs *****************
  8960 ;; Defined at:
  8961 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8964 ;;		 -> dbuf(80), 
  8965 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
  8966 ;;		 -> sprintf@f(11), 
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;  i               2    5[BANK0 ] int 
  8969 ;;  c               1    4[BANK0 ] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  2    0[BANK0 ] int 
  8972 ;; Registers used:
  8973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 3F/0
  8976 ;;		On exit  : 3F/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8979 ;;      Params:         0       4       0       0       0       0       0
  8980 ;;      Locals:         0       3       0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0
  8982 ;;      Totals:         0       7       0       0       0       0       0
  8983 ;;Total ram usage:        7 bytes
  8984 ;; Hardware stack levels used: 1
  8985 ;; Hardware stack levels required when called: 5
  8986 ;; This function calls:
  8987 ;;		_fputc
  8988 ;; This function is called by:
  8989 ;;		_pad
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text19
  8994  003C36                     __ptext19:
  8995                           	callstack 0
  8996  003C36                     _fputs:
  8997                           	callstack 20
  8998                           
  8999                           ; BSR set to: 0
  9000                           
  9001                           ;incstack = 0
  9002  003C36  6B65               	clrf	fputs@i& (0+255),b
  9003  003C38  6B66               	clrf	(fputs@i+1)& (0+255),b
  9004  003C3A  D00C               	goto	l7914
  9005  003C3C                     l7910:
  9006                           
  9007                           ; BSR set to: 0
  9008  003C3C  C064  F01B         	movff	fputs@c,fputc@c
  9009  003C40  6A1C               	clrf	(fputc@c+1)^0,c
  9010  003C42  C062  F01D         	movff	fputs@fp,fputc@fp
  9011  003C46  C063  F01E         	movff	fputs@fp+1,fputc@fp+1
  9012  003C4A  EC4D  F01A         	call	_fputc	;wreg free
  9013  003C4E  0100               	movlb	0	; () banked
  9014  003C50  4B65               	infsnz	fputs@i& (0+255),f,b
  9015  003C52  2B66               	incf	(fputs@i+1)& (0+255),f,b
  9016  003C54                     l7914:
  9017                           
  9018                           ; BSR set to: 0
  9019  003C54  5165               	movf	fputs@i& (0+255),w,b
  9020  003C56  2560               	addwf	fputs@s& (0+255),w,b
  9021  003C58  6ED9               	movwf	fsr2l,c
  9022  003C5A  5166               	movf	(fputs@i+1)& (0+255),w,b
  9023  003C5C  2161               	addwfc	(fputs@s+1)& (0+255),w,b
  9024  003C5E  6EDA               	movwf	fsr2h,c
  9025  003C60  50DF               	movf	indf2,w,c
  9026  003C62  6F64               	movwf	fputs@c& (0+255),b
  9027  003C64  5164               	movf	fputs@c& (0+255),w,b
  9028  003C66  E1EA               	bnz	l7910
  9029                           
  9030                           ; BSR set to: 0
  9031  003C68  0012               	return		;funcret
  9032  003C6A                     __end_of_fputs:
  9033                           	callstack 0
  9034                           
  9035 ;; *************** function _floorf *****************
  9036 ;; Defined at:
  9037 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\floorf.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;  x               4   31[BANK0 ] float 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;  u               4   47[BANK0 ] struct .
  9042 ;;  m               4   41[BANK0 ] unsigned long 
  9043 ;;  e               2   45[BANK0 ] int 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  4   31[BANK0 ] float 
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0
  9048 ;; Tracked objects:
  9049 ;;		On entry : 3F/0
  9050 ;;		On exit  : 3F/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9053 ;;      Params:         0       4       0       0       0       0       0
  9054 ;;      Locals:         0      10       0       0       0       0       0
  9055 ;;      Temps:          0       6       0       0       0       0       0
  9056 ;;      Totals:         0      20       0       0       0       0       0
  9057 ;;Total ram usage:       20 bytes
  9058 ;; Hardware stack levels used: 1
  9059 ;; Hardware stack levels required when called: 3
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_efgtoa
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text20
  9068  0023E2                     __ptext20:
  9069                           	callstack 0
  9070  0023E2                     _floorf:
  9071                           	callstack 23
  9072                           
  9073                           ; BSR set to: 0
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;incstack = 0
  9077  0023E2  C100  F08F         	movff	floorf@F526,floorf@u
  9078  0023E6  C101  F090         	movff	floorf@F526+1,floorf@u+1
  9079  0023EA  C102  F091         	movff	floorf@F526+2,floorf@u+2
  9080  0023EE  C103  F092         	movff	floorf@F526+3,floorf@u+3
  9081  0023F2  C07F  F08F         	movff	floorf@x,floorf@u
  9082  0023F6  C080  F090         	movff	floorf@x+1,floorf@u+1
  9083  0023FA  C081  F091         	movff	floorf@x+2,floorf@u+2
  9084  0023FE  C082  F092         	movff	floorf@x+3,floorf@u+3
  9085                           
  9086                           ; BSR set to: 0
  9087  002402  0E81               	movlw	129
  9088  002404  6F83               	movwf	??_floorf& (0+255),b
  9089  002406  6984               	setf	(??_floorf+1)& (0+255),b
  9090  002408  C08F  F085         	movff	floorf@u,??_floorf+2
  9091  00240C  C090  F086         	movff	floorf@u+1,??_floorf+3
  9092  002410  C091  F087         	movff	floorf@u+2,??_floorf+4
  9093  002414  C092  F088         	movff	floorf@u+3,??_floorf+5
  9094  002418  0E18               	movlw	24
  9095  00241A  D005               	goto	u9690
  9096  00241C                     u9695:
  9097  00241C  90D8               	bcf	status,0,c
  9098  00241E  3388               	rrcf	(??_floorf+5)& (0+255),f,b
  9099  002420  3387               	rrcf	(??_floorf+4)& (0+255),f,b
  9100  002422  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9101  002424  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9102  002426                     u9690:
  9103  002426  2EE8               	decfsz	wreg,f,c
  9104  002428  D7F9               	goto	u9695
  9105  00242A  5185               	movf	(??_floorf+2)& (0+255),w,b
  9106  00242C  2583               	addwf	??_floorf& (0+255),w,b
  9107  00242E  6F8D               	movwf	floorf@e& (0+255),b
  9108  002430  0E00               	movlw	0
  9109  002432  2184               	addwfc	(??_floorf+1)& (0+255),w,b
  9110  002434  6F8E               	movwf	(floorf@e+1)& (0+255),b
  9111  002436  BF8E               	btfsc	(floorf@e+1)& (0+255),7,b
  9112  002438  D00E               	goto	l8442
  9113  00243A  518E               	movf	(floorf@e+1)& (0+255),w,b
  9114  00243C  E103               	bnz	u9700
  9115  00243E  0E17               	movlw	23
  9116  002440  5D8D               	subwf	floorf@e& (0+255),w,b
  9117  002442  E309               	bnc	l8442
  9118  002444                     u9700:
  9119                           
  9120                           ; BSR set to: 0
  9121  002444  C07F  F07F         	movff	floorf@x,?_floorf
  9122  002448  C080  F080         	movff	floorf@x+1,?_floorf+1
  9123  00244C  C081  F081         	movff	floorf@x+2,?_floorf+2
  9124  002450  C082  F082         	movff	floorf@x+3,?_floorf+3
  9125  002454  0012               	return	
  9126  002456                     l8442:
  9127                           
  9128                           ; BSR set to: 0
  9129  002456  BF8E               	btfsc	(floorf@e+1)& (0+255),7,b
  9130  002458  D048               	goto	l8452
  9131                           
  9132                           ; BSR set to: 0
  9133  00245A  C08D  F083         	movff	floorf@e,??_floorf
  9134  00245E  6984               	setf	(??_floorf+1)& (0+255),b
  9135  002460  6985               	setf	(??_floorf+2)& (0+255),b
  9136  002462  0E7F               	movlw	127
  9137  002464  6F86               	movwf	(??_floorf+3)& (0+255),b
  9138  002466  0E00               	movlw	0
  9139  002468  6F87               	movwf	(??_floorf+4)& (0+255),b
  9140  00246A                     u9725:
  9141  00246A  6783               	tstfsz	??_floorf& (0+255),b
  9142  00246C  D001               	goto	u9726
  9143  00246E  D007               	goto	u9727
  9144  002470                     u9726:
  9145  002470  3587               	rlcf	(??_floorf+4)& (0+255),w,b
  9146  002472  3387               	rrcf	(??_floorf+4)& (0+255),f,b
  9147  002474  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9148  002476  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9149  002478  3384               	rrcf	(??_floorf+1)& (0+255),f,b
  9150  00247A  2F83               	decfsz	??_floorf& (0+255),f,b
  9151  00247C  D7F6               	goto	u9725
  9152  00247E                     u9727:
  9153  00247E  C084  F089         	movff	??_floorf+1,floorf@m
  9154  002482  C085  F08A         	movff	??_floorf+2,floorf@m+1
  9155  002486  C086  F08B         	movff	??_floorf+3,floorf@m+2
  9156  00248A  C087  F08C         	movff	??_floorf+4,floorf@m+3
  9157  00248E  0100               	movlb	0	; () banked
  9158  002490  5189               	movf	floorf@m& (0+255),w,b
  9159  002492  158F               	andwf	floorf@u& (0+255),w,b
  9160  002494  6F83               	movwf	??_floorf& (0+255),b
  9161  002496  518A               	movf	(floorf@m+1)& (0+255),w,b
  9162  002498  1590               	andwf	(floorf@u+1)& (0+255),w,b
  9163  00249A  6F84               	movwf	(??_floorf+1)& (0+255),b
  9164  00249C  518B               	movf	(floorf@m+2)& (0+255),w,b
  9165  00249E  1591               	andwf	(floorf@u+2)& (0+255),w,b
  9166  0024A0  6F85               	movwf	(??_floorf+2)& (0+255),b
  9167  0024A2  518C               	movf	(floorf@m+3)& (0+255),w,b
  9168  0024A4  1592               	andwf	(floorf@u+3)& (0+255),w,b
  9169  0024A6  D855               	call	PL166	;call to abstracted procedure
  9170  0024A8  E0CD               	bz	u9700
  9171                           
  9172                           ; BSR set to: 0
  9173  0024AA  D844               	call	PL80	;call to abstracted procedure
  9174  0024AC  D001               	goto	u9740
  9175  0024AE                     u9745:
  9176  0024AE  D84B               	call	PL164	;call to abstracted procedure
  9177  0024B0                     u9740:
  9178  0024B0  2EE8               	decfsz	wreg,f,c
  9179  0024B2  D7FD               	goto	u9745
  9180  0024B4  5183               	movf	??_floorf& (0+255),w,b
  9181  0024B6  E008               	bz	l1699
  9182                           
  9183                           ; BSR set to: 0
  9184  0024B8  5189               	movf	floorf@m& (0+255),w,b
  9185  0024BA  278F               	addwf	floorf@u& (0+255),f,b
  9186  0024BC  518A               	movf	(floorf@m+1)& (0+255),w,b
  9187  0024BE  2390               	addwfc	(floorf@u+1)& (0+255),f,b
  9188  0024C0  518B               	movf	(floorf@m+2)& (0+255),w,b
  9189  0024C2  2391               	addwfc	(floorf@u+2)& (0+255),f,b
  9190  0024C4  518C               	movf	(floorf@m+3)& (0+255),w,b
  9191  0024C6  2392               	addwfc	(floorf@u+3)& (0+255),f,b
  9192  0024C8                     l1699:
  9193                           
  9194                           ; BSR set to: 0
  9195  0024C8  1D89               	comf	floorf@m& (0+255),w,b
  9196  0024CA  6F83               	movwf	??_floorf& (0+255),b
  9197  0024CC  1D8A               	comf	(floorf@m+1)& (0+255),w,b
  9198  0024CE  6F84               	movwf	(??_floorf+1)& (0+255),b
  9199  0024D0  1D8B               	comf	(floorf@m+2)& (0+255),w,b
  9200  0024D2  6F85               	movwf	(??_floorf+2)& (0+255),b
  9201  0024D4  1D8C               	comf	(floorf@m+3)& (0+255),w,b
  9202  0024D6  6F86               	movwf	(??_floorf+3)& (0+255),b
  9203  0024D8  5183               	movf	??_floorf& (0+255),w,b
  9204  0024DA  178F               	andwf	floorf@u& (0+255),f,b
  9205  0024DC  5184               	movf	(??_floorf+1)& (0+255),w,b
  9206  0024DE  1790               	andwf	(floorf@u+1)& (0+255),f,b
  9207  0024E0  5185               	movf	(??_floorf+2)& (0+255),w,b
  9208  0024E2  1791               	andwf	(floorf@u+2)& (0+255),f,b
  9209  0024E4  5186               	movf	(??_floorf+3)& (0+255),w,b
  9210  0024E6  1792               	andwf	(floorf@u+3)& (0+255),f,b
  9211  0024E8  D01C               	goto	l8460
  9212  0024EA                     l8452:
  9213                           
  9214                           ; BSR set to: 0
  9215  0024EA  D824               	call	PL80	;call to abstracted procedure
  9216  0024EC  D001               	goto	u9760
  9217  0024EE                     u9765:
  9218  0024EE  D82B               	call	PL164	;call to abstracted procedure
  9219  0024F0                     u9760:
  9220  0024F0  2EE8               	decfsz	wreg,f,c
  9221  0024F2  D7FD               	goto	u9765
  9222  0024F4  6783               	tstfsz	??_floorf& (0+255),b
  9223  0024F6  D005               	goto	l8456
  9224                           
  9225                           ; BSR set to: 0
  9226  0024F8  6B8F               	clrf	floorf@u& (0+255),b
  9227  0024FA  6B90               	clrf	(floorf@u+1)& (0+255),b
  9228  0024FC  6B91               	clrf	(floorf@u+2)& (0+255),b
  9229  0024FE  6B92               	clrf	(floorf@u+3)& (0+255),b
  9230  002500  D010               	goto	l8460
  9231  002502                     l8456:
  9232                           
  9233                           ; BSR set to: 0
  9234  002502  90D8               	bcf	status,0,c
  9235  002504  358F               	rlcf	floorf@u& (0+255),w,b
  9236  002506  6F83               	movwf	??_floorf& (0+255),b
  9237  002508  3590               	rlcf	(floorf@u+1)& (0+255),w,b
  9238  00250A  6F84               	movwf	(??_floorf+1)& (0+255),b
  9239  00250C  3591               	rlcf	(floorf@u+2)& (0+255),w,b
  9240  00250E  6F85               	movwf	(??_floorf+2)& (0+255),b
  9241  002510  3592               	rlcf	(floorf@u+3)& (0+255),w,b
  9242  002512  D81F               	call	PL166	;call to abstracted procedure
  9243  002514  E006               	bz	l8460
  9244                           
  9245                           ; BSR set to: 0
  9246  002516  6B8F               	clrf	floorf@u& (0+255),b
  9247  002518  6B90               	clrf	(floorf@u+1)& (0+255),b
  9248  00251A  0E80               	movlw	128
  9249  00251C  6F91               	movwf	(floorf@u+2)& (0+255),b
  9250  00251E  0EBF               	movlw	191
  9251  002520  6F92               	movwf	(floorf@u+3)& (0+255),b
  9252  002522                     l8460:
  9253                           
  9254                           ; BSR set to: 0
  9255  002522  C08F  F07F         	movff	floorf@u,?_floorf
  9256  002526  C090  F080         	movff	floorf@u+1,?_floorf+1
  9257  00252A  C091  F081         	movff	floorf@u+2,?_floorf+2
  9258  00252E  C092  F082         	movff	floorf@u+3,?_floorf+3
  9259                           
  9260                           ; BSR set to: 0
  9261  002532  0012               	return		;funcret
  9262  002534                     __end_of_floorf:
  9263                           	callstack 0
  9264  002534                     PL80:
  9265                           	callstack 23
  9266  002534  C08F  F083         	movff	floorf@u,??_floorf
  9267  002538  C090  F084         	movff	floorf@u+1,??_floorf+1
  9268  00253C  C091  F085         	movff	floorf@u+2,??_floorf+2
  9269  002540  C092  F086         	movff	floorf@u+3,??_floorf+3
  9270  002544  0C20               	retlw	32
  9271  002546                     __end_ofPL80:
  9272                           	callstack 0
  9273  002546                     PL164:
  9274                           	callstack 23
  9275  002546  90D8               	bcf	status,0,c
  9276  002548  3386               	rrcf	(??_floorf+3)& (0+255),f,b
  9277  00254A  3385               	rrcf	(??_floorf+2)& (0+255),f,b
  9278  00254C  3384               	rrcf	(??_floorf+1)& (0+255),f,b
  9279  00254E  3383               	rrcf	??_floorf& (0+255),f,b
  9280  002550  0012               	return	
  9281  002552                     __end_ofPL164:
  9282                           	callstack 0
  9283  002552                     PL166:
  9284                           	callstack 23
  9285  002552  6F86               	movwf	(??_floorf+3)& (0+255),b
  9286  002554  5183               	movf	??_floorf& (0+255),w,b
  9287  002556  1184               	iorwf	(??_floorf+1)& (0+255),w,b
  9288  002558  1185               	iorwf	(??_floorf+2)& (0+255),w,b
  9289  00255A  1186               	iorwf	(??_floorf+3)& (0+255),w,b
  9290  00255C  0012               	return	
  9291  00255E                     __end_ofPL166:
  9292                           	callstack 0
  9293                           
  9294 ;; *************** function ___fpclassifyf *****************
  9295 ;; Defined at:
  9296 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__fpclassifyf.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;  x               4   25[COMRAM] float 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  u               4    2[BANK0 ] struct .
  9301 ;;  e               2    0[BANK0 ] int 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  2   25[COMRAM] int 
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0
  9306 ;; Tracked objects:
  9307 ;;		On entry : 3E/1
  9308 ;;		On exit  : 3F/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9311 ;;      Params:         4       0       0       0       0       0       0
  9312 ;;      Locals:         0       6       0       0       0       0       0
  9313 ;;      Temps:          4       0       0       0       0       0       0
  9314 ;;      Totals:         8       6       0       0       0       0       0
  9315 ;;Total ram usage:       14 bytes
  9316 ;; Hardware stack levels used: 1
  9317 ;; Hardware stack levels required when called: 3
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_efgtoa
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text21
  9326  00304C                     __ptext21:
  9327                           	callstack 0
  9328  00304C                     ___fpclassifyf:
  9329                           	callstack 23
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;incstack = 0
  9333  00304C  C025  F062         	movff	___fpclassifyf@F465,___fpclassifyf@u
  9334  003050  C026  F063         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  9335  003054  C027  F064         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  9336  003058  C028  F065         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  9337  00305C  C01A  F062         	movff	___fpclassifyf@x,___fpclassifyf@u
  9338  003060  C01B  F063         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  9339  003064  C01C  F064         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  9340  003068  C01D  F065         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  9341  00306C  D83A               	call	PL106	;call to abstracted procedure
  9342  00306E  0E18               	movlw	24
  9343  003070  D005               	goto	u9590
  9344  003072                     u9595:
  9345  003072  90D8               	bcf	status,0,c
  9346  003074  3221               	rrcf	(??___fpclassifyf+3)^0,f,c
  9347  003076  3220               	rrcf	(??___fpclassifyf+2)^0,f,c
  9348  003078  321F               	rrcf	(??___fpclassifyf+1)^0,f,c
  9349  00307A  321E               	rrcf	??___fpclassifyf^0,f,c
  9350  00307C                     u9590:
  9351  00307C  2EE8               	decfsz	wreg,f,c
  9352  00307E  D7F9               	goto	u9595
  9353  003080  501E               	movf	??___fpclassifyf^0,w,c
  9354  003082  0100               	movlb	0	; () banked
  9355  003084  6F60               	movwf	___fpclassifyf@e& (0+255),b
  9356  003086  6B61               	clrf	(___fpclassifyf@e+1)& (0+255),b
  9357  003088  5160               	movf	___fpclassifyf@e& (0+255),w,b
  9358  00308A  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  9359  00308C  E113               	bnz	l8412
  9360                           
  9361                           ; BSR set to: 0
  9362  00308E  90D8               	bcf	status,0,c
  9363  003090  3562               	rlcf	___fpclassifyf@u& (0+255),w,b
  9364  003092  6E1E               	movwf	??___fpclassifyf^0,c
  9365  003094  3563               	rlcf	(___fpclassifyf@u+1)& (0+255),w,b
  9366  003096  6E1F               	movwf	(??___fpclassifyf+1)^0,c
  9367  003098  3564               	rlcf	(___fpclassifyf@u+2)& (0+255),w,b
  9368  00309A  6E20               	movwf	(??___fpclassifyf+2)^0,c
  9369  00309C  3565               	rlcf	(___fpclassifyf@u+3)& (0+255),w,b
  9370  00309E  6E21               	movwf	(??___fpclassifyf+3)^0,c
  9371  0030A0  D829               	call	PL184	;call to abstracted procedure
  9372  0030A2  E104               	bnz	l8408
  9373                           
  9374                           ; BSR set to: 0
  9375  0030A4  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  9376  0030A6  0E02               	movlw	2
  9377  0030A8  6E1A               	movwf	?___fpclassifyf^0,c
  9378  0030AA  0C02               	retlw	2
  9379  0030AC                     l8408:
  9380                           
  9381                           ; BSR set to: 0
  9382  0030AC  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  9383  0030AE  0E03               	movlw	3
  9384  0030B0  6E1A               	movwf	?___fpclassifyf^0,c
  9385  0030B2  0C03               	retlw	3
  9386  0030B4                     l8412:
  9387                           
  9388                           ; BSR set to: 0
  9389  0030B4  2960               	incf	___fpclassifyf@e& (0+255),w,b
  9390  0030B6  1161               	iorwf	(___fpclassifyf@e+1)& (0+255),w,b
  9391  0030B8  E110               	bnz	l8418
  9392                           
  9393                           ; BSR set to: 0
  9394  0030BA  D813               	call	PL106	;call to abstracted procedure
  9395  0030BC  0E09               	movlw	9
  9396  0030BE                     u9635:
  9397  0030BE  90D8               	bcf	status,0,c
  9398  0030C0  361E               	rlcf	??___fpclassifyf^0,f,c
  9399  0030C2  361F               	rlcf	(??___fpclassifyf+1)^0,f,c
  9400  0030C4  3620               	rlcf	(??___fpclassifyf+2)^0,f,c
  9401  0030C6  3621               	rlcf	(??___fpclassifyf+3)^0,f,c
  9402  0030C8  2EE8               	decfsz	wreg,f,c
  9403  0030CA  D7F9               	goto	u9635
  9404  0030CC  D813               	call	PL184	;call to abstracted procedure
  9405  0030CE  0E01               	movlw	1
  9406  0030D0  A4D8               	btfss	status,2,c
  9407  0030D2  0E00               	movlw	0
  9408  0030D4  6E1A               	movwf	?___fpclassifyf^0,c
  9409  0030D6  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  9410  0030D8  0012               	return	
  9411  0030DA                     l8418:
  9412                           
  9413                           ; BSR set to: 0
  9414  0030DA  6A1B               	clrf	(?___fpclassifyf+1)^0,c
  9415  0030DC  0E04               	movlw	4
  9416  0030DE  6E1A               	movwf	?___fpclassifyf^0,c
  9417                           
  9418                           ; BSR set to: 0
  9419  0030E0  0C04               	retlw	4	;funcret
  9420  0030E2                     __end_of___fpclassifyf:
  9421                           	callstack 0
  9422  0030E2                     PL106:
  9423                           	callstack 23
  9424  0030E2  C062  F01E         	movff	___fpclassifyf@u,??___fpclassifyf
  9425  0030E6  C063  F01F         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  9426  0030EA  C064  F020         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  9427  0030EE  C065  F021         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  9428  0030F2  0012               	return	
  9429  0030F4                     __end_ofPL106:
  9430                           	callstack 0
  9431  0030F4                     PL184:
  9432                           	callstack 23
  9433  0030F4  501E               	movf	??___fpclassifyf^0,w,c
  9434  0030F6  101F               	iorwf	(??___fpclassifyf+1)^0,w,c
  9435  0030F8  1020               	iorwf	(??___fpclassifyf+2)^0,w,c
  9436  0030FA  1021               	iorwf	(??___fpclassifyf+3)^0,w,c
  9437  0030FC  0012               	return	
  9438  0030FE                     __end_ofPL184:
  9439                           	callstack 0
  9440                           
  9441 ;; *************** function ___fltol *****************
  9442 ;; Defined at:
  9443 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fltol.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  f1              4   92[BANK0 ] int 
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  exp1            1   34[COMRAM] unsigned char 
  9448 ;;  sign1           1   33[COMRAM] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  4   92[BANK0 ] long 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0
  9453 ;; Tracked objects:
  9454 ;;		On entry : 3F/0
  9455 ;;		On exit  : 3F/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9458 ;;      Params:         0       4       0       0       0       0       0
  9459 ;;      Locals:         2       0       0       0       0       0       0
  9460 ;;      Temps:          0       4       0       0       0       0       0
  9461 ;;      Totals:         2       8       0       0       0       0       0
  9462 ;;Total ram usage:       10 bytes
  9463 ;; Hardware stack levels used: 1
  9464 ;; Hardware stack levels required when called: 3
  9465 ;; This function calls:
  9466 ;;		Nothing
  9467 ;; This function is called by:
  9468 ;;		_main
  9469 ;;		_efgtoa
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text22
  9474  003250                     __ptext22:
  9475                           	callstack 0
  9476  003250                     ___fltol:
  9477                           	callstack 23
  9478                           
  9479                           ; BSR set to: 0
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;incstack = 0
  9483  003250  35BE               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9484  003252  35BF               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9485  003254  6E23               	movwf	___fltol@exp1^0,c
  9486  003256  5023               	movf	___fltol@exp1^0,w,c
  9487  003258  E105               	bnz	l8308
  9488  00325A                     u9420:
  9489                           
  9490                           ; BSR set to: 0
  9491  00325A  6BBC               	clrf	?___fltol& (0+255),b
  9492  00325C  6BBD               	clrf	(?___fltol+1)& (0+255),b
  9493  00325E  6BBE               	clrf	(?___fltol+2)& (0+255),b
  9494  003260  6BBF               	clrf	(?___fltol+3)& (0+255),b
  9495  003262  0012               	return	
  9496  003264                     l8308:
  9497                           
  9498                           ; BSR set to: 0
  9499  003264  C0BC  F0C0         	movff	___fltol@f1,??___fltol
  9500  003268  C0BD  F0C1         	movff	___fltol@f1+1,??___fltol+1
  9501  00326C  C0BE  F0C2         	movff	___fltol@f1+2,??___fltol+2
  9502  003270  C0BF  F0C3         	movff	___fltol@f1+3,??___fltol+3
  9503  003274  0E20               	movlw	32
  9504  003276  D005               	goto	u9430
  9505  003278                     u9435:
  9506  003278  90D8               	bcf	status,0,c
  9507  00327A  33C3               	rrcf	(??___fltol+3)& (0+255),f,b
  9508  00327C  33C2               	rrcf	(??___fltol+2)& (0+255),f,b
  9509  00327E  33C1               	rrcf	(??___fltol+1)& (0+255),f,b
  9510  003280  33C0               	rrcf	??___fltol& (0+255),f,b
  9511  003282                     u9430:
  9512  003282  2EE8               	decfsz	wreg,f,c
  9513  003284  D7F9               	goto	u9435
  9514  003286  51C0               	movf	??___fltol& (0+255),w,b
  9515  003288  6E22               	movwf	___fltol@sign1^0,c
  9516                           
  9517                           ; BSR set to: 0
  9518  00328A  8FBE               	bsf	(___fltol@f1+2)& (0+255),7,b
  9519                           
  9520                           ; BSR set to: 0
  9521  00328C  6BBF               	clrf	(___fltol@f1+3)& (0+255),b
  9522                           
  9523                           ; BSR set to: 0
  9524  00328E  0E96               	movlw	150
  9525  003290  5E23               	subwf	___fltol@exp1^0,f,c
  9526                           
  9527                           ; BSR set to: 0
  9528  003292  AE23               	btfss	___fltol@exp1^0,7,c
  9529  003294  D00C               	goto	l8326
  9530                           
  9531                           ; BSR set to: 0
  9532  003296  5023               	movf	___fltol@exp1^0,w,c
  9533  003298  0A80               	xorlw	128
  9534  00329A  0F97               	addlw	151
  9535  00329C  E3DE               	bnc	u9420
  9536  00329E                     l8322:
  9537                           
  9538                           ; BSR set to: 0
  9539  00329E  90D8               	bcf	status,0,c
  9540  0032A0  33BF               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9541  0032A2  33BE               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9542  0032A4  33BD               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9543  0032A6  33BC               	rrcf	___fltol@f1& (0+255),f,b
  9544                           
  9545                           ; BSR set to: 0
  9546  0032A8  3E23               	incfsz	___fltol@exp1^0,f,c
  9547  0032AA  D7F9               	goto	l8322
  9548  0032AC  D00C               	goto	u9470
  9549  0032AE                     l8326:
  9550                           
  9551                           ; BSR set to: 0
  9552  0032AE  0E1F               	movlw	31
  9553  0032B0  6423               	cpfsgt	___fltol@exp1^0,c
  9554  0032B2  D007               	goto	l8332
  9555  0032B4  D7D2               	goto	u9420
  9556  0032B6                     l8330:
  9557                           
  9558                           ; BSR set to: 0
  9559  0032B6  90D8               	bcf	status,0,c
  9560  0032B8  37BC               	rlcf	___fltol@f1& (0+255),f,b
  9561  0032BA  37BD               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9562  0032BC  37BE               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9563  0032BE  37BF               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9564  0032C0  0623               	decf	___fltol@exp1^0,f,c
  9565  0032C2                     l8332:
  9566                           
  9567                           ; BSR set to: 0
  9568  0032C2  5023               	movf	___fltol@exp1^0,w,c
  9569  0032C4  E1F8               	bnz	l8330
  9570  0032C6                     u9470:
  9571                           
  9572                           ; BSR set to: 0
  9573  0032C6  5022               	movf	___fltol@sign1^0,w,c
  9574  0032C8  E008               	bz	l8338
  9575                           
  9576                           ; BSR set to: 0
  9577  0032CA  1FBF               	comf	(___fltol@f1+3)& (0+255),f,b
  9578  0032CC  1FBE               	comf	(___fltol@f1+2)& (0+255),f,b
  9579  0032CE  1FBD               	comf	(___fltol@f1+1)& (0+255),f,b
  9580  0032D0  6DBC               	negf	___fltol@f1& (0+255),b
  9581  0032D2  0E00               	movlw	0
  9582  0032D4  23BD               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9583  0032D6  23BE               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9584  0032D8  23BF               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9585  0032DA                     l8338:
  9586                           
  9587                           ; BSR set to: 0
  9588  0032DA  C0BC  F0BC         	movff	___fltol@f1,?___fltol
  9589  0032DE  C0BD  F0BD         	movff	___fltol@f1+1,?___fltol+1
  9590  0032E2  C0BE  F0BE         	movff	___fltol@f1+2,?___fltol+2
  9591  0032E6  C0BF  F0BF         	movff	___fltol@f1+3,?___fltol+3
  9592                           
  9593                           ; BSR set to: 0
  9594  0032EA  0012               	return		;funcret
  9595  0032EC                     __end_of___fltol:
  9596                           	callstack 0
  9597                           
  9598 ;; *************** function ___flsub *****************
  9599 ;; Defined at:
  9600 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  b               4   47[BANK0 ] long 
  9603 ;;  a               4   51[BANK0 ] long 
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  4   47[BANK0 ] long 
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 3F/0
  9612 ;;		On exit  : 3F/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9615 ;;      Params:         0       8       0       0       0       0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0
  9618 ;;      Totals:         0       8       0       0       0       0       0
  9619 ;;Total ram usage:        8 bytes
  9620 ;; Hardware stack levels used: 1
  9621 ;; Hardware stack levels required when called: 4
  9622 ;; This function calls:
  9623 ;;		___fladd
  9624 ;; This function is called by:
  9625 ;;		_efgtoa
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text23
  9630  003B90                     __ptext23:
  9631                           	callstack 0
  9632  003B90                     ___flsub:
  9633                           	callstack 22
  9634                           
  9635                           ; BSR set to: 0
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;incstack = 0
  9639  003B90  0E80               	movlw	128
  9640  003B92  1B96               	xorwf	(___flsub@a+3)& (0+255),f,b
  9641                           
  9642                           ; BSR set to: 0
  9643  003B94  C08F  F07F         	movff	___flsub@b,___fladd@b
  9644  003B98  C090  F080         	movff	___flsub@b+1,___fladd@b+1
  9645  003B9C  C091  F081         	movff	___flsub@b+2,___fladd@b+2
  9646  003BA0  C092  F082         	movff	___flsub@b+3,___fladd@b+3
  9647  003BA4  C093  F083         	movff	___flsub@a,___fladd@a
  9648  003BA8  C094  F084         	movff	___flsub@a+1,___fladd@a+1
  9649  003BAC  C095  F085         	movff	___flsub@a+2,___fladd@a+2
  9650  003BB0  C096  F086         	movff	___flsub@a+3,___fladd@a+3
  9651  003BB4  EC09  F00E         	call	___fladd	;wreg free
  9652  003BB8  C07F  F08F         	movff	?___fladd,?___flsub
  9653  003BBC  C080  F090         	movff	?___fladd+1,?___flsub+1
  9654  003BC0  C081  F091         	movff	?___fladd+2,?___flsub+2
  9655  003BC4  C082  F092         	movff	?___fladd+3,?___flsub+3
  9656                           
  9657                           ; BSR set to: 0
  9658  003BC8  0012               	return		;funcret
  9659  003BCA                     __end_of___flsub:
  9660                           	callstack 0
  9661                           
  9662 ;; *************** function ___fladd *****************
  9663 ;; Defined at:
  9664 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;  b               4   31[BANK0 ] long 
  9667 ;;  a               4   35[BANK0 ] long 
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  grs             1   46[BANK0 ] unsigned char 
  9670 ;;  bexp            1   45[BANK0 ] unsigned char 
  9671 ;;  aexp            1   44[BANK0 ] unsigned char 
  9672 ;;  signs           1   43[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  4   31[BANK0 ] unsigned char 
  9675 ;; Registers used:
  9676 ;;		wreg, status,2, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 3E/0
  9679 ;;		On exit  : 3F/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9682 ;;      Params:         0       8       0       0       0       0       0
  9683 ;;      Locals:         0       4       0       0       0       0       0
  9684 ;;      Temps:          0       4       0       0       0       0       0
  9685 ;;      Totals:         0      16       0       0       0       0       0
  9686 ;;Total ram usage:       16 bytes
  9687 ;; Hardware stack levels used: 1
  9688 ;; Hardware stack levels required when called: 3
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_main
  9693 ;;		___flsub
  9694 ;;		_efgtoa
  9695 ;;		_sqrtf
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text24
  9700  001C12                     __ptext24:
  9701                           	callstack 0
  9702  001C12                     ___fladd:
  9703                           	callstack 26
  9704                           
  9705                           ; BSR set to: 0
  9706                           ;incstack = 0
  9707  001C12  0100               	movlb	0	; () banked
  9708  001C14  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9709  001C16  0B80               	andlw	128
  9710  001C18  6F8B               	movwf	___fladd@signs& (0+255),b
  9711  001C1A  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9712  001C1C  2582               	addwf	(___fladd@b+3)& (0+255),w,b
  9713  001C1E  6F8D               	movwf	___fladd@bexp& (0+255),b
  9714                           
  9715                           ; BSR set to: 0
  9716  001C20  BF81               	btfsc	(___fladd@b+2)& (0+255),7,b
  9717                           
  9718                           ; BSR set to: 0
  9719  001C22  818D               	bsf	___fladd@bexp& (0+255),0,b
  9720                           
  9721                           ; BSR set to: 0
  9722  001C24  518D               	movf	___fladd@bexp& (0+255),w,b
  9723  001C26  E005               	bz	l1250
  9724                           
  9725                           ; BSR set to: 0
  9726  001C28  298D               	incf	___fladd@bexp& (0+255),w,b
  9727  001C2A  E101               	bnz	l7736
  9728                           
  9729                           ; BSR set to: 0
  9730  001C2C  D906               	call	PL154	;call to abstracted procedure
  9731  001C2E                     l7736:
  9732                           
  9733                           ; BSR set to: 0
  9734  001C2E  8F81               	bsf	(___fladd@b+2)& (0+255),7,b
  9735  001C30  D003               	goto	L11
  9736  001C32                     l1250:
  9737                           
  9738                           ; BSR set to: 0
  9739  001C32  6B7F               	clrf	___fladd@b& (0+255),b
  9740  001C34  6B80               	clrf	(___fladd@b+1)& (0+255),b
  9741  001C36  6B81               	clrf	(___fladd@b+2)& (0+255),b
  9742  001C38                     L11:
  9743  001C38  6B82               	clrf	(___fladd@b+3)& (0+255),b
  9744                           
  9745                           ; BSR set to: 0
  9746  001C3A  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9747  001C3C  0B80               	andlw	128
  9748  001C3E  6F8C               	movwf	___fladd@aexp& (0+255),b
  9749  001C40  198B               	xorwf	___fladd@signs& (0+255),w,b
  9750  001C42  E001               	bz	l7744
  9751                           
  9752                           ; BSR set to: 0
  9753  001C44  8D8B               	bsf	___fladd@signs& (0+255),6,b
  9754  001C46                     l7744:
  9755                           
  9756                           ; BSR set to: 0
  9757  001C46  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9758  001C48  2586               	addwf	(___fladd@a+3)& (0+255),w,b
  9759  001C4A  6F8C               	movwf	___fladd@aexp& (0+255),b
  9760                           
  9761                           ; BSR set to: 0
  9762  001C4C  BF85               	btfsc	(___fladd@a+2)& (0+255),7,b
  9763                           
  9764                           ; BSR set to: 0
  9765  001C4E  818C               	bsf	___fladd@aexp& (0+255),0,b
  9766                           
  9767                           ; BSR set to: 0
  9768  001C50  518C               	movf	___fladd@aexp& (0+255),w,b
  9769  001C52  E008               	bz	l1255
  9770                           
  9771                           ; BSR set to: 0
  9772  001C54  298C               	incf	___fladd@aexp& (0+255),w,b
  9773  001C56  E104               	bnz	l7756
  9774                           
  9775                           ; BSR set to: 0
  9776  001C58  6B83               	clrf	___fladd@a& (0+255),b
  9777  001C5A  6B84               	clrf	(___fladd@a+1)& (0+255),b
  9778  001C5C  6B85               	clrf	(___fladd@a+2)& (0+255),b
  9779  001C5E  6B86               	clrf	(___fladd@a+3)& (0+255),b
  9780  001C60                     l7756:
  9781                           
  9782                           ; BSR set to: 0
  9783  001C60  8F85               	bsf	(___fladd@a+2)& (0+255),7,b
  9784  001C62  D003               	goto	L12
  9785  001C64                     l1255:
  9786                           
  9787                           ; BSR set to: 0
  9788  001C64  6B83               	clrf	___fladd@a& (0+255),b
  9789  001C66  6B84               	clrf	(___fladd@a+1)& (0+255),b
  9790  001C68  6B85               	clrf	(___fladd@a+2)& (0+255),b
  9791  001C6A                     L12:
  9792  001C6A  6B86               	clrf	(___fladd@a+3)& (0+255),b
  9793                           
  9794                           ; BSR set to: 0
  9795  001C6C  518D               	movf	___fladd@bexp& (0+255),w,b
  9796  001C6E  5D8C               	subwf	___fladd@aexp& (0+255),w,b
  9797  001C70  E222               	bc	l7796
  9798                           
  9799                           ; BSR set to: 0
  9800  001C72  AD8B               	btfss	___fladd@signs& (0+255),6,b
  9801  001C74  D002               	goto	l7766
  9802                           
  9803                           ; BSR set to: 0
  9804  001C76  0E80               	movlw	128
  9805  001C78  1B8B               	xorwf	___fladd@signs& (0+255),f,b
  9806  001C7A                     l7766:
  9807                           
  9808                           ; BSR set to: 0
  9809  001C7A  C08D  F08E         	movff	___fladd@bexp,___fladd@grs
  9810                           
  9811                           ; BSR set to: 0
  9812  001C7E  C08C  F08D         	movff	___fladd@aexp,___fladd@bexp
  9813                           
  9814                           ; BSR set to: 0
  9815  001C82  C08E  F08C         	movff	___fladd@grs,___fladd@aexp
  9816                           
  9817                           ; BSR set to: 0
  9818  001C86  C07F  F08E         	movff	___fladd@b,___fladd@grs
  9819                           
  9820                           ; BSR set to: 0
  9821  001C8A  C083  F07F         	movff	___fladd@a,___fladd@b
  9822                           
  9823                           ; BSR set to: 0
  9824  001C8E  C08E  F083         	movff	___fladd@grs,___fladd@a
  9825                           
  9826                           ; BSR set to: 0
  9827  001C92  C080  F08E         	movff	___fladd@b+1,___fladd@grs
  9828                           
  9829                           ; BSR set to: 0
  9830  001C96  C084  F080         	movff	___fladd@a+1,___fladd@b+1
  9831                           
  9832                           ; BSR set to: 0
  9833  001C9A  C08E  F084         	movff	___fladd@grs,___fladd@a+1
  9834                           
  9835                           ; BSR set to: 0
  9836  001C9E  C081  F08E         	movff	___fladd@b+2,___fladd@grs
  9837                           
  9838                           ; BSR set to: 0
  9839  001CA2  C085  F081         	movff	___fladd@a+2,___fladd@b+2
  9840                           
  9841                           ; BSR set to: 0
  9842  001CA6  C08E  F085         	movff	___fladd@grs,___fladd@a+2
  9843                           
  9844                           ; BSR set to: 0
  9845  001CAA  C082  F08E         	movff	___fladd@b+3,___fladd@grs
  9846                           
  9847                           ; BSR set to: 0
  9848  001CAE  C086  F082         	movff	___fladd@a+3,___fladd@b+3
  9849                           
  9850                           ; BSR set to: 0
  9851  001CB2  C08E  F086         	movff	___fladd@grs,___fladd@a+3
  9852  001CB6                     l7796:
  9853                           
  9854                           ; BSR set to: 0
  9855  001CB6  6B8E               	clrf	___fladd@grs& (0+255),b
  9856  001CB8  518D               	movf	___fladd@bexp& (0+255),w,b
  9857  001CBA  C08C  F087         	movff	___fladd@aexp,??___fladd
  9858  001CBE  6B88               	clrf	(??___fladd+1)& (0+255),b
  9859  001CC0  5F87               	subwf	??___fladd& (0+255),f,b
  9860  001CC2  0E00               	movlw	0
  9861  001CC4  5B88               	subwfb	(??___fladd+1)& (0+255),f,b
  9862  001CC6  BF88               	btfsc	(??___fladd+1)& (0+255),7,b
  9863  001CC8  D015               	goto	l1262
  9864  001CCA  5188               	movf	(??___fladd+1)& (0+255),w,b
  9865  001CCC  E103               	bnz	u8450
  9866  001CCE  0E1A               	movlw	26
  9867  001CD0  5D87               	subwf	??___fladd& (0+255),w,b
  9868  001CD2  E310               	bnc	l1262
  9869  001CD4                     u8450:
  9870                           
  9871                           ; BSR set to: 0
  9872  001CD4  D8C7               	call	PL194	;call to abstracted procedure
  9873  001CD6  0E01               	movlw	1
  9874  001CD8  B4D8               	btfsc	status,2,c
  9875  001CDA  0E00               	movlw	0
  9876  001CDC  6F8E               	movwf	___fladd@grs& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879  001CDE  D8AD               	call	PL154	;call to abstracted procedure
  9880                           
  9881                           ; BSR set to: 0
  9882  001CE0  C08C  F08D         	movff	___fladd@aexp,___fladd@bexp
  9883  001CE4  D00A               	goto	u8500
  9884  001CE6                     l1263:
  9885                           
  9886                           ; BSR set to: 0
  9887  001CE6  A18E               	btfss	___fladd@grs& (0+255),0,b
  9888  001CE8  D002               	goto	l7806
  9889                           
  9890                           ; BSR set to: 0
  9891  001CEA  D8B7               	call	PL188	;call to abstracted procedure
  9892  001CEC  D002               	goto	l7808
  9893  001CEE                     l7806:
  9894                           
  9895                           ; BSR set to: 0
  9896  001CEE  90D8               	bcf	status,0,c
  9897  001CF0  338E               	rrcf	___fladd@grs& (0+255),f,b
  9898  001CF2                     l7808:
  9899                           
  9900                           ; BSR set to: 0
  9901                           
  9902                           ; BSR set to: 0
  9903                           
  9904                           ; BSR set to: 0
  9905                           
  9906                           ; BSR set to: 0
  9907  001CF2  D89A               	call	PL114	;call to abstracted procedure
  9908  001CF4                     l1262:
  9909                           
  9910                           ; BSR set to: 0
  9911  001CF4  518C               	movf	___fladd@aexp& (0+255),w,b
  9912  001CF6  5D8D               	subwf	___fladd@bexp& (0+255),w,b
  9913  001CF8  E3F6               	bnc	l1263
  9914  001CFA                     u8500:
  9915                           
  9916                           ; BSR set to: 0
  9917  001CFA  BD8B               	btfsc	___fladd@signs& (0+255),6,b
  9918  001CFC  D015               	goto	l7838
  9919                           
  9920                           ; BSR set to: 0
  9921  001CFE  518D               	movf	___fladd@bexp& (0+255),w,b
  9922  001D00  E101               	bnz	l7820
  9923                           
  9924                           ; BSR set to: 0
  9925  001D02  D0A6               	goto	PL172	;call to abstracted procedure
  9926  001D04                     l7820:
  9927                           
  9928                           ; BSR set to: 0
  9929  001D04  5183               	movf	___fladd@a& (0+255),w,b
  9930  001D06  277F               	addwf	___fladd@b& (0+255),f,b
  9931  001D08  5184               	movf	(___fladd@a+1)& (0+255),w,b
  9932  001D0A  2380               	addwfc	(___fladd@b+1)& (0+255),f,b
  9933  001D0C  5185               	movf	(___fladd@a+2)& (0+255),w,b
  9934  001D0E  2381               	addwfc	(___fladd@b+2)& (0+255),f,b
  9935  001D10  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9936  001D12  2382               	addwfc	(___fladd@b+3)& (0+255),f,b
  9937                           
  9938                           ; BSR set to: 0
  9939  001D14  A182               	btfss	(___fladd@b+3)& (0+255),0,b
  9940  001D16  D053               	goto	u8630
  9941                           
  9942                           ; BSR set to: 0
  9943  001D18  A18E               	btfss	___fladd@grs& (0+255),0,b
  9944  001D1A  D002               	goto	l7828
  9945                           
  9946                           ; BSR set to: 0
  9947  001D1C  D89E               	call	PL188	;call to abstracted procedure
  9948  001D1E  D002               	goto	l7830
  9949  001D20                     l7828:
  9950                           
  9951                           ; BSR set to: 0
  9952  001D20  90D8               	bcf	status,0,c
  9953  001D22  338E               	rrcf	___fladd@grs& (0+255),f,b
  9954  001D24                     l7830:
  9955                           
  9956                           ; BSR set to: 0
  9957                           
  9958                           ; BSR set to: 0
  9959                           
  9960                           ; BSR set to: 0
  9961                           
  9962                           ; BSR set to: 0
  9963  001D24  D881               	call	PL114	;call to abstracted procedure
  9964  001D26  D04B               	goto	u8630
  9965  001D28                     l7838:
  9966                           
  9967                           ; BSR set to: 0
  9968  001D28  5183               	movf	___fladd@a& (0+255),w,b
  9969  001D2A  5D7F               	subwf	___fladd@b& (0+255),w,b
  9970  001D2C  5184               	movf	(___fladd@a+1)& (0+255),w,b
  9971  001D2E  5980               	subwfb	(___fladd@b+1)& (0+255),w,b
  9972  001D30  5185               	movf	(___fladd@a+2)& (0+255),w,b
  9973  001D32  5981               	subwfb	(___fladd@b+2)& (0+255),w,b
  9974  001D34  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9975  001D36  0A80               	xorlw	128
  9976  001D38  6F87               	movwf	??___fladd& (0+255),b
  9977  001D3A  5186               	movf	(___fladd@a+3)& (0+255),w,b
  9978  001D3C  0A80               	xorlw	128
  9979  001D3E  5987               	subwfb	??___fladd& (0+255),w,b
  9980  001D40  E21F               	bc	l7848
  9981                           
  9982                           ; BSR set to: 0
  9983  001D42  517F               	movf	___fladd@b& (0+255),w,b
  9984  001D44  5D83               	subwf	___fladd@a& (0+255),w,b
  9985  001D46  6F87               	movwf	??___fladd& (0+255),b
  9986  001D48  5180               	movf	(___fladd@b+1)& (0+255),w,b
  9987  001D4A  5984               	subwfb	(___fladd@a+1)& (0+255),w,b
  9988  001D4C  6F88               	movwf	(??___fladd+1)& (0+255),b
  9989  001D4E  5181               	movf	(___fladd@b+2)& (0+255),w,b
  9990  001D50  5985               	subwfb	(___fladd@a+2)& (0+255),w,b
  9991  001D52  6F89               	movwf	(??___fladd+2)& (0+255),b
  9992  001D54  5182               	movf	(___fladd@b+3)& (0+255),w,b
  9993  001D56  5986               	subwfb	(___fladd@a+3)& (0+255),w,b
  9994  001D58  6F8A               	movwf	(??___fladd+3)& (0+255),b
  9995  001D5A  0EFF               	movlw	255
  9996  001D5C  2587               	addwf	??___fladd& (0+255),w,b
  9997  001D5E  6F7F               	movwf	___fladd@b& (0+255),b
  9998  001D60  0EFF               	movlw	255
  9999  001D62  2188               	addwfc	(??___fladd+1)& (0+255),w,b
 10000  001D64  6F80               	movwf	(___fladd@b+1)& (0+255),b
 10001  001D66  0EFF               	movlw	255
 10002  001D68  2189               	addwfc	(??___fladd+2)& (0+255),w,b
 10003  001D6A  6F81               	movwf	(___fladd@b+2)& (0+255),b
 10004  001D6C  0EFF               	movlw	255
 10005  001D6E  218A               	addwfc	(??___fladd+3)& (0+255),w,b
 10006  001D70  6F82               	movwf	(___fladd@b+3)& (0+255),b
 10007  001D72  0E80               	movlw	128
 10008  001D74  1B8B               	xorwf	___fladd@signs& (0+255),f,b
 10009                           
 10010                           ; BSR set to: 0
 10011  001D76  6D8E               	negf	___fladd@grs& (0+255),b
 10012                           
 10013                           ; BSR set to: 0
 10014  001D78  518E               	movf	___fladd@grs& (0+255),w,b
 10015  001D7A  E10A               	bnz	l1278
 10016                           
 10017                           ; BSR set to: 0
 10018  001D7C  D863               	call	PL168	;call to abstracted procedure
 10019  001D7E  D008               	goto	l1278
 10020  001D80                     l7848:
 10021                           
 10022                           ; BSR set to: 0
 10023  001D80  5183               	movf	___fladd@a& (0+255),w,b
 10024  001D82  5F7F               	subwf	___fladd@b& (0+255),f,b
 10025  001D84  5184               	movf	(___fladd@a+1)& (0+255),w,b
 10026  001D86  5B80               	subwfb	(___fladd@b+1)& (0+255),f,b
 10027  001D88  5185               	movf	(___fladd@a+2)& (0+255),w,b
 10028  001D8A  5B81               	subwfb	(___fladd@b+2)& (0+255),f,b
 10029  001D8C  5186               	movf	(___fladd@a+3)& (0+255),w,b
 10030  001D8E  5B82               	subwfb	(___fladd@b+3)& (0+255),f,b
 10031  001D90                     l1278:
 10032                           
 10033                           ; BSR set to: 0
 10034  001D90  D869               	call	PL194	;call to abstracted procedure
 10035  001D92  E113               	bnz	l7870
 10036                           
 10037                           ; BSR set to: 0
 10038  001D94  518E               	movf	___fladd@grs& (0+255),w,b
 10039  001D96  E111               	bnz	l7870
 10040                           
 10041                           ; BSR set to: 0
 10042  001D98  D05B               	goto	PL172	;call to abstracted procedure
 10043  001D9A                     l7854:
 10044                           
 10045                           ; BSR set to: 0
 10046  001D9A  90D8               	bcf	status,0,c
 10047  001D9C  377F               	rlcf	___fladd@b& (0+255),f,b
 10048  001D9E  3780               	rlcf	(___fladd@b+1)& (0+255),f,b
 10049  001DA0  3781               	rlcf	(___fladd@b+2)& (0+255),f,b
 10050  001DA2  3782               	rlcf	(___fladd@b+3)& (0+255),f,b
 10051                           
 10052                           ; BSR set to: 0
 10053  001DA4  BF8E               	btfsc	___fladd@grs& (0+255),7,b
 10054                           
 10055                           ; BSR set to: 0
 10056  001DA6  817F               	bsf	___fladd@b& (0+255),0,b
 10057                           
 10058                           ; BSR set to: 0
 10059  001DA8  A18E               	btfss	___fladd@grs& (0+255),0,b
 10060  001DAA  D002               	goto	l7864
 10061                           
 10062                           ; BSR set to: 0
 10063  001DAC  80D8               	bsf	status,0,c
 10064  001DAE  D001               	goto	L13
 10065  001DB0                     l7864:
 10066                           
 10067                           ; BSR set to: 0
 10068  001DB0  90D8               	bcf	status,0,c
 10069  001DB2                     L13:
 10070  001DB2  378E               	rlcf	___fladd@grs& (0+255),f,b
 10071                           
 10072                           ; BSR set to: 0
 10073  001DB4  518D               	movf	___fladd@bexp& (0+255),w,b
 10074  001DB6  E001               	bz	l7870
 10075                           
 10076                           ; BSR set to: 0
 10077  001DB8  078D               	decf	___fladd@bexp& (0+255),f,b
 10078  001DBA                     l7870:
 10079                           
 10080                           ; BSR set to: 0
 10081  001DBA  AF81               	btfss	(___fladd@b+2)& (0+255),7,b
 10082  001DBC  D7EE               	goto	l7854
 10083  001DBE                     u8630:
 10084                           
 10085                           ; BSR set to: 0
 10086  001DBE  6B8C               	clrf	___fladd@aexp& (0+255),b
 10087  001DC0  AF8E               	btfss	___fladd@grs& (0+255),7,b
 10088  001DC2  D00A               	goto	l1287
 10089                           
 10090                           ; BSR set to: 0
 10091  001DC4  C08E  F087         	movff	___fladd@grs,??___fladd
 10092  001DC8  0E7F               	movlw	127
 10093  001DCA  1787               	andwf	??___fladd& (0+255),f,b
 10094  001DCC  E003               	bz	l1288
 10095  001DCE                     u8650:
 10096                           
 10097                           ; BSR set to: 0
 10098  001DCE  0E01               	movlw	1
 10099  001DD0  6F8C               	movwf	___fladd@aexp& (0+255),b
 10100  001DD2  D002               	goto	l1287
 10101  001DD4                     l1288:
 10102                           
 10103                           ; BSR set to: 0
 10104  001DD4  B17F               	btfsc	___fladd@b& (0+255),0,b
 10105  001DD6  D7FB               	goto	u8650
 10106  001DD8                     l1287:
 10107                           
 10108                           ; BSR set to: 0
 10109  001DD8  518C               	movf	___fladd@aexp& (0+255),w,b
 10110  001DDA  E00B               	bz	l7886
 10111                           
 10112                           ; BSR set to: 0
 10113  001DDC  D833               	call	PL168	;call to abstracted procedure
 10114                           
 10115                           ; BSR set to: 0
 10116  001DDE  A182               	btfss	(___fladd@b+3)& (0+255),0,b
 10117  001DE0  D008               	goto	l7886
 10118                           
 10119                           ; BSR set to: 0
 10120  001DE2  3582               	rlcf	(___fladd@b+3)& (0+255),w,b
 10121  001DE4  3382               	rrcf	(___fladd@b+3)& (0+255),f,b
 10122  001DE6  3381               	rrcf	(___fladd@b+2)& (0+255),f,b
 10123  001DE8  3380               	rrcf	(___fladd@b+1)& (0+255),f,b
 10124  001DEA  337F               	rrcf	___fladd@b& (0+255),f,b
 10125  001DEC  298D               	incf	___fladd@bexp& (0+255),w,b
 10126  001DEE  E001               	bz	l7886
 10127                           
 10128                           ; BSR set to: 0
 10129  001DF0  2B8D               	incf	___fladd@bexp& (0+255),f,b
 10130  001DF2                     l7886:
 10131                           
 10132                           ; BSR set to: 0
 10133  001DF2  298D               	incf	___fladd@bexp& (0+255),w,b
 10134  001DF4  E002               	bz	u8710
 10135                           
 10136                           ; BSR set to: 0
 10137  001DF6  518D               	movf	___fladd@bexp& (0+255),w,b
 10138  001DF8  E104               	bnz	l1294
 10139  001DFA                     u8710:
 10140                           
 10141                           ; BSR set to: 0
 10142  001DFA  D81F               	call	PL154	;call to abstracted procedure
 10143                           
 10144                           ; BSR set to: 0
 10145  001DFC  518D               	movf	___fladd@bexp& (0+255),w,b
 10146  001DFE  E101               	bnz	l1294
 10147                           
 10148                           ; BSR set to: 0
 10149  001E00  6B8B               	clrf	___fladd@signs& (0+255),b
 10150  001E02                     l1294:
 10151                           
 10152                           ; BSR set to: 0
 10153  001E02  A18D               	btfss	___fladd@bexp& (0+255),0,b
 10154  001E04  D002               	goto	l7896
 10155                           
 10156                           ; BSR set to: 0
 10157  001E06  8F81               	bsf	(___fladd@b+2)& (0+255),7,b
 10158  001E08  D001               	goto	l7898
 10159  001E0A                     l7896:
 10160                           
 10161                           ; BSR set to: 0
 10162  001E0A  9F81               	bcf	(___fladd@b+2)& (0+255),7,b
 10163  001E0C                     l7898:
 10164                           
 10165                           ; BSR set to: 0
 10166  001E0C  90D8               	bcf	status,0,c
 10167  001E0E  318D               	rrcf	___fladd@bexp& (0+255),w,b
 10168  001E10  6F82               	movwf	(___fladd@b+3)& (0+255),b
 10169                           
 10170                           ; BSR set to: 0
 10171  001E12  BF8B               	btfsc	___fladd@signs& (0+255),7,b
 10172                           
 10173                           ; BSR set to: 0
 10174  001E14  8F82               	bsf	(___fladd@b+3)& (0+255),7,b
 10175                           
 10176                           ; BSR set to: 0
 10177  001E16  C07F  F07F         	movff	___fladd@b,?___fladd
 10178  001E1A  C080  F080         	movff	___fladd@b+1,?___fladd+1
 10179  001E1E  C081  F081         	movff	___fladd@b+2,?___fladd+2
 10180  001E22  C082  F082         	movff	___fladd@b+3,?___fladd+3
 10181                           
 10182                           ; BSR set to: 0
 10183  001E26  0012               	return		;funcret
 10184  001E28                     __end_of___fladd:
 10185                           	callstack 0
 10186  001E28                     PL114:
 10187                           	callstack 26
 10188  001E28  B17F               	btfsc	___fladd@b& (0+255),0,b
 10189  001E2A  8F8E               	bsf	___fladd@grs& (0+255),7,b
 10190  001E2C  3582               	rlcf	(___fladd@b+3)& (0+255),w,b
 10191  001E2E  3382               	rrcf	(___fladd@b+3)& (0+255),f,b
 10192  001E30  3381               	rrcf	(___fladd@b+2)& (0+255),f,b
 10193  001E32  3380               	rrcf	(___fladd@b+1)& (0+255),f,b
 10194  001E34  337F               	rrcf	___fladd@b& (0+255),f,b
 10195  001E36  2B8D               	incf	___fladd@bexp& (0+255),f,b
 10196  001E38  0012               	return	
 10197  001E3A                     __end_ofPL114:
 10198                           	callstack 0
 10199  001E3A                     PL154:
 10200                           	callstack 26
 10201  001E3A  6B7F               	clrf	___fladd@b& (0+255),b
 10202  001E3C  6B80               	clrf	(___fladd@b+1)& (0+255),b
 10203  001E3E  6B81               	clrf	(___fladd@b+2)& (0+255),b
 10204  001E40  6B82               	clrf	(___fladd@b+3)& (0+255),b
 10205  001E42  0012               	return	
 10206  001E44                     __end_ofPL154:
 10207                           	callstack 0
 10208  001E44                     PL168:
 10209                           	callstack 26
 10210  001E44  2B7F               	incf	___fladd@b& (0+255),f,b
 10211  001E46  0E00               	movlw	0
 10212  001E48  2380               	addwfc	(___fladd@b+1)& (0+255),f,b
 10213  001E4A  2381               	addwfc	(___fladd@b+2)& (0+255),f,b
 10214  001E4C  2382               	addwfc	(___fladd@b+3)& (0+255),f,b
 10215  001E4E  0C00               	retlw	0
 10216  001E50                     __end_ofPL168:
 10217                           	callstack 0
 10218  001E50                     PL172:
 10219                           	callstack 26
 10220  001E50  6B7F               	clrf	?___fladd& (0+255),b
 10221  001E52  6B80               	clrf	(?___fladd+1)& (0+255),b
 10222  001E54  6B81               	clrf	(?___fladd+2)& (0+255),b
 10223  001E56  6B82               	clrf	(?___fladd+3)& (0+255),b
 10224  001E58  0012               	return	
 10225  001E5A                     __end_ofPL172:
 10226                           	callstack 0
 10227  001E5A                     PL188:
 10228                           	callstack 26
 10229  001E5A  90D8               	bcf	status,0,c
 10230  001E5C  318E               	rrcf	___fladd@grs& (0+255),w,b
 10231  001E5E  0901               	iorlw	1
 10232  001E60  6F8E               	movwf	___fladd@grs& (0+255),b
 10233  001E62  0012               	return	
 10234  001E64                     __end_ofPL188:
 10235                           	callstack 0
 10236  001E64                     PL194:
 10237                           	callstack 26
 10238  001E64  517F               	movf	___fladd@b& (0+255),w,b
 10239  001E66  1180               	iorwf	(___fladd@b+1)& (0+255),w,b
 10240  001E68  1181               	iorwf	(___fladd@b+2)& (0+255),w,b
 10241  001E6A  1182               	iorwf	(___fladd@b+3)& (0+255),w,b
 10242  001E6C  0012               	return	
 10243  001E6E                     __end_ofPL194:
 10244                           	callstack 0
 10245                           
 10246 ;; *************** function ___flneg *****************
 10247 ;; Defined at:
 10248 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flneg.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  f1              4   25[COMRAM] unsigned char 
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;		None
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  4   25[COMRAM] unsigned char 
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0
 10257 ;; Tracked objects:
 10258 ;;		On entry : 3F/1
 10259 ;;		On exit  : 3F/1
 10260 ;;		Unchanged: 3F/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10262 ;;      Params:         4       0       0       0       0       0       0
 10263 ;;      Locals:         0       0       0       0       0       0       0
 10264 ;;      Temps:          0       0       0       0       0       0       0
 10265 ;;      Totals:         4       0       0       0       0       0       0
 10266 ;;Total ram usage:        4 bytes
 10267 ;; Hardware stack levels used: 1
 10268 ;; Hardware stack levels required when called: 3
 10269 ;; This function calls:
 10270 ;;		Nothing
 10271 ;; This function is called by:
 10272 ;;		_efgtoa
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text25
 10277  003E1C                     __ptext25:
 10278                           	callstack 0
 10279  003E1C                     ___flneg:
 10280                           	callstack 23
 10281                           
 10282                           ; BSR set to: 1
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;incstack = 0
 10286  003E1C  501A               	movf	___flneg@f1^0,w,c
 10287  003E1E  101B               	iorwf	(___flneg@f1+1)^0,w,c
 10288  003E20  101C               	iorwf	(___flneg@f1+2)^0,w,c
 10289  003E22  101D               	iorwf	(___flneg@f1+3)^0,w,c
 10290  003E24  E002               	bz	l8300
 10291                           
 10292                           ; BSR set to: 1
 10293  003E26  0E80               	movlw	128
 10294  003E28  1A1D               	xorwf	(___flneg@f1+3)^0,f,c
 10295  003E2A                     l8300:
 10296                           
 10297                           ; BSR set to: 1
 10298  003E2A  C01A  F01A         	movff	___flneg@f1,?___flneg
 10299  003E2E  C01B  F01B         	movff	___flneg@f1+1,?___flneg+1
 10300  003E32  C01C  F01C         	movff	___flneg@f1+2,?___flneg+2
 10301  003E36  C01D  F01D         	movff	___flneg@f1+3,?___flneg+3
 10302                           
 10303                           ; BSR set to: 1
 10304  003E3A  0012               	return		;funcret
 10305  003E3C                     __end_of___flneg:
 10306                           	callstack 0
 10307                           
 10308 ;; *************** function ___flmul *****************
 10309 ;; Defined at:
 10310 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcmul.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;  b               4    6[BANK0 ] unsigned char 
 10313 ;;  a               4   10[BANK0 ] unsigned char 
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;  prod            4   25[BANK0 ] struct .
 10316 ;;  grs             4   21[BANK0 ] unsigned long 
 10317 ;;  temp            2   29[BANK0 ] struct .
 10318 ;;  bexp            1   20[BANK0 ] unsigned char 
 10319 ;;  aexp            1   19[BANK0 ] unsigned char 
 10320 ;;  sign            1   18[BANK0 ] unsigned char 
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  4    6[BANK0 ] unsigned char 
 10323 ;; Registers used:
 10324 ;;		wreg, status,2, status,0, prodl, prodh
 10325 ;; Tracked objects:
 10326 ;;		On entry : 3E/0
 10327 ;;		On exit  : 3F/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10330 ;;      Params:         0       8       0       0       0       0       0
 10331 ;;      Locals:         0      13       0       0       0       0       0
 10332 ;;      Temps:          0       4       0       0       0       0       0
 10333 ;;      Totals:         0      25       0       0       0       0       0
 10334 ;;Total ram usage:       25 bytes
 10335 ;; Hardware stack levels used: 1
 10336 ;; Hardware stack levels required when called: 3
 10337 ;; This function calls:
 10338 ;;		Nothing
 10339 ;; This function is called by:
 10340 ;;		_main
 10341 ;;		_efgtoa
 10342 ;;		_sqrtf
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           	psect	text26
 10347  001E6E                     __ptext26:
 10348                           	callstack 0
 10349  001E6E                     ___flmul:
 10350                           	callstack 26
 10351                           
 10352                           ; BSR set to: 1
 10353                           ;incstack = 0
 10354  001E6E  0100               	movlb	0	; () banked
 10355  001E70  5169               	movf	(___flmul@b+3)& (0+255),w,b
 10356  001E72  0B80               	andlw	128
 10357  001E74  6F72               	movwf	___flmul@sign& (0+255),b
 10358  001E76  5169               	movf	(___flmul@b+3)& (0+255),w,b
 10359  001E78  2569               	addwf	(___flmul@b+3)& (0+255),w,b
 10360  001E7A  6F74               	movwf	___flmul@bexp& (0+255),b
 10361                           
 10362                           ; BSR set to: 0
 10363  001E7C  BF68               	btfsc	(___flmul@b+2)& (0+255),7,b
 10364                           
 10365                           ; BSR set to: 0
 10366  001E7E  8174               	bsf	___flmul@bexp& (0+255),0,b
 10367                           
 10368                           ; BSR set to: 0
 10369  001E80  5174               	movf	___flmul@bexp& (0+255),w,b
 10370  001E82  E005               	bz	l1341
 10371                           
 10372                           ; BSR set to: 0
 10373  001E84  2974               	incf	___flmul@bexp& (0+255),w,b
 10374  001E86  E101               	bnz	l8068
 10375                           
 10376                           ; BSR set to: 0
 10377  001E88  D902               	call	PL200	;call to abstracted procedure
 10378  001E8A                     l8068:
 10379                           
 10380                           ; BSR set to: 0
 10381  001E8A  8F68               	bsf	(___flmul@b+2)& (0+255),7,b
 10382  001E8C  D001               	goto	l8070
 10383  001E8E                     l1341:
 10384                           
 10385                           ; BSR set to: 0
 10386  001E8E  D8FF               	call	PL200	;call to abstracted procedure
 10387  001E90                     l8070:
 10388                           
 10389                           ; BSR set to: 0
 10390  001E90  516D               	movf	(___flmul@a+3)& (0+255),w,b
 10391  001E92  0B80               	andlw	128
 10392  001E94  1B72               	xorwf	___flmul@sign& (0+255),f,b
 10393  001E96  516D               	movf	(___flmul@a+3)& (0+255),w,b
 10394  001E98  256D               	addwf	(___flmul@a+3)& (0+255),w,b
 10395  001E9A  6F73               	movwf	___flmul@aexp& (0+255),b
 10396                           
 10397                           ; BSR set to: 0
 10398  001E9C  BF6C               	btfsc	(___flmul@a+2)& (0+255),7,b
 10399                           
 10400                           ; BSR set to: 0
 10401  001E9E  8173               	bsf	___flmul@aexp& (0+255),0,b
 10402                           
 10403                           ; BSR set to: 0
 10404  001EA0  5173               	movf	___flmul@aexp& (0+255),w,b
 10405  001EA2  E005               	bz	l1345
 10406                           
 10407                           ; BSR set to: 0
 10408  001EA4  2973               	incf	___flmul@aexp& (0+255),w,b
 10409  001EA6  E101               	bnz	l8082
 10410                           
 10411                           ; BSR set to: 0
 10412  001EA8  D8ED               	call	PL192	;call to abstracted procedure
 10413  001EAA                     l8082:
 10414                           
 10415                           ; BSR set to: 0
 10416  001EAA  8F6C               	bsf	(___flmul@a+2)& (0+255),7,b
 10417  001EAC  D001               	goto	l8084
 10418  001EAE                     l1345:
 10419                           
 10420                           ; BSR set to: 0
 10421  001EAE  D8EA               	call	PL192	;call to abstracted procedure
 10422  001EB0                     l8084:
 10423                           
 10424                           ; BSR set to: 0
 10425  001EB0  5173               	movf	___flmul@aexp& (0+255),w,b
 10426  001EB2  E002               	bz	u9100
 10427                           
 10428                           ; BSR set to: 0
 10429  001EB4  5174               	movf	___flmul@bexp& (0+255),w,b
 10430  001EB6  E105               	bnz	l8088
 10431  001EB8                     u9100:
 10432                           
 10433                           ; BSR set to: 0
 10434  001EB8  6B66               	clrf	?___flmul& (0+255),b
 10435  001EBA  6B67               	clrf	(?___flmul+1)& (0+255),b
 10436  001EBC  6B68               	clrf	(?___flmul+2)& (0+255),b
 10437  001EBE  6B69               	clrf	(?___flmul+3)& (0+255),b
 10438  001EC0  0012               	return	
 10439  001EC2                     l8088:
 10440                           
 10441                           ; BSR set to: 0
 10442  001EC2  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10443  001EC4  0366               	mulwf	___flmul@b& (0+255),b
 10444                           
 10445                           ; BSR set to: 0
 10446  001EC6  D8B1               	call	PL22	;call to abstracted procedure
 10447  001EC8  6F75               	movwf	___flmul@grs& (0+255),b
 10448  001ECA  6B76               	clrf	(___flmul@grs+1)& (0+255),b
 10449  001ECC  6B77               	clrf	(___flmul@grs+2)& (0+255),b
 10450  001ECE  6B78               	clrf	(___flmul@grs+3)& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453  001ED0  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10454  001ED2  6F79               	movwf	___flmul@prod& (0+255),b
 10455  001ED4  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10456  001ED6  6B7B               	clrf	(___flmul@prod+2)& (0+255),b
 10457  001ED8  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10458  001EDA  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10459  001EDC  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10460                           
 10461                           ; BSR set to: 0
 10462  001EDE  D8A5               	call	PL22	;call to abstracted procedure
 10463                           
 10464                           ; BSR set to: 0
 10465  001EE0  D8B2               	call	PL72	;call to abstracted procedure
 10466  001EE2  516A               	movf	___flmul@a& (0+255),w,b
 10467  001EE4  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10468                           
 10469                           ; BSR set to: 0
 10470  001EE6  D8A1               	call	PL22	;call to abstracted procedure
 10471                           
 10472                           ; BSR set to: 0
 10473  001EE8  D8AE               	call	PL72	;call to abstracted procedure
 10474                           
 10475                           ; BSR set to: 0
 10476  001EEA  D8A5               	call	PL64	;call to abstracted procedure
 10477                           
 10478                           ; BSR set to: 0
 10479  001EEC  516A               	movf	___flmul@a& (0+255),w,b
 10480  001EEE  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10481                           
 10482                           ; BSR set to: 0
 10483  001EF0  D89C               	call	PL22	;call to abstracted procedure
 10484  001EF2  D8B5               	call	PL78	;call to abstracted procedure
 10485                           
 10486                           ; BSR set to: 0
 10487  001EF4  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10488  001EF6  0366               	mulwf	___flmul@b& (0+255),b
 10489                           
 10490                           ; BSR set to: 0
 10491  001EF8  D898               	call	PL22	;call to abstracted procedure
 10492  001EFA  D8B1               	call	PL78	;call to abstracted procedure
 10493                           
 10494                           ; BSR set to: 0
 10495  001EFC  D89C               	call	PL64	;call to abstracted procedure
 10496  001EFE  516A               	movf	___flmul@a& (0+255),w,b
 10497  001F00  0366               	mulwf	___flmul@b& (0+255),b
 10498                           
 10499                           ; BSR set to: 0
 10500  001F02  D893               	call	PL22	;call to abstracted procedure
 10501  001F04  D8AC               	call	PL78	;call to abstracted procedure
 10502                           
 10503                           ; BSR set to: 0
 10504  001F06  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10505  001F08  0367               	mulwf	(___flmul@b+1)& (0+255),b
 10506  001F0A  D88F               	call	PL22	;call to abstracted procedure
 10507  001F0C  D8B4               	call	PL148	;call to abstracted procedure
 10508                           
 10509                           ; BSR set to: 0
 10510  001F0E  516B               	movf	(___flmul@a+1)& (0+255),w,b
 10511  001F10  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10512                           
 10513                           ; BSR set to: 0
 10514  001F12  D88B               	call	PL22	;call to abstracted procedure
 10515  001F14  D8B0               	call	PL148	;call to abstracted procedure
 10516  001F16  516C               	movf	(___flmul@a+2)& (0+255),w,b
 10517  001F18  0368               	mulwf	(___flmul@b+2)& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520  001F1A  D887               	call	PL22	;call to abstracted procedure
 10521  001F1C  6F6E               	movwf	??___flmul& (0+255),b
 10522  001F1E  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10523  001F20  6F6F               	movwf	(??___flmul+1)& (0+255),b
 10524  001F22  6B70               	clrf	(??___flmul+2)& (0+255),b
 10525  001F24  6B71               	clrf	(??___flmul+3)& (0+255),b
 10526  001F26  C070  F071         	movff	??___flmul+2,??___flmul+3
 10527  001F2A  C06F  F070         	movff	??___flmul+1,??___flmul+2
 10528  001F2E  C06E  F06F         	movff	??___flmul,??___flmul+1
 10529  001F32  6B6E               	clrf	??___flmul& (0+255),b
 10530  001F34  516E               	movf	??___flmul& (0+255),w,b
 10531  001F36  2779               	addwf	___flmul@prod& (0+255),f,b
 10532  001F38  516F               	movf	(??___flmul+1)& (0+255),w,b
 10533  001F3A  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10534  001F3C  5170               	movf	(??___flmul+2)& (0+255),w,b
 10535  001F3E  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10536  001F40  5171               	movf	(??___flmul+3)& (0+255),w,b
 10537  001F42  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10538                           
 10539                           ; BSR set to: 0
 10540  001F44  5178               	movf	(___flmul@grs+3)& (0+255),w,b
 10541  001F46  2779               	addwf	___flmul@prod& (0+255),f,b
 10542  001F48  D891               	call	PL144	;call to abstracted procedure
 10543                           
 10544                           ; BSR set to: 0
 10545  001F4A  D875               	call	PL64	;call to abstracted procedure
 10546                           
 10547                           ; BSR set to: 0
 10548  001F4C  5173               	movf	___flmul@aexp& (0+255),w,b
 10549  001F4E  C074  F06E         	movff	___flmul@bexp,??___flmul
 10550  001F52  6B6F               	clrf	(??___flmul+1)& (0+255),b
 10551  001F54  276E               	addwf	??___flmul& (0+255),f,b
 10552  001F56  0E00               	movlw	0
 10553  001F58  236F               	addwfc	(??___flmul+1)& (0+255),f,b
 10554  001F5A  0E82               	movlw	130
 10555  001F5C  256E               	addwf	??___flmul& (0+255),w,b
 10556  001F5E  6F7D               	movwf	___flmul@temp& (0+255),b
 10557  001F60  0EFF               	movlw	255
 10558  001F62  216F               	addwfc	(??___flmul+1)& (0+255),w,b
 10559  001F64  6F7E               	movwf	(___flmul@temp+1)& (0+255),b
 10560  001F66  D00F               	goto	l8136
 10561  001F68                     l8130:
 10562                           
 10563                           ; BSR set to: 0
 10564  001F68  90D8               	bcf	status,0,c
 10565  001F6A  3779               	rlcf	___flmul@prod& (0+255),f,b
 10566  001F6C  377A               	rlcf	(___flmul@prod+1)& (0+255),f,b
 10567  001F6E  377B               	rlcf	(___flmul@prod+2)& (0+255),f,b
 10568  001F70  377C               	rlcf	(___flmul@prod+3)& (0+255),f,b
 10569                           
 10570                           ; BSR set to: 0
 10571  001F72  BF78               	btfsc	(___flmul@grs+3)& (0+255),7,b
 10572                           
 10573                           ; BSR set to: 0
 10574  001F74  8179               	bsf	___flmul@prod& (0+255),0,b
 10575                           
 10576                           ; BSR set to: 0
 10577  001F76  90D8               	bcf	status,0,c
 10578  001F78  3775               	rlcf	___flmul@grs& (0+255),f,b
 10579  001F7A  3776               	rlcf	(___flmul@grs+1)& (0+255),f,b
 10580  001F7C  3777               	rlcf	(___flmul@grs+2)& (0+255),f,b
 10581  001F7E  3778               	rlcf	(___flmul@grs+3)& (0+255),f,b
 10582  001F80  077D               	decf	___flmul@temp& (0+255),f,b
 10583  001F82  A0D8               	btfss	status,0,c
 10584  001F84  077E               	decf	(___flmul@temp+1)& (0+255),f,b
 10585  001F86                     l8136:
 10586                           
 10587                           ; BSR set to: 0
 10588  001F86  AF7B               	btfss	(___flmul@prod+2)& (0+255),7,b
 10589  001F88  D7EF               	goto	l8130
 10590                           
 10591                           ; BSR set to: 0
 10592  001F8A  6B73               	clrf	___flmul@aexp& (0+255),b
 10593  001F8C  AF78               	btfss	(___flmul@grs+3)& (0+255),7,b
 10594  001F8E  D013               	goto	l1356
 10595                           
 10596                           ; BSR set to: 0
 10597  001F90  5175               	movf	___flmul@grs& (0+255),w,b
 10598  001F92  6F6E               	movwf	??___flmul& (0+255),b
 10599  001F94  5176               	movf	(___flmul@grs+1)& (0+255),w,b
 10600  001F96  6F6F               	movwf	(??___flmul+1)& (0+255),b
 10601  001F98  5177               	movf	(___flmul@grs+2)& (0+255),w,b
 10602  001F9A  6F70               	movwf	(??___flmul+2)& (0+255),b
 10603  001F9C  0E7F               	movlw	127
 10604  001F9E  1578               	andwf	(___flmul@grs+3)& (0+255),w,b
 10605  001FA0  6F71               	movwf	(??___flmul+3)& (0+255),b
 10606  001FA2  516E               	movf	??___flmul& (0+255),w,b
 10607  001FA4  116F               	iorwf	(??___flmul+1)& (0+255),w,b
 10608  001FA6  1170               	iorwf	(??___flmul+2)& (0+255),w,b
 10609  001FA8  1171               	iorwf	(??___flmul+3)& (0+255),w,b
 10610  001FAA  E003               	bz	l1357
 10611  001FAC                     u9140:
 10612                           
 10613                           ; BSR set to: 0
 10614  001FAC  0E01               	movlw	1
 10615  001FAE  6F73               	movwf	___flmul@aexp& (0+255),b
 10616  001FB0  D002               	goto	l1356
 10617  001FB2                     l1357:
 10618                           
 10619                           ; BSR set to: 0
 10620  001FB2  B179               	btfsc	___flmul@prod& (0+255),0,b
 10621  001FB4  D7FB               	goto	u9140
 10622  001FB6                     l1356:
 10623                           
 10624                           ; BSR set to: 0
 10625  001FB6  5173               	movf	___flmul@aexp& (0+255),w,b
 10626  001FB8  E00B               	bz	l8152
 10627                           
 10628                           ; BSR set to: 0
 10629  001FBA  2B79               	incf	___flmul@prod& (0+255),f,b
 10630  001FBC  D857               	call	PL144	;call to abstracted procedure
 10631                           
 10632                           ; BSR set to: 0
 10633  001FBE  A17C               	btfss	(___flmul@prod+3)& (0+255),0,b
 10634  001FC0  D007               	goto	l8152
 10635                           
 10636                           ; BSR set to: 0
 10637  001FC2  357C               	rlcf	(___flmul@prod+3)& (0+255),w,b
 10638  001FC4  337C               	rrcf	(___flmul@prod+3)& (0+255),f,b
 10639  001FC6  337B               	rrcf	(___flmul@prod+2)& (0+255),f,b
 10640  001FC8  337A               	rrcf	(___flmul@prod+1)& (0+255),f,b
 10641  001FCA  3379               	rrcf	___flmul@prod& (0+255),f,b
 10642                           
 10643                           ; BSR set to: 0
 10644  001FCC  4B7D               	infsnz	___flmul@temp& (0+255),f,b
 10645  001FCE  2B7E               	incf	(___flmul@temp+1)& (0+255),f,b
 10646  001FD0                     l8152:
 10647                           
 10648                           ; BSR set to: 0
 10649  001FD0  BF7E               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10650  001FD2  D00A               	goto	l8156
 10651  001FD4  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10652  001FD6  E102               	bnz	u9180
 10653  001FD8  297D               	incf	___flmul@temp& (0+255),w,b
 10654  001FDA  E306               	bnc	l8156
 10655  001FDC                     u9180:
 10656                           
 10657                           ; BSR set to: 0
 10658  001FDC  6B79               	clrf	___flmul@prod& (0+255),b
 10659  001FDE  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10660  001FE0  0E80               	movlw	128
 10661  001FE2  6F7B               	movwf	(___flmul@prod+2)& (0+255),b
 10662  001FE4  0E7F               	movlw	127
 10663  001FE6  D015               	goto	L14
 10664  001FE8                     l8156:
 10665                           
 10666                           ; BSR set to: 0
 10667  001FE8  BF7E               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10668  001FEA  D004               	goto	u9190
 10669  001FEC  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10670  001FEE  E108               	bnz	l1364
 10671  001FF0  057D               	decf	___flmul@temp& (0+255),w,b
 10672  001FF2  E206               	bc	l1364
 10673  001FF4                     u9190:
 10674                           
 10675                           ; BSR set to: 0
 10676  001FF4  6B79               	clrf	___flmul@prod& (0+255),b
 10677  001FF6  6B7A               	clrf	(___flmul@prod+1)& (0+255),b
 10678  001FF8  6B7B               	clrf	(___flmul@prod+2)& (0+255),b
 10679  001FFA  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10680  001FFC  6B72               	clrf	___flmul@sign& (0+255),b
 10681  001FFE  D00A               	goto	l8168
 10682  002000                     l1364:
 10683                           
 10684                           ; BSR set to: 0
 10685  002000  C07D  F074         	movff	___flmul@temp,___flmul@bexp
 10686                           
 10687                           ; BSR set to: 0
 10688  002004  0E7F               	movlw	127
 10689  002006  177B               	andwf	(___flmul@prod+2)& (0+255),f,b
 10690  002008  6B7C               	clrf	(___flmul@prod+3)& (0+255),b
 10691                           
 10692                           ; BSR set to: 0
 10693  00200A  B174               	btfsc	___flmul@bexp& (0+255),0,b
 10694                           
 10695                           ; BSR set to: 0
 10696  00200C  8F7B               	bsf	(___flmul@prod+2)& (0+255),7,b
 10697                           
 10698                           ; BSR set to: 0
 10699  00200E  90D8               	bcf	status,0,c
 10700  002010  3174               	rrcf	___flmul@bexp& (0+255),w,b
 10701  002012                     L14:
 10702  002012  6F7C               	movwf	(___flmul@prod+3)& (0+255),b
 10703  002014                     l8168:
 10704                           
 10705                           ; BSR set to: 0
 10706  002014  5172               	movf	___flmul@sign& (0+255),w,b
 10707  002016  137C               	iorwf	(___flmul@prod+3)& (0+255),f,b
 10708                           
 10709                           ; BSR set to: 0
 10710  002018  C079  F066         	movff	___flmul@prod,?___flmul
 10711  00201C  C07A  F067         	movff	___flmul@prod+1,?___flmul+1
 10712  002020  C07B  F068         	movff	___flmul@prod+2,?___flmul+2
 10713  002024  C07C  F069         	movff	___flmul@prod+3,?___flmul+3
 10714                           
 10715                           ; BSR set to: 0
 10716  002028  0012               	return		;funcret
 10717  00202A                     __end_of___flmul:
 10718                           	callstack 0
 10719  00202A                     PL22:
 10720                           	callstack 26
 10721  00202A  CFF3 F07D          	movff	prodl,___flmul@temp
 10722  00202E  CFF4 F07E          	movff	prodh,___flmul@temp+1
 10723  002032  517D               	movf	___flmul@temp& (0+255),w,b
 10724  002034  0012               	return	
 10725  002036                     __end_ofPL22:
 10726                           	callstack 0
 10727  002036                     PL64:
 10728                           	callstack 26
 10729  002036  C077  F078         	movff	___flmul@grs+2,___flmul@grs+3
 10730  00203A  C076  F077         	movff	___flmul@grs+1,___flmul@grs+2
 10731  00203E  C075  F076         	movff	___flmul@grs,___flmul@grs+1
 10732  002042  6B75               	clrf	___flmul@grs& (0+255),b
 10733  002044  0012               	return	
 10734  002046                     __end_ofPL64:
 10735                           	callstack 0
 10736  002046                     PL72:
 10737                           	callstack 26
 10738  002046  2775               	addwf	___flmul@grs& (0+255),f,b
 10739  002048  0E00               	movlw	0
 10740  00204A  2376               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10741  00204C  2377               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10742  00204E  2378               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10743  002050  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10744  002052  2779               	addwf	___flmul@prod& (0+255),f,b
 10745  002054  0E00               	movlw	0
 10746  002056  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10747  002058  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10748  00205A  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10749  00205C  0C00               	retlw	0
 10750  00205E                     __end_ofPL72:
 10751                           	callstack 0
 10752  00205E                     PL78:
 10753                           	callstack 26
 10754  00205E  2775               	addwf	___flmul@grs& (0+255),f,b
 10755  002060  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10756  002062  2376               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10757  002064  0E00               	movlw	0
 10758  002066  2377               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10759  002068  2378               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10760  00206A  0C00               	retlw	0
 10761  00206C                     __end_ofPL78:
 10762                           	callstack 0
 10763  00206C                     PL144:
 10764                           	callstack 26
 10765  00206C  0E00               	movlw	0
 10766  00206E  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10767  002070  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10768  002072  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10769  002074  0C00               	retlw	0
 10770  002076                     __end_ofPL144:
 10771                           	callstack 0
 10772  002076                     PL148:
 10773                           	callstack 26
 10774  002076  2779               	addwf	___flmul@prod& (0+255),f,b
 10775  002078  517E               	movf	(___flmul@temp+1)& (0+255),w,b
 10776  00207A  237A               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10777  00207C  0E00               	movlw	0
 10778  00207E  237B               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10779  002080  237C               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10780  002082  0C00               	retlw	0
 10781  002084                     __end_ofPL148:
 10782                           	callstack 0
 10783  002084                     PL192:
 10784                           	callstack 26
 10785  002084  6B6A               	clrf	___flmul@a& (0+255),b
 10786  002086  6B6B               	clrf	(___flmul@a+1)& (0+255),b
 10787  002088  6B6C               	clrf	(___flmul@a+2)& (0+255),b
 10788  00208A  6B6D               	clrf	(___flmul@a+3)& (0+255),b
 10789  00208C  0012               	return	
 10790  00208E                     __end_ofPL192:
 10791                           	callstack 0
 10792  00208E                     PL200:
 10793                           	callstack 26
 10794  00208E  6B66               	clrf	___flmul@b& (0+255),b
 10795  002090  6B67               	clrf	(___flmul@b+1)& (0+255),b
 10796  002092  6B68               	clrf	(___flmul@b+2)& (0+255),b
 10797  002094  6B69               	clrf	(___flmul@b+3)& (0+255),b
 10798  002096  0012               	return	
 10799  002098                     __end_ofPL200:
 10800                           	callstack 0
 10801                           
 10802 ;; *************** function ___flge *****************
 10803 ;; Defined at:
 10804 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flge.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;  ff1             4   31[BANK0 ] unsigned char 
 10807 ;;  ff2             4   35[BANK0 ] unsigned char 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;		None               void
 10812 ;; Registers used:
 10813 ;;		wreg, status,2, status,0
 10814 ;; Tracked objects:
 10815 ;;		On entry : 3E/0
 10816 ;;		On exit  : 3F/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10819 ;;      Params:         0       8       0       0       0       0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0
 10821 ;;      Temps:          0       4       0       0       0       0       0
 10822 ;;      Totals:         0      12       0       0       0       0       0
 10823 ;;Total ram usage:       12 bytes
 10824 ;; Hardware stack levels used: 1
 10825 ;; Hardware stack levels required when called: 3
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_efgtoa
 10830 ;;		_sqrtf
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text27
 10835  003382                     __ptext27:
 10836                           	callstack 0
 10837  003382                     ___flge:
 10838                           	callstack 26
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;incstack = 0
 10842  003382  0100               	movlb	0	; () banked
 10843  003384  6B87               	clrf	??___flge& (0+255),b
 10844  003386  6B88               	clrf	(??___flge+1)& (0+255),b
 10845  003388  0E80               	movlw	128
 10846  00338A  1581               	andwf	(___flge@ff1+2)& (0+255),w,b
 10847  00338C  6F89               	movwf	(??___flge+2)& (0+255),b
 10848  00338E  0E7F               	movlw	127
 10849  003390  1582               	andwf	(___flge@ff1+3)& (0+255),w,b
 10850  003392  D838               	call	PL160	;call to abstracted procedure
 10851  003394  E104               	bnz	l8280
 10852                           
 10853                           ; BSR set to: 0
 10854  003396  6B7F               	clrf	___flge@ff1& (0+255),b
 10855  003398  6B80               	clrf	(___flge@ff1+1)& (0+255),b
 10856  00339A  6B81               	clrf	(___flge@ff1+2)& (0+255),b
 10857  00339C  6B82               	clrf	(___flge@ff1+3)& (0+255),b
 10858  00339E                     l8280:
 10859                           
 10860                           ; BSR set to: 0
 10861  00339E  6B87               	clrf	??___flge& (0+255),b
 10862  0033A0  6B88               	clrf	(??___flge+1)& (0+255),b
 10863  0033A2  0E80               	movlw	128
 10864  0033A4  1585               	andwf	(___flge@ff2+2)& (0+255),w,b
 10865  0033A6  6F89               	movwf	(??___flge+2)& (0+255),b
 10866  0033A8  0E7F               	movlw	127
 10867  0033AA  1586               	andwf	(___flge@ff2+3)& (0+255),w,b
 10868  0033AC  D82B               	call	PL160	;call to abstracted procedure
 10869  0033AE  E104               	bnz	l996
 10870                           
 10871                           ; BSR set to: 0
 10872  0033B0  6B83               	clrf	___flge@ff2& (0+255),b
 10873  0033B2  6B84               	clrf	(___flge@ff2+1)& (0+255),b
 10874  0033B4  6B85               	clrf	(___flge@ff2+2)& (0+255),b
 10875  0033B6  6B86               	clrf	(___flge@ff2+3)& (0+255),b
 10876  0033B8                     l996:
 10877                           
 10878                           ; BSR set to: 0
 10879  0033B8  AF82               	btfss	(___flge@ff1+3)& (0+255),7,b
 10880  0033BA  D009               	goto	l8286
 10881                           
 10882                           ; BSR set to: 0
 10883  0033BC  6D7F               	negf	___flge@ff1& (0+255),b
 10884  0033BE  1F80               	comf	(___flge@ff1+1)& (0+255),f,b
 10885  0033C0  B0D8               	btfsc	status,0,c
 10886  0033C2  2B80               	incf	(___flge@ff1+1)& (0+255),f,b
 10887  0033C4  1F81               	comf	(___flge@ff1+2)& (0+255),f,b
 10888  0033C6  B0D8               	btfsc	status,0,c
 10889  0033C8  2B81               	incf	(___flge@ff1+2)& (0+255),f,b
 10890  0033CA  0E80               	movlw	128
 10891  0033CC  5782               	subfwb	(___flge@ff1+3)& (0+255),f,b
 10892  0033CE                     l8286:
 10893                           
 10894                           ; BSR set to: 0
 10895  0033CE  AF86               	btfss	(___flge@ff2+3)& (0+255),7,b
 10896  0033D0  D009               	goto	l998
 10897                           
 10898                           ; BSR set to: 0
 10899  0033D2  6D83               	negf	___flge@ff2& (0+255),b
 10900  0033D4  1F84               	comf	(___flge@ff2+1)& (0+255),f,b
 10901  0033D6  B0D8               	btfsc	status,0,c
 10902  0033D8  2B84               	incf	(___flge@ff2+1)& (0+255),f,b
 10903  0033DA  1F85               	comf	(___flge@ff2+2)& (0+255),f,b
 10904  0033DC  B0D8               	btfsc	status,0,c
 10905  0033DE  2B85               	incf	(___flge@ff2+2)& (0+255),f,b
 10906  0033E0  0E80               	movlw	128
 10907  0033E2  5786               	subfwb	(___flge@ff2+3)& (0+255),f,b
 10908  0033E4                     l998:
 10909                           
 10910                           ; BSR set to: 0
 10911  0033E4  0E80               	movlw	128
 10912  0033E6  1B82               	xorwf	(___flge@ff1+3)& (0+255),f,b
 10913  0033E8  1B86               	xorwf	(___flge@ff2+3)& (0+255),f,b
 10914  0033EA  5183               	movf	___flge@ff2& (0+255),w,b
 10915  0033EC  5D7F               	subwf	___flge@ff1& (0+255),w,b
 10916  0033EE  5184               	movf	(___flge@ff2+1)& (0+255),w,b
 10917  0033F0  5980               	subwfb	(___flge@ff1+1)& (0+255),w,b
 10918  0033F2  5185               	movf	(___flge@ff2+2)& (0+255),w,b
 10919  0033F4  5981               	subwfb	(___flge@ff1+2)& (0+255),w,b
 10920  0033F6  5186               	movf	(___flge@ff2+3)& (0+255),w,b
 10921  0033F8  5982               	subwfb	(___flge@ff1+3)& (0+255),w,b
 10922  0033FA  E202               	bc	l8292
 10923                           
 10924                           ; BSR set to: 0
 10925  0033FC  90D8               	bcf	status,0,c
 10926  0033FE  0012               	return	
 10927  003400                     l8292:
 10928                           
 10929                           ; BSR set to: 0
 10930  003400  80D8               	bsf	status,0,c
 10931                           
 10932                           ; BSR set to: 0
 10933  003402  0012               	return		;funcret
 10934  003404                     __end_of___flge:
 10935                           	callstack 0
 10936  003404                     PL160:
 10937                           	callstack 26
 10938  003404  6F8A               	movwf	(??___flge+3)& (0+255),b
 10939  003406  5187               	movf	??___flge& (0+255),w,b
 10940  003408  1188               	iorwf	(??___flge+1)& (0+255),w,b
 10941  00340A  1189               	iorwf	(??___flge+2)& (0+255),w,b
 10942  00340C  118A               	iorwf	(??___flge+3)& (0+255),w,b
 10943  00340E  0012               	return	
 10944  003410                     __end_ofPL160:
 10945                           	callstack 0
 10946                           
 10947 ;; *************** function ___fleq *****************
 10948 ;; Defined at:
 10949 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fleq.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  ff1             4   25[COMRAM] unsigned char 
 10952 ;;  ff2             4   29[COMRAM] unsigned char 
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;		None
 10955 ;; Return value:  Size  Location     Type
 10956 ;;		None               void
 10957 ;; Registers used:
 10958 ;;		wreg, status,2, status,0
 10959 ;; Tracked objects:
 10960 ;;		On entry : 3E/1
 10961 ;;		On exit  : 3F/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10964 ;;      Params:         8       0       0       0       0       0       0
 10965 ;;      Locals:         0       0       0       0       0       0       0
 10966 ;;      Temps:          0       4       0       0       0       0       0
 10967 ;;      Totals:         8       4       0       0       0       0       0
 10968 ;;Total ram usage:       12 bytes
 10969 ;; Hardware stack levels used: 1
 10970 ;; Hardware stack levels required when called: 3
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_efgtoa
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text28
 10979  003700                     __ptext28:
 10980                           	callstack 0
 10981  003700                     ___fleq:
 10982                           	callstack 23
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;incstack = 0
 10986  003700  0100               	movlb	0	; () banked
 10987  003702  6B60               	clrf	??___fleq& (0+255),b
 10988  003704  6B61               	clrf	(??___fleq+1)& (0+255),b
 10989  003706  0E80               	movlw	128
 10990  003708  141C               	andwf	(___fleq@ff1+2)^0,w,c
 10991  00370A  6F62               	movwf	(??___fleq+2)& (0+255),b
 10992  00370C  0E7F               	movlw	127
 10993  00370E  141D               	andwf	(___fleq@ff1+3)^0,w,c
 10994  003710  D820               	call	PL170	;call to abstracted procedure
 10995  003712  E104               	bnz	l8264
 10996                           
 10997                           ; BSR set to: 0
 10998  003714  6A1A               	clrf	___fleq@ff1^0,c
 10999  003716  6A1B               	clrf	(___fleq@ff1+1)^0,c
 11000  003718  6A1C               	clrf	(___fleq@ff1+2)^0,c
 11001  00371A  6A1D               	clrf	(___fleq@ff1+3)^0,c
 11002  00371C                     l8264:
 11003                           
 11004                           ; BSR set to: 0
 11005  00371C  6B60               	clrf	??___fleq& (0+255),b
 11006  00371E  6B61               	clrf	(??___fleq+1)& (0+255),b
 11007  003720  0E80               	movlw	128
 11008  003722  1420               	andwf	(___fleq@ff2+2)^0,w,c
 11009  003724  6F62               	movwf	(??___fleq+2)& (0+255),b
 11010  003726  0E7F               	movlw	127
 11011  003728  1421               	andwf	(___fleq@ff2+3)^0,w,c
 11012  00372A  D813               	call	PL170	;call to abstracted procedure
 11013  00372C  E102               	bnz	l8268
 11014                           
 11015                           ; BSR set to: 0
 11016  00372E  EC86  F008         	call	PL180	;call to abstracted procedure
 11017  003732                     l8268:
 11018                           
 11019                           ; BSR set to: 0
 11020  003732  501E               	movf	___fleq@ff2^0,w,c
 11021  003734  181A               	xorwf	___fleq@ff1^0,w,c
 11022  003736  E109               	bnz	u9350
 11023  003738  501F               	movf	(___fleq@ff2+1)^0,w,c
 11024  00373A  181B               	xorwf	(___fleq@ff1+1)^0,w,c
 11025  00373C  E106               	bnz	u9350
 11026  00373E  5020               	movf	(___fleq@ff2+2)^0,w,c
 11027  003740  181C               	xorwf	(___fleq@ff1+2)^0,w,c
 11028  003742  E103               	bnz	u9350
 11029  003744  5021               	movf	(___fleq@ff2+3)^0,w,c
 11030  003746  181D               	xorwf	(___fleq@ff1+3)^0,w,c
 11031  003748  E002               	bz	l8272
 11032  00374A                     u9350:
 11033                           
 11034                           ; BSR set to: 0
 11035  00374A  90D8               	bcf	status,0,c
 11036  00374C  0012               	return	
 11037  00374E                     l8272:
 11038                           
 11039                           ; BSR set to: 0
 11040  00374E  80D8               	bsf	status,0,c
 11041                           
 11042                           ; BSR set to: 0
 11043  003750  0012               	return		;funcret
 11044  003752                     __end_of___fleq:
 11045                           	callstack 0
 11046  003752                     PL170:
 11047                           	callstack 23
 11048  003752  6F63               	movwf	(??___fleq+3)& (0+255),b
 11049  003754  5160               	movf	??___fleq& (0+255),w,b
 11050  003756  1161               	iorwf	(??___fleq+1)& (0+255),w,b
 11051  003758  1162               	iorwf	(??___fleq+2)& (0+255),w,b
 11052  00375A  1163               	iorwf	(??___fleq+3)& (0+255),w,b
 11053  00375C  0012               	return	
 11054  00375E                     __end_ofPL170:
 11055                           	callstack 0
 11056                           
 11057 ;; *************** function ___fldiv *****************
 11058 ;; Defined at:
 11059 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcdiv.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  b               4    6[BANK0 ] unsigned char 
 11062 ;;  a               4   10[BANK0 ] unsigned char 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;  grs             4   25[BANK0 ] unsigned long 
 11065 ;;  rem             4   18[BANK0 ] unsigned long 
 11066 ;;  new_exp         2   23[BANK0 ] short 
 11067 ;;  aexp            1   30[BANK0 ] unsigned char 
 11068 ;;  bexp            1   29[BANK0 ] unsigned char 
 11069 ;;  sign            1   22[BANK0 ] unsigned char 
 11070 ;; Return value:  Size  Location     Type
 11071 ;;                  4    6[BANK0 ] unsigned char 
 11072 ;; Registers used:
 11073 ;;		wreg, status,2, status,0
 11074 ;; Tracked objects:
 11075 ;;		On entry : 3E/0
 11076 ;;		On exit  : 3F/0
 11077 ;;		Unchanged: 0/0
 11078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11079 ;;      Params:         0       8       0       0       0       0       0
 11080 ;;      Locals:         0      13       0       0       0       0       0
 11081 ;;      Temps:          0       4       0       0       0       0       0
 11082 ;;      Totals:         0      25       0       0       0       0       0
 11083 ;;Total ram usage:       25 bytes
 11084 ;; Hardware stack levels used: 1
 11085 ;; Hardware stack levels required when called: 3
 11086 ;; This function calls:
 11087 ;;		Nothing
 11088 ;; This function is called by:
 11089 ;;		_main
 11090 ;;		_efgtoa
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           	psect	text29
 11095  002098                     __ptext29:
 11096                           	callstack 0
 11097  002098                     ___fldiv:
 11098                           	callstack 23
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;incstack = 0
 11102  002098  0100               	movlb	0	; () banked
 11103  00209A  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 11104  00209C  0B80               	andlw	128
 11105  00209E  6F76               	movwf	___fldiv@sign& (0+255),b
 11106  0020A0  5169               	movf	(___fldiv@b+3)& (0+255),w,b
 11107  0020A2  2569               	addwf	(___fldiv@b+3)& (0+255),w,b
 11108  0020A4  6F7D               	movwf	___fldiv@bexp& (0+255),b
 11109                           
 11110                           ; BSR set to: 0
 11111  0020A6  BF68               	btfsc	(___fldiv@b+2)& (0+255),7,b
 11112                           
 11113                           ; BSR set to: 0
 11114  0020A8  817D               	bsf	___fldiv@bexp& (0+255),0,b
 11115                           
 11116                           ; BSR set to: 0
 11117  0020AA  517D               	movf	___fldiv@bexp& (0+255),w,b
 11118  0020AC  E005               	bz	l1307
 11119                           
 11120                           ; BSR set to: 0
 11121  0020AE  297D               	incf	___fldiv@bexp& (0+255),w,b
 11122  0020B0  E101               	bnz	l7948
 11123                           
 11124                           ; BSR set to: 0
 11125  0020B2  D8D0               	call	PL84	;call to abstracted procedure
 11126  0020B4                     l7948:
 11127                           
 11128                           ; BSR set to: 0
 11129  0020B4  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 11130  0020B6  D003               	goto	L15
 11131  0020B8                     l1307:
 11132                           
 11133                           ; BSR set to: 0
 11134  0020B8  6B66               	clrf	___fldiv@b& (0+255),b
 11135  0020BA  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 11136  0020BC  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 11137  0020BE                     L15:
 11138  0020BE  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 11139                           
 11140                           ; BSR set to: 0
 11141  0020C0  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11142  0020C2  0B80               	andlw	128
 11143  0020C4  1B76               	xorwf	___fldiv@sign& (0+255),f,b
 11144  0020C6  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11145  0020C8  256D               	addwf	(___fldiv@a+3)& (0+255),w,b
 11146  0020CA  6F7E               	movwf	___fldiv@aexp& (0+255),b
 11147                           
 11148                           ; BSR set to: 0
 11149  0020CC  BF6C               	btfsc	(___fldiv@a+2)& (0+255),7,b
 11150                           
 11151                           ; BSR set to: 0
 11152  0020CE  817E               	bsf	___fldiv@aexp& (0+255),0,b
 11153                           
 11154                           ; BSR set to: 0
 11155  0020D0  517E               	movf	___fldiv@aexp& (0+255),w,b
 11156  0020D2  E008               	bz	l1311
 11157                           
 11158                           ; BSR set to: 0
 11159  0020D4  297E               	incf	___fldiv@aexp& (0+255),w,b
 11160  0020D6  E104               	bnz	l7964
 11161                           
 11162                           ; BSR set to: 0
 11163  0020D8  6B6A               	clrf	___fldiv@a& (0+255),b
 11164  0020DA  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 11165  0020DC  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 11166  0020DE  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 11167  0020E0                     l7964:
 11168                           
 11169                           ; BSR set to: 0
 11170  0020E0  8F6C               	bsf	(___fldiv@a+2)& (0+255),7,b
 11171  0020E2  D003               	goto	L16
 11172  0020E4                     l1311:
 11173                           
 11174                           ; BSR set to: 0
 11175  0020E4  6B6A               	clrf	___fldiv@a& (0+255),b
 11176  0020E6  6B6B               	clrf	(___fldiv@a+1)& (0+255),b
 11177  0020E8  6B6C               	clrf	(___fldiv@a+2)& (0+255),b
 11178  0020EA                     L16:
 11179  0020EA  6B6D               	clrf	(___fldiv@a+3)& (0+255),b
 11180                           
 11181                           ; BSR set to: 0
 11182  0020EC  516A               	movf	___fldiv@a& (0+255),w,b
 11183  0020EE  116B               	iorwf	(___fldiv@a+1)& (0+255),w,b
 11184  0020F0  116C               	iorwf	(___fldiv@a+2)& (0+255),w,b
 11185  0020F2  116D               	iorwf	(___fldiv@a+3)& (0+255),w,b
 11186  0020F4  E110               	bnz	l7978
 11187                           
 11188                           ; BSR set to: 0
 11189  0020F6  D8AE               	call	PL84	;call to abstracted procedure
 11190                           
 11191                           ; BSR set to: 0
 11192  0020F8  0E80               	movlw	128
 11193  0020FA  1368               	iorwf	(___fldiv@b+2)& (0+255),f,b
 11194  0020FC  0E7F               	movlw	127
 11195  0020FE  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11196  002100  5176               	movf	___fldiv@sign& (0+255),w,b
 11197  002102  1369               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11198                           
 11199                           ; BSR set to: 0
 11200  002104  C066  F066         	movff	___fldiv@b,?___fldiv
 11201  002108  C067  F067         	movff	___fldiv@b+1,?___fldiv+1
 11202  00210C  C068  F068         	movff	___fldiv@b+2,?___fldiv+2
 11203  002110  C069  F069         	movff	___fldiv@b+3,?___fldiv+3
 11204  002114  0012               	return	
 11205  002116                     l7978:
 11206                           
 11207                           ; BSR set to: 0
 11208  002116  517D               	movf	___fldiv@bexp& (0+255),w,b
 11209  002118  E105               	bnz	l7982
 11210                           
 11211                           ; BSR set to: 0
 11212  00211A  6B66               	clrf	?___fldiv& (0+255),b
 11213  00211C  6B67               	clrf	(?___fldiv+1)& (0+255),b
 11214  00211E  6B68               	clrf	(?___fldiv+2)& (0+255),b
 11215  002120  6B69               	clrf	(?___fldiv+3)& (0+255),b
 11216  002122  0012               	return	
 11217  002124                     l7982:
 11218                           
 11219                           ; BSR set to: 0
 11220  002124  517E               	movf	___fldiv@aexp& (0+255),w,b
 11221  002126  C07D  F06E         	movff	___fldiv@bexp,??___fldiv
 11222  00212A  6B6F               	clrf	(??___fldiv+1)& (0+255),b
 11223  00212C  5F6E               	subwf	??___fldiv& (0+255),f,b
 11224  00212E  0E00               	movlw	0
 11225  002130  5B6F               	subwfb	(??___fldiv+1)& (0+255),f,b
 11226  002132  0E7F               	movlw	127
 11227  002134  256E               	addwf	??___fldiv& (0+255),w,b
 11228  002136  6F77               	movwf	___fldiv@new_exp& (0+255),b
 11229  002138  0E00               	movlw	0
 11230  00213A  216F               	addwfc	(??___fldiv+1)& (0+255),w,b
 11231  00213C  6F78               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11232                           
 11233                           ; BSR set to: 0
 11234  00213E  C066  F072         	movff	___fldiv@b,___fldiv@rem
 11235  002142  C067  F073         	movff	___fldiv@b+1,___fldiv@rem+1
 11236  002146  C068  F074         	movff	___fldiv@b+2,___fldiv@rem+2
 11237  00214A  C069  F075         	movff	___fldiv@b+3,___fldiv@rem+3
 11238                           
 11239                           ; BSR set to: 0
 11240  00214E  D882               	call	PL84	;call to abstracted procedure
 11241                           
 11242                           ; BSR set to: 0
 11243  002150  6B79               	clrf	___fldiv@grs& (0+255),b
 11244  002152  6B7A               	clrf	(___fldiv@grs+1)& (0+255),b
 11245  002154  6B7B               	clrf	(___fldiv@grs+2)& (0+255),b
 11246  002156  6B7C               	clrf	(___fldiv@grs+3)& (0+255),b
 11247                           
 11248                           ; BSR set to: 0
 11249  002158  6B7E               	clrf	___fldiv@aexp& (0+255),b
 11250  00215A  D01B               	goto	l1317
 11251  00215C                     l7992:
 11252                           
 11253                           ; BSR set to: 0
 11254  00215C  517E               	movf	___fldiv@aexp& (0+255),w,b
 11255  00215E  E006               	bz	l8000
 11256                           
 11257                           ; BSR set to: 0
 11258  002160  90D8               	bcf	status,0,c
 11259  002162  3772               	rlcf	___fldiv@rem& (0+255),f,b
 11260  002164  3773               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 11261  002166  3774               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 11262  002168  3775               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 11263                           
 11264                           ; BSR set to: 0
 11265                           
 11266                           ; BSR set to: 0
 11267                           
 11268                           ; BSR set to: 0
 11269  00216A  D867               	call	PL60	;call to abstracted procedure
 11270  00216C                     l8000:
 11271                           
 11272                           ; BSR set to: 0
 11273  00216C  516A               	movf	___fldiv@a& (0+255),w,b
 11274  00216E  5D72               	subwf	___fldiv@rem& (0+255),w,b
 11275  002170  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 11276  002172  5973               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 11277  002174  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 11278  002176  5974               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 11279  002178  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11280  00217A  5975               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 11281  00217C  E309               	bnc	l8006
 11282                           
 11283                           ; BSR set to: 0
 11284  00217E  8D7C               	bsf	(___fldiv@grs+3)& (0+255),6,b
 11285                           
 11286                           ; BSR set to: 0
 11287  002180  516A               	movf	___fldiv@a& (0+255),w,b
 11288  002182  5F72               	subwf	___fldiv@rem& (0+255),f,b
 11289  002184  516B               	movf	(___fldiv@a+1)& (0+255),w,b
 11290  002186  5B73               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 11291  002188  516C               	movf	(___fldiv@a+2)& (0+255),w,b
 11292  00218A  5B74               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 11293  00218C  516D               	movf	(___fldiv@a+3)& (0+255),w,b
 11294  00218E  5B75               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 11295  002190                     l8006:
 11296                           
 11297                           ; BSR set to: 0
 11298  002190  2B7E               	incf	___fldiv@aexp& (0+255),f,b
 11299  002192                     l1317:
 11300                           
 11301                           ; BSR set to: 0
 11302  002192  0E19               	movlw	25
 11303  002194  657E               	cpfsgt	___fldiv@aexp& (0+255),b
 11304  002196  D7E2               	goto	l7992
 11305                           
 11306                           ; BSR set to: 0
 11307  002198  5172               	movf	___fldiv@rem& (0+255),w,b
 11308  00219A  1173               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 11309  00219C  1174               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 11310  00219E  1175               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 11311  0021A0  E006               	bz	l8018
 11312                           
 11313                           ; BSR set to: 0
 11314  0021A2  8179               	bsf	___fldiv@grs& (0+255),0,b
 11315  0021A4  D004               	goto	l8018
 11316  0021A6                     l8012:
 11317                           
 11318                           ; BSR set to: 0
 11319                           
 11320                           ; BSR set to: 0
 11321                           
 11322                           ; BSR set to: 0
 11323                           
 11324                           ; BSR set to: 0
 11325  0021A6  D849               	call	PL60	;call to abstracted procedure
 11326  0021A8  0777               	decf	___fldiv@new_exp& (0+255),f,b
 11327  0021AA  A0D8               	btfss	status,0,c
 11328  0021AC  0778               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 11329  0021AE                     l8018:
 11330                           
 11331                           ; BSR set to: 0
 11332  0021AE  AF68               	btfss	(___fldiv@b+2)& (0+255),7,b
 11333  0021B0  D7FA               	goto	l8012
 11334                           
 11335                           ; BSR set to: 0
 11336  0021B2  6B7E               	clrf	___fldiv@aexp& (0+255),b
 11337  0021B4  AF7C               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11338  0021B6  D013               	goto	l1328
 11339                           
 11340                           ; BSR set to: 0
 11341  0021B8  5179               	movf	___fldiv@grs& (0+255),w,b
 11342  0021BA  6F6E               	movwf	??___fldiv& (0+255),b
 11343  0021BC  517A               	movf	(___fldiv@grs+1)& (0+255),w,b
 11344  0021BE  6F6F               	movwf	(??___fldiv+1)& (0+255),b
 11345  0021C0  517B               	movf	(___fldiv@grs+2)& (0+255),w,b
 11346  0021C2  6F70               	movwf	(??___fldiv+2)& (0+255),b
 11347  0021C4  0E7F               	movlw	127
 11348  0021C6  157C               	andwf	(___fldiv@grs+3)& (0+255),w,b
 11349  0021C8  6F71               	movwf	(??___fldiv+3)& (0+255),b
 11350  0021CA  516E               	movf	??___fldiv& (0+255),w,b
 11351  0021CC  116F               	iorwf	(??___fldiv+1)& (0+255),w,b
 11352  0021CE  1170               	iorwf	(??___fldiv+2)& (0+255),w,b
 11353  0021D0  1171               	iorwf	(??___fldiv+3)& (0+255),w,b
 11354  0021D2  E003               	bz	l1329
 11355  0021D4                     u8960:
 11356                           
 11357                           ; BSR set to: 0
 11358  0021D4  0E01               	movlw	1
 11359  0021D6  6F7E               	movwf	___fldiv@aexp& (0+255),b
 11360  0021D8  D002               	goto	l1328
 11361  0021DA                     l1329:
 11362                           
 11363                           ; BSR set to: 0
 11364  0021DA  B166               	btfsc	___fldiv@b& (0+255),0,b
 11365  0021DC  D7FB               	goto	u8960
 11366  0021DE                     l1328:
 11367                           
 11368                           ; BSR set to: 0
 11369  0021DE  517E               	movf	___fldiv@aexp& (0+255),w,b
 11370  0021E0  E00E               	bz	l8034
 11371                           
 11372                           ; BSR set to: 0
 11373  0021E2  2B66               	incf	___fldiv@b& (0+255),f,b
 11374  0021E4  0E00               	movlw	0
 11375  0021E6  2367               	addwfc	(___fldiv@b+1)& (0+255),f,b
 11376  0021E8  2368               	addwfc	(___fldiv@b+2)& (0+255),f,b
 11377  0021EA  2369               	addwfc	(___fldiv@b+3)& (0+255),f,b
 11378                           
 11379                           ; BSR set to: 0
 11380  0021EC  A169               	btfss	(___fldiv@b+3)& (0+255),0,b
 11381  0021EE  D007               	goto	l8034
 11382                           
 11383                           ; BSR set to: 0
 11384  0021F0  3569               	rlcf	(___fldiv@b+3)& (0+255),w,b
 11385  0021F2  3369               	rrcf	(___fldiv@b+3)& (0+255),f,b
 11386  0021F4  3368               	rrcf	(___fldiv@b+2)& (0+255),f,b
 11387  0021F6  3367               	rrcf	(___fldiv@b+1)& (0+255),f,b
 11388  0021F8  3366               	rrcf	___fldiv@b& (0+255),f,b
 11389                           
 11390                           ; BSR set to: 0
 11391  0021FA  4B77               	infsnz	___fldiv@new_exp& (0+255),f,b
 11392  0021FC  2B78               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 11393  0021FE                     l8034:
 11394                           
 11395                           ; BSR set to: 0
 11396  0021FE  BF78               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11397  002200  D007               	goto	l8040
 11398  002202  5178               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11399  002204  E102               	bnz	u9000
 11400  002206  2977               	incf	___fldiv@new_exp& (0+255),w,b
 11401  002208  E303               	bnc	l8040
 11402  00220A                     u9000:
 11403                           
 11404                           ; BSR set to: 0
 11405  00220A  6B78               	clrf	(___fldiv@new_exp+1)& (0+255),b
 11406  00220C  6977               	setf	___fldiv@new_exp& (0+255),b
 11407                           
 11408                           ; BSR set to: 0
 11409  00220E  D822               	call	PL84	;call to abstracted procedure
 11410  002210                     l8040:
 11411                           
 11412                           ; BSR set to: 0
 11413  002210  BF78               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11414  002212  D004               	goto	u9010
 11415  002214  5178               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11416  002216  E106               	bnz	l1335
 11417  002218  0577               	decf	___fldiv@new_exp& (0+255),w,b
 11418  00221A  E204               	bc	l1335
 11419  00221C                     u9010:
 11420                           
 11421                           ; BSR set to: 0
 11422  00221C  6B77               	clrf	___fldiv@new_exp& (0+255),b
 11423  00221E  6B78               	clrf	(___fldiv@new_exp+1)& (0+255),b
 11424  002220  D819               	call	PL84	;call to abstracted procedure
 11425  002222  6B76               	clrf	___fldiv@sign& (0+255),b
 11426  002224                     l1335:
 11427                           
 11428                           ; BSR set to: 0
 11429  002224  C077  F07D         	movff	___fldiv@new_exp,___fldiv@bexp
 11430  002228  A17D               	btfss	___fldiv@bexp& (0+255),0,b
 11431  00222A  D002               	goto	l8046
 11432                           
 11433                           ; BSR set to: 0
 11434  00222C  8F68               	bsf	(___fldiv@b+2)& (0+255),7,b
 11435  00222E  D001               	goto	l8048
 11436  002230                     l8046:
 11437                           
 11438                           ; BSR set to: 0
 11439  002230  9F68               	bcf	(___fldiv@b+2)& (0+255),7,b
 11440  002232                     l8048:
 11441                           
 11442                           ; BSR set to: 0
 11443  002232  90D8               	bcf	status,0,c
 11444  002234  317D               	rrcf	___fldiv@bexp& (0+255),w,b
 11445  002236  6F69               	movwf	(___fldiv@b+3)& (0+255),b
 11446  002238  D763               	goto	L17
 11447  00223A                     __end_of___fldiv:
 11448                           	callstack 0
 11449  00223A                     PL60:
 11450                           	callstack 23
 11451  00223A  90D8               	bcf	status,0,c
 11452  00223C  3766               	rlcf	___fldiv@b& (0+255),f,b
 11453  00223E  3767               	rlcf	(___fldiv@b+1)& (0+255),f,b
 11454  002240  3768               	rlcf	(___fldiv@b+2)& (0+255),f,b
 11455  002242  3769               	rlcf	(___fldiv@b+3)& (0+255),f,b
 11456  002244  BF7C               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 11457  002246  8166               	bsf	___fldiv@b& (0+255),0,b
 11458  002248  90D8               	bcf	status,0,c
 11459  00224A  3779               	rlcf	___fldiv@grs& (0+255),f,b
 11460  00224C  377A               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 11461  00224E  377B               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 11462  002250  377C               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 11463  002252  0012               	return	
 11464  002254                     __end_ofPL60:
 11465                           	callstack 0
 11466  002254                     PL84:
 11467                           	callstack 23
 11468  002254  6B66               	clrf	___fldiv@b& (0+255),b
 11469  002256  6B67               	clrf	(___fldiv@b+1)& (0+255),b
 11470  002258  6B68               	clrf	(___fldiv@b+2)& (0+255),b
 11471  00225A  6B69               	clrf	(___fldiv@b+3)& (0+255),b
 11472  00225C  0012               	return	
 11473  00225E                     __end_ofPL84:
 11474                           	callstack 0
 11475                           
 11476 ;; *************** function ___awmod *****************
 11477 ;; Defined at:
 11478 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;  dividend        2   25[COMRAM] int 
 11481 ;;  divisor         2   27[COMRAM] int 
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  sign            1   30[COMRAM] unsigned char 
 11484 ;;  counter         1   29[COMRAM] unsigned char 
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  2   25[COMRAM] int 
 11487 ;; Registers used:
 11488 ;;		wreg, status,2, status,0
 11489 ;; Tracked objects:
 11490 ;;		On entry : 3F/1
 11491 ;;		On exit  : 3F/1
 11492 ;;		Unchanged: 3F/0
 11493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11494 ;;      Params:         4       0       0       0       0       0       0
 11495 ;;      Locals:         2       0       0       0       0       0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0
 11497 ;;      Totals:         6       0       0       0       0       0       0
 11498 ;;Total ram usage:        6 bytes
 11499 ;; Hardware stack levels used: 1
 11500 ;; Hardware stack levels required when called: 3
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_efgtoa
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           	psect	text30
 11509  003698                     __ptext30:
 11510                           	callstack 0
 11511  003698                     ___awmod:
 11512                           	callstack 23
 11513                           
 11514                           ; BSR set to: 1
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;incstack = 0
 11518  003698  6A1F               	clrf	___awmod@sign^0,c
 11519                           
 11520                           ; BSR set to: 1
 11521  00369A  AE1B               	btfss	(___awmod@dividend+1)^0,7,c
 11522  00369C  D006               	goto	l8232
 11523                           
 11524                           ; BSR set to: 1
 11525  00369E  6C1A               	negf	___awmod@dividend^0,c
 11526  0036A0  1E1B               	comf	(___awmod@dividend+1)^0,f,c
 11527  0036A2  B0D8               	btfsc	status,0,c
 11528  0036A4  2A1B               	incf	(___awmod@dividend+1)^0,f,c
 11529                           
 11530                           ; BSR set to: 1
 11531  0036A6  0E01               	movlw	1
 11532  0036A8  6E1F               	movwf	___awmod@sign^0,c
 11533  0036AA                     l8232:
 11534                           
 11535                           ; BSR set to: 1
 11536  0036AA  AE1D               	btfss	(___awmod@divisor+1)^0,7,c
 11537  0036AC  D004               	goto	l8236
 11538                           
 11539                           ; BSR set to: 1
 11540  0036AE  6C1C               	negf	___awmod@divisor^0,c
 11541  0036B0  1E1D               	comf	(___awmod@divisor+1)^0,f,c
 11542  0036B2  B0D8               	btfsc	status,0,c
 11543  0036B4  2A1D               	incf	(___awmod@divisor+1)^0,f,c
 11544  0036B6                     l8236:
 11545                           
 11546                           ; BSR set to: 1
 11547  0036B6  501C               	movf	___awmod@divisor^0,w,c
 11548  0036B8  101D               	iorwf	(___awmod@divisor+1)^0,w,c
 11549  0036BA  E017               	bz	l8252
 11550                           
 11551                           ; BSR set to: 1
 11552  0036BC  0E01               	movlw	1
 11553  0036BE  6E1E               	movwf	___awmod@counter^0,c
 11554  0036C0  D004               	goto	l8242
 11555  0036C2                     l8240:
 11556                           
 11557                           ; BSR set to: 1
 11558  0036C2  90D8               	bcf	status,0,c
 11559  0036C4  361C               	rlcf	___awmod@divisor^0,f,c
 11560  0036C6  361D               	rlcf	(___awmod@divisor+1)^0,f,c
 11561  0036C8  2A1E               	incf	___awmod@counter^0,f,c
 11562  0036CA                     l8242:
 11563                           
 11564                           ; BSR set to: 1
 11565  0036CA  AE1D               	btfss	(___awmod@divisor+1)^0,7,c
 11566  0036CC  D7FA               	goto	l8240
 11567  0036CE                     u9300:
 11568                           
 11569                           ; BSR set to: 1
 11570  0036CE  501C               	movf	___awmod@divisor^0,w,c
 11571  0036D0  5C1A               	subwf	___awmod@dividend^0,w,c
 11572  0036D2  501D               	movf	(___awmod@divisor+1)^0,w,c
 11573  0036D4  581B               	subwfb	(___awmod@dividend+1)^0,w,c
 11574  0036D6  E304               	bnc	l8248
 11575                           
 11576                           ; BSR set to: 1
 11577  0036D8  501C               	movf	___awmod@divisor^0,w,c
 11578  0036DA  5E1A               	subwf	___awmod@dividend^0,f,c
 11579  0036DC  501D               	movf	(___awmod@divisor+1)^0,w,c
 11580  0036DE  5A1B               	subwfb	(___awmod@dividend+1)^0,f,c
 11581  0036E0                     l8248:
 11582                           
 11583                           ; BSR set to: 1
 11584  0036E0  90D8               	bcf	status,0,c
 11585  0036E2  321D               	rrcf	(___awmod@divisor+1)^0,f,c
 11586  0036E4  321C               	rrcf	___awmod@divisor^0,f,c
 11587                           
 11588                           ; BSR set to: 1
 11589  0036E6  2E1E               	decfsz	___awmod@counter^0,f,c
 11590  0036E8  D7F2               	goto	u9300
 11591  0036EA                     l8252:
 11592                           
 11593                           ; BSR set to: 1
 11594  0036EA  501F               	movf	___awmod@sign^0,w,c
 11595  0036EC  E004               	bz	l8256
 11596                           
 11597                           ; BSR set to: 1
 11598  0036EE  6C1A               	negf	___awmod@dividend^0,c
 11599  0036F0  1E1B               	comf	(___awmod@dividend+1)^0,f,c
 11600  0036F2  B0D8               	btfsc	status,0,c
 11601  0036F4  2A1B               	incf	(___awmod@dividend+1)^0,f,c
 11602  0036F6                     l8256:
 11603                           
 11604                           ; BSR set to: 1
 11605  0036F6  C01A  F01A         	movff	___awmod@dividend,?___awmod
 11606  0036FA  C01B  F01B         	movff	___awmod@dividend+1,?___awmod+1
 11607                           
 11608                           ; BSR set to: 1
 11609  0036FE  0012               	return		;funcret
 11610  003700                     __end_of___awmod:
 11611                           	callstack 0
 11612                           
 11613 ;; *************** function ___awdiv *****************
 11614 ;; Defined at:
 11615 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  dividend        2   25[COMRAM] int 
 11618 ;;  divisor         2   27[COMRAM] int 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  quotient        2   31[COMRAM] int 
 11621 ;;  sign            1   30[COMRAM] unsigned char 
 11622 ;;  counter         1   29[COMRAM] unsigned char 
 11623 ;; Return value:  Size  Location     Type
 11624 ;;                  2   25[COMRAM] int 
 11625 ;; Registers used:
 11626 ;;		wreg, status,2, status,0
 11627 ;; Tracked objects:
 11628 ;;		On entry : 3F/1
 11629 ;;		On exit  : 3F/1
 11630 ;;		Unchanged: 3F/0
 11631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11632 ;;      Params:         4       0       0       0       0       0       0
 11633 ;;      Locals:         4       0       0       0       0       0       0
 11634 ;;      Temps:          0       0       0       0       0       0       0
 11635 ;;      Totals:         8       0       0       0       0       0       0
 11636 ;;Total ram usage:        8 bytes
 11637 ;; Hardware stack levels used: 1
 11638 ;; Hardware stack levels required when called: 3
 11639 ;; This function calls:
 11640 ;;		Nothing
 11641 ;; This function is called by:
 11642 ;;		_efgtoa
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text31
 11647  0035A8                     __ptext31:
 11648                           	callstack 0
 11649  0035A8                     ___awdiv:
 11650                           	callstack 23
 11651                           
 11652                           ; BSR set to: 1
 11653                           
 11654                           ; BSR set to: 1
 11655                           ;incstack = 0
 11656  0035A8  6A1F               	clrf	___awdiv@sign^0,c
 11657                           
 11658                           ; BSR set to: 1
 11659  0035AA  AE1D               	btfss	(___awdiv@divisor+1)^0,7,c
 11660  0035AC  D006               	goto	l8188
 11661                           
 11662                           ; BSR set to: 1
 11663  0035AE  6C1C               	negf	___awdiv@divisor^0,c
 11664  0035B0  1E1D               	comf	(___awdiv@divisor+1)^0,f,c
 11665  0035B2  B0D8               	btfsc	status,0,c
 11666  0035B4  2A1D               	incf	(___awdiv@divisor+1)^0,f,c
 11667                           
 11668                           ; BSR set to: 1
 11669  0035B6  0E01               	movlw	1
 11670  0035B8  6E1F               	movwf	___awdiv@sign^0,c
 11671  0035BA                     l8188:
 11672                           
 11673                           ; BSR set to: 1
 11674  0035BA  AE1B               	btfss	(___awdiv@dividend+1)^0,7,c
 11675  0035BC  D006               	goto	l8194
 11676                           
 11677                           ; BSR set to: 1
 11678  0035BE  6C1A               	negf	___awdiv@dividend^0,c
 11679  0035C0  1E1B               	comf	(___awdiv@dividend+1)^0,f,c
 11680  0035C2  B0D8               	btfsc	status,0,c
 11681  0035C4  2A1B               	incf	(___awdiv@dividend+1)^0,f,c
 11682                           
 11683                           ; BSR set to: 1
 11684  0035C6  0E01               	movlw	1
 11685  0035C8  1A1F               	xorwf	___awdiv@sign^0,f,c
 11686  0035CA                     l8194:
 11687                           
 11688                           ; BSR set to: 1
 11689  0035CA  6A20               	clrf	___awdiv@quotient^0,c
 11690  0035CC  6A21               	clrf	(___awdiv@quotient+1)^0,c
 11691                           
 11692                           ; BSR set to: 1
 11693  0035CE  501C               	movf	___awdiv@divisor^0,w,c
 11694  0035D0  101D               	iorwf	(___awdiv@divisor+1)^0,w,c
 11695  0035D2  E01B               	bz	l8216
 11696                           
 11697                           ; BSR set to: 1
 11698  0035D4  0E01               	movlw	1
 11699  0035D6  6E1E               	movwf	___awdiv@counter^0,c
 11700  0035D8  D004               	goto	l8202
 11701  0035DA                     l8200:
 11702                           
 11703                           ; BSR set to: 1
 11704  0035DA  90D8               	bcf	status,0,c
 11705  0035DC  361C               	rlcf	___awdiv@divisor^0,f,c
 11706  0035DE  361D               	rlcf	(___awdiv@divisor+1)^0,f,c
 11707  0035E0  2A1E               	incf	___awdiv@counter^0,f,c
 11708  0035E2                     l8202:
 11709                           
 11710                           ; BSR set to: 1
 11711  0035E2  AE1D               	btfss	(___awdiv@divisor+1)^0,7,c
 11712  0035E4  D7FA               	goto	l8200
 11713  0035E6                     u9240:
 11714                           
 11715                           ; BSR set to: 1
 11716  0035E6  90D8               	bcf	status,0,c
 11717  0035E8  3620               	rlcf	___awdiv@quotient^0,f,c
 11718  0035EA  3621               	rlcf	(___awdiv@quotient+1)^0,f,c
 11719                           
 11720                           ; BSR set to: 1
 11721  0035EC  501C               	movf	___awdiv@divisor^0,w,c
 11722  0035EE  5C1A               	subwf	___awdiv@dividend^0,w,c
 11723  0035F0  501D               	movf	(___awdiv@divisor+1)^0,w,c
 11724  0035F2  581B               	subwfb	(___awdiv@dividend+1)^0,w,c
 11725  0035F4  E305               	bnc	l8212
 11726                           
 11727                           ; BSR set to: 1
 11728  0035F6  501C               	movf	___awdiv@divisor^0,w,c
 11729  0035F8  5E1A               	subwf	___awdiv@dividend^0,f,c
 11730  0035FA  501D               	movf	(___awdiv@divisor+1)^0,w,c
 11731  0035FC  5A1B               	subwfb	(___awdiv@dividend+1)^0,f,c
 11732                           
 11733                           ; BSR set to: 1
 11734  0035FE  8020               	bsf	___awdiv@quotient^0,0,c
 11735  003600                     l8212:
 11736                           
 11737                           ; BSR set to: 1
 11738  003600  90D8               	bcf	status,0,c
 11739  003602  321D               	rrcf	(___awdiv@divisor+1)^0,f,c
 11740  003604  321C               	rrcf	___awdiv@divisor^0,f,c
 11741                           
 11742                           ; BSR set to: 1
 11743  003606  2E1E               	decfsz	___awdiv@counter^0,f,c
 11744  003608  D7EE               	goto	u9240
 11745  00360A                     l8216:
 11746                           
 11747                           ; BSR set to: 1
 11748  00360A  501F               	movf	___awdiv@sign^0,w,c
 11749  00360C  E004               	bz	l8220
 11750                           
 11751                           ; BSR set to: 1
 11752  00360E  6C20               	negf	___awdiv@quotient^0,c
 11753  003610  1E21               	comf	(___awdiv@quotient+1)^0,f,c
 11754  003612  B0D8               	btfsc	status,0,c
 11755  003614  2A21               	incf	(___awdiv@quotient+1)^0,f,c
 11756  003616                     l8220:
 11757                           
 11758                           ; BSR set to: 1
 11759  003616  C020  F01A         	movff	___awdiv@quotient,?___awdiv
 11760  00361A  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
 11761                           
 11762                           ; BSR set to: 1
 11763  00361E  0012               	return		;funcret
 11764  003620                     __end_of___awdiv:
 11765                           	callstack 0
 11766                           
 11767 ;; *************** function _ctoa *****************
 11768 ;; Defined at:
 11769 ;;		line 259 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
 11772 ;;		 -> sprintf@f(11), 
 11773 ;;  c               1    2[BANK0 ] unsigned char 
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;  w               2    5[BANK0 ] int 
 11776 ;;  l               2    3[BANK0 ] int 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  2    0[BANK0 ] int 
 11779 ;; Registers used:
 11780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11781 ;; Tracked objects:
 11782 ;;		On entry : 3F/0
 11783 ;;		On exit  : 3F/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11786 ;;      Params:         0       3       0       0       0       0       0
 11787 ;;      Locals:         0       4       0       0       0       0       0
 11788 ;;      Temps:          1       0       0       0       0       0       0
 11789 ;;      Totals:         1       7       0       0       0       0       0
 11790 ;;Total ram usage:        8 bytes
 11791 ;; Hardware stack levels used: 1
 11792 ;; Hardware stack levels required when called: 5
 11793 ;; This function calls:
 11794 ;;		_fputc
 11795 ;; This function is called by:
 11796 ;;		_vfpfcnvrt
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text32
 11801  003410                     __ptext32:
 11802                           	callstack 0
 11803  003410                     _ctoa:
 11804                           	callstack 22
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 259: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt
      +                          .c: 260: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 261:   
      +                            int l, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 264:  
      +                             w = width ? width - 1 : width;
 11808                           
 11809                           ; BSR set to: 1
 11810                           ;incstack = 0
 11811  003410  502D               	movf	_width^0,w,c
 11812  003412  102E               	iorwf	(_width+1)^0,w,c
 11813  003414  E105               	bnz	l8490
 11814                           
 11815                           ; BSR set to: 0
 11816  003416  C02D  F065         	movff	_width,ctoa@w
 11817  00341A  C02E  F066         	movff	_width+1,ctoa@w+1
 11818  00341E  D006               	goto	l8492
 11819  003420                     l8490:
 11820                           
 11821                           ; BSR set to: 0
 11822  003420  0EFF               	movlw	255
 11823  003422  242D               	addwf	_width^0,w,c
 11824  003424  6F65               	movwf	ctoa@w& (0+255),b
 11825  003426  0EFF               	movlw	255
 11826  003428  202E               	addwfc	(_width+1)^0,w,c
 11827  00342A  6F66               	movwf	(ctoa@w+1)& (0+255),b
 11828  00342C                     l8492:
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 267:     if (flag
      +                          s & (1 << 0)) {
 11832  00342C  A031               	btfss	_flags^0,0,c
 11833  00342E  D003               	goto	l8496
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 268:         fput
      +                          c(c, fp);
 11837  003430  D82C               	call	PL130	;call to abstracted procedure
 11838  003432  EC4D  F01A         	call	_fputc	;wreg free
 11839  003436                     l8496:
 11840                           
 11841                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 271:     w = (w <
      +                           0) ? 0 : w;
 11842  003436  0100               	movlb	0	; () banked
 11843  003438  AF66               	btfss	(ctoa@w+1)& (0+255),7,b
 11844  00343A  D002               	goto	l1468
 11845                           
 11846                           ; BSR set to: 0
 11847  00343C  6B65               	clrf	ctoa@w& (0+255),b
 11848  00343E  6B66               	clrf	(ctoa@w+1)& (0+255),b
 11849  003440                     l1468:
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 272:     l = 0;
 11853  003440  6B63               	clrf	ctoa@l& (0+255),b
 11854  003442  6B64               	clrf	(ctoa@l+1)& (0+255),b
 11855                           
 11856                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 11857  003444  D00C               	goto	l8504
 11858  003446                     l8500:
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 274:         fput
      +                          c(' ', fp);
 11862  003446  6A1C               	clrf	(fputc@c+1)^0,c
 11863  003448  0E20               	movlw	32
 11864  00344A  6E1B               	movwf	fputc@c^0,c
 11865  00344C  C060  F01D         	movff	ctoa@fp,fputc@fp
 11866  003450  C061  F01E         	movff	ctoa@fp+1,fputc@fp+1
 11867  003454  EC4D  F01A         	call	_fputc	;wreg free
 11868                           
 11869                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 275:         ++l;
 11870  003458  0100               	movlb	0	; () banked
 11871  00345A  4B63               	infsnz	ctoa@l& (0+255),f,b
 11872  00345C  2B64               	incf	(ctoa@l+1)& (0+255),f,b
 11873  00345E                     l8504:
 11874                           
 11875                           ; BSR set to: 0
 11876                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 273:     while (l
      +                           < w) {
 11877  00345E  5165               	movf	ctoa@w& (0+255),w,b
 11878  003460  5D63               	subwf	ctoa@l& (0+255),w,b
 11879  003462  5164               	movf	(ctoa@l+1)& (0+255),w,b
 11880  003464  0A80               	xorlw	128
 11881  003466  6E24               	movwf	??_ctoa^0,c
 11882  003468  5166               	movf	(ctoa@w+1)& (0+255),w,b
 11883  00346A  0A80               	xorlw	128
 11884  00346C  5824               	subwfb	??_ctoa^0,w,c
 11885  00346E  E3EB               	bnc	l8500
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 278:     if (!(fl
      +                          ags & (1 << 0))) {
 11889  003470  B031               	btfsc	_flags^0,0,c
 11890  003472  D003               	goto	l8508
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 279:         fput
      +                          c(c, fp);
 11894  003474  D80A               	call	PL130	;call to abstracted procedure
 11895  003476  EC4D  F01A         	call	_fputc	;wreg free
 11896  00347A                     l8508:
 11897                           
 11898                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 282:     return l
      +                          +1;
 11899  00347A  0E01               	movlw	1
 11900  00347C  0100               	movlb	0	; () banked
 11901  00347E  2563               	addwf	ctoa@l& (0+255),w,b
 11902  003480  6F60               	movwf	?_ctoa& (0+255),b
 11903  003482  0E00               	movlw	0
 11904  003484  2164               	addwfc	(ctoa@l+1)& (0+255),w,b
 11905  003486  6F61               	movwf	(?_ctoa+1)& (0+255),b
 11906                           
 11907                           ; BSR set to: 0
 11908  003488  0012               	return		;funcret
 11909  00348A                     __end_of_ctoa:
 11910                           	callstack 0
 11911  00348A                     PL130:
 11912                           	callstack 22
 11913  00348A  C062  F01B         	movff	ctoa@c,fputc@c
 11914  00348E  6A1C               	clrf	(fputc@c+1)^0,c
 11915  003490  C060  F01D         	movff	ctoa@fp,fputc@fp
 11916  003494  C061  F01E         	movff	ctoa@fp+1,fputc@fp+1
 11917  003498  0012               	return	
 11918  00349A                     __end_ofPL130:
 11919                           	callstack 0
 11920                           
 11921 ;; *************** function _fputc *****************
 11922 ;; Defined at:
 11923 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  c               2   26[COMRAM] int 
 11926 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
 11927 ;;		 -> sprintf@f(11), 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;		None
 11930 ;; Return value:  Size  Location     Type
 11931 ;;                  2   26[COMRAM] int 
 11932 ;; Registers used:
 11933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11934 ;; Tracked objects:
 11935 ;;		On entry : 0/0
 11936 ;;		On exit  : 0/0
 11937 ;;		Unchanged: 0/0
 11938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11939 ;;      Params:         4       0       0       0       0       0       0
 11940 ;;      Locals:         0       0       0       0       0       0       0
 11941 ;;      Temps:          5       0       0       0       0       0       0
 11942 ;;      Totals:         9       0       0       0       0       0       0
 11943 ;;Total ram usage:        9 bytes
 11944 ;; Hardware stack levels used: 1
 11945 ;; Hardware stack levels required when called: 4
 11946 ;; This function calls:
 11947 ;;		_putch
 11948 ;; This function is called by:
 11949 ;;		_pad
 11950 ;;		_ctoa
 11951 ;;		_stoa
 11952 ;;		_vfpfcnvrt
 11953 ;;		_fputs
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           	psect	text33
 11958  00349A                     __ptext33:
 11959                           	callstack 0
 11960  00349A                     _fputc:
 11961                           	callstack 20
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;incstack = 0
 11965  00349A  501D               	movf	fputc@fp^0,w,c
 11966  00349C  101E               	iorwf	(fputc@fp+1)^0,w,c
 11967  00349E  E003               	bz	u8330
 11968  0034A0  501D               	movf	fputc@fp^0,w,c
 11969  0034A2  101E               	iorwf	(fputc@fp+1)^0,w,c
 11970  0034A4  E103               	bnz	l7716
 11971  0034A6                     u8330:
 11972  0034A6  501B               	movf	fputc@c^0,w,c
 11973  0034A8  EF4F  F01F         	goto	_putch
 11974  0034AC                     l7716:
 11975  0034AC  EE20 F009          	lfsr	2,9
 11976  0034B0  D834               	call	PL142	;call to abstracted procedure
 11977  0034B2  50DE               	movf	postinc2,w,c
 11978  0034B4  10DE               	iorwf	postinc2,w,c
 11979  0034B6  E013               	bz	u8350
 11980  0034B8  EE20 F009          	lfsr	2,9
 11981  0034BC  D82E               	call	PL142	;call to abstracted procedure
 11982  0034BE  EE10 F003          	lfsr	1,3
 11983  0034C2  501D               	movf	fputc@fp^0,w,c
 11984  0034C4  26E1               	addwf	fsr1l,f,c
 11985  0034C6  501E               	movf	(fputc@fp+1)^0,w,c
 11986  0034C8  22E2               	addwfc	fsr1h,f,c
 11987  0034CA  50DE               	movf	postinc2,w,c
 11988  0034CC  5CE6               	subwf	postinc1,w,c
 11989  0034CE  50E6               	movf	postinc1,w,c
 11990  0034D0  0A80               	xorlw	128
 11991  0034D2  6E23               	movwf	(??_fputc+4)^0,c
 11992  0034D4  50DE               	movf	postinc2,w,c
 11993  0034D6  0A80               	xorlw	128
 11994  0034D8  5823               	subwfb	(??_fputc+4)^0,w,c
 11995  0034DA  B0D8               	btfsc	status,0,c
 11996  0034DC  0012               	return	
 11997  0034DE                     u8350:
 11998  0034DE  EE20 F003          	lfsr	2,3
 11999  0034E2  D81B               	call	PL142	;call to abstracted procedure
 12000  0034E4  CFDE F01F          	movff	postinc2,??_fputc
 12001  0034E8  CFDD F020          	movff	postdec2,??_fputc+1
 12002  0034EC  C01D  FFD9         	movff	fputc@fp,fsr2l
 12003  0034F0  C01E  FFDA         	movff	fputc@fp+1,fsr2h
 12004  0034F4  CFDE F021          	movff	postinc2,??_fputc+2
 12005  0034F8  CFDD F022          	movff	postdec2,??_fputc+3
 12006  0034FC  501F               	movf	??_fputc^0,w,c
 12007  0034FE  2421               	addwf	(??_fputc+2)^0,w,c
 12008  003500  6ED9               	movwf	fsr2l,c
 12009  003502  5020               	movf	(??_fputc+1)^0,w,c
 12010  003504  2022               	addwfc	(??_fputc+3)^0,w,c
 12011  003506  6EDA               	movwf	fsr2h,c
 12012  003508  C01B  FFDF         	movff	fputc@c,indf2
 12013  00350C  EE20 F003          	lfsr	2,3
 12014  003510  D804               	call	PL142	;call to abstracted procedure
 12015  003512  2ADE               	incf	postinc2,f,c
 12016  003514  0E00               	movlw	0
 12017  003516  22DD               	addwfc	postdec2,f,c
 12018  003518  0C00               	retlw	0	;funcret
 12019  00351A                     __end_of_fputc:
 12020                           	callstack 0
 12021  00351A                     PL142:
 12022                           	callstack 20
 12023  00351A  501D               	movf	fputc@fp^0,w,c
 12024  00351C  26D9               	addwf	fsr2l,f,c
 12025  00351E  501E               	movf	(fputc@fp+1)^0,w,c
 12026  003520  22DA               	addwfc	fsr2h,f,c
 12027  003522  0012               	return	
 12028  003524                     __end_ofPL142:
 12029                           	callstack 0
 12030                           
 12031 ;; *************** function _putch *****************
 12032 ;; Defined at:
 12033 ;;		line 20 in file "eusart.c"
 12034 ;; Parameters:    Size  Location     Type
 12035 ;;  data            1    wreg     unsigned char 
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;  data            1   25[COMRAM] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;                  1    wreg      void 
 12040 ;; Registers used:
 12041 ;;		wreg
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12047 ;;      Params:         0       0       0       0       0       0       0
 12048 ;;      Locals:         1       0       0       0       0       0       0
 12049 ;;      Temps:          0       0       0       0       0       0       0
 12050 ;;      Totals:         1       0       0       0       0       0       0
 12051 ;;Total ram usage:        1 bytes
 12052 ;; Hardware stack levels used: 1
 12053 ;; Hardware stack levels required when called: 3
 12054 ;; This function calls:
 12055 ;;		Nothing
 12056 ;; This function is called by:
 12057 ;;		_fputc
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           	psect	text34
 12062  003E9E                     __ptext34:
 12063                           	callstack 0
 12064  003E9E                     _putch:
 12065                           	callstack 20
 12066                           
 12067                           ;incstack = 0
 12068                           ;putch@data stored from wreg
 12069  003E9E  6E1A               	movwf	putch@data^0,c
 12070  003EA0                     
 12071                           ;eusart.c: 22:  while( ! TXIF)
 12072                           
 12073                           ;eusart.c: 20: void putch(char data);eusart.c: 21: {;eusart.c: 22:  while( ! TXIF)
 12074  003EA0  A89E               	btfss	3998,4,c	;volatile
 12075  003EA2  D7FE               	goto	l7706
 12076                           
 12077                           ;eusart.c: 24:  TXREG = data;
 12078  003EA4  C01A  FFAD         	movff	putch@data,4013	;volatile
 12079  003EA8  0012               	return		;funcret
 12080  003EAA                     __end_of_putch:
 12081                           	callstack 0
 12082                           
 12083 ;; *************** function _atoi *****************
 12084 ;; Defined at:
 12085 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  s               2    7[BANK0 ] PTR const unsigned char 
 12088 ;;		 -> STR_30(10), STR_29(22), STR_28(11), STR_27(10), 
 12089 ;;		 -> STR_26(22), STR_25(9), STR_24(10), STR_21(10), 
 12090 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
 12091 ;;		 -> STR_2(15), 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  n               2   15[BANK0 ] int 
 12094 ;;  neg             2   13[BANK0 ] int 
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  2    7[BANK0 ] int 
 12097 ;; Registers used:
 12098 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12099 ;; Tracked objects:
 12100 ;;		On entry : 3F/0
 12101 ;;		On exit  : 3F/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12104 ;;      Params:         0       2       0       0       0       0       0
 12105 ;;      Locals:         0       4       0       0       0       0       0
 12106 ;;      Temps:          0       4       0       0       0       0       0
 12107 ;;      Totals:         0      10       0       0       0       0       0
 12108 ;;Total ram usage:       10 bytes
 12109 ;; Hardware stack levels used: 1
 12110 ;; Hardware stack levels required when called: 4
 12111 ;; This function calls:
 12112 ;;		___wmul
 12113 ;;		_isdigit
 12114 ;;		_isspace
 12115 ;; This function is called by:
 12116 ;;		_vfpfcnvrt
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           	psect	text35
 12121  002F80                     __ptext35:
 12122                           	callstack 0
 12123  002F80                     _atoi:
 12124                           	callstack 23
 12125                           
 12126                           ; BSR set to: 0
 12127                           
 12128                           ;incstack = 0
 12129  002F80  6B6F               	clrf	atoi@n& (0+255),b
 12130  002F82  6B70               	clrf	(atoi@n+1)& (0+255),b
 12131  002F84  6B6D               	clrf	atoi@neg& (0+255),b
 12132  002F86  6B6E               	clrf	(atoi@neg+1)& (0+255),b
 12133  002F88  D002               	goto	l8900
 12134  002F8A                     l8896:
 12135                           
 12136                           ; BSR set to: 0
 12137  002F8A  4B67               	infsnz	atoi@s& (0+255),f,b
 12138  002F8C  2B68               	incf	(atoi@s+1)& (0+255),f,b
 12139  002F8E                     l8900:
 12140                           
 12141                           ; BSR set to: 0
 12142  002F8E  D84F               	call	PL38	;call to abstracted procedure
 12143  002F90  0A20               	xorlw	32
 12144  002F92  E0FB               	bz	l8896
 12145                           
 12146                           ; BSR set to: 0
 12147  002F94  0EF7               	movlw	247
 12148  002F96  6F69               	movwf	??_atoi& (0+255),b
 12149  002F98  696A               	setf	(??_atoi+1)& (0+255),b
 12150  002F9A  D849               	call	PL38	;call to abstracted procedure
 12151  002F9C  D84F               	call	PL136	;call to abstracted procedure
 12152  002F9E  E10A               	bnz	l8908
 12153  002FA0  0E05               	movlw	5
 12154  002FA2  5D6B               	subwf	(??_atoi+2)& (0+255),w,b
 12155  002FA4  E207               	bc	l8908
 12156  002FA6  D7F1               	goto	l8896
 12157  002FA8                     l8904:
 12158                           
 12159                           ; BSR set to: 0
 12160  002FA8  6B6E               	clrf	(atoi@neg+1)& (0+255),b
 12161  002FAA  0E01               	movlw	1
 12162  002FAC  6F6D               	movwf	atoi@neg& (0+255),b
 12163  002FAE                     l8906:
 12164                           
 12165                           ; BSR set to: 0
 12166  002FAE  4B67               	infsnz	atoi@s& (0+255),f,b
 12167  002FB0  2B68               	incf	(atoi@s+1)& (0+255),f,b
 12168  002FB2  D01F               	goto	l8916
 12169  002FB4                     l8908:
 12170                           
 12171                           ; BSR set to: 0
 12172  002FB4  D83C               	call	PL38	;call to abstracted procedure
 12173  002FB6  6F69               	movwf	??_atoi& (0+255),b
 12174  002FB8  6B6A               	clrf	(??_atoi+1)& (0+255),b
 12175                           
 12176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12177                           ; Switch size 1, requested type "space"
 12178                           ; Number of cases is 1, Range of values is 0 to 0
 12179                           ; switch strategies available:
 12180                           ; Name         Instructions Cycles
 12181                           ; simple_byte            4     3 (average)
 12182                           ;	Chosen strategy is simple_byte
 12183  002FBA  516A               	movf	(??_atoi+1)& (0+255),w,b
 12184  002FBC  E11A               	bnz	l8916
 12185                           
 12186                           ; BSR set to: 0
 12187                           ; Switch size 1, requested type "space"
 12188                           ; Number of cases is 2, Range of values is 43 to 45
 12189                           ; switch strategies available:
 12190                           ; Name         Instructions Cycles
 12191                           ; simple_byte            7     4 (average)
 12192                           ;	Chosen strategy is simple_byte
 12193  002FBE  5169               	movf	??_atoi& (0+255),w,b
 12194  002FC0  0A2B               	xorlw	43	; case 43
 12195  002FC2  E0F5               	bz	l8906
 12196  002FC4  0A06               	xorlw	6	; case 45
 12197  002FC6  E0F0               	bz	l8904
 12198  002FC8  D014               	goto	l8916
 12199  002FCA                     l8910:
 12200                           
 12201                           ; BSR set to: 0
 12202  002FCA  C06F  F061         	movff	atoi@n,___wmul@multiplier
 12203  002FCE  C070  F062         	movff	atoi@n+1,___wmul@multiplier+1
 12204  002FD2  6B64               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12205  002FD4  0E0A               	movlw	10
 12206  002FD6  6F63               	movwf	___wmul@multiplicand& (0+255),b
 12207  002FD8  ECD6  F01E         	call	___wmul	;wreg free
 12208  002FDC  D828               	call	PL38	;call to abstracted procedure
 12209  002FDE  5F61               	subwf	?___wmul& (0+255),f,b
 12210  002FE0  0E00               	movlw	0
 12211  002FE2  5B62               	subwfb	(?___wmul+1)& (0+255),f,b
 12212  002FE4  0E30               	movlw	48
 12213  002FE6  2561               	addwf	?___wmul& (0+255),w,b
 12214  002FE8  6F6F               	movwf	atoi@n& (0+255),b
 12215  002FEA  0E00               	movlw	0
 12216  002FEC  2162               	addwfc	(?___wmul+1)& (0+255),w,b
 12217  002FEE  6F70               	movwf	(atoi@n+1)& (0+255),b
 12218  002FF0  D7DE               	goto	l8906
 12219  002FF2                     l8916:
 12220                           
 12221                           ; BSR set to: 0
 12222  002FF2  0ED0               	movlw	208
 12223  002FF4  6F69               	movwf	??_atoi& (0+255),b
 12224  002FF6  696A               	setf	(??_atoi+1)& (0+255),b
 12225  002FF8  D81A               	call	PL38	;call to abstracted procedure
 12226  002FFA  D820               	call	PL136	;call to abstracted procedure
 12227  002FFC  E103               	bnz	u10630
 12228  002FFE  0E0A               	movlw	10
 12229  003000  5D6B               	subwf	(??_atoi+2)& (0+255),w,b
 12230  003002  E3E3               	bnc	l8910
 12231  003004                     u10630:
 12232                           
 12233                           ; BSR set to: 0
 12234  003004  516D               	movf	atoi@neg& (0+255),w,b
 12235  003006  116E               	iorwf	(atoi@neg+1)& (0+255),w,b
 12236  003008  E10D               	bnz	l1687
 12237                           
 12238                           ; BSR set to: 0
 12239  00300A  C06F  F069         	movff	atoi@n,??_atoi
 12240  00300E  C070  F06A         	movff	atoi@n+1,??_atoi+1
 12241  003012  1F69               	comf	??_atoi& (0+255),f,b
 12242  003014  1F6A               	comf	(??_atoi+1)& (0+255),f,b
 12243  003016  4B69               	infsnz	??_atoi& (0+255),f,b
 12244  003018  2B6A               	incf	(??_atoi+1)& (0+255),f,b
 12245  00301A  C069  F067         	movff	??_atoi,?_atoi
 12246  00301E  C06A  F068         	movff	??_atoi+1,?_atoi+1
 12247  003022  0012               	return	
 12248  003024                     l1687:
 12249                           
 12250                           ; BSR set to: 0
 12251  003024  C06F  F067         	movff	atoi@n,?_atoi
 12252  003028  C070  F068         	movff	atoi@n+1,?_atoi+1
 12253                           
 12254                           ; BSR set to: 0
 12255  00302C  0012               	return		;funcret
 12256  00302E                     __end_of_atoi:
 12257                           	callstack 0
 12258  00302E                     PL38:
 12259                           	callstack 23
 12260  00302E  C067  FFF6         	movff	atoi@s,tblptrl
 12261  003032  C068  FFF7         	movff	atoi@s+1,tblptrh
 12262  003036                     	if	0	;tblptru may be non-zero
 12263  003036                     	endif
 12264  003036                     	if	0	;tblptru may be non-zero
 12265  003036                     	endif
 12266  003036  0008               	tblrd		*
 12267  003038  50F5               	movf	tablat,w,c
 12268  00303A  0012               	return	
 12269  00303C                     __end_ofPL38:
 12270                           	callstack 0
 12271  00303C                     PL136:
 12272                           	callstack 23
 12273  00303C  6F6B               	movwf	(??_atoi+2)& (0+255),b
 12274  00303E  6B6C               	clrf	(??_atoi+3)& (0+255),b
 12275  003040  5169               	movf	??_atoi& (0+255),w,b
 12276  003042  276B               	addwf	(??_atoi+2)& (0+255),f,b
 12277  003044  516A               	movf	(??_atoi+1)& (0+255),w,b
 12278  003046  236C               	addwfc	(??_atoi+3)& (0+255),f,b
 12279  003048  516C               	movf	(??_atoi+3)& (0+255),w,b
 12280  00304A  0012               	return	
 12281  00304C                     __end_ofPL136:
 12282                           	callstack 0
 12283                           
 12284 ;; *************** function _isspace *****************
 12285 ;; Defined at:
 12286 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
 12287 ;; Parameters:    Size  Location     Type
 12288 ;;  c               2   25[COMRAM] int 
 12289 ;; Auto vars:     Size  Location     Type
 12290 ;;		None
 12291 ;; Return value:  Size  Location     Type
 12292 ;;                  2   25[COMRAM] int 
 12293 ;; Registers used:
 12294 ;;		wreg, status,2, status,0
 12295 ;; Tracked objects:
 12296 ;;		On entry : 0/0
 12297 ;;		On exit  : 0/0
 12298 ;;		Unchanged: 0/0
 12299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12300 ;;      Params:         2       0       0       0       0       0       0
 12301 ;;      Locals:         1       0       0       0       0       0       0
 12302 ;;      Temps:          4       0       0       0       0       0       0
 12303 ;;      Totals:         7       0       0       0       0       0       0
 12304 ;;Total ram usage:        7 bytes
 12305 ;; Hardware stack levels used: 1
 12306 ;; Hardware stack levels required when called: 3
 12307 ;; This function calls:
 12308 ;;		Nothing
 12309 ;; This function is called by:
 12310 ;;		_atoi
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	text36
 12315  003C00                     __ptext36:
 12316                           	callstack 0
 12317  003C00                     _isspace:
 12318                           	callstack 23
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;incstack = 0
 12322  003C00  0E01               	movlw	1
 12323  003C02  6E20               	movwf	_isspace$2517^0,c
 12324  003C04  0E20               	movlw	32
 12325  003C06  181A               	xorwf	isspace@c^0,w,c
 12326  003C08  101B               	iorwf	(isspace@c+1)^0,w,c
 12327  003C0A  E011               	bz	l1713
 12328  003C0C  0EF7               	movlw	247
 12329  003C0E  6E1C               	movwf	??_isspace^0,c
 12330  003C10  681D               	setf	(??_isspace+1)^0,c
 12331  003C12  C01A  F01E         	movff	isspace@c,??_isspace+2
 12332  003C16  C01B  F01F         	movff	isspace@c+1,??_isspace+3
 12333  003C1A  501C               	movf	??_isspace^0,w,c
 12334  003C1C  261E               	addwf	(??_isspace+2)^0,f,c
 12335  003C1E  501D               	movf	(??_isspace+1)^0,w,c
 12336  003C20  221F               	addwfc	(??_isspace+3)^0,f,c
 12337  003C22  501F               	movf	(??_isspace+3)^0,w,c
 12338  003C24  E103               	bnz	u9820
 12339  003C26  0E05               	movlw	5
 12340  003C28  5C1E               	subwf	(??_isspace+2)^0,w,c
 12341  003C2A  E301               	bnc	l1713
 12342  003C2C                     u9820:
 12343  003C2C  6A20               	clrf	_isspace$2517^0,c
 12344  003C2E                     l1713:
 12345  003C2E  C020  F01A         	movff	_isspace$2517,?_isspace
 12346  003C32  6A1B               	clrf	(?_isspace+1)^0,c
 12347  003C34  0012               	return		;funcret
 12348  003C36                     __end_of_isspace:
 12349                           	callstack 0
 12350                           
 12351 ;; *************** function _isdigit *****************
 12352 ;; Defined at:
 12353 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  c               2   25[COMRAM] int 
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;		None
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  2   25[COMRAM] int 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12367 ;;      Params:         2       0       0       0       0       0       0
 12368 ;;      Locals:         0       0       0       0       0       0       0
 12369 ;;      Temps:          4       0       0       0       0       0       0
 12370 ;;      Totals:         6       0       0       0       0       0       0
 12371 ;;Total ram usage:        6 bytes
 12372 ;; Hardware stack levels used: 1
 12373 ;; Hardware stack levels required when called: 3
 12374 ;; This function calls:
 12375 ;;		Nothing
 12376 ;; This function is called by:
 12377 ;;		_vfpfcnvrt
 12378 ;;		_atoi
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text37
 12383  003D2C                     __ptext37:
 12384                           	callstack 0
 12385  003D2C                     _isdigit:
 12386                           	callstack 24
 12387                           
 12388                           ;incstack = 0
 12389  003D2C  0ED0               	movlw	208
 12390  003D2E  6E1C               	movwf	??_isdigit^0,c
 12391  003D30  681D               	setf	(??_isdigit+1)^0,c
 12392  003D32  C01A  F01E         	movff	isdigit@c,??_isdigit+2
 12393  003D36  C01B  F01F         	movff	isdigit@c+1,??_isdigit+3
 12394  003D3A  501C               	movf	??_isdigit^0,w,c
 12395  003D3C  261E               	addwf	(??_isdigit+2)^0,f,c
 12396  003D3E  501D               	movf	(??_isdigit+1)^0,w,c
 12397  003D40  221F               	addwfc	(??_isdigit+3)^0,f,c
 12398  003D42  501F               	movf	(??_isdigit+3)^0,w,c
 12399  003D44  E105               	bnz	u9790
 12400  003D46  0E0A               	movlw	10
 12401  003D48  5C1E               	subwf	(??_isdigit+2)^0,w,c
 12402  003D4A  E202               	bc	u9790
 12403  003D4C  0E01               	movlw	1
 12404  003D4E  D001               	goto	u9800
 12405  003D50                     u9790:
 12406  003D50  0E00               	movlw	0
 12407  003D52                     u9800:
 12408  003D52  6E1A               	movwf	?_isdigit^0,c
 12409  003D54  6A1B               	clrf	(?_isdigit+1)^0,c
 12410  003D56  0012               	return		;funcret
 12411  003D58                     __end_of_isdigit:
 12412                           	callstack 0
 12413                           
 12414 ;; *************** function _lcd_putc *****************
 12415 ;; Defined at:
 12416 ;;		line 112 in file "hd44780.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  c               1    wreg     unsigned char 
 12419 ;; Auto vars:     Size  Location     Type
 12420 ;;  c               1   29[COMRAM] unsigned char 
 12421 ;; Return value:  Size  Location     Type
 12422 ;;                  1    wreg      void 
 12423 ;; Registers used:
 12424 ;;		wreg, status,2, status,0, cstack
 12425 ;; Tracked objects:
 12426 ;;		On entry : 0/1
 12427 ;;		On exit  : 0/0
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12430 ;;      Params:         0       0       0       0       0       0       0
 12431 ;;      Locals:         1       0       0       0       0       0       0
 12432 ;;      Temps:          0       0       0       0       0       0       0
 12433 ;;      Totals:         1       0       0       0       0       0       0
 12434 ;;Total ram usage:        1 bytes
 12435 ;; Hardware stack levels used: 1
 12436 ;; Hardware stack levels required when called: 5
 12437 ;; This function calls:
 12438 ;;		_lcdWrite
 12439 ;; This function is called by:
 12440 ;;		_main
 12441 ;;		_show_lcd_main
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text38
 12446  003EAA                     __ptext38:
 12447                           	callstack 0
 12448  003EAA                     _lcd_putc:
 12449                           	callstack 24
 12450                           
 12451                           ;incstack = 0
 12452                           ;lcd_putc@c stored from wreg
 12453  003EAA  6E1E               	movwf	lcd_putc@c^0,c
 12454                           
 12455                           ;hd44780.c: 114:             lcdWrite(c, DATA);
 12456  003EAC  0E01               	movlw	1
 12457  003EAE  6E1C               	movwf	lcdWrite@type^0,c
 12458  003EB0  501E               	movf	lcd_putc@c^0,w,c
 12459  003EB2  EF4E  F01E         	goto	_lcdWrite
 12460  003EB6                     __end_of_lcd_putc:
 12461                           	callstack 0
 12462                           
 12463 ;; *************** function _lcdPrint *****************
 12464 ;; Defined at:
 12465 ;;		line 118 in file "hd44780.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  t               2   34[COMRAM] PTR const unsigned char 
 12468 ;;		 -> STR_23(11), STR_22(11), STR_16(19), STR_15(19), 
 12469 ;;		 -> STR_13(21), STR_12(15), STR_11(20), STR_10(19), 
 12470 ;;		 -> STR_9(22), STR_8(21), STR_7(21), STR_6(21), 
 12471 ;;		 -> STR_5(21), TxtBuf(21), STR_1(21), 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/1
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12483 ;;      Params:         2       0       0       0       0       0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0
 12485 ;;      Temps:          0       4       0       0       0       0       0
 12486 ;;      Totals:         2       4       0       0       0       0       0
 12487 ;;Total ram usage:        6 bytes
 12488 ;; Hardware stack levels used: 1
 12489 ;; Hardware stack levels required when called: 6
 12490 ;; This function calls:
 12491 ;;		_lcdWrite
 12492 ;;		_lcd_gotoxy
 12493 ;; This function is called by:
 12494 ;;		_main
 12495 ;;		_show_lcd_main
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text39
 12500  002DB2                     __ptext39:
 12501                           	callstack 0
 12502  002DB2                     _lcdPrint:
 12503                           	callstack 23
 12504                           
 12505                           ;hd44780.c: 119:     while(*t != '\0'){
 12506                           
 12507                           ;incstack = 0
 12508  002DB2  D065               	goto	l9334
 12509  002DB4                     l9314:
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;hd44780.c: 122:             lcdWrite(1, COMMAND);
 12513  002DB4  D87B               	call	PL212	;call to abstracted procedure
 12514  002DB6  EC4E  F01E         	call	_lcdWrite
 12515                           
 12516                           ;hd44780.c: 123:             _delay((unsigned long)((2)*(64000000/4000.0)));
 12517  002DBA  0E2A               	movlw	42
 12518  002DBC  0100               	movlb	0	; () banked
 12519  002DBE  6F60               	movwf	??_lcdPrint& (0+255),b
 12520  002DC0  0E8D               	movlw	141
 12521  002DC2                     u12167:
 12522  002DC2  2EE8               	decfsz	wreg,f,c
 12523  002DC4  D7FE               	bra	u12167
 12524  002DC6  2F60               	decfsz	??_lcdPrint& (0+255),f,b
 12525  002DC8  D7FC               	bra	u12167
 12526  002DCA  F000 F000          	nop2	
 12527                           
 12528                           ;hd44780.c: 124:             break;
 12529  002DCE  D055               	goto	l9332
 12530  002DD0                     l9318:
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;hd44780.c: 127:             lcd_gotoxy(1, 2);
 12534  002DD0  ECBD  F004         	call	PL132	;call to abstracted procedure
 12535  002DD4  EC0D  F01D         	call	_lcd_gotoxy
 12536                           
 12537                           ;hd44780.c: 128:             break;
 12538  002DD8  D050               	goto	l9332
 12539  002DDA                     l9320:
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;hd44780.c: 131:             lcdWrite(0x10, COMMAND);
 12543  002DDA  0E00               	movlw	0
 12544  002DDC  6E1C               	movwf	lcdWrite@type^0,c
 12545  002DDE  0E10               	movlw	16
 12546  002DE0  EC4E  F01E         	call	_lcdWrite
 12547                           
 12548                           ;hd44780.c: 132:             break;
 12549  002DE4  D04A               	goto	l9332
 12550  002DE6                     l9322:
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;hd44780.c: 135:                 if (*t < 0xC0) {
 12554  002DE6  D85B               	call	PL40	;call to abstracted procedure
 12555  002DE8  64F7               	cpfsgt	tblptrh,c
 12556  002DEA  D003               	bra	u11097
 12557  002DEC  0008               	tblrd		*
 12558  002DEE  50F5               	movf	tablat,w,c
 12559  002DF0  D001               	bra	u11090
 12560  002DF2                     u11097:
 12561  002DF2  D84F               	call	PL14	;call to abstracted procedure
 12562  002DF4                     u11090:
 12563  002DF4  0100               	movlb	0	; () banked
 12564  002DF6  6F60               	movwf	??_lcdPrint& (0+255),b
 12565  002DF8  0EC0               	movlw	192
 12566  002DFA  6160               	cpfslt	??_lcdPrint& (0+255),b
 12567  002DFC  D00C               	goto	l9326
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;hd44780.c: 136:                     lcdWrite(*t, DATA);
 12571  002DFE  0E01               	movlw	1
 12572  002E00  6E1C               	movwf	lcdWrite@type^0,c
 12573  002E02  D84D               	call	PL40	;call to abstracted procedure
 12574  002E04  64F7               	cpfsgt	tblptrh,c
 12575  002E06  D003               	bra	u11117
 12576  002E08  0008               	tblrd		*
 12577  002E0A  50F5               	movf	tablat,w,c
 12578  002E0C  D001               	bra	u11110
 12579  002E0E                     u11117:
 12580  002E0E  D841               	call	PL14	;call to abstracted procedure
 12581  002E10                     u11110:
 12582  002E10  EC4E  F01E         	call	_lcdWrite
 12583                           
 12584                           ;hd44780.c: 137:                 } else {
 12585  002E14  D032               	goto	l9332
 12586  002E16                     l9326:
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;hd44780.c: 138:                     lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], 
      +                          DATA);
 12590  002E16  0E01               	movlw	1
 12591  002E18  6E1C               	movwf	lcdWrite@type^0,c
 12592  002E1A  0E40               	movlw	64
 12593  002E1C  6F60               	movwf	??_lcdPrint& (0+255),b
 12594  002E1E  6961               	setf	(??_lcdPrint+1)& (0+255),b
 12595  002E20  D83E               	call	PL40	;call to abstracted procedure
 12596  002E22  64F7               	cpfsgt	tblptrh,c
 12597  002E24  D003               	bra	u11127
 12598  002E26  0008               	tblrd		*
 12599  002E28  50F5               	movf	tablat,w,c
 12600  002E2A  D001               	bra	u11120
 12601  002E2C                     u11127:
 12602  002E2C  D832               	call	PL14	;call to abstracted procedure
 12603  002E2E                     u11120:
 12604  002E2E  0100               	movlb	0	; () banked
 12605  002E30  6F62               	movwf	(??_lcdPrint+2)& (0+255),b
 12606  002E32  6B63               	clrf	(??_lcdPrint+3)& (0+255),b
 12607  002E34  5160               	movf	??_lcdPrint& (0+255),w,b
 12608  002E36  2762               	addwf	(??_lcdPrint+2)& (0+255),f,b
 12609  002E38  5161               	movf	(??_lcdPrint+1)& (0+255),w,b
 12610  002E3A  2363               	addwfc	(??_lcdPrint+3)& (0+255),f,b
 12611  002E3C  0EAD               	movlw	low _HD44780_CYR
 12612  002E3E  2562               	addwf	(??_lcdPrint+2)& (0+255),w,b
 12613  002E40  6EF6               	movwf	tblptrl,c
 12614  002E42  0E7D               	movlw	high _HD44780_CYR
 12615  002E44  2163               	addwfc	(??_lcdPrint+3)& (0+255),w,b
 12616  002E46  6EF7               	movwf	tblptrh,c
 12617  002E48                     	if	0	;There are less than 3 active tblptr bytes
 12618  002E48                     	endif
 12619  002E48  0008               	tblrd		*
 12620  002E4A  50F5               	movf	tablat,w,c
 12621  002E4C  EC4E  F01E         	call	_lcdWrite
 12622  002E50  D014               	goto	l9332
 12623  002E52                     l9330:
 12624  002E52  D825               	call	PL40	;call to abstracted procedure
 12625  002E54  64F7               	cpfsgt	tblptrh,c
 12626  002E56  D003               	bra	u11137
 12627  002E58  0008               	tblrd		*
 12628  002E5A  50F5               	movf	tablat,w,c
 12629  002E5C  D001               	bra	u11130
 12630  002E5E                     u11137:
 12631  002E5E  D819               	call	PL14	;call to abstracted procedure
 12632  002E60                     u11130:
 12633  002E60  0100               	movlb	0	; () banked
 12634  002E62  6F60               	movwf	??_lcdPrint& (0+255),b
 12635  002E64  6B61               	clrf	(??_lcdPrint+1)& (0+255),b
 12636                           
 12637                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12638                           ; Switch size 1, requested type "space"
 12639                           ; Number of cases is 1, Range of values is 0 to 0
 12640                           ; switch strategies available:
 12641                           ; Name         Instructions Cycles
 12642                           ; simple_byte            4     3 (average)
 12643                           ;	Chosen strategy is simple_byte
 12644  002E66  5161               	movf	(??_lcdPrint+1)& (0+255),w,b
 12645  002E68  E1BE               	bnz	l9322
 12646                           
 12647                           ; BSR set to: 0
 12648                           ; Switch size 1, requested type "space"
 12649                           ; Number of cases is 3, Range of values is 8 to 12
 12650                           ; switch strategies available:
 12651                           ; Name         Instructions Cycles
 12652                           ; simple_byte           10     6 (average)
 12653                           ;	Chosen strategy is simple_byte
 12654  002E6A  5160               	movf	??_lcdPrint& (0+255),w,b
 12655  002E6C  0A08               	xorlw	8	; case 8
 12656  002E6E  E0B5               	bz	l9320
 12657  002E70  0A02               	xorlw	2	; case 10
 12658  002E72  E0AE               	bz	l9318
 12659  002E74  0A06               	xorlw	6	; case 12
 12660  002E76  E09E               	bz	l9314
 12661  002E78  D7B6               	goto	l9322
 12662  002E7A                     l9332:
 12663                           
 12664                           ;hd44780.c: 143:         *t++;
 12665  002E7A  4A23               	infsnz	lcdPrint@t^0,f,c
 12666  002E7C  2A24               	incf	(lcdPrint@t+1)^0,f,c
 12667  002E7E                     l9334:
 12668                           
 12669                           ;hd44780.c: 119:     while(*t != '\0'){
 12670  002E7E  D80F               	call	PL40	;call to abstracted procedure
 12671  002E80  64F7               	cpfsgt	tblptrh,c
 12672  002E82  D003               	bra	u11147
 12673  002E84  0008               	tblrd		*
 12674  002E86  50F5               	movf	tablat,w,c
 12675  002E88  D001               	bra	u11140
 12676  002E8A                     u11147:
 12677  002E8A  D803               	call	PL14	;call to abstracted procedure
 12678  002E8C                     u11140:
 12679  002E8C  0900               	iorlw	0
 12680  002E8E  E1E1               	bnz	l9330
 12681  002E90  0012               	return		;funcret
 12682  002E92                     __end_of_lcdPrint:
 12683                           	callstack 0
 12684  002E92                     PL14:
 12685                           	callstack 24
 12686  002E92  CFF6 FFE1          	movff	tblptrl,fsr1l
 12687  002E96  CFF7 FFE2          	movff	tblptrh,fsr1h
 12688  002E9A  50E7               	movf	indf1,w,c
 12689  002E9C  0012               	return	
 12690  002E9E                     __end_ofPL14:
 12691                           	callstack 0
 12692  002E9E                     PL40:
 12693                           	callstack 23
 12694  002E9E  C023  FFF6         	movff	lcdPrint@t,tblptrl
 12695  002EA2  C024  FFF7         	movff	lcdPrint@t+1,tblptrh
 12696  002EA6  6AF8               	clrf	tblptru,c
 12697  002EA8  0E05               	movlw	(high __ramtop+-1)
 12698  002EAA  0012               	return	
 12699  002EAC                     __end_ofPL40:
 12700                           	callstack 0
 12701  002EAC                     PL212:
 12702                           	callstack 23
 12703  002EAC  0E00               	movlw	0
 12704  002EAE  6E1C               	movwf	lcdWrite@type^0,c
 12705  002EB0  0C01               	retlw	1
 12706  002EB2                     __end_ofPL212:
 12707                           	callstack 0
 12708                           
 12709 ;; *************** function _lcd_gotoxy *****************
 12710 ;; Defined at:
 12711 ;;		line 76 in file "hd44780.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  x               1    wreg     unsigned char 
 12714 ;;  y               1   29[COMRAM] unsigned char 
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;  x               1   32[COMRAM] unsigned char 
 12717 ;;  address         1   33[COMRAM] unsigned char 
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  1    wreg      void 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2, status,0, cstack
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/1
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12727 ;;      Params:         1       0       0       0       0       0       0
 12728 ;;      Locals:         2       0       0       0       0       0       0
 12729 ;;      Temps:          2       0       0       0       0       0       0
 12730 ;;      Totals:         5       0       0       0       0       0       0
 12731 ;;Total ram usage:        5 bytes
 12732 ;; Hardware stack levels used: 1
 12733 ;; Hardware stack levels required when called: 5
 12734 ;; This function calls:
 12735 ;;		_lcdWrite
 12736 ;; This function is called by:
 12737 ;;		_lcdPrint
 12738 ;;		_main
 12739 ;;		_show_lcd_main
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text40
 12744  003A1A                     __ptext40:
 12745                           	callstack 0
 12746  003A1A                     _lcd_gotoxy:
 12747                           	callstack 24
 12748                           
 12749                           ;incstack = 0
 12750                           ;lcd_gotoxy@x stored from wreg
 12751  003A1A  6E21               	movwf	lcd_gotoxy@x^0,c
 12752                           
 12753                           ;hd44780.c: 77:     uint8_t address;;hd44780.c: 82: switch(y)
 12754  003A1C  D009               	goto	l9156
 12755  003A1E                     l125:
 12756                           
 12757                           ;hd44780.c: 85:      address = 0x00;
 12758  003A1E  6A22               	clrf	lcd_gotoxy@address^0,c
 12759                           
 12760                           ;hd44780.c: 86:      break;
 12761  003A20  D016               	goto	l9158
 12762  003A22                     l9148:
 12763                           
 12764                           ;hd44780.c: 89:      address = 0x40;
 12765  003A22  0E40               	movlw	64
 12766  003A24  D003               	goto	L19
 12767  003A26                     l9150:
 12768                           
 12769                           ;hd44780.c: 93:      address = 0x14;
 12770  003A26  0E14               	movlw	20
 12771  003A28  D001               	goto	L19
 12772  003A2A                     l9152:
 12773                           
 12774                           ;hd44780.c: 97:      address = 0x54;
 12775  003A2A  0E54               	movlw	84
 12776  003A2C                     L19:
 12777  003A2C  6E22               	movwf	lcd_gotoxy@address^0,c
 12778                           
 12779                           ;hd44780.c: 98:      break;
 12780  003A2E  D00F               	goto	l9158
 12781  003A30                     l9156:
 12782  003A30  501E               	movf	lcd_gotoxy@y^0,w,c
 12783  003A32  6E1F               	movwf	??_lcd_gotoxy^0,c
 12784  003A34  6A20               	clrf	(??_lcd_gotoxy+1)^0,c
 12785                           
 12786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12787                           ; Switch size 1, requested type "space"
 12788                           ; Number of cases is 1, Range of values is 0 to 0
 12789                           ; switch strategies available:
 12790                           ; Name         Instructions Cycles
 12791                           ; simple_byte            4     3 (average)
 12792                           ;	Chosen strategy is simple_byte
 12793  003A36  5020               	movf	(??_lcd_gotoxy+1)^0,w,c
 12794  003A38  E1F2               	bnz	l125
 12795                           
 12796                           ; Switch size 1, requested type "space"
 12797                           ; Number of cases is 4, Range of values is 1 to 4
 12798                           ; switch strategies available:
 12799                           ; Name         Instructions Cycles
 12800                           ; simple_byte           13     7 (average)
 12801                           ;	Chosen strategy is simple_byte
 12802  003A3A  501F               	movf	??_lcd_gotoxy^0,w,c
 12803  003A3C  0A01               	xorlw	1	; case 1
 12804  003A3E  E0EF               	bz	l125
 12805  003A40  0A03               	xorlw	3	; case 2
 12806  003A42  E0EF               	bz	l9148
 12807  003A44  0A01               	xorlw	1	; case 3
 12808  003A46  E0EF               	bz	l9150
 12809  003A48  0A07               	xorlw	7	; case 4
 12810  003A4A  E0EF               	bz	l9152
 12811  003A4C  D7E8               	goto	l125
 12812  003A4E                     l9158:
 12813                           
 12814                           ;hd44780.c: 106:     address += x - 1;
 12815  003A4E  0421               	decf	lcd_gotoxy@x^0,w,c
 12816  003A50  2622               	addwf	lcd_gotoxy@address^0,f,c
 12817                           
 12818                           ;hd44780.c: 107:     lcdWrite(0x80 | address, COMMAND);
 12819  003A52  6A1C               	clrf	lcdWrite@type^0,c
 12820  003A54  5022               	movf	lcd_gotoxy@address^0,w,c
 12821  003A56  0980               	iorlw	128
 12822  003A58  EF4E  F01E         	goto	_lcdWrite
 12823  003A5C                     __end_of_lcd_gotoxy:
 12824                           	callstack 0
 12825                           
 12826 ;; *************** function _calc_power *****************
 12827 ;; Defined at:
 12828 ;;		line 725 in file "main.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  pwr             1    wreg     unsigned char 
 12831 ;;  res             4    7[BANK0 ] unsigned long 
 12832 ;;  u_rl            2   11[BANK0 ] unsigned short 
 12833 ;; Auto vars:     Size  Location     Type
 12834 ;;  pwr             1   25[BANK0 ] unsigned char 
 12835 ;;  tt              4   15[BANK0 ] unsigned long 
 12836 ;;  p_w             2   26[BANK0 ] unsigned short 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  2    7[BANK0 ] unsigned short 
 12839 ;; Registers used:
 12840 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 3E/0
 12843 ;;		On exit  : 3F/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12846 ;;      Params:         0       6       0       0       0       0       0
 12847 ;;      Locals:         0      13       0       0       0       0       0
 12848 ;;      Temps:          0       2       0       0       0       0       0
 12849 ;;      Totals:         0      21       0       0       0       0       0
 12850 ;;Total ram usage:       21 bytes
 12851 ;; Hardware stack levels used: 1
 12852 ;; Hardware stack levels required when called: 4
 12853 ;; This function calls:
 12854 ;;		___lldiv
 12855 ;;		___lmul
 12856 ;;		___lwdiv
 12857 ;;		___lwmod
 12858 ;;		___wmul
 12859 ;; This function is called by:
 12860 ;;		_main
 12861 ;;		_show_lcd_main
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text41
 12866  0026C0                     __ptext41:
 12867                           	callstack 0
 12868  0026C0                     _calc_power:
 12869                           	callstack 25
 12870                           
 12871                           ;incstack = 0
 12872                           ;calc_power@pwr stored from wreg
 12873  0026C0  0100               	movlb	0	; () banked
 12874  0026C2  6F79               	movwf	calc_power@pwr& (0+255),b
 12875                           
 12876                           ;main.c: 726:     uint32_t tt;;main.c: 727:     uint16_t p_w;;main.c: 729:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 12877  0026C4  C06B  F01A         	movff	calc_power@u_rl,___lmul@multiplier
 12878  0026C8  C06C  F01B         	movff	calc_power@u_rl+1,___lmul@multiplier+1
 12879  0026CC  6A1C               	clrf	(___lmul@multiplier+2)^0,c
 12880  0026CE  6A1D               	clrf	(___lmul@multiplier+3)^0,c
 12881  0026D0  C06B  F01E         	movff	calc_power@u_rl,___lmul@multiplicand
 12882  0026D4  C06C  F01F         	movff	calc_power@u_rl+1,___lmul@multiplicand+1
 12883  0026D8  6A20               	clrf	(___lmul@multiplicand+2)^0,c
 12884  0026DA  6A21               	clrf	(___lmul@multiplicand+3)^0,c
 12885  0026DC  EC04  F01C         	call	___lmul	;wreg free
 12886  0026E0  C01A  F073         	movff	?___lmul,_calc_power$2869
 12887  0026E4  C01B  F074         	movff	?___lmul+1,_calc_power$2869+1
 12888  0026E8  C01C  F075         	movff	?___lmul+2,_calc_power$2869+2
 12889  0026EC  C01D  F076         	movff	?___lmul+3,_calc_power$2869+3
 12890                           
 12891                           ;main.c: 726:     uint32_t tt;;main.c: 727:     uint16_t p_w;;main.c: 729:     tt = (uin
      +                          t32_t) u_rl * u_rl * 1000;
 12892  0026F0  C073  F01A         	movff	_calc_power$2869,___lmul@multiplier
 12893  0026F4  C074  F01B         	movff	_calc_power$2869+1,___lmul@multiplier+1
 12894  0026F8  C075  F01C         	movff	_calc_power$2869+2,___lmul@multiplier+2
 12895  0026FC  C076  F01D         	movff	_calc_power$2869+3,___lmul@multiplier+3
 12896  002700  0EE8               	movlw	232
 12897  002702  6E1E               	movwf	___lmul@multiplicand^0,c
 12898  002704  0E03               	movlw	3
 12899  002706  6E1F               	movwf	(___lmul@multiplicand+1)^0,c
 12900  002708  6A20               	clrf	(___lmul@multiplicand+2)^0,c
 12901  00270A  6A21               	clrf	(___lmul@multiplicand+3)^0,c
 12902  00270C  EC04  F01C         	call	___lmul	;wreg free
 12903  002710  C01A  F06F         	movff	?___lmul,calc_power@tt
 12904  002714  C01B  F070         	movff	?___lmul+1,calc_power@tt+1
 12905  002718  C01C  F071         	movff	?___lmul+2,calc_power@tt+2
 12906  00271C  C01D  F072         	movff	?___lmul+3,calc_power@tt+3
 12907                           
 12908                           ;main.c: 730:     p_w = tt / res;
 12909  002720  C06F  F01A         	movff	calc_power@tt,___lldiv@dividend
 12910  002724  C070  F01B         	movff	calc_power@tt+1,___lldiv@dividend+1
 12911  002728  C071  F01C         	movff	calc_power@tt+2,___lldiv@dividend+2
 12912  00272C  C072  F01D         	movff	calc_power@tt+3,___lldiv@dividend+3
 12913  002730  C067  F01E         	movff	calc_power@res,___lldiv@divisor
 12914  002734  C068  F01F         	movff	calc_power@res+1,___lldiv@divisor+1
 12915  002738  C069  F020         	movff	calc_power@res+2,___lldiv@divisor+2
 12916  00273C  C06A  F021         	movff	calc_power@res+3,___lldiv@divisor+3
 12917  002740  EC10  F01B         	call	___lldiv	;wreg free
 12918  002744  C01A  F07A         	movff	?___lldiv,calc_power@p_w
 12919  002748  C01B  F07B         	movff	?___lldiv+1,calc_power@p_w+1
 12920                           
 12921                           ; BSR set to: 0
 12922                           ;main.c: 732:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 12923  00274C  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
 12924  00274E  0E0A               	movlw	10
 12925  002750  6E1C               	movwf	___lwdiv@divisor^0,c
 12926  002752  6A24               	clrf	(___lwmod@divisor+1)^0,c
 12927  002754  0E64               	movlw	100
 12928  002756  D854               	call	PL156	;call to abstracted procedure
 12929  002758  EC2E  F01D         	call	___lwmod	;wreg free
 12930  00275C  C021  F01A         	movff	?___lwmod,___lwdiv@dividend
 12931  002760  C022  F01B         	movff	?___lwmod+1,___lwdiv@dividend+1
 12932  002764  ECC5  F01C         	call	___lwdiv	;wreg free
 12933  002768  D842               	call	PL108	;call to abstracted procedure
 12934  00276A  ECD6  F01E         	call	___wmul	;wreg free
 12935  00276E  C061  F077         	movff	?___wmul,_calc_power$2870
 12936  002772  C062  F078         	movff	?___wmul+1,_calc_power$2870+1
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;main.c: 732:     return ((p_w / 100 * pwr)+(((p_w % 100) / 10) * pwr / 10) + ((p_w % 10
      +                          ) * pwr / 100));
 12940  002776  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
 12941  002778  0E64               	movlw	100
 12942  00277A  6E1C               	movwf	___lwdiv@divisor^0,c
 12943  00277C  C07A  F01A         	movff	calc_power@p_w,___lwdiv@dividend
 12944  002780  C07B  F01B         	movff	calc_power@p_w+1,___lwdiv@dividend+1
 12945  002784  ECC5  F01C         	call	___lwdiv	;wreg free
 12946  002788  D832               	call	PL108	;call to abstracted procedure
 12947  00278A  ECD6  F01E         	call	___wmul	;wreg free
 12948  00278E  C061  F06D         	movff	?___wmul,??_calc_power
 12949  002792  C062  F06E         	movff	?___wmul+1,??_calc_power+1
 12950  002796  C077  F01A         	movff	_calc_power$2870,___lwdiv@dividend
 12951  00279A  C078  F01B         	movff	_calc_power$2870+1,___lwdiv@dividend+1
 12952  00279E  D836               	call	PL210	;call to abstracted procedure
 12953  0027A0  ECC5  F01C         	call	___lwdiv	;wreg free
 12954  0027A4  501A               	movf	?___lwdiv^0,w,c
 12955  0027A6  0100               	movlb	0	; () banked
 12956  0027A8  276D               	addwf	??_calc_power& (0+255),f,b
 12957  0027AA  501B               	movf	(?___lwdiv+1)^0,w,c
 12958  0027AC  236E               	addwfc	(??_calc_power+1)& (0+255),f,b
 12959  0027AE  6A24               	clrf	(___lwmod@divisor+1)^0,c
 12960  0027B0  0E0A               	movlw	10
 12961  0027B2  D826               	call	PL156	;call to abstracted procedure
 12962  0027B4  EC2E  F01D         	call	___lwmod	;wreg free
 12963  0027B8  C021  F061         	movff	?___lwmod,___wmul@multiplier
 12964  0027BC  C022  F062         	movff	?___lwmod+1,___wmul@multiplier+1
 12965  0027C0  C079  F063         	movff	calc_power@pwr,___wmul@multiplicand
 12966  0027C4  0100               	movlb	0	; () banked
 12967  0027C6  6B64               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12968  0027C8  ECD6  F01E         	call	___wmul	;wreg free
 12969  0027CC  C061  F01A         	movff	?___wmul,___lwdiv@dividend
 12970  0027D0  C062  F01B         	movff	?___wmul+1,___lwdiv@dividend+1
 12971  0027D4  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
 12972  0027D6  0E64               	movlw	100
 12973  0027D8  6E1C               	movwf	___lwdiv@divisor^0,c
 12974  0027DA  ECC5  F01C         	call	___lwdiv	;wreg free
 12975  0027DE  501A               	movf	?___lwdiv^0,w,c
 12976  0027E0  0100               	movlb	0	; () banked
 12977  0027E2  256D               	addwf	??_calc_power& (0+255),w,b
 12978  0027E4  6F67               	movwf	?_calc_power& (0+255),b
 12979  0027E6  501B               	movf	(?___lwdiv+1)^0,w,c
 12980  0027E8  216E               	addwfc	(??_calc_power+1)& (0+255),w,b
 12981  0027EA  6F68               	movwf	(?_calc_power+1)& (0+255),b
 12982                           
 12983                           ; BSR set to: 0
 12984  0027EC  0012               	return		;funcret
 12985  0027EE                     __end_of_calc_power:
 12986                           	callstack 0
 12987  0027EE                     PL108:
 12988                           	callstack 25
 12989  0027EE  C01A  F061         	movff	?___lwdiv,___wmul@multiplier
 12990  0027F2  C01B  F062         	movff	?___lwdiv+1,___wmul@multiplier+1
 12991  0027F6  C079  F063         	movff	calc_power@pwr,___wmul@multiplicand
 12992  0027FA  0100               	movlb	0	; () banked
 12993  0027FC  6B64               	clrf	(___wmul@multiplicand+1)& (0+255),b
 12994  0027FE  0012               	return	
 12995  002800                     __end_ofPL108:
 12996                           	callstack 0
 12997  002800                     PL156:
 12998                           	callstack 25
 12999  002800  6E23               	movwf	___lwmod@divisor^0,c
 13000  002802  C07A  F021         	movff	calc_power@p_w,___lwmod@dividend
 13001  002806  C07B  F022         	movff	calc_power@p_w+1,___lwmod@dividend+1
 13002  00280A  0012               	return	
 13003  00280C                     __end_ofPL156:
 13004                           	callstack 0
 13005  00280C                     PL210:
 13006                           	callstack 19
 13007  00280C  6A1D               	clrf	(___lwdiv@divisor+1)^0,c
 13008  00280E  0E0A               	movlw	10
 13009  002810  6E1C               	movwf	___lwdiv@divisor^0,c
 13010  002812  0C0A               	retlw	10
 13011  002814                     __end_ofPL210:
 13012                           	callstack 0
 13013                           
 13014 ;; *************** function ___wmul *****************
 13015 ;; Defined at:
 13016 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 13017 ;; Parameters:    Size  Location     Type
 13018 ;;  multiplier      2    1[BANK0 ] unsigned int 
 13019 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  product         2    5[BANK0 ] unsigned int 
 13022 ;; Return value:  Size  Location     Type
 13023 ;;                  2    1[BANK0 ] unsigned int 
 13024 ;; Registers used:
 13025 ;;		wreg, status,2, status,0, prodl, prodh
 13026 ;; Tracked objects:
 13027 ;;		On entry : 3F/0
 13028 ;;		On exit  : 3F/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13031 ;;      Params:         0       4       0       0       0       0       0
 13032 ;;      Locals:         0       2       0       0       0       0       0
 13033 ;;      Temps:          0       0       0       0       0       0       0
 13034 ;;      Totals:         0       6       0       0       0       0       0
 13035 ;;Total ram usage:        6 bytes
 13036 ;; Hardware stack levels used: 1
 13037 ;; Hardware stack levels required when called: 3
 13038 ;; This function calls:
 13039 ;;		Nothing
 13040 ;; This function is called by:
 13041 ;;		_calc_power
 13042 ;;		_atoi
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           	psect	text42
 13047  003DAC                     __ptext42:
 13048                           	callstack 0
 13049  003DAC                     ___wmul:
 13050                           	callstack 23
 13051                           
 13052                           ; BSR set to: 0
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;incstack = 0
 13056  003DAC  5161               	movf	___wmul@multiplier& (0+255),w,b
 13057  003DAE  0363               	mulwf	___wmul@multiplicand& (0+255),b
 13058  003DB0  CFF3 F065          	movff	prodl,___wmul@product
 13059  003DB4  CFF4 F066          	movff	prodh,___wmul@product+1
 13060  003DB8  5161               	movf	___wmul@multiplier& (0+255),w,b
 13061  003DBA  0364               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13062  003DBC  50F3               	movf	243,w,c
 13063  003DBE  2766               	addwf	(___wmul@product+1)& (0+255),f,b
 13064  003DC0  5162               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13065  003DC2  0363               	mulwf	___wmul@multiplicand& (0+255),b
 13066  003DC4  50F3               	movf	243,w,c
 13067  003DC6  2766               	addwf	(___wmul@product+1)& (0+255),f,b
 13068                           
 13069                           ; BSR set to: 0
 13070  003DC8  C065  F061         	movff	___wmul@product,?___wmul
 13071  003DCC  C066  F062         	movff	___wmul@product+1,?___wmul+1
 13072                           
 13073                           ; BSR set to: 0
 13074  003DD0  0012               	return		;funcret
 13075  003DD2                     __end_of___wmul:
 13076                           	callstack 0
 13077                           
 13078 ;; *************** function ___lwmod *****************
 13079 ;; Defined at:
 13080 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;  dividend        2   32[COMRAM] unsigned int 
 13083 ;;  divisor         2   34[COMRAM] unsigned int 
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  counter         1    0[BANK0 ] unsigned char 
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  2   32[COMRAM] unsigned int 
 13088 ;; Registers used:
 13089 ;;		wreg, status,2, status,0
 13090 ;; Tracked objects:
 13091 ;;		On entry : 0/1
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13095 ;;      Params:         4       0       0       0       0       0       0
 13096 ;;      Locals:         0       1       0       0       0       0       0
 13097 ;;      Temps:          0       0       0       0       0       0       0
 13098 ;;      Totals:         4       1       0       0       0       0       0
 13099 ;;Total ram usage:        5 bytes
 13100 ;; Hardware stack levels used: 1
 13101 ;; Hardware stack levels required when called: 3
 13102 ;; This function calls:
 13103 ;;		Nothing
 13104 ;; This function is called by:
 13105 ;;		_show_lcd_main
 13106 ;;		_calc_power
 13107 ;; This function uses a non-reentrant model
 13108 ;;
 13109                           
 13110                           	psect	text43
 13111  003A5C                     __ptext43:
 13112                           	callstack 0
 13113  003A5C                     ___lwmod:
 13114                           	callstack 25
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;incstack = 0
 13118  003A5C  5023               	movf	___lwmod@divisor^0,w,c
 13119  003A5E  1024               	iorwf	(___lwmod@divisor+1)^0,w,c
 13120  003A60  E018               	bz	l1234
 13121  003A62  0E01               	movlw	1
 13122  003A64  0100               	movlb	0	; () banked
 13123  003A66  6F60               	movwf	___lwmod@counter& (0+255),b
 13124  003A68  D004               	goto	l9262
 13125  003A6A                     l9260:
 13126                           
 13127                           ; BSR set to: 0
 13128  003A6A  90D8               	bcf	status,0,c
 13129  003A6C  3623               	rlcf	___lwmod@divisor^0,f,c
 13130  003A6E  3624               	rlcf	(___lwmod@divisor+1)^0,f,c
 13131  003A70  2B60               	incf	___lwmod@counter& (0+255),f,b
 13132  003A72                     l9262:
 13133                           
 13134                           ; BSR set to: 0
 13135  003A72  AE24               	btfss	(___lwmod@divisor+1)^0,7,c
 13136  003A74  D7FA               	goto	l9260
 13137  003A76                     u11060:
 13138                           
 13139                           ; BSR set to: 0
 13140  003A76  5023               	movf	___lwmod@divisor^0,w,c
 13141  003A78  5C21               	subwf	___lwmod@dividend^0,w,c
 13142  003A7A  5024               	movf	(___lwmod@divisor+1)^0,w,c
 13143  003A7C  5822               	subwfb	(___lwmod@dividend+1)^0,w,c
 13144  003A7E  E304               	bnc	l9268
 13145                           
 13146                           ; BSR set to: 0
 13147  003A80  5023               	movf	___lwmod@divisor^0,w,c
 13148  003A82  5E21               	subwf	___lwmod@dividend^0,f,c
 13149  003A84  5024               	movf	(___lwmod@divisor+1)^0,w,c
 13150  003A86  5A22               	subwfb	(___lwmod@dividend+1)^0,f,c
 13151  003A88                     l9268:
 13152                           
 13153                           ; BSR set to: 0
 13154  003A88  90D8               	bcf	status,0,c
 13155  003A8A  3224               	rrcf	(___lwmod@divisor+1)^0,f,c
 13156  003A8C  3223               	rrcf	___lwmod@divisor^0,f,c
 13157                           
 13158                           ; BSR set to: 0
 13159  003A8E  2F60               	decfsz	___lwmod@counter& (0+255),f,b
 13160  003A90  D7F2               	goto	u11060
 13161  003A92                     l1234:
 13162  003A92  C021  F021         	movff	___lwmod@dividend,?___lwmod
 13163  003A96  C022  F022         	movff	___lwmod@dividend+1,?___lwmod+1
 13164  003A9A  0012               	return		;funcret
 13165  003A9C                     __end_of___lwmod:
 13166                           	callstack 0
 13167                           
 13168 ;; *************** function ___lwdiv *****************
 13169 ;; Defined at:
 13170 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  dividend        2   25[COMRAM] unsigned int 
 13173 ;;  divisor         2   27[COMRAM] unsigned int 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  quotient        2   30[COMRAM] unsigned int 
 13176 ;;  counter         1   29[COMRAM] unsigned char 
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  2   25[COMRAM] unsigned int 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13186 ;;      Params:         4       0       0       0       0       0       0
 13187 ;;      Locals:         3       0       0       0       0       0       0
 13188 ;;      Temps:          0       0       0       0       0       0       0
 13189 ;;      Totals:         7       0       0       0       0       0       0
 13190 ;;Total ram usage:        7 bytes
 13191 ;; Hardware stack levels used: 1
 13192 ;; Hardware stack levels required when called: 3
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_main
 13197 ;;		_show_lcd_main
 13198 ;;		_calc_power
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           	psect	text44
 13203  00398A                     __ptext44:
 13204                           	callstack 0
 13205  00398A                     ___lwdiv:
 13206                           	callstack 25
 13207                           
 13208                           ;incstack = 0
 13209  00398A  6A1F               	clrf	___lwdiv@quotient^0,c
 13210  00398C  6A20               	clrf	(___lwdiv@quotient+1)^0,c
 13211  00398E  501C               	movf	___lwdiv@divisor^0,w,c
 13212  003990  101D               	iorwf	(___lwdiv@divisor+1)^0,w,c
 13213  003992  E01B               	bz	l1224
 13214  003994  0E01               	movlw	1
 13215  003996  6E1E               	movwf	___lwdiv@counter^0,c
 13216  003998  D004               	goto	l9242
 13217  00399A                     l9240:
 13218  00399A  90D8               	bcf	status,0,c
 13219  00399C  361C               	rlcf	___lwdiv@divisor^0,f,c
 13220  00399E  361D               	rlcf	(___lwdiv@divisor+1)^0,f,c
 13221  0039A0  2A1E               	incf	___lwdiv@counter^0,f,c
 13222  0039A2                     l9242:
 13223  0039A2  AE1D               	btfss	(___lwdiv@divisor+1)^0,7,c
 13224  0039A4  D7FA               	goto	l9240
 13225  0039A6                     u11030:
 13226  0039A6  90D8               	bcf	status,0,c
 13227  0039A8  361F               	rlcf	___lwdiv@quotient^0,f,c
 13228  0039AA  3620               	rlcf	(___lwdiv@quotient+1)^0,f,c
 13229  0039AC  501C               	movf	___lwdiv@divisor^0,w,c
 13230  0039AE  5C1A               	subwf	___lwdiv@dividend^0,w,c
 13231  0039B0  501D               	movf	(___lwdiv@divisor+1)^0,w,c
 13232  0039B2  581B               	subwfb	(___lwdiv@dividend+1)^0,w,c
 13233  0039B4  E305               	bnc	l9252
 13234  0039B6  501C               	movf	___lwdiv@divisor^0,w,c
 13235  0039B8  5E1A               	subwf	___lwdiv@dividend^0,f,c
 13236  0039BA  501D               	movf	(___lwdiv@divisor+1)^0,w,c
 13237  0039BC  5A1B               	subwfb	(___lwdiv@dividend+1)^0,f,c
 13238  0039BE  801F               	bsf	___lwdiv@quotient^0,0,c
 13239  0039C0                     l9252:
 13240  0039C0  90D8               	bcf	status,0,c
 13241  0039C2  321D               	rrcf	(___lwdiv@divisor+1)^0,f,c
 13242  0039C4  321C               	rrcf	___lwdiv@divisor^0,f,c
 13243  0039C6  2E1E               	decfsz	___lwdiv@counter^0,f,c
 13244  0039C8  D7EE               	goto	u11030
 13245  0039CA                     l1224:
 13246  0039CA  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 13247  0039CE  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13248  0039D2  0012               	return		;funcret
 13249  0039D4                     __end_of___lwdiv:
 13250                           	callstack 0
 13251                           
 13252 ;; *************** function ___lmul *****************
 13253 ;; Defined at:
 13254 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;  multiplier      4   25[COMRAM] unsigned long 
 13257 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  product         4    0[BANK0 ] unsigned long 
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  4   25[COMRAM] unsigned long 
 13262 ;; Registers used:
 13263 ;;		wreg, status,2, status,0
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/1
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13269 ;;      Params:         8       0       0       0       0       0       0
 13270 ;;      Locals:         0       4       0       0       0       0       0
 13271 ;;      Temps:          0       0       0       0       0       0       0
 13272 ;;      Totals:         8       4       0       0       0       0       0
 13273 ;;Total ram usage:       12 bytes
 13274 ;; Hardware stack levels used: 1
 13275 ;; Hardware stack levels required when called: 3
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_main
 13280 ;;		_calc_power
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           	psect	text45
 13285  003808                     __ptext45:
 13286                           	callstack 0
 13287  003808                     ___lmul:
 13288                           	callstack 25
 13289                           
 13290                           ;incstack = 0
 13291  003808  0100               	movlb	0	; () banked
 13292  00380A  6B60               	clrf	___lmul@product& (0+255),b
 13293  00380C  6B61               	clrf	(___lmul@product+1)& (0+255),b
 13294  00380E  6B62               	clrf	(___lmul@product+2)& (0+255),b
 13295  003810  6B63               	clrf	(___lmul@product+3)& (0+255),b
 13296  003812                     l742:
 13297  003812  A01A               	btfss	___lmul@multiplier^0,0,c
 13298  003814  D009               	goto	l9208
 13299  003816  501E               	movf	___lmul@multiplicand^0,w,c
 13300  003818  0100               	movlb	0	; () banked
 13301  00381A  2760               	addwf	___lmul@product& (0+255),f,b
 13302  00381C  501F               	movf	(___lmul@multiplicand+1)^0,w,c
 13303  00381E  2361               	addwfc	(___lmul@product+1)& (0+255),f,b
 13304  003820  5020               	movf	(___lmul@multiplicand+2)^0,w,c
 13305  003822  2362               	addwfc	(___lmul@product+2)& (0+255),f,b
 13306  003824  5021               	movf	(___lmul@multiplicand+3)^0,w,c
 13307  003826  2363               	addwfc	(___lmul@product+3)& (0+255),f,b
 13308  003828                     l9208:
 13309  003828  90D8               	bcf	status,0,c
 13310  00382A  361E               	rlcf	___lmul@multiplicand^0,f,c
 13311  00382C  361F               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13312  00382E  3620               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13313  003830  3621               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13314  003832  90D8               	bcf	status,0,c
 13315  003834  321D               	rrcf	(___lmul@multiplier+3)^0,f,c
 13316  003836  321C               	rrcf	(___lmul@multiplier+2)^0,f,c
 13317  003838  321B               	rrcf	(___lmul@multiplier+1)^0,f,c
 13318  00383A  321A               	rrcf	___lmul@multiplier^0,f,c
 13319  00383C  501A               	movf	___lmul@multiplier^0,w,c
 13320  00383E  101B               	iorwf	(___lmul@multiplier+1)^0,w,c
 13321  003840  101C               	iorwf	(___lmul@multiplier+2)^0,w,c
 13322  003842  101D               	iorwf	(___lmul@multiplier+3)^0,w,c
 13323  003844  E1E6               	bnz	l742
 13324  003846  C060  F01A         	movff	___lmul@product,?___lmul
 13325  00384A  C061  F01B         	movff	___lmul@product+1,?___lmul+1
 13326  00384E  C062  F01C         	movff	___lmul@product+2,?___lmul+2
 13327  003852  C063  F01D         	movff	___lmul@product+3,?___lmul+3
 13328  003856  0012               	return		;funcret
 13329  003858                     __end_of___lmul:
 13330                           	callstack 0
 13331                           
 13332 ;; *************** function ___lldiv *****************
 13333 ;; Defined at:
 13334 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;  dividend        4   25[COMRAM] unsigned long 
 13337 ;;  divisor         4   29[COMRAM] unsigned long 
 13338 ;; Auto vars:     Size  Location     Type
 13339 ;;  quotient        4    0[BANK0 ] unsigned long 
 13340 ;;  counter         1    4[BANK0 ] unsigned char 
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  4   25[COMRAM] unsigned long 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/1
 13347 ;;		On exit  : 3F/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13350 ;;      Params:         8       0       0       0       0       0       0
 13351 ;;      Locals:         0       5       0       0       0       0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0
 13353 ;;      Totals:         8       5       0       0       0       0       0
 13354 ;;Total ram usage:       13 bytes
 13355 ;; Hardware stack levels used: 1
 13356 ;; Hardware stack levels required when called: 3
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_main
 13361 ;;		_calc_power
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           	psect	text46
 13366  003620                     __ptext46:
 13367                           	callstack 0
 13368  003620                     ___lldiv:
 13369                           	callstack 25
 13370                           
 13371                           ;incstack = 0
 13372  003620  0100               	movlb	0	; () banked
 13373  003622  6B60               	clrf	___lldiv@quotient& (0+255),b
 13374  003624  6B61               	clrf	(___lldiv@quotient+1)& (0+255),b
 13375  003626  6B62               	clrf	(___lldiv@quotient+2)& (0+255),b
 13376  003628  6B63               	clrf	(___lldiv@quotient+3)& (0+255),b
 13377                           
 13378                           ; BSR set to: 0
 13379  00362A  501E               	movf	___lldiv@divisor^0,w,c
 13380  00362C  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
 13381  00362E  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
 13382  003630  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
 13383  003632  E029               	bz	l760
 13384                           
 13385                           ; BSR set to: 0
 13386  003634  0E01               	movlw	1
 13387  003636  6F64               	movwf	___lldiv@counter& (0+255),b
 13388  003638  D006               	goto	l9220
 13389  00363A                     l9218:
 13390                           
 13391                           ; BSR set to: 0
 13392  00363A  90D8               	bcf	status,0,c
 13393  00363C  361E               	rlcf	___lldiv@divisor^0,f,c
 13394  00363E  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
 13395  003640  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
 13396  003642  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
 13397  003644  2B64               	incf	___lldiv@counter& (0+255),f,b
 13398  003646                     l9220:
 13399                           
 13400                           ; BSR set to: 0
 13401  003646  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
 13402  003648  D7F8               	goto	l9218
 13403  00364A                     u11000:
 13404                           
 13405                           ; BSR set to: 0
 13406  00364A  90D8               	bcf	status,0,c
 13407  00364C  3760               	rlcf	___lldiv@quotient& (0+255),f,b
 13408  00364E  3761               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13409  003650  3762               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13410  003652  3763               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13411                           
 13412                           ; BSR set to: 0
 13413  003654  501E               	movf	___lldiv@divisor^0,w,c
 13414  003656  5C1A               	subwf	___lldiv@dividend^0,w,c
 13415  003658  501F               	movf	(___lldiv@divisor+1)^0,w,c
 13416  00365A  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
 13417  00365C  5020               	movf	(___lldiv@divisor+2)^0,w,c
 13418  00365E  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
 13419  003660  5021               	movf	(___lldiv@divisor+3)^0,w,c
 13420  003662  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
 13421  003664  E309               	bnc	l9230
 13422                           
 13423                           ; BSR set to: 0
 13424  003666  501E               	movf	___lldiv@divisor^0,w,c
 13425  003668  5E1A               	subwf	___lldiv@dividend^0,f,c
 13426  00366A  501F               	movf	(___lldiv@divisor+1)^0,w,c
 13427  00366C  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
 13428  00366E  5020               	movf	(___lldiv@divisor+2)^0,w,c
 13429  003670  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
 13430  003672  5021               	movf	(___lldiv@divisor+3)^0,w,c
 13431  003674  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
 13432                           
 13433                           ; BSR set to: 0
 13434  003676  8160               	bsf	___lldiv@quotient& (0+255),0,b
 13435  003678                     l9230:
 13436                           
 13437                           ; BSR set to: 0
 13438  003678  90D8               	bcf	status,0,c
 13439  00367A  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
 13440  00367C  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
 13441  00367E  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
 13442  003680  321E               	rrcf	___lldiv@divisor^0,f,c
 13443                           
 13444                           ; BSR set to: 0
 13445  003682  2F64               	decfsz	___lldiv@counter& (0+255),f,b
 13446  003684  D7E2               	goto	u11000
 13447  003686                     l760:
 13448                           
 13449                           ; BSR set to: 0
 13450  003686  C060  F01A         	movff	___lldiv@quotient,?___lldiv
 13451  00368A  C061  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13452  00368E  C062  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13453  003692  C063  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13454                           
 13455                           ; BSR set to: 0
 13456  003696  0012               	return		;funcret
 13457  003698                     __end_of___lldiv:
 13458                           	callstack 0
 13459                           
 13460 ;; *************** function _read_eep *****************
 13461 ;; Defined at:
 13462 ;;		line 25 in file "eeprom.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;  address         2   25[COMRAM] unsigned short 
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;		None
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  1    wreg      unsigned char 
 13469 ;; Registers used:
 13470 ;;		wreg, status,2
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/1
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13476 ;;      Params:         2       0       0       0       0       0       0
 13477 ;;      Locals:         0       0       0       0       0       0       0
 13478 ;;      Temps:          0       0       0       0       0       0       0
 13479 ;;      Totals:         2       0       0       0       0       0       0
 13480 ;;Total ram usage:        2 bytes
 13481 ;; Hardware stack levels used: 1
 13482 ;; Hardware stack levels required when called: 3
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_main
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text47
 13491  003E8C                     __ptext47:
 13492                           	callstack 0
 13493  003E8C                     _read_eep:
 13494                           	callstack 27
 13495                           
 13496                           ;eeprom.c: 27:     while( EECON1bits.WR )
 13497                           
 13498                           ;eeprom.c: 28:     {}
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;incstack = 0
 13502  003E8C  B2A6               	btfsc	166,1,c	;volsfr
 13503  003E8E  D7FE               	goto	__ptext47
 13504                           
 13505                           ;eeprom.c: 30:     EEADR = address;
 13506  003E90  C01A  FFA9         	movff	read_eep@address,4009	;volatile
 13507                           
 13508                           ;eeprom.c: 31:     EECON1bits.EEPGD = 0;
 13509  003E94  9EA6               	bcf	166,7,c	;volsfr
 13510                           
 13511                           ;eeprom.c: 32:     EECON1bits.CFGS = 0;
 13512  003E96  9CA6               	bcf	166,6,c	;volsfr
 13513                           
 13514                           ;eeprom.c: 33:     EECON1bits.RD = 1;
 13515  003E98  80A6               	bsf	166,0,c	;volsfr
 13516                           
 13517                           ;eeprom.c: 34:     return( EEDATA );
 13518  003E9A  50A8               	movf	168,w,c	;volatile
 13519  003E9C  0012               	return		;funcret
 13520  003E9E                     __end_of_read_eep:
 13521                           	callstack 0
 13522                           
 13523 ;; *************** function _readTemp_Single *****************
 13524 ;; Defined at:
 13525 ;;		line 45 in file "ds18b20.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;  buf             2    0[BANK0 ] PTR unsigned short 
 13528 ;;		 -> temperature(2), 
 13529 ;;  minus           2    2[BANK0 ] PTR unsigned char 
 13530 ;;		 -> minus(1), 
 13531 ;;  time_flag       2    4[BANK0 ] PTR unsigned char 
 13532 ;;		 -> time_flag(1), 
 13533 ;;  timer_val       2    6[BANK0 ] PTR unsigned char 
 13534 ;;		 -> timer_val(2), 
 13535 ;; Auto vars:     Size  Location     Type
 13536 ;;  temp            2   10[BANK0 ] unsigned short 
 13537 ;;  i               1    9[BANK0 ] unsigned char 
 13538 ;;  tmp             1    8[BANK0 ] unsigned char 
 13539 ;;  fptmp           1    0        unsigned char 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      unsigned char 
 13542 ;; Registers used:
 13543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13544 ;; Tracked objects:
 13545 ;;		On entry : 3F/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13549 ;;      Params:         0       8       0       0       0       0       0
 13550 ;;      Locals:         0       4       0       0       0       0       0
 13551 ;;      Temps:          3       0       0       0       0       0       0
 13552 ;;      Totals:         3      12       0       0       0       0       0
 13553 ;;Total ram usage:       15 bytes
 13554 ;; Hardware stack levels used: 1
 13555 ;; Hardware stack levels required when called: 5
 13556 ;; This function calls:
 13557 ;;		_ds18b20_crc8
 13558 ;;		_ow_reset
 13559 ;;		_read_byte
 13560 ;;		_write_byte
 13561 ;; This function is called by:
 13562 ;;		_main
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           	psect	text48
 13567  00294E                     __ptext48:
 13568                           	callstack 0
 13569  00294E                     _readTemp_Single:
 13570                           	callstack 0
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;ds18b20.c: 48:     uint8_t i, tmp, fptmp;;ds18b20.c: 49:     *minus = '+';
 13574                           
 13575                           ; BSR set to: 0
 13576                           
 13577                           ;incstack = 0
 13578  00294E  D893               	call	PL174	;call to abstracted procedure
 13579  002950  0E2B               	movlw	43
 13580  002952  6EDF               	movwf	indf2,c
 13581                           
 13582                           ;ds18b20.c: 51:     switch (*time_flag) {
 13583  002954  D07B               	goto	l9630
 13584  002956                     l9548:
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;ds18b20.c: 53:             if (!ow_reset())
 13588  002956  EC53  F01C         	call	_ow_reset	;wreg free
 13589  00295A  0900               	iorlw	0
 13590  00295C  A4D8               	btfss	status,2,c
 13591  00295E  0C03               	retlw	3
 13592                           
 13593                           ;ds18b20.c: 54:             {;ds18b20.c: 55:                 write_byte(0xCC);
 13594  002960  0ECC               	movlw	204
 13595  002962  EC6E  F01D         	call	_write_byte
 13596                           
 13597                           ;ds18b20.c: 56:                 write_byte(0x44);
 13598  002966  0E44               	movlw	68
 13599  002968  EC6E  F01D         	call	_write_byte
 13600                           
 13601                           ;ds18b20.c: 57:                 *timer_val = 0;
 13602  00296C  C066  FFD9         	movff	readTemp_Single@timer_val,fsr2l
 13603  002970  C067  FFDA         	movff	readTemp_Single@timer_val+1,fsr2h
 13604  002974  6ADF               	clrf	indf2,c
 13605                           
 13606                           ;ds18b20.c: 58:                 *time_flag = 2;
 13607  002976  D87A               	call	PL128	;call to abstracted procedure
 13608  002978  0E02               	movlw	2
 13609  00297A  6EDF               	movwf	indf2,c
 13610                           
 13611                           ;ds18b20.c: 59:                 TMR2ON = 1;
 13612  00297C  84CA               	bsf	4042,2,c	;volatile
 13613                           
 13614                           ;ds18b20.c: 61:                 return 0;
 13615  00297E  0C00               	retlw	0
 13616  002980                     l9568:
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;ds18b20.c: 67:             ow_reset();
 13620  002980  EC53  F01C         	call	_ow_reset	;wreg free
 13621                           
 13622                           ;ds18b20.c: 68:             write_byte(0xCC);
 13623  002984  0ECC               	movlw	204
 13624  002986  EC6E  F01D         	call	_write_byte
 13625                           
 13626                           ;ds18b20.c: 69:             write_byte(0xBE);
 13627  00298A  0EBE               	movlw	190
 13628  00298C  EC6E  F01D         	call	_write_byte
 13629                           
 13630                           ;ds18b20.c: 70:             for (i = 0; i < 9; i++)
 13631  002990  0100               	movlb	0	; () banked
 13632  002992  6B69               	clrf	readTemp_Single@i& (0+255),b
 13633  002994                     l9580:
 13634                           
 13635                           ; BSR set to: 0
 13636                           ;ds18b20.c: 71:             {;ds18b20.c: 72:                 scratch[i] = read_byte();
 13637  002994  0E92               	movlw	low _scratch
 13638  002996  2569               	addwf	readTemp_Single@i& (0+255),w,b
 13639  002998  6ED9               	movwf	fsr2l,c
 13640  00299A  6ADA               	clrf	fsr2h,c
 13641  00299C  0E01               	movlw	high _scratch
 13642  00299E  22DA               	addwfc	fsr2h,f,c
 13643  0029A0  EC4E  F01D         	call	_read_byte	;wreg free
 13644  0029A4  6EDF               	movwf	indf2,c
 13645                           
 13646                           ;ds18b20.c: 73:             }
 13647  0029A6  0100               	movlb	0	; () banked
 13648  0029A8  2B69               	incf	readTemp_Single@i& (0+255),f,b
 13649                           
 13650                           ; BSR set to: 0
 13651  0029AA  0E08               	movlw	8
 13652  0029AC  6569               	cpfsgt	readTemp_Single@i& (0+255),b
 13653  0029AE  D7F2               	goto	l9580
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;ds18b20.c: 75:             if (ds18b20_crc8(scratch, 9)) {
 13657  0029B0  0E92               	movlw	low _scratch
 13658  0029B2  6E1A               	movwf	ds18b20_crc8@data_in^0,c
 13659  0029B4  0E01               	movlw	high _scratch
 13660  0029B6  6E1B               	movwf	(ds18b20_crc8@data_in+1)^0,c
 13661  0029B8  0E09               	movlw	9
 13662  0029BA  6E1C               	movwf	ds18b20_crc8@num_bytes^0,c
 13663  0029BC  EC2C  F01C         	call	_ds18b20_crc8	;wreg free
 13664  0029C0  0900               	iorlw	0
 13665  0029C2  E003               	bz	l9594
 13666                           
 13667                           ; BSR set to: 0
 13668                           ;ds18b20.c: 76:                 *time_flag = 0;
 13669  0029C4  D853               	call	PL128	;call to abstracted procedure
 13670  0029C6  6ADF               	clrf	indf2,c
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;ds18b20.c: 77:                 return 5;
 13674  0029C8  0C05               	retlw	5
 13675  0029CA                     l9594:
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;ds18b20.c: 80:             temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[
      +                          0]);
 13679  0029CA  0101               	movlb	1	; () banked
 13680  0029CC  5193               	movf	(_scratch+1)& (0+255),w,b
 13681  0029CE  6E22               	movwf	??_readTemp_Single^0,c
 13682  0029D0  5192               	movf	_scratch& (0+255),w,b
 13683  0029D2  0100               	movlb	0	; () banked
 13684  0029D4  6F6A               	movwf	readTemp_Single@temp& (0+255),b
 13685  0029D6  C022  F06B         	movff	??_readTemp_Single,readTemp_Single@temp+1
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;ds18b20.c: 83:             if (temp & 0x8000) {
 13689  0029DA  AF6B               	btfss	(readTemp_Single@temp+1)& (0+255),7,b
 13690  0029DC  D007               	goto	l9602
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;ds18b20.c: 84:                 temp = -temp;
 13694  0029DE  6D6A               	negf	readTemp_Single@temp& (0+255),b
 13695  0029E0  1F6B               	comf	(readTemp_Single@temp+1)& (0+255),f,b
 13696  0029E2  B0D8               	btfsc	status,0,c
 13697  0029E4  2B6B               	incf	(readTemp_Single@temp+1)& (0+255),f,b
 13698                           
 13699                           ; BSR set to: 0
 13700                           ;ds18b20.c: 85:                 *minus = '-';
 13701  0029E6  D847               	call	PL174	;call to abstracted procedure
 13702  0029E8  0E2D               	movlw	45
 13703  0029EA  6EDF               	movwf	indf2,c
 13704  0029EC                     l9602:
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;ds18b20.c: 88:             tmp = temp & 0x0f;
 13708  0029EC  516A               	movf	readTemp_Single@temp& (0+255),w,b
 13709  0029EE  0B0F               	andlw	15
 13710  0029F0  6F68               	movwf	readTemp_Single@tmp& (0+255),b
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;ds18b20.c: 89:             tmp = fract[tmp];
 13714  0029F2  0EFD               	movlw	low _fract
 13715  0029F4  2568               	addwf	readTemp_Single@tmp& (0+255),w,b
 13716  0029F6  6EF6               	movwf	tblptrl,c
 13717  0029F8  6AF7               	clrf	tblptrh,c
 13718  0029FA  0E7D               	movlw	high _fract
 13719  0029FC  22F7               	addwfc	tblptrh,f,c
 13720  0029FE                     	if	0	;There are less than 3 active tblptr bytes
 13721  0029FE                     	endif
 13722  0029FE  0008               	tblrd		*
 13723  002A00  CFF5 F068          	movff	tablat,readTemp_Single@tmp
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;ds18b20.c: 90:             temp = temp >> 4;
 13727  002A04  C06A  F022         	movff	readTemp_Single@temp,??_readTemp_Single
 13728  002A08  C06B  F023         	movff	readTemp_Single@temp+1,??_readTemp_Single+1
 13729  002A0C  0E04               	movlw	4
 13730  002A0E  6E24               	movwf	(??_readTemp_Single+2)^0,c
 13731  002A10                     u11295:
 13732  002A10  90D8               	bcf	status,0,c
 13733  002A12  3223               	rrcf	(??_readTemp_Single+1)^0,f,c
 13734  002A14  3222               	rrcf	??_readTemp_Single^0,f,c
 13735  002A16  2E24               	decfsz	(??_readTemp_Single+2)^0,f,c
 13736  002A18  D7FB               	goto	u11295
 13737  002A1A  C022  F06A         	movff	??_readTemp_Single,readTemp_Single@temp
 13738  002A1E  C023  F06B         	movff	??_readTemp_Single+1,readTemp_Single@temp+1
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;ds18b20.c: 91:             temp = (temp & 0x00ff) * 10;
 13742  002A22  516A               	movf	readTemp_Single@temp& (0+255),w,b
 13743  002A24  0D0A               	mullw	10
 13744  002A26  CFF3 F06A          	movff	prodl,readTemp_Single@temp
 13745  002A2A  CFF4 F06B          	movff	prodh,readTemp_Single@temp+1
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;ds18b20.c: 92:             temp = temp + tmp;
 13749  002A2E  5168               	movf	readTemp_Single@tmp& (0+255),w,b
 13750  002A30  276A               	addwf	readTemp_Single@temp& (0+255),f,b
 13751  002A32  0E00               	movlw	0
 13752  002A34  236B               	addwfc	(readTemp_Single@temp+1)& (0+255),f,b
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;ds18b20.c: 104:             *buf = temp;
 13756  002A36  C060  FFD9         	movff	readTemp_Single@buf,fsr2l
 13757  002A3A  C061  FFDA         	movff	readTemp_Single@buf+1,fsr2h
 13758  002A3E  C06A  FFDE         	movff	readTemp_Single@temp,postinc2
 13759  002A42  C06B  FFDD         	movff	readTemp_Single@temp+1,postdec2
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;ds18b20.c: 105:             *time_flag = 0;
 13763  002A46  D812               	call	PL128	;call to abstracted procedure
 13764  002A48  6ADF               	clrf	indf2,c
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;ds18b20.c: 106:             return 1;
 13768  002A4A  0C01               	retlw	1
 13769  002A4C                     l9630:
 13770                           
 13771                           ; BSR set to: 0
 13772  002A4C  D80F               	call	PL128	;call to abstracted procedure
 13773  002A4E  50DF               	movf	indf2,w,c
 13774  002A50  6E22               	movwf	??_readTemp_Single^0,c
 13775  002A52  6A23               	clrf	(??_readTemp_Single+1)^0,c
 13776                           
 13777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13778                           ; Switch size 1, requested type "space"
 13779                           ; Number of cases is 1, Range of values is 0 to 0
 13780                           ; switch strategies available:
 13781                           ; Name         Instructions Cycles
 13782                           ; simple_byte            4     3 (average)
 13783                           ;	Chosen strategy is simple_byte
 13784  002A54  5023               	movf	(??_readTemp_Single+1)^0,w,c
 13785  002A56  A4D8               	btfss	status,2,c
 13786  002A58  0012               	return	
 13787                           
 13788                           ; BSR set to: 0
 13789                           ; Switch size 1, requested type "space"
 13790                           ; Number of cases is 3, Range of values is 0 to 2
 13791                           ; switch strategies available:
 13792                           ; Name         Instructions Cycles
 13793                           ; simple_byte           10     6 (average)
 13794                           ;	Chosen strategy is simple_byte
 13795  002A5A  5022               	movf	??_readTemp_Single^0,w,c
 13796  002A5C  E101 D77B          	bz	l9548
 13797  002A60  0A01               	xorlw	1	; case 1
 13798  002A62  E08E               	bz	l9568
 13799  002A64  0A03               	xorlw	3	; case 2
 13800  002A66  B4D8               	btfsc	status,2,c
 13801  002A68  0C00               	retlw	0
 13802  002A6A  0012               	return		;funcret
 13803  002A6C                     __end_of_readTemp_Single:
 13804                           	callstack 0
 13805  002A6C                     PL128:
 13806                           	callstack 25
 13807  002A6C  C064  FFD9         	movff	readTemp_Single@time_flag,fsr2l
 13808  002A70  C065  FFDA         	movff	readTemp_Single@time_flag+1,fsr2h
 13809  002A74  0012               	return	
 13810  002A76                     __end_ofPL128:
 13811                           	callstack 0
 13812  002A76                     PL174:
 13813                           	callstack 25
 13814  002A76  C062  FFD9         	movff	readTemp_Single@minus,fsr2l
 13815  002A7A  C063  FFDA         	movff	readTemp_Single@minus+1,fsr2h
 13816  002A7E  0012               	return	
 13817  002A80                     __end_ofPL174:
 13818                           	callstack 0
 13819                           
 13820 ;; *************** function _read_byte *****************
 13821 ;; Defined at:
 13822 ;;		line 50 in file "onewire.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;		None
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;  i               1   28[COMRAM] unsigned char 
 13827 ;;  val             1   27[COMRAM] unsigned char 
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      unsigned char 
 13830 ;; Registers used:
 13831 ;;		wreg, status,2, status,0, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 3F/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13837 ;;      Params:         0       0       0       0       0       0       0
 13838 ;;      Locals:         2       0       0       0       0       0       0
 13839 ;;      Temps:          2       0       0       0       0       0       0
 13840 ;;      Totals:         4       0       0       0       0       0       0
 13841 ;;Total ram usage:        4 bytes
 13842 ;; Hardware stack levels used: 1
 13843 ;; Hardware stack levels required when called: 4
 13844 ;; This function calls:
 13845 ;;		_read_bit
 13846 ;; This function is called by:
 13847 ;;		_readTemp_Single
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           	psect	text49
 13852  003A9C                     __ptext49:
 13853                           	callstack 0
 13854  003A9C                     _read_byte:
 13855                           	callstack 25
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;onewire.c: 52:    uint8_t i;;onewire.c: 53:    uint8_t val = 0;
 13859                           
 13860                           ;incstack = 0
 13861  003A9C  6A1C               	clrf	read_byte@val^0,c
 13862                           
 13863                           ;onewire.c: 55:    for(i=0;i<8;i++)
 13864  003A9E  6A1D               	clrf	read_byte@i^0,c
 13865  003AA0                     l9388:
 13866                           
 13867                           ;onewire.c: 56:    {;onewire.c: 57:       if(read_bit()) val |= (0x01 << i);
 13868  003AA0  EC2C  F01F         	call	_read_bit	;wreg free
 13869  003AA4  0900               	iorlw	0
 13870  003AA6  E00C               	bz	l9392
 13871  003AA8  C01D  F01A         	movff	read_byte@i,??_read_byte
 13872  003AAC  0E01               	movlw	1
 13873  003AAE  6E1B               	movwf	(??_read_byte+1)^0,c
 13874  003AB0  2A1A               	incf	??_read_byte^0,f,c
 13875  003AB2  D002               	goto	u11194
 13876  003AB4                     u11195:
 13877  003AB4  90D8               	bcf	status,0,c
 13878  003AB6  361B               	rlcf	(??_read_byte+1)^0,f,c
 13879  003AB8                     u11194:
 13880  003AB8  2E1A               	decfsz	??_read_byte^0,f,c
 13881  003ABA  D7FC               	goto	u11195
 13882  003ABC  501B               	movf	(??_read_byte+1)^0,w,c
 13883  003ABE  121C               	iorwf	read_byte@val^0,f,c
 13884  003AC0                     l9392:
 13885                           
 13886                           ;onewire.c: 58:       _delay((unsigned long)((120)*(64000000/4000000.0)));
 13887  003AC0  0E03               	movlw	3
 13888  003AC2  6E1A               	movwf	??_read_byte^0,c
 13889  003AC4  0E7D               	movlw	125
 13890  003AC6                     u12177:
 13891  003AC6  2EE8               	decfsz	wreg,f,c
 13892  003AC8  D7FE               	bra	u12177
 13893  003ACA  2E1A               	decfsz	??_read_byte^0,f,c
 13894  003ACC  D7FC               	bra	u12177
 13895  003ACE  F000               	nop	
 13896                           
 13897                           ;onewire.c: 59:    }
 13898  003AD0  2A1D               	incf	read_byte@i^0,f,c
 13899  003AD2  0E07               	movlw	7
 13900  003AD4  641D               	cpfsgt	read_byte@i^0,c
 13901  003AD6  D7E4               	goto	l9388
 13902                           
 13903                           ;onewire.c: 61:    return val;
 13904  003AD8  501C               	movf	read_byte@val^0,w,c
 13905  003ADA  0012               	return		;funcret
 13906  003ADC                     __end_of_read_byte:
 13907                           	callstack 0
 13908                           
 13909 ;; *************** function _read_bit *****************
 13910 ;; Defined at:
 13911 ;;		line 22 in file "onewire.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;		None
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;		None
 13916 ;; Return value:  Size  Location     Type
 13917 ;;                  1    wreg      unsigned char 
 13918 ;; Registers used:
 13919 ;;		wreg
 13920 ;; Tracked objects:
 13921 ;;		On entry : 0/0
 13922 ;;		On exit  : 0/0
 13923 ;;		Unchanged: 0/0
 13924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13925 ;;      Params:         0       0       0       0       0       0       0
 13926 ;;      Locals:         0       0       0       0       0       0       0
 13927 ;;      Temps:          0       0       0       0       0       0       0
 13928 ;;      Totals:         0       0       0       0       0       0       0
 13929 ;;Total ram usage:        0 bytes
 13930 ;; Hardware stack levels used: 1
 13931 ;; Hardware stack levels required when called: 3
 13932 ;; This function calls:
 13933 ;;		Nothing
 13934 ;; This function is called by:
 13935 ;;		_read_byte
 13936 ;; This function uses a non-reentrant model
 13937 ;;
 13938                           
 13939                           	psect	text50
 13940  003E58                     __ptext50:
 13941                           	callstack 0
 13942  003E58                     _read_bit:
 13943                           	callstack 25
 13944                           
 13945                           ;onewire.c: 24:     PORTBbits.RB7 = 0;
 13946                           
 13947                           ;incstack = 0
 13948  003E58  9E81               	bcf	129,7,c	;volatile
 13949                           
 13950                           ;onewire.c: 25:     TRISBbits.TRISB7 = 0;
 13951  003E5A  9E93               	bcf	147,7,c	;volatile
 13952                           
 13953                           ;onewire.c: 26:     _delay((unsigned long)((1)*(64000000/4000000.0)));
 13954  003E5C  0E05               	movlw	5
 13955  003E5E                     u12187:
 13956  003E5E  2EE8               	decfsz	wreg,f,c
 13957  003E60  D7FE               	bra	u12187
 13958  003E62  F000               	nop	
 13959                           
 13960                           ;onewire.c: 27:     PORTBbits.RB7 = 1;
 13961  003E64  8E81               	bsf	129,7,c	;volatile
 13962                           
 13963                           ;onewire.c: 28:     TRISBbits.TRISB7 = 1;
 13964  003E66  8E93               	bsf	147,7,c	;volatile
 13965                           
 13966                           ;onewire.c: 29:     _delay((unsigned long)((6)*(64000000/4000000.0)));
 13967  003E68  0E20               	movlw	32
 13968  003E6A                     u12197:
 13969  003E6A  2EE8               	decfsz	wreg,f,c
 13970  003E6C  D7FE               	bra	u12197
 13971                           
 13972                           ;onewire.c: 30:    return(PORTBbits.RB7);
 13973  003E6E  BE81               	btfsc	129,7,c	;volatile
 13974  003E70  0C01               	retlw	1
 13975  003E72  0C00               	retlw	0	;funcret
 13976  003E74                     __end_of_read_bit:
 13977                           	callstack 0
 13978                           
 13979 ;; *************** function _ds18b20_crc8 *****************
 13980 ;; Defined at:
 13981 ;;		line 229 in file "ds18b20.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  data_in         2   25[COMRAM] PTR unsigned char 
 13984 ;;		 -> scratch(9), 
 13985 ;;  num_bytes       1   27[COMRAM] unsigned char 
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;  crc             1   32[COMRAM] unsigned char 
 13988 ;;  loop_count      1   31[COMRAM] unsigned char 
 13989 ;;  feedback_bit    1   30[COMRAM] unsigned char 
 13990 ;;  data            1   29[COMRAM] unsigned char 
 13991 ;;  bit_counter     1   28[COMRAM] unsigned char 
 13992 ;; Return value:  Size  Location     Type
 13993 ;;                  1    wreg      unsigned char 
 13994 ;; Registers used:
 13995 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13996 ;; Tracked objects:
 13997 ;;		On entry : 3F/0
 13998 ;;		On exit  : 3F/0
 13999 ;;		Unchanged: 3F/0
 14000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14001 ;;      Params:         3       0       0       0       0       0       0
 14002 ;;      Locals:         5       0       0       0       0       0       0
 14003 ;;      Temps:          0       0       0       0       0       0       0
 14004 ;;      Totals:         8       0       0       0       0       0       0
 14005 ;;Total ram usage:        8 bytes
 14006 ;; Hardware stack levels used: 1
 14007 ;; Hardware stack levels required when called: 3
 14008 ;; This function calls:
 14009 ;;		Nothing
 14010 ;; This function is called by:
 14011 ;;		_readTemp_Single
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           	psect	text51
 14016  003858                     __ptext51:
 14017                           	callstack 0
 14018  003858                     _ds18b20_crc8:
 14019                           	callstack 26
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;ds18b20.c: 230:     uint8_t crc;;ds18b20.c: 231:     uint8_t loop_count;;ds18b20.c: 232
      +                          :     uint8_t bit_counter;;ds18b20.c: 233:     uint8_t data;;ds18b20.c: 234:     uint8_t
      +                           feedback_bit;;ds18b20.c: 236:     crc = 0x00;
 14023                           
 14024                           ;incstack = 0
 14025  003858  6A21               	clrf	ds18b20_crc8@crc^0,c
 14026                           
 14027                           ;ds18b20.c: 238:     for (loop_count = 0; loop_count != num_bytes; loop_count++) {
 14028  00385A  6A20               	clrf	ds18b20_crc8@loop_count^0,c
 14029  00385C  D01F               	goto	l9422
 14030  00385E                     l9402:
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;ds18b20.c: 239:         data = data_in[loop_count];
 14034  00385E  5020               	movf	ds18b20_crc8@loop_count^0,w,c
 14035  003860  241A               	addwf	ds18b20_crc8@data_in^0,w,c
 14036  003862  6ED9               	movwf	fsr2l,c
 14037  003864  0E00               	movlw	0
 14038  003866  201B               	addwfc	(ds18b20_crc8@data_in+1)^0,w,c
 14039  003868  6EDA               	movwf	fsr2h,c
 14040  00386A  50DF               	movf	indf2,w,c
 14041  00386C  6E1E               	movwf	ds18b20_crc8@data^0,c
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;ds18b20.c: 241:         bit_counter = 8;
 14045  00386E  0E08               	movlw	8
 14046  003870  6E1D               	movwf	ds18b20_crc8@bit_counter^0,c
 14047  003872                     l9406:
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;ds18b20.c: 243:             feedback_bit = (crc ^ data) & 0x01;
 14051  003872  5021               	movf	ds18b20_crc8@crc^0,w,c
 14052  003874  181E               	xorwf	ds18b20_crc8@data^0,w,c
 14053  003876  0B01               	andlw	1
 14054  003878  6E1F               	movwf	ds18b20_crc8@feedback_bit^0,c
 14055                           
 14056                           ; BSR set to: 0
 14057                           ;ds18b20.c: 245:             if (feedback_bit == 0x01) {
 14058  00387A  041F               	decf	ds18b20_crc8@feedback_bit^0,w,c
 14059  00387C  E102               	bnz	l692
 14060                           
 14061                           ; BSR set to: 0
 14062                           ;ds18b20.c: 246:                 crc = crc ^ 0x18;
 14063  00387E  0E18               	movlw	24
 14064  003880  1A21               	xorwf	ds18b20_crc8@crc^0,f,c
 14065  003882                     l692:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;ds18b20.c: 248:             crc = (crc >> 1) & 0x7F;
 14069  003882  90D8               	bcf	status,0,c
 14070  003884  3021               	rrcf	ds18b20_crc8@crc^0,w,c
 14071  003886  0B7F               	andlw	127
 14072  003888  6E21               	movwf	ds18b20_crc8@crc^0,c
 14073                           
 14074                           ;ds18b20.c: 249:             if (feedback_bit == 0x01) {
 14075  00388A  041F               	decf	ds18b20_crc8@feedback_bit^0,w,c
 14076  00388C  E101               	bnz	l9414
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;ds18b20.c: 250:                 crc = crc | 0x80;
 14080  00388E  8E21               	bsf	ds18b20_crc8@crc^0,7,c
 14081  003890                     l9414:
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;ds18b20.c: 253:             data = data >> 1;
 14085  003890  90D8               	bcf	status,0,c
 14086  003892  321E               	rrcf	ds18b20_crc8@data^0,f,c
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;ds18b20.c: 254:             bit_counter--;
 14090  003894  061D               	decf	ds18b20_crc8@bit_counter^0,f,c
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;ds18b20.c: 256:         } while (bit_counter > 0);
 14094  003896  501D               	movf	ds18b20_crc8@bit_counter^0,w,c
 14095  003898  E1EC               	bnz	l9406
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;ds18b20.c: 257:     }
 14099  00389A  2A20               	incf	ds18b20_crc8@loop_count^0,f,c
 14100  00389C                     l9422:
 14101                           
 14102                           ; BSR set to: 0
 14103  00389C  501C               	movf	ds18b20_crc8@num_bytes^0,w,c
 14104  00389E  1820               	xorwf	ds18b20_crc8@loop_count^0,w,c
 14105  0038A0  E1DE               	bnz	l9402
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;ds18b20.c: 259:     return crc;
 14109  0038A2  5021               	movf	ds18b20_crc8@crc^0,w,c
 14110                           
 14111                           ; BSR set to: 0
 14112  0038A4  0012               	return		;funcret
 14113  0038A6                     __end_of_ds18b20_crc8:
 14114                           	callstack 0
 14115                           
 14116 ;; *************** function _key_press *****************
 14117 ;; Defined at:
 14118 ;;		line 5 in file "key.c"
 14119 ;; Parameters:    Size  Location     Type
 14120 ;;		None
 14121 ;; Auto vars:     Size  Location     Type
 14122 ;;  key             1   25[COMRAM] unsigned char 
 14123 ;; Return value:  Size  Location     Type
 14124 ;;                  1    wreg      void 
 14125 ;; Registers used:
 14126 ;;		wreg, status,2, status,0
 14127 ;; Tracked objects:
 14128 ;;		On entry : 3F/1
 14129 ;;		On exit  : 3F/1
 14130 ;;		Unchanged: 3F/0
 14131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14132 ;;      Params:         0       0       0       0       0       0       0
 14133 ;;      Locals:         1       0       0       0       0       0       0
 14134 ;;      Temps:          0       0       0       0       0       0       0
 14135 ;;      Totals:         1       0       0       0       0       0       0
 14136 ;;Total ram usage:        1 bytes
 14137 ;; Hardware stack levels used: 1
 14138 ;; Hardware stack levels required when called: 3
 14139 ;; This function calls:
 14140 ;;		Nothing
 14141 ;; This function is called by:
 14142 ;;		_main
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           	psect	text52
 14147  003B1A                     __ptext52:
 14148                           	callstack 0
 14149  003B1A                     _key_press:
 14150                           	callstack 27
 14151                           
 14152                           ; BSR set to: 1
 14153                           ;key.c: 7:     static uint16_t count = 0;;key.c: 8:     uint8_t key;;key.c: 10:     if (
      +                          (PORTB & (1 << 3)) == 0)
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;incstack = 0
 14157  003B1A  B681               	btfsc	129,3,c	;volatile
 14158  003B1C  D003               	goto	l642
 14159                           
 14160                           ; BSR set to: 1
 14161                           ;key.c: 11:         key = 1;
 14162  003B1E  0E01               	movlw	1
 14163  003B20  6E1A               	movwf	key_press@key^0,c
 14164  003B22  D001               	goto	l6636
 14165  003B24                     l642:
 14166                           
 14167                           ; BSR set to: 1
 14168                           ;key.c: 13:         key = 0;
 14169  003B24  6A1A               	clrf	key_press@key^0,c
 14170  003B26                     l6636:
 14171                           
 14172                           ; BSR set to: 1
 14173                           ;key.c: 16:     if (key) {
 14174  003B26  501A               	movf	key_press@key^0,w,c
 14175  003B28  E013               	bz	l644
 14176                           
 14177                           ; BSR set to: 1
 14178                           ;key.c: 17:         if (count == 50) {
 14179  003B2A  0E32               	movlw	50
 14180  003B2C  1833               	xorwf	key_press@count^0,w,c
 14181  003B2E  1034               	iorwf	(key_press@count+1)^0,w,c
 14182  003B30  E106               	bnz	l6646
 14183                           
 14184                           ; BSR set to: 1
 14185                           ;key.c: 18:             count = 50 + 10;
 14186  003B32  6A34               	clrf	(key_press@count+1)^0,c
 14187  003B34  0E3C               	movlw	60
 14188  003B36  6E33               	movwf	key_press@count^0,c
 14189                           
 14190                           ;key.c: 19:             key_pressed = 2;
 14191  003B38  0E02               	movlw	2
 14192  003B3A  6E3D               	movwf	_key_pressed^0,c	;volatile
 14193  003B3C  0C02               	retlw	2
 14194  003B3E                     l6646:
 14195                           
 14196                           ; BSR set to: 1
 14197  003B3E  4A33               	infsnz	key_press@count^0,f,c
 14198  003B40  2A34               	incf	(key_press@count+1)^0,f,c
 14199                           
 14200                           ; BSR set to: 1
 14201                           ;key.c: 23:         if (count == 7) {
 14202  003B42  0E07               	movlw	7
 14203  003B44  1833               	xorwf	key_press@count^0,w,c
 14204  003B46  1034               	iorwf	(key_press@count+1)^0,w,c
 14205  003B48  B4D8               	btfsc	status,2,c
 14206                           
 14207                           ; BSR set to: 1
 14208                           ;key.c: 24:             key_pressed = key;
 14209  003B4A  C01A  F03D         	movff	key_press@key,_key_pressed	;volatile
 14210                           
 14211                           ;key.c: 25:             return;
 14212  003B4E  0012               	return	
 14213  003B50                     l644:
 14214                           
 14215                           ; BSR set to: 1
 14216                           ;key.c: 28:         count = 0;
 14217  003B50  6A33               	clrf	key_press@count^0,c
 14218  003B52  6A34               	clrf	(key_press@count+1)^0,c
 14219                           
 14220                           ; BSR set to: 1
 14221  003B54  0012               	return		;funcret
 14222  003B56                     __end_of_key_press:
 14223                           	callstack 0
 14224                           
 14225 ;; *************** function _key_GetKey *****************
 14226 ;; Defined at:
 14227 ;;		line 46 in file "key.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;  key             1   25[COMRAM] unsigned char 
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      unsigned char 
 14234 ;; Registers used:
 14235 ;;		wreg, status,2
 14236 ;; Tracked objects:
 14237 ;;		On entry : 3F/1
 14238 ;;		On exit  : 3F/1
 14239 ;;		Unchanged: 3F/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14241 ;;      Params:         0       0       0       0       0       0       0
 14242 ;;      Locals:         1       0       0       0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0
 14244 ;;      Totals:         1       0       0       0       0       0       0
 14245 ;;Total ram usage:        1 bytes
 14246 ;; Hardware stack levels used: 1
 14247 ;; Hardware stack levels required when called: 3
 14248 ;; This function calls:
 14249 ;;		Nothing
 14250 ;; This function is called by:
 14251 ;;		_main
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           	psect	text53
 14256  003EB6                     __ptext53:
 14257                           	callstack 0
 14258  003EB6                     _key_GetKey:
 14259                           	callstack 27
 14260                           
 14261                           ; BSR set to: 1
 14262                           ;key.c: 48:   uint8_t key = key_pressed;
 14263                           
 14264                           ; BSR set to: 1
 14265                           ;incstack = 0
 14266  003EB6  C03D  F01A         	movff	_key_pressed,key_GetKey@key	;volatile
 14267                           
 14268                           ;key.c: 50:   key_pressed = 0;
 14269  003EBA  6A3D               	clrf	_key_pressed^0,c	;volatile
 14270                           
 14271                           ; BSR set to: 1
 14272                           ;key.c: 51:   return key;
 14273  003EBC  501A               	movf	key_GetKey@key^0,w,c
 14274                           
 14275                           ; BSR set to: 1
 14276  003EBE  0012               	return		;funcret
 14277  003EC0                     __end_of_key_GetKey:
 14278                           	callstack 0
 14279                           
 14280 ;; *************** function _init_cpu *****************
 14281 ;; Defined at:
 14282 ;;		line 452 in file "main.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;		None
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;		None
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  1    wreg      void 
 14289 ;; Registers used:
 14290 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14291 ;; Tracked objects:
 14292 ;;		On entry : 0/0
 14293 ;;		On exit  : 0/0
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14296 ;;      Params:         0       0       0       0       0       0       0
 14297 ;;      Locals:         0       0       0       0       0       0       0
 14298 ;;      Temps:          2       0       0       0       0       0       0
 14299 ;;      Totals:         2       0       0       0       0       0       0
 14300 ;;Total ram usage:        2 bytes
 14301 ;; Hardware stack levels used: 1
 14302 ;; Hardware stack levels required when called: 7
 14303 ;; This function calls:
 14304 ;;		_cgrom_char
 14305 ;;		_initLCD
 14306 ;;		_init_ds18b20
 14307 ;; This function is called by:
 14308 ;;		_main
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           	psect	text54
 14313  002814                     __ptext54:
 14314                           	callstack 0
 14315  002814                     _init_cpu:
 14316                           	callstack 23
 14317                           
 14318                           ;main.c: 453:     OSCCONbits.SCS = 0b00;
 14319                           
 14320                           ; BSR set to: 1
 14321                           ;incstack = 0
 14322  002814  0EFC               	movlw	-4
 14323  002816  16D3               	andwf	211,f,c	;volatile
 14324                           
 14325                           ;main.c: 454:     OSCCONbits.IRCF = 0b111;
 14326  002818  0E70               	movlw	112
 14327  00281A  12D3               	iorwf	211,f,c	;volatile
 14328                           
 14329                           ;main.c: 455:     OSCTUNEbits.PLLEN = 1;
 14330  00281C  8C9B               	bsf	155,6,c	;volatile
 14331                           
 14332                           ;main.c: 456:     TRISA = 0b00010111;
 14333  00281E  0E17               	movlw	23
 14334  002820  6E92               	movwf	146,c	;volatile
 14335                           
 14336                           ;main.c: 457:     PORTA = 0;
 14337  002822  6A80               	clrf	128,c	;volatile
 14338                           
 14339                           ;main.c: 458:     LATA = 0;
 14340  002824  6A89               	clrf	137,c	;volatile
 14341                           
 14342                           ;main.c: 460:     PORTC = 0;
 14343  002826  6A82               	clrf	130,c	;volatile
 14344                           
 14345                           ;main.c: 461:     LATC = 0;
 14346  002828  6A8B               	clrf	139,c	;volatile
 14347                           
 14348                           ;main.c: 462:     TRISC = 0b00000000;
 14349  00282A  6A94               	clrf	148,c	;volatile
 14350                           
 14351                           ;main.c: 463:     LATCbits.LATC4 = 0;
 14352  00282C  988B               	bcf	139,4,c	;volatile
 14353                           
 14354                           ;main.c: 464:     LATCbits.LATC5 = 0;
 14355  00282E  9A8B               	bcf	139,5,c	;volatile
 14356                           
 14357                           ;main.c: 466:     RBPU = 0;
 14358  002830  9EF1               	bcf	4081,7,c	;volatile
 14359                           
 14360                           ;main.c: 469:     WPUB = 0b00111000;
 14361  002832  0E38               	movlw	56
 14362  002834  6E7C               	movwf	124,c	;volatile
 14363                           
 14364                           ;main.c: 474:     PORTB = 0;
 14365  002836  6A81               	clrf	129,c	;volatile
 14366                           
 14367                           ;main.c: 475:     LATB = 0;
 14368  002838  6A8A               	clrf	138,c	;volatile
 14369                           
 14370                           ;main.c: 476:     TRISB = 0b00111111;
 14371  00283A  0E3F               	movlw	63
 14372  00283C  6E93               	movwf	147,c	;volatile
 14373                           
 14374                           ;main.c: 479:     T0CONbits.T0PS = 0b011;
 14375  00283E  50D5               	movf	213,w,c	;volatile
 14376  002840  0BF8               	andlw	-8
 14377  002842  0903               	iorlw	3
 14378  002844  6ED5               	movwf	213,c	;volatile
 14379                           
 14380                           ;main.c: 480:     T0CONbits.PSA = 0;
 14381  002846  96D5               	bcf	213,3,c	;volatile
 14382                           
 14383                           ;main.c: 482:     T0CONbits.T0CS = 0;
 14384  002848  9AD5               	bcf	213,5,c	;volatile
 14385                           
 14386                           ;main.c: 483:     T0CONbits.T08BIT = 1;
 14387  00284A  8CD5               	bsf	213,6,c	;volatile
 14388                           
 14389                           ;main.c: 484:     T0CONbits.TMR0ON = 1;
 14390  00284C  8ED5               	bsf	213,7,c	;volatile
 14391                           
 14392                           ;main.c: 485:     INTCON2bits.TMR0IP = 0;
 14393  00284E  94F1               	bcf	241,2,c	;volatile
 14394                           
 14395                           ;main.c: 486:     TMR0L = 57;
 14396  002850  0E39               	movlw	57
 14397  002852  6ED6               	movwf	214,c	;volatile
 14398                           
 14399                           ;main.c: 489:     ADCON2bits.ADCS = 0b110;
 14400  002854  50C0               	movf	192,w,c	;volatile
 14401  002856  0BF8               	andlw	-8
 14402  002858  0906               	iorlw	6
 14403  00285A  6EC0               	movwf	192,c	;volatile
 14404                           
 14405                           ;main.c: 490:     ADCON2bits.ACQT = 0;
 14406  00285C  0EC7               	movlw	-57
 14407  00285E  16C0               	andwf	192,f,c	;volatile
 14408                           
 14409                           ;main.c: 491:     ADCON2bits.ADFM = 1;
 14410  002860  8EC0               	bsf	192,7,c	;volatile
 14411                           
 14412                           ;main.c: 493:     ADCON1 = 0;
 14413  002862  6AC1               	clrf	193,c	;volatile
 14414                           
 14415                           ;main.c: 495:     ADCON0bits.ADON = 1;
 14416  002864  80C2               	bsf	194,0,c	;volatile
 14417                           
 14418                           ;main.c: 496:     ADCON0bits.CHS = 0b0000;
 14419  002866  0EC3               	movlw	-61
 14420  002868  16C2               	andwf	194,f,c	;volatile
 14421                           
 14422                           ;main.c: 497:     ANSELbits.ANS0 = 1;
 14423  00286A  807E               	bsf	126,0,c	;volatile
 14424                           
 14425                           ;main.c: 498:     IPR1bits.ADIP = 1;
 14426  00286C  8C9F               	bsf	159,6,c	;volatile
 14427                           
 14428                           ;main.c: 499:     PIE1bits.ADIE = 1;
 14429  00286E  8C9D               	bsf	157,6,c	;volatile
 14430                           
 14431                           ;main.c: 502:     TMR1CS = 0;
 14432  002870  92CD               	bcf	4045,1,c	;volatile
 14433                           
 14434                           ;main.c: 503:     T1OSCEN = 0;
 14435  002872  96CD               	bcf	4045,3,c	;volatile
 14436                           
 14437                           ;main.c: 504:     T1CONbits.T1CKPS = 0b11;
 14438  002874  0E30               	movlw	48
 14439  002876  12CD               	iorwf	205,f,c	;volatile
 14440                           
 14441                           ;main.c: 505:     T1CONbits.RD16 = 1;
 14442  002878  8ECD               	bsf	205,7,c	;volatile
 14443                           
 14444                           ;main.c: 506:     TMR1IE = 1;
 14445  00287A  809D               	bsf	3997,0,c	;volatile
 14446                           
 14447                           ;main.c: 507:     TMR1IP = 0;
 14448  00287C  909F               	bcf	3999,0,c	;volatile
 14449                           
 14450                           ;main.c: 508:     TMR1ON = 1;
 14451  00287E  80CD               	bsf	4045,0,c	;volatile
 14452                           
 14453                           ;main.c: 511:     T3CONbits.RD16 = 1;
 14454  002880  8EB1               	bsf	177,7,c	;volatile
 14455                           
 14456                           ;main.c: 513:     T3CONbits.T3CCP2 = 1;
 14457  002882  8CB1               	bsf	177,6,c	;volatile
 14458                           
 14459                           ;main.c: 517:     T3CONbits.TMR3CS = 0;
 14460  002884  92B1               	bcf	177,1,c	;volatile
 14461                           
 14462                           ;main.c: 520:     T3CONbits.T3CKPS = 0b000;
 14463  002886  0ECF               	movlw	-49
 14464  002888  16B1               	andwf	177,f,c	;volatile
 14465                           
 14466                           ;main.c: 524:     TMR3IP = 1;
 14467  00288A  82A2               	bsf	4002,1,c	;volatile
 14468                           
 14469                           ;main.c: 525:     TMR3IE = 1;
 14470  00288C  82A0               	bsf	4000,1,c	;volatile
 14471                           
 14472                           ;main.c: 529:     T2CONbits.T2CKPS = 0b10;
 14473  00288E  50CA               	movf	202,w,c	;volatile
 14474  002890  0BFC               	andlw	-4
 14475  002892  0902               	iorlw	2
 14476  002894  6ECA               	movwf	202,c	;volatile
 14477                           
 14478                           ;main.c: 530:     T2CONbits.T2OUTPS = 0b1111;
 14479  002896  0E78               	movlw	120
 14480  002898  12CA               	iorwf	202,f,c	;volatile
 14481                           
 14482                           ;main.c: 531:     TMR2ON = 0;
 14483  00289A  94CA               	bcf	4042,2,c	;volatile
 14484                           
 14485                           ;main.c: 532:     IPR1bits.TMR2IP = 0;
 14486  00289C  929F               	bcf	159,1,c	;volatile
 14487                           
 14488                           ;main.c: 533:     PIE1bits.TMR2IE = 1;
 14489  00289E  829D               	bsf	157,1,c	;volatile
 14490                           
 14491                           ;main.c: 534:     PR2 = 64;
 14492  0028A0  0E40               	movlw	64
 14493  0028A2  6ECB               	movwf	203,c	;volatile
 14494                           
 14495                           ;main.c: 537:     INT0IE = 1;
 14496  0028A4  88F2               	bsf	4082,4,c	;volatile
 14497                           
 14498                           ;main.c: 538:     INTCON2bits.INTEDG0 = 0;
 14499  0028A6  9CF1               	bcf	241,6,c	;volatile
 14500                           
 14501                           ;main.c: 539:     INT0IF = 0;
 14502  0028A8  92F2               	bcf	4082,1,c	;volatile
 14503                           
 14504                           ;main.c: 542:     RCONbits.IPEN = 1;
 14505  0028AA  8ED0               	bsf	208,7,c	;volatile
 14506                           
 14507                           ;main.c: 543:     INTCONbits.TMR0IE = 1;
 14508  0028AC  8AF2               	bsf	242,5,c	;volatile
 14509                           
 14510                           ;main.c: 544:     INTCONbits.GIEL = 1;
 14511  0028AE  8CF2               	bsf	242,6,c	;volatile
 14512                           
 14513                           ;main.c: 546:     (INTCONbits.GIE = 1);
 14514  0028B0  8EF2               	bsf	242,7,c	;volatile
 14515                           
 14516                           ;main.c: 547:     _delay((unsigned long)((50)*(64000000/4000.0)));
 14517  0028B2  0E05               	movlw	5
 14518  0028B4  6E23               	movwf	(??_init_cpu+1)^0,c
 14519  0028B6  0E0F               	movlw	15
 14520  0028B8  6E22               	movwf	??_init_cpu^0,c
 14521  0028BA  0EF1               	movlw	241
 14522  0028BC                     u12207:
 14523  0028BC  2EE8               	decfsz	wreg,f,c
 14524  0028BE  D7FE               	bra	u12207
 14525  0028C0  2E22               	decfsz	??_init_cpu^0,f,c
 14526  0028C2  D7FC               	bra	u12207
 14527  0028C4  2E23               	decfsz	(??_init_cpu+1)^0,f,c
 14528  0028C6  D7FA               	bra	u12207
 14529  0028C8  F000               	nop	
 14530                           
 14531                           ;main.c: 549:     initLCD();
 14532  0028CA  ECCB  F015         	call	_initLCD	;wreg free
 14533                           
 14534                           ;main.c: 551:     PORTBbits.RB7 = 1;
 14535  0028CE  8E81               	bsf	129,7,c	;volatile
 14536                           
 14537                           ;main.c: 553:     init_ds18b20();
 14538  0028D0  ECC2  F01E         	call	_init_ds18b20	;wreg free
 14539                           
 14540                           ;main.c: 555:     is_power = 1;
 14541  0028D4  8A44               	bsf	(_is_power/(0+8))^0,_is_power& (0+7),c
 14542                           
 14543                           ;main.c: 556:     power_100 = 0;
 14544  0028D6  9644               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
 14545                           
 14546                           ;main.c: 557:     cgrom_char(symbol_1, 1);
 14547  0028D8  0E52               	movlw	low _symbol_1
 14548  0028DA  6E1E               	movwf	cgrom_char@symbol^0,c
 14549  0028DC  0E7E               	movlw	high _symbol_1
 14550  0028DE  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14551  0028E0  0E01               	movlw	1
 14552  0028E2  6E20               	movwf	cgrom_char@address^0,c
 14553  0028E4  EC35  F01E         	call	_cgrom_char	;wreg free
 14554                           
 14555                           ;main.c: 558:     cgrom_char(symbol_2, 2);
 14556  0028E8  0E4A               	movlw	low _symbol_2
 14557  0028EA  6E1E               	movwf	cgrom_char@symbol^0,c
 14558  0028EC  0E7E               	movlw	high _symbol_2
 14559  0028EE  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14560  0028F0  0E02               	movlw	2
 14561  0028F2  6E20               	movwf	cgrom_char@address^0,c
 14562  0028F4  EC35  F01E         	call	_cgrom_char	;wreg free
 14563                           
 14564                           ;main.c: 559:     cgrom_char(symbol_3, 3);
 14565  0028F8  0E42               	movlw	low _symbol_3
 14566  0028FA  6E1E               	movwf	cgrom_char@symbol^0,c
 14567  0028FC  0E7E               	movlw	high _symbol_3
 14568  0028FE  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14569  002900  0E03               	movlw	3
 14570  002902  6E20               	movwf	cgrom_char@address^0,c
 14571  002904  EC35  F01E         	call	_cgrom_char	;wreg free
 14572                           
 14573                           ;main.c: 560:     cgrom_char(symbol_4, 4);
 14574  002908  0E3A               	movlw	low _symbol_4
 14575  00290A  6E1E               	movwf	cgrom_char@symbol^0,c
 14576  00290C  0E7E               	movlw	high _symbol_4
 14577  00290E  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14578  002910  0E04               	movlw	4
 14579  002912  6E20               	movwf	cgrom_char@address^0,c
 14580  002914  EC35  F01E         	call	_cgrom_char	;wreg free
 14581                           
 14582                           ;main.c: 561:     cgrom_char(symbol_5, 5);
 14583  002918  0E32               	movlw	low _symbol_5
 14584  00291A  6E1E               	movwf	cgrom_char@symbol^0,c
 14585  00291C  0E7E               	movlw	high _symbol_5
 14586  00291E  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14587  002920  0E05               	movlw	5
 14588  002922  6E20               	movwf	cgrom_char@address^0,c
 14589  002924  EC35  F01E         	call	_cgrom_char	;wreg free
 14590                           
 14591                           ;main.c: 562:     cgrom_char(symbol_6, 6);
 14592  002928  0E2A               	movlw	low _symbol_6
 14593  00292A  6E1E               	movwf	cgrom_char@symbol^0,c
 14594  00292C  0E7E               	movlw	high _symbol_6
 14595  00292E  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14596  002930  0E06               	movlw	6
 14597  002932  6E20               	movwf	cgrom_char@address^0,c
 14598  002934  EC35  F01E         	call	_cgrom_char	;wreg free
 14599                           
 14600                           ;main.c: 563:     cgrom_char(symbol_7, 7);
 14601  002938  0E22               	movlw	low _symbol_7
 14602  00293A  6E1E               	movwf	cgrom_char@symbol^0,c
 14603  00293C  0E7E               	movlw	high _symbol_7
 14604  00293E  6E1F               	movwf	(cgrom_char@symbol+1)^0,c
 14605  002940  0E07               	movlw	7
 14606  002942  6E20               	movwf	cgrom_char@address^0,c
 14607  002944  EC35  F01E         	call	_cgrom_char	;wreg free
 14608                           
 14609                           ;main.c: 564:     getU = 1;
 14610  002948  0E01               	movlw	1
 14611  00294A  6E40               	movwf	_getU^0,c
 14612  00294C  0C01               	retlw	1	;funcret
 14613  00294E                     __end_of_init_cpu:
 14614                           	callstack 0
 14615                           
 14616 ;; *************** function _init_ds18b20 *****************
 14617 ;; Defined at:
 14618 ;;		line 18 in file "ds18b20.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;		None
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;		None
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  1    wreg      void 
 14625 ;; Registers used:
 14626 ;;		wreg, status,2, status,0, cstack
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14632 ;;      Params:         0       0       0       0       0       0       0
 14633 ;;      Locals:         0       0       0       0       0       0       0
 14634 ;;      Temps:          0       0       0       0       0       0       0
 14635 ;;      Totals:         0       0       0       0       0       0       0
 14636 ;;Total ram usage:        0 bytes
 14637 ;; Hardware stack levels used: 1
 14638 ;; Hardware stack levels required when called: 5
 14639 ;; This function calls:
 14640 ;;		_ow_reset
 14641 ;;		_write_byte
 14642 ;; This function is called by:
 14643 ;;		_init_cpu
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           	psect	text55
 14648  003D84                     __ptext55:
 14649                           	callstack 0
 14650  003D84                     _init_ds18b20:
 14651                           	callstack 24
 14652                           
 14653                           ;ds18b20.c: 20:     if (!ow_reset())
 14654                           
 14655                           ;incstack = 0
 14656  003D84  EC53  F01C         	call	_ow_reset	;wreg free
 14657  003D88  0900               	iorlw	0
 14658  003D8A  A4D8               	btfss	status,2,c
 14659  003D8C  0012               	return	
 14660                           
 14661                           ;ds18b20.c: 21:     {;ds18b20.c: 23:         write_byte(0xCC);
 14662  003D8E  0ECC               	movlw	204
 14663  003D90  EC6E  F01D         	call	_write_byte
 14664                           
 14665                           ;ds18b20.c: 24:         write_byte(0x4E);
 14666  003D94  0E4E               	movlw	78
 14667  003D96  EC6E  F01D         	call	_write_byte
 14668                           
 14669                           ;ds18b20.c: 25:         write_byte(0x00);
 14670  003D9A  0E00               	movlw	0
 14671  003D9C  EC6E  F01D         	call	_write_byte
 14672                           
 14673                           ;ds18b20.c: 26:         write_byte(0x00);
 14674  003DA0  0E00               	movlw	0
 14675  003DA2  EC6E  F01D         	call	_write_byte
 14676                           
 14677                           ;ds18b20.c: 27:         write_byte(0x7F);
 14678  003DA6  0E7F               	movlw	127
 14679  003DA8  EF6E  F01D         	goto	_write_byte
 14680  003DAC                     __end_of_init_ds18b20:
 14681                           	callstack 0
 14682                           
 14683 ;; *************** function _write_byte *****************
 14684 ;; Defined at:
 14685 ;;		line 66 in file "onewire.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  val             1    wreg     unsigned char 
 14688 ;; Auto vars:     Size  Location     Type
 14689 ;;  val             1   28[COMRAM] unsigned char 
 14690 ;;  i               1   30[COMRAM] unsigned char 
 14691 ;;  temp            1   29[COMRAM] unsigned char 
 14692 ;; Return value:  Size  Location     Type
 14693 ;;                  1    wreg      void 
 14694 ;; Registers used:
 14695 ;;		wreg, status,2, status,0, cstack
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14701 ;;      Params:         0       0       0       0       0       0       0
 14702 ;;      Locals:         3       0       0       0       0       0       0
 14703 ;;      Temps:          2       0       0       0       0       0       0
 14704 ;;      Totals:         5       0       0       0       0       0       0
 14705 ;;Total ram usage:        5 bytes
 14706 ;; Hardware stack levels used: 1
 14707 ;; Hardware stack levels required when called: 4
 14708 ;; This function calls:
 14709 ;;		_write_bit
 14710 ;; This function is called by:
 14711 ;;		_init_ds18b20
 14712 ;;		_readTemp_Single
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           	psect	text56
 14717  003ADC                     __ptext56:
 14718                           	callstack 0
 14719  003ADC                     _write_byte:
 14720                           	callstack 25
 14721                           
 14722                           ;incstack = 0
 14723                           ;write_byte@val stored from wreg
 14724  003ADC  6E1D               	movwf	write_byte@val^0,c
 14725                           
 14726                           ;onewire.c: 66: void write_byte(uint8_t val);onewire.c: 67: {;onewire.c: 68:    uint8_t 
      +                          i;;onewire.c: 69:    uint8_t temp;;onewire.c: 71:    for (i=0;i<8;i++)
 14727  003ADE  6A1F               	clrf	write_byte@i^0,c
 14728  003AE0                     l9184:
 14729                           
 14730                           ;onewire.c: 72:    {;onewire.c: 73:       temp = val >> i;
 14731  003AE0  C01F  F01B         	movff	write_byte@i,??_write_byte
 14732  003AE4  C01D  F01C         	movff	write_byte@val,??_write_byte+1
 14733  003AE8  2A1B               	incf	??_write_byte^0,f,c
 14734  003AEA  D002               	goto	u10944
 14735  003AEC                     u10945:
 14736  003AEC  90D8               	bcf	status,0,c
 14737  003AEE  321C               	rrcf	(??_write_byte+1)^0,f,c
 14738  003AF0                     u10944:
 14739  003AF0  2E1B               	decfsz	??_write_byte^0,f,c
 14740  003AF2  D7FC               	goto	u10945
 14741  003AF4  501C               	movf	(??_write_byte+1)^0,w,c
 14742  003AF6  6E1E               	movwf	write_byte@temp^0,c
 14743                           
 14744                           ;onewire.c: 74:       temp &= 0x01;
 14745  003AF8  0E01               	movlw	1
 14746  003AFA  161E               	andwf	write_byte@temp^0,f,c
 14747                           
 14748                           ;onewire.c: 75:       write_bit(temp);
 14749  003AFC  501E               	movf	write_byte@temp^0,w,c
 14750  003AFE  ECAC  F01E         	call	_write_bit
 14751                           
 14752                           ;onewire.c: 76:    }
 14753  003B02  2A1F               	incf	write_byte@i^0,f,c
 14754  003B04  0E07               	movlw	7
 14755  003B06  641F               	cpfsgt	write_byte@i^0,c
 14756  003B08  D7EB               	goto	l9184
 14757                           
 14758                           ;onewire.c: 78:    _delay((unsigned long)((105)*(64000000/4000000.0)));
 14759  003B0A  0EF0               	movlw	240
 14760  003B0C                     u12217:
 14761  003B0C  F000 F000          	nop2	
 14762  003B10  F000 F000          	nop2	
 14763  003B14  2EE8               	decfsz	wreg,f,c
 14764  003B16  D7FA               	bra	u12217
 14765  003B18  0012               	return		;funcret
 14766  003B1A                     __end_of_write_byte:
 14767                           	callstack 0
 14768                           
 14769 ;; *************** function _write_bit *****************
 14770 ;; Defined at:
 14771 ;;		line 34 in file "onewire.c"
 14772 ;; Parameters:    Size  Location     Type
 14773 ;;  bitval          1    wreg     unsigned char 
 14774 ;; Auto vars:     Size  Location     Type
 14775 ;;  bitval          1   25[COMRAM] unsigned char 
 14776 ;; Return value:  Size  Location     Type
 14777 ;;                  1    wreg      void 
 14778 ;; Registers used:
 14779 ;;		wreg, status,2, status,0, cstack
 14780 ;; Tracked objects:
 14781 ;;		On entry : 0/0
 14782 ;;		On exit  : 0/0
 14783 ;;		Unchanged: 0/0
 14784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14785 ;;      Params:         0       0       0       0       0       0       0
 14786 ;;      Locals:         1       0       0       0       0       0       0
 14787 ;;      Temps:          0       0       0       0       0       0       0
 14788 ;;      Totals:         1       0       0       0       0       0       0
 14789 ;;Total ram usage:        1 bytes
 14790 ;; Hardware stack levels used: 1
 14791 ;; Hardware stack levels required when called: 3
 14792 ;; This function calls:
 14793 ;;		Nothing
 14794 ;; This function is called by:
 14795 ;;		_write_byte
 14796 ;; This function uses a non-reentrant model
 14797 ;;
 14798                           
 14799                           	psect	text57
 14800  003D58                     __ptext57:
 14801                           	callstack 0
 14802  003D58                     _write_bit:
 14803                           	callstack 25
 14804                           
 14805                           ;incstack = 0
 14806                           ;write_bit@bitval stored from wreg
 14807  003D58  6E1A               	movwf	write_bit@bitval^0,c
 14808                           
 14809                           ;onewire.c: 34: void write_bit(uint8_t bitval);onewire.c: 35: {;onewire.c: 36:     PORTB
      +                          bits.RB7 = 0;
 14810  003D5A  9E81               	bcf	129,7,c	;volatile
 14811                           
 14812                           ;onewire.c: 37:     TRISBbits.TRISB7 = 0;
 14813  003D5C  9E93               	bcf	147,7,c	;volatile
 14814                           
 14815                           ;onewire.c: 38:    if(bitval == 1) {
 14816  003D5E  041A               	decf	write_bit@bitval^0,w,c
 14817  003D60  E107               	bnz	l715
 14818                           
 14819                           ;onewire.c: 39:       _delay((unsigned long)((2)*(64000000/4000000.0)));
 14820  003D62  0E0A               	movlw	10
 14821  003D64                     u12227:
 14822  003D64  2EE8               	decfsz	wreg,f,c
 14823  003D66  D7FE               	bra	u12227
 14824  003D68  F000 F000          	nop2	
 14825                           
 14826                           ;onewire.c: 40:       PORTBbits.RB7 = 1;
 14827  003D6C  8E81               	bsf	129,7,c	;volatile
 14828                           
 14829                           ;onewire.c: 41:       TRISBbits.TRISB7 = 1;
 14830  003D6E  8E93               	bsf	147,7,c	;volatile
 14831  003D70                     l715:
 14832                           
 14833                           ;onewire.c: 43:    _delay((unsigned long)((105)*(64000000/4000000.0)));
 14834  003D70  0EF0               	movlw	240
 14835  003D72                     u12237:
 14836  003D72  F000 F000          	nop2	
 14837  003D76  F000 F000          	nop2	
 14838  003D7A  2EE8               	decfsz	wreg,f,c
 14839  003D7C  D7FA               	bra	u12237
 14840                           
 14841                           ;onewire.c: 44:       PORTBbits.RB7 = 1;
 14842  003D7E  8E81               	bsf	129,7,c	;volatile
 14843                           
 14844                           ;onewire.c: 45:       TRISBbits.TRISB7 = 1;
 14845  003D80  8E93               	bsf	147,7,c	;volatile
 14846  003D82  0012               	return		;funcret
 14847  003D84                     __end_of_write_bit:
 14848                           	callstack 0
 14849                           
 14850 ;; *************** function _ow_reset *****************
 14851 ;; Defined at:
 14852 ;;		line 5 in file "onewire.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;		None
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;  presence        1   26[COMRAM] unsigned char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;                  1    wreg      unsigned char 
 14859 ;; Registers used:
 14860 ;;		wreg, status,2
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14866 ;;      Params:         0       0       0       0       0       0       0
 14867 ;;      Locals:         1       0       0       0       0       0       0
 14868 ;;      Temps:          1       0       0       0       0       0       0
 14869 ;;      Totals:         2       0       0       0       0       0       0
 14870 ;;Total ram usage:        2 bytes
 14871 ;; Hardware stack levels used: 1
 14872 ;; Hardware stack levels required when called: 3
 14873 ;; This function calls:
 14874 ;;		Nothing
 14875 ;; This function is called by:
 14876 ;;		_init_ds18b20
 14877 ;;		_readTemp_Single
 14878 ;; This function uses a non-reentrant model
 14879 ;;
 14880                           
 14881                           	psect	text58
 14882  0038A6                     __ptext58:
 14883                           	callstack 0
 14884  0038A6                     _ow_reset:
 14885                           	callstack 26
 14886                           
 14887                           ;onewire.c: 7:    uint8_t presence;;onewire.c: 8:     PORTBbits.RB7 = 0;
 14888                           
 14889                           ;incstack = 0
 14890  0038A6  9E81               	bcf	129,7,c	;volatile
 14891                           
 14892                           ;onewire.c: 9:     TRISBbits.TRISB7 = 0;
 14893  0038A8  9E93               	bcf	147,7,c	;volatile
 14894                           
 14895                           ;onewire.c: 10:     _delay((unsigned long)((500)*(64000000/4000000.0)));
 14896  0038AA  0E0B               	movlw	11
 14897  0038AC  6E1A               	movwf	??_ow_reset^0,c
 14898  0038AE  0E62               	movlw	98
 14899  0038B0                     u12247:
 14900  0038B0  2EE8               	decfsz	wreg,f,c
 14901  0038B2  D7FE               	bra	u12247
 14902  0038B4  2E1A               	decfsz	??_ow_reset^0,f,c
 14903  0038B6  D7FC               	bra	u12247
 14904  0038B8  F000 F000          	nop2	
 14905                           
 14906                           ;onewire.c: 11:     PORTBbits.RB7 = 1;
 14907  0038BC  8E81               	bsf	129,7,c	;volatile
 14908                           
 14909                           ;onewire.c: 12:     TRISBbits.TRISB7 = 1;
 14910  0038BE  8E93               	bsf	147,7,c	;volatile
 14911                           
 14912                           ;onewire.c: 13:    _delay((unsigned long)((100)*(64000000/4000000.0)));
 14913  0038C0  0EE4               	movlw	228
 14914  0038C2                     u12257:
 14915  0038C2  F000 F000          	nop2	
 14916  0038C6  F000 F000          	nop2	
 14917  0038CA  2EE8               	decfsz	wreg,f,c
 14918  0038CC  D7FA               	bra	u12257
 14919  0038CE  F000 F000          	nop2	
 14920  0038D2  F000 F000          	nop2	
 14921                           
 14922                           ;onewire.c: 14:    presence = PORTBbits.RB7;
 14923  0038D6  0E00               	movlw	0
 14924  0038D8  BE81               	btfsc	129,7,c	;volatile
 14925  0038DA  0E01               	movlw	1
 14926  0038DC  6E1B               	movwf	ow_reset@presence^0,c
 14927                           
 14928                           ;onewire.c: 15:    _delay((unsigned long)((424)*(64000000/4000000.0)));
 14929  0038DE  0E09               	movlw	9
 14930  0038E0  6E1A               	movwf	??_ow_reset^0,c
 14931  0038E2  0ECE               	movlw	206
 14932  0038E4                     u12267:
 14933  0038E4  2EE8               	decfsz	wreg,f,c
 14934  0038E6  D7FE               	bra	u12267
 14935  0038E8  2E1A               	decfsz	??_ow_reset^0,f,c
 14936  0038EA  D7FC               	bra	u12267
 14937  0038EC  F000 F000          	nop2	
 14938                           
 14939                           ;onewire.c: 16:    return(presence);
 14940  0038F0  501B               	movf	ow_reset@presence^0,w,c
 14941  0038F2  0012               	return		;funcret
 14942  0038F4                     __end_of_ow_reset:
 14943                           	callstack 0
 14944                           
 14945 ;; *************** function _initLCD *****************
 14946 ;; Defined at:
 14947 ;;		line 10 in file "hd44780.c"
 14948 ;; Parameters:    Size  Location     Type
 14949 ;;		None
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;		None
 14952 ;; Return value:  Size  Location     Type
 14953 ;;                  1    wreg      void 
 14954 ;; Registers used:
 14955 ;;		wreg, status,2, status,0, cstack
 14956 ;; Tracked objects:
 14957 ;;		On entry : 0/0
 14958 ;;		On exit  : 0/0
 14959 ;;		Unchanged: 0/0
 14960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14961 ;;      Params:         0       0       0       0       0       0       0
 14962 ;;      Locals:         0       0       0       0       0       0       0
 14963 ;;      Temps:          1       0       0       0       0       0       0
 14964 ;;      Totals:         1       0       0       0       0       0       0
 14965 ;;Total ram usage:        1 bytes
 14966 ;; Hardware stack levels used: 1
 14967 ;; Hardware stack levels required when called: 6
 14968 ;; This function calls:
 14969 ;;		_clearLCD
 14970 ;;		_lcdNibble
 14971 ;;		_lcdWrite
 14972 ;; This function is called by:
 14973 ;;		_init_cpu
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text59
 14978  002B96                     __ptext59:
 14979                           	callstack 0
 14980  002B96                     _initLCD:
 14981                           	callstack 23
 14982                           
 14983                           ;hd44780.c: 11:     LATAbits.LA7 = 0;
 14984                           
 14985                           ;incstack = 0
 14986  002B96  9E89               	bcf	137,7,c	;volatile
 14987                           
 14988                           ;hd44780.c: 12:     LATAbits.LA6 = 0;
 14989  002B98  9C89               	bcf	137,6,c	;volatile
 14990                           
 14991                           ;hd44780.c: 14:     _delay((unsigned long)((10)*(64000000/4000.0)));
 14992  002B9A  0ED0               	movlw	208
 14993  002B9C  6E1F               	movwf	??_initLCD^0,c
 14994  002B9E  0ECA               	movlw	202
 14995  002BA0                     u12277:
 14996  002BA0  2EE8               	decfsz	wreg,f,c
 14997  002BA2  D7FE               	bra	u12277
 14998  002BA4  2E1F               	decfsz	??_initLCD^0,f,c
 14999  002BA6  D7FC               	bra	u12277
 15000                           
 15001                           ;hd44780.c: 15:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15002  002BA8  0ED0               	movlw	208
 15003  002BAA  6E1F               	movwf	??_initLCD^0,c
 15004  002BAC  0ECA               	movlw	202
 15005  002BAE                     u12287:
 15006  002BAE  2EE8               	decfsz	wreg,f,c
 15007  002BB0  D7FE               	bra	u12287
 15008  002BB2  2E1F               	decfsz	??_initLCD^0,f,c
 15009  002BB4  D7FC               	bra	u12287
 15010                           
 15011                           ;hd44780.c: 16:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15012  002BB6  0ED0               	movlw	208
 15013  002BB8  6E1F               	movwf	??_initLCD^0,c
 15014  002BBA  0ECA               	movlw	202
 15015  002BBC                     u12297:
 15016  002BBC  2EE8               	decfsz	wreg,f,c
 15017  002BBE  D7FE               	bra	u12297
 15018  002BC0  2E1F               	decfsz	??_initLCD^0,f,c
 15019  002BC2  D7FC               	bra	u12297
 15020                           
 15021                           ;hd44780.c: 17:     _delay((unsigned long)((10)*(64000000/4000.0)));
 15022  002BC4  0ED0               	movlw	208
 15023  002BC6  6E1F               	movwf	??_initLCD^0,c
 15024  002BC8  0ECA               	movlw	202
 15025  002BCA                     u12307:
 15026  002BCA  2EE8               	decfsz	wreg,f,c
 15027  002BCC  D7FE               	bra	u12307
 15028  002BCE  2E1F               	decfsz	??_initLCD^0,f,c
 15029  002BD0  D7FC               	bra	u12307
 15030                           
 15031                           ;hd44780.c: 21:     lcdNibble(0b0011);
 15032  002BD2  0E03               	movlw	3
 15033  002BD4  EC76  F019         	call	_lcdNibble
 15034                           
 15035                           ;hd44780.c: 22:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15036  002BD8  0E68               	movlw	104
 15037  002BDA  6E1F               	movwf	??_initLCD^0,c
 15038  002BDC  0EE4               	movlw	228
 15039  002BDE                     u12317:
 15040  002BDE  2EE8               	decfsz	wreg,f,c
 15041  002BE0  D7FE               	bra	u12317
 15042  002BE2  2E1F               	decfsz	??_initLCD^0,f,c
 15043  002BE4  D7FC               	bra	u12317
 15044  002BE6  F000 F000          	nop2	
 15045                           
 15046                           ;hd44780.c: 23:     lcdNibble(0b0011);
 15047  002BEA  0E03               	movlw	3
 15048  002BEC  EC76  F019         	call	_lcdNibble
 15049                           
 15050                           ;hd44780.c: 24:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15051  002BF0  0E68               	movlw	104
 15052  002BF2  6E1F               	movwf	??_initLCD^0,c
 15053  002BF4  0EE4               	movlw	228
 15054  002BF6                     u12327:
 15055  002BF6  2EE8               	decfsz	wreg,f,c
 15056  002BF8  D7FE               	bra	u12327
 15057  002BFA  2E1F               	decfsz	??_initLCD^0,f,c
 15058  002BFC  D7FC               	bra	u12327
 15059  002BFE  F000 F000          	nop2	
 15060                           
 15061                           ;hd44780.c: 25:     lcdNibble(0b0011);
 15062  002C02  0E03               	movlw	3
 15063  002C04  EC76  F019         	call	_lcdNibble
 15064                           
 15065                           ;hd44780.c: 26:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15066  002C08  0E68               	movlw	104
 15067  002C0A  6E1F               	movwf	??_initLCD^0,c
 15068  002C0C  0EE4               	movlw	228
 15069  002C0E                     u12337:
 15070  002C0E  2EE8               	decfsz	wreg,f,c
 15071  002C10  D7FE               	bra	u12337
 15072  002C12  2E1F               	decfsz	??_initLCD^0,f,c
 15073  002C14  D7FC               	bra	u12337
 15074  002C16  F000 F000          	nop2	
 15075                           
 15076                           ;hd44780.c: 27:     lcdNibble(0b0010);
 15077  002C1A  0E02               	movlw	2
 15078  002C1C  EC76  F019         	call	_lcdNibble
 15079                           
 15080                           ;hd44780.c: 28:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15081  002C20  0E68               	movlw	104
 15082  002C22  6E1F               	movwf	??_initLCD^0,c
 15083  002C24  0EE4               	movlw	228
 15084  002C26                     u12347:
 15085  002C26  2EE8               	decfsz	wreg,f,c
 15086  002C28  D7FE               	bra	u12347
 15087  002C2A  2E1F               	decfsz	??_initLCD^0,f,c
 15088  002C2C  D7FC               	bra	u12347
 15089  002C2E  F000 F000          	nop2	
 15090                           
 15091                           ;hd44780.c: 31:     lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
 15092  002C32  0E00               	movlw	0
 15093  002C34  6E1C               	movwf	lcdWrite@type^0,c
 15094  002C36  0E28               	movlw	40
 15095  002C38  EC4E  F01E         	call	_lcdWrite
 15096                           
 15097                           ;hd44780.c: 32:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15098  002C3C  0E68               	movlw	104
 15099  002C3E  6E1F               	movwf	??_initLCD^0,c
 15100  002C40  0EE4               	movlw	228
 15101  002C42                     u12357:
 15102  002C42  2EE8               	decfsz	wreg,f,c
 15103  002C44  D7FE               	bra	u12357
 15104  002C46  2E1F               	decfsz	??_initLCD^0,f,c
 15105  002C48  D7FC               	bra	u12357
 15106  002C4A  F000 F000          	nop2	
 15107                           
 15108                           ;hd44780.c: 33:     lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
 15109  002C4E  0E00               	movlw	0
 15110  002C50  6E1C               	movwf	lcdWrite@type^0,c
 15111  002C52  0E0C               	movlw	12
 15112  002C54  EC4E  F01E         	call	_lcdWrite
 15113                           
 15114                           ;hd44780.c: 34:     _delay((unsigned long)((8)*(64000000/4000.0)));
 15115  002C58  0EA7               	movlw	167
 15116  002C5A  6E1F               	movwf	??_initLCD^0,c
 15117  002C5C  0E3A               	movlw	58
 15118  002C5E                     u12367:
 15119  002C5E  2EE8               	decfsz	wreg,f,c
 15120  002C60  D7FE               	bra	u12367
 15121  002C62  2E1F               	decfsz	??_initLCD^0,f,c
 15122  002C64  D7FC               	bra	u12367
 15123  002C66  F000 F000          	nop2	
 15124                           
 15125                           ;hd44780.c: 35:     clearLCD();
 15126  002C6A  EC3A  F01F         	call	_clearLCD	;wreg free
 15127                           
 15128                           ;hd44780.c: 36:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15129  002C6E  0E68               	movlw	104
 15130  002C70  6E1F               	movwf	??_initLCD^0,c
 15131  002C72  0EE4               	movlw	228
 15132  002C74                     u12377:
 15133  002C74  2EE8               	decfsz	wreg,f,c
 15134  002C76  D7FE               	bra	u12377
 15135  002C78  2E1F               	decfsz	??_initLCD^0,f,c
 15136  002C7A  D7FC               	bra	u12377
 15137  002C7C  F000 F000          	nop2	
 15138                           
 15139                           ;hd44780.c: 37:     lcdWrite(0x06, COMMAND);
 15140  002C80  0E00               	movlw	0
 15141  002C82  6E1C               	movwf	lcdWrite@type^0,c
 15142  002C84  0E06               	movlw	6
 15143  002C86  EC4E  F01E         	call	_lcdWrite
 15144                           
 15145                           ;hd44780.c: 38:     _delay((unsigned long)((5)*(64000000/4000.0)));
 15146  002C8A  0E68               	movlw	104
 15147  002C8C  6E1F               	movwf	??_initLCD^0,c
 15148  002C8E  0EE4               	movlw	228
 15149  002C90                     u12387:
 15150  002C90  2EE8               	decfsz	wreg,f,c
 15151  002C92  D7FE               	bra	u12387
 15152  002C94  2E1F               	decfsz	??_initLCD^0,f,c
 15153  002C96  D7FC               	bra	u12387
 15154  002C98  F000 F000          	nop2	
 15155                           
 15156                           ;hd44780.c: 39:     clearLCD();
 15157  002C9C  EC3A  F01F         	call	_clearLCD	;wreg free
 15158                           
 15159                           ;hd44780.c: 41:     LATAbits.LA7 = 1;
 15160  002CA0  8E89               	bsf	137,7,c	;volatile
 15161  002CA2  0012               	return		;funcret
 15162  002CA4                     __end_of_initLCD:
 15163                           	callstack 0
 15164                           
 15165 ;; *************** function _clearLCD *****************
 15166 ;; Defined at:
 15167 ;;		line 45 in file "hd44780.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;		None
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  1    wreg      void 
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/1
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15181 ;;      Params:         0       0       0       0       0       0       0
 15182 ;;      Locals:         0       0       0       0       0       0       0
 15183 ;;      Temps:          1       0       0       0       0       0       0
 15184 ;;      Totals:         1       0       0       0       0       0       0
 15185 ;;Total ram usage:        1 bytes
 15186 ;; Hardware stack levels used: 1
 15187 ;; Hardware stack levels required when called: 5
 15188 ;; This function calls:
 15189 ;;		_lcdWrite
 15190 ;; This function is called by:
 15191 ;;		_initLCD
 15192 ;;		_main
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           	psect	text60
 15197  003E74                     __ptext60:
 15198                           	callstack 0
 15199  003E74                     _clearLCD:
 15200                           	callstack 0
 15201                           
 15202                           ;hd44780.c: 46:     lcdWrite(0x01, COMMAND);
 15203                           
 15204                           ;incstack = 0
 15205  003E74  EC56  F017         	call	PL212	;call to abstracted procedure
 15206  003E78  EC4E  F01E         	call	_lcdWrite
 15207                           
 15208                           ;hd44780.c: 47:     _delay((unsigned long)((2)*(64000000/4000.0)));
 15209  003E7C  0E2A               	movlw	42
 15210  003E7E  6E1E               	movwf	??_clearLCD^0,c
 15211  003E80  0E8E               	movlw	142
 15212  003E82                     u12397:
 15213  003E82  2EE8               	decfsz	wreg,f,c
 15214  003E84  D7FE               	bra	u12397
 15215  003E86  2E1E               	decfsz	??_clearLCD^0,f,c
 15216  003E88  D7FC               	bra	u12397
 15217  003E8A  0012               	return		;funcret
 15218  003E8C                     __end_of_clearLCD:
 15219                           	callstack 0
 15220                           
 15221 ;; *************** function _cgrom_char *****************
 15222 ;; Defined at:
 15223 ;;		line 149 in file "hd44780.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;  symbol          2   29[COMRAM] PTR unsigned char 
 15226 ;;		 -> symbol_7(8), symbol_6(8), symbol_5(8), symbol_4(8), 
 15227 ;;		 -> symbol_3(8), symbol_2(8), symbol_1(8), 
 15228 ;;  address         1   31[COMRAM] unsigned char 
 15229 ;; Auto vars:     Size  Location     Type
 15230 ;;  i               1   32[COMRAM] unsigned char 
 15231 ;; Return value:  Size  Location     Type
 15232 ;;                  1    wreg      void 
 15233 ;; Registers used:
 15234 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15235 ;; Tracked objects:
 15236 ;;		On entry : 0/0
 15237 ;;		On exit  : 0/0
 15238 ;;		Unchanged: 0/0
 15239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15240 ;;      Params:         3       0       0       0       0       0       0
 15241 ;;      Locals:         1       0       0       0       0       0       0
 15242 ;;      Temps:          0       0       0       0       0       0       0
 15243 ;;      Totals:         4       0       0       0       0       0       0
 15244 ;;Total ram usage:        4 bytes
 15245 ;; Hardware stack levels used: 1
 15246 ;; Hardware stack levels required when called: 5
 15247 ;; This function calls:
 15248 ;;		_lcdWrite
 15249 ;; This function is called by:
 15250 ;;		_init_cpu
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           	psect	text61
 15255  003C6A                     __ptext61:
 15256                           	callstack 0
 15257  003C6A                     _cgrom_char:
 15258                           	callstack 24
 15259                           
 15260                           ;hd44780.c: 150:     uint8_t i;;hd44780.c: 151:     lcdWrite(0x40 | (address * 8), COMMA
      +                          ND);
 15261                           
 15262                           ;incstack = 0
 15263  003C6A  6A1C               	clrf	lcdWrite@type^0,c
 15264  003C6C  5020               	movf	cgrom_char@address^0,w,c
 15265  003C6E  0D08               	mullw	8
 15266  003C70  50F3               	movf	243,w,c
 15267  003C72  0940               	iorlw	64
 15268  003C74  EC4E  F01E         	call	_lcdWrite
 15269                           
 15270                           ;hd44780.c: 152:     for (i = 0; i < 8; i++)
 15271  003C78  6A21               	clrf	cgrom_char@i^0,c
 15272  003C7A                     l9350:
 15273                           
 15274                           ;hd44780.c: 153:         lcdWrite(*symbol++, DATA);
 15275  003C7A  0E01               	movlw	1
 15276  003C7C  6E1C               	movwf	lcdWrite@type^0,c
 15277  003C7E  C01E  FFF6         	movff	cgrom_char@symbol,tblptrl
 15278  003C82  C01F  FFF7         	movff	cgrom_char@symbol+1,tblptrh
 15279  003C86                     	if	0	;tblptru may be non-zero
 15280  003C86                     	endif
 15281  003C86                     	if	0	;tblptru may be non-zero
 15282  003C86                     	endif
 15283  003C86  0008               	tblrd		*
 15284  003C88  50F5               	movf	tablat,w,c
 15285  003C8A  EC4E  F01E         	call	_lcdWrite
 15286  003C8E  4A1E               	infsnz	cgrom_char@symbol^0,f,c
 15287  003C90  2A1F               	incf	(cgrom_char@symbol+1)^0,f,c
 15288  003C92  2A21               	incf	cgrom_char@i^0,f,c
 15289  003C94  0E07               	movlw	7
 15290  003C96  6421               	cpfsgt	cgrom_char@i^0,c
 15291  003C98  D7F0               	goto	l9350
 15292  003C9A  0C07               	retlw	7
 15293  003C9C                     __end_of_cgrom_char:
 15294                           	callstack 0
 15295                           
 15296 ;; *************** function _lcdWrite *****************
 15297 ;; Defined at:
 15298 ;;		line 50 in file "hd44780.c"
 15299 ;; Parameters:    Size  Location     Type
 15300 ;;  byte            1    wreg     unsigned char 
 15301 ;;  type            1   27[COMRAM] enum E3254
 15302 ;; Auto vars:     Size  Location     Type
 15303 ;;  byte            1   28[COMRAM] unsigned char 
 15304 ;; Return value:  Size  Location     Type
 15305 ;;                  1    wreg      void 
 15306 ;; Registers used:
 15307 ;;		wreg, status,2, status,0, cstack
 15308 ;; Tracked objects:
 15309 ;;		On entry : 0/1
 15310 ;;		On exit  : 0/0
 15311 ;;		Unchanged: 0/0
 15312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15313 ;;      Params:         1       0       0       0       0       0       0
 15314 ;;      Locals:         1       0       0       0       0       0       0
 15315 ;;      Temps:          0       0       0       0       0       0       0
 15316 ;;      Totals:         2       0       0       0       0       0       0
 15317 ;;Total ram usage:        2 bytes
 15318 ;; Hardware stack levels used: 1
 15319 ;; Hardware stack levels required when called: 4
 15320 ;; This function calls:
 15321 ;;		_lcdNibble
 15322 ;; This function is called by:
 15323 ;;		_initLCD
 15324 ;;		_clearLCD
 15325 ;;		_lcd_gotoxy
 15326 ;;		_lcd_putc
 15327 ;;		_lcdPrint
 15328 ;;		_cgrom_char
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           	psect	text62
 15333  003C9C                     __ptext62:
 15334                           	callstack 0
 15335  003C9C                     _lcdWrite:
 15336                           	callstack 24
 15337                           
 15338                           ;incstack = 0
 15339                           ;lcdWrite@byte stored from wreg
 15340  003C9C  6E1D               	movwf	lcdWrite@byte^0,c
 15341                           
 15342                           ;hd44780.c: 51:     if (type == COMMAND)
 15343  003C9E  501C               	movf	lcdWrite@type^0,w,c
 15344  003CA0  E102               	bnz	l116
 15345                           
 15346                           ;hd44780.c: 52:         LATAbits.LA7 = 0;
 15347  003CA2  9E89               	bcf	137,7,c	;volatile
 15348  003CA4  D001               	goto	l8948
 15349  003CA6                     l116:
 15350                           
 15351                           ;hd44780.c: 54:         LATAbits.LA7 = 1;
 15352  003CA6  8E89               	bsf	137,7,c	;volatile
 15353  003CA8                     l8948:
 15354                           
 15355                           ;hd44780.c: 56:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15356  003CA8  0EE4               	movlw	228
 15357  003CAA                     u12407:
 15358  003CAA  F000 F000          	nop2	
 15359  003CAE  F000 F000          	nop2	
 15360  003CB2  2EE8               	decfsz	wreg,f,c
 15361  003CB4  D7FA               	bra	u12407
 15362  003CB6  F000 F000          	nop2	
 15363  003CBA  F000 F000          	nop2	
 15364                           
 15365                           ;hd44780.c: 58:     lcdNibble(byte >> 4);
 15366  003CBE  381D               	swapf	lcdWrite@byte^0,w,c
 15367  003CC0  0B0F               	andlw	15
 15368  003CC2  EC76  F019         	call	_lcdNibble
 15369                           
 15370                           ;hd44780.c: 59:     lcdNibble(byte & 0x0F);
 15371  003CC6  501D               	movf	lcdWrite@byte^0,w,c
 15372  003CC8  0B0F               	andlw	15
 15373  003CCA  EF76  F019         	goto	_lcdNibble
 15374  003CCE                     __end_of_lcdWrite:
 15375                           	callstack 0
 15376                           
 15377 ;; *************** function _lcdNibble *****************
 15378 ;; Defined at:
 15379 ;;		line 63 in file "hd44780.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;  nibble          1    wreg     unsigned char 
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;  nibble          1   26[COMRAM] unsigned char 
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  1    wreg      void 
 15386 ;; Registers used:
 15387 ;;		wreg, status,2, status,0
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15393 ;;      Params:         0       0       0       0       0       0       0
 15394 ;;      Locals:         1       0       0       0       0       0       0
 15395 ;;      Temps:          1       0       0       0       0       0       0
 15396 ;;      Totals:         2       0       0       0       0       0       0
 15397 ;;Total ram usage:        2 bytes
 15398 ;; Hardware stack levels used: 1
 15399 ;; Hardware stack levels required when called: 3
 15400 ;; This function calls:
 15401 ;;		Nothing
 15402 ;; This function is called by:
 15403 ;;		_initLCD
 15404 ;;		_lcdWrite
 15405 ;; This function uses a non-reentrant model
 15406 ;;
 15407                           
 15408                           	psect	text63
 15409  0032EC                     __ptext63:
 15410                           	callstack 0
 15411  0032EC                     _lcdNibble:
 15412                           	callstack 24
 15413                           
 15414                           ;incstack = 0
 15415                           ;lcdNibble@nibble stored from wreg
 15416  0032EC  6E1B               	movwf	lcdNibble@nibble^0,c
 15417                           
 15418                           ;hd44780.c: 64:     LATCbits.LC0 = (nibble & 0x01) ? 1 : 0;
 15419  0032EE  A01B               	btfss	lcdNibble@nibble^0,0,c
 15420  0032F0  D003               	goto	u9830
 15421  0032F2  6A1A               	clrf	??_lcdNibble^0,c
 15422  0032F4  2A1A               	incf	??_lcdNibble^0,f,c
 15423  0032F6  D001               	goto	u9848
 15424  0032F8                     u9830:
 15425  0032F8  6A1A               	clrf	??_lcdNibble^0,c
 15426  0032FA                     u9848:
 15427  0032FA  508B               	movf	139,w,c	;volatile
 15428  0032FC  181A               	xorwf	??_lcdNibble^0,w,c
 15429  0032FE  0BFE               	andlw	-2
 15430  003300  181A               	xorwf	??_lcdNibble^0,w,c
 15431  003302  6E8B               	movwf	139,c	;volatile
 15432                           
 15433                           ;hd44780.c: 65:     LATCbits.LC1 = (nibble & 0x02) ? 1 : 0;
 15434  003304  A21B               	btfss	lcdNibble@nibble^0,1,c
 15435  003306  D003               	goto	u9850
 15436  003308  6A1A               	clrf	??_lcdNibble^0,c
 15437  00330A  2A1A               	incf	??_lcdNibble^0,f,c
 15438  00330C  D001               	goto	u9868
 15439  00330E                     u9850:
 15440  00330E  6A1A               	clrf	??_lcdNibble^0,c
 15441  003310                     u9868:
 15442  003310  461A               	rlncf	??_lcdNibble^0,f,c
 15443  003312  508B               	movf	139,w,c	;volatile
 15444  003314  181A               	xorwf	??_lcdNibble^0,w,c
 15445  003316  0BFD               	andlw	-3
 15446  003318  181A               	xorwf	??_lcdNibble^0,w,c
 15447  00331A  6E8B               	movwf	139,c	;volatile
 15448                           
 15449                           ;hd44780.c: 66:     LATCbits.LC2 = (nibble & 0x04) ? 1 : 0;
 15450  00331C  A41B               	btfss	lcdNibble@nibble^0,2,c
 15451  00331E  D003               	goto	u9870
 15452  003320  6A1A               	clrf	??_lcdNibble^0,c
 15453  003322  2A1A               	incf	??_lcdNibble^0,f,c
 15454  003324  D001               	goto	u9888
 15455  003326                     u9870:
 15456  003326  6A1A               	clrf	??_lcdNibble^0,c
 15457  003328                     u9888:
 15458  003328  D827               	call	PL202	;call to abstracted procedure
 15459  00332A  0BFB               	andlw	-5
 15460  00332C  181A               	xorwf	??_lcdNibble^0,w,c
 15461  00332E  6E8B               	movwf	139,c	;volatile
 15462                           
 15463                           ;hd44780.c: 67:     LATCbits.LC3 = (nibble & 0x08) ? 1 : 0;
 15464  003330  A61B               	btfss	lcdNibble@nibble^0,3,c
 15465  003332  D003               	goto	u9890
 15466  003334  6A1A               	clrf	??_lcdNibble^0,c
 15467  003336  2A1A               	incf	??_lcdNibble^0,f,c
 15468  003338  D001               	goto	u9908
 15469  00333A                     u9890:
 15470  00333A  6A1A               	clrf	??_lcdNibble^0,c
 15471  00333C                     u9908:
 15472  00333C  461A               	rlncf	??_lcdNibble^0,f,c
 15473  00333E  D81C               	call	PL202	;call to abstracted procedure
 15474  003340  0BF7               	andlw	-9
 15475  003342  181A               	xorwf	??_lcdNibble^0,w,c
 15476  003344  6E8B               	movwf	139,c	;volatile
 15477                           
 15478                           ;hd44780.c: 70:     LATAbits.LA6 = 1;
 15479  003346  8C89               	bsf	137,6,c	;volatile
 15480                           
 15481                           ;hd44780.c: 71:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15482  003348  0EE4               	movlw	228
 15483  00334A                     u12417:
 15484  00334A  F000 F000          	nop2	
 15485  00334E  F000 F000          	nop2	
 15486  003352  2EE8               	decfsz	wreg,f,c
 15487  003354  D7FA               	bra	u12417
 15488  003356  F000 F000          	nop2	
 15489  00335A  F000 F000          	nop2	
 15490                           
 15491                           ;hd44780.c: 72:     LATAbits.LA6 = 0;
 15492  00335E  9C89               	bcf	137,6,c	;volatile
 15493                           
 15494                           ;hd44780.c: 73:     _delay((unsigned long)((100)*(64000000/4000000.0)));
 15495  003360  0EE4               	movlw	228
 15496  003362                     u12427:
 15497  003362  F000 F000          	nop2	
 15498  003366  F000 F000          	nop2	
 15499  00336A  2EE8               	decfsz	wreg,f,c
 15500  00336C  D7FA               	bra	u12427
 15501  00336E  F000 F000          	nop2	
 15502  003372  F000 F000          	nop2	
 15503  003376  0012               	return		;funcret
 15504  003378                     __end_of_lcdNibble:
 15505                           	callstack 0
 15506  003378                     PL202:
 15507                           	callstack 24
 15508  003378  461A               	rlncf	??_lcdNibble^0,f,c
 15509  00337A  461A               	rlncf	??_lcdNibble^0,f,c
 15510  00337C  508B               	movf	139,w,c	;volatile
 15511  00337E  181A               	xorwf	??_lcdNibble^0,w,c
 15512  003380  0012               	return	
 15513  003382                     __end_ofPL202:
 15514                           	callstack 0
 15515                           
 15516 ;; *************** function ___xxtofl *****************
 15517 ;; Defined at:
 15518 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\xxtofl.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;  sign            1    wreg     unsigned char 
 15521 ;;  val             4   25[COMRAM] long 
 15522 ;; Auto vars:     Size  Location     Type
 15523 ;;  sign            1    0[BANK0 ] unsigned char 
 15524 ;;  arg             4    2[BANK0 ] unsigned long 
 15525 ;;  exp             1    1[BANK0 ] unsigned char 
 15526 ;; Return value:  Size  Location     Type
 15527 ;;                  4   25[COMRAM] unsigned char 
 15528 ;; Registers used:
 15529 ;;		wreg, status,2, status,0
 15530 ;; Tracked objects:
 15531 ;;		On entry : 3E/0
 15532 ;;		On exit  : 3F/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15535 ;;      Params:         4       0       0       0       0       0       0
 15536 ;;      Locals:         0       6       0       0       0       0       0
 15537 ;;      Temps:          4       0       0       0       0       0       0
 15538 ;;      Totals:         8       6       0       0       0       0       0
 15539 ;;Total ram usage:       14 bytes
 15540 ;; Hardware stack levels used: 1
 15541 ;; Hardware stack levels required when called: 3
 15542 ;; This function calls:
 15543 ;;		Nothing
 15544 ;; This function is called by:
 15545 ;;		_main
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           	psect	text64
 15550  002CA4                     __ptext64:
 15551                           	callstack 0
 15552  002CA4                     ___xxtofl:
 15553                           	callstack 27
 15554                           
 15555                           ;incstack = 0
 15556                           ;___xxtofl@sign stored from wreg
 15557  002CA4  0100               	movlb	0	; () banked
 15558  002CA6  6F60               	movwf	___xxtofl@sign& (0+255),b
 15559  002CA8  5160               	movf	___xxtofl@sign& (0+255),w,b
 15560  002CAA  E01C               	bz	l1388
 15561                           
 15562                           ; BSR set to: 0
 15563  002CAC  AE1D               	btfss	(___xxtofl@val+3)^0,7,c
 15564  002CAE  D01A               	goto	l1388
 15565                           
 15566                           ; BSR set to: 0
 15567  002CB0  C01A  F01E         	movff	___xxtofl@val,??___xxtofl
 15568  002CB4  C01B  F01F         	movff	___xxtofl@val+1,??___xxtofl+1
 15569  002CB8  C01C  F020         	movff	___xxtofl@val+2,??___xxtofl+2
 15570  002CBC  C01D  F021         	movff	___xxtofl@val+3,??___xxtofl+3
 15571  002CC0  1E1E               	comf	??___xxtofl^0,f,c
 15572  002CC2  1E1F               	comf	(??___xxtofl+1)^0,f,c
 15573  002CC4  1E20               	comf	(??___xxtofl+2)^0,f,c
 15574  002CC6  1E21               	comf	(??___xxtofl+3)^0,f,c
 15575  002CC8  2A1E               	incf	??___xxtofl^0,f,c
 15576  002CCA  0E00               	movlw	0
 15577  002CCC  221F               	addwfc	(??___xxtofl+1)^0,f,c
 15578  002CCE  2220               	addwfc	(??___xxtofl+2)^0,f,c
 15579  002CD0  2221               	addwfc	(??___xxtofl+3)^0,f,c
 15580  002CD2  C01E  F062         	movff	??___xxtofl,___xxtofl@arg
 15581  002CD6  C01F  F063         	movff	??___xxtofl+1,___xxtofl@arg+1
 15582  002CDA  C020  F064         	movff	??___xxtofl+2,___xxtofl@arg+2
 15583  002CDE  C021  F065         	movff	??___xxtofl+3,___xxtofl@arg+3
 15584  002CE2  D008               	goto	l9808
 15585  002CE4                     l1388:
 15586                           
 15587                           ; BSR set to: 0
 15588  002CE4  C01A  F062         	movff	___xxtofl@val,___xxtofl@arg
 15589  002CE8  C01B  F063         	movff	___xxtofl@val+1,___xxtofl@arg+1
 15590  002CEC  C01C  F064         	movff	___xxtofl@val+2,___xxtofl@arg+2
 15591  002CF0  C01D  F065         	movff	___xxtofl@val+3,___xxtofl@arg+3
 15592  002CF4                     l9808:
 15593                           
 15594                           ; BSR set to: 0
 15595  002CF4  501A               	movf	___xxtofl@val^0,w,c
 15596  002CF6  101B               	iorwf	(___xxtofl@val+1)^0,w,c
 15597  002CF8  101C               	iorwf	(___xxtofl@val+2)^0,w,c
 15598  002CFA  101D               	iorwf	(___xxtofl@val+3)^0,w,c
 15599  002CFC  E105               	bnz	l9812
 15600                           
 15601                           ; BSR set to: 0
 15602  002CFE  6A1A               	clrf	?___xxtofl^0,c
 15603  002D00  6A1B               	clrf	(?___xxtofl+1)^0,c
 15604  002D02  6A1C               	clrf	(?___xxtofl+2)^0,c
 15605  002D04  6A1D               	clrf	(?___xxtofl+3)^0,c
 15606  002D06  0012               	return	
 15607  002D08                     l9812:
 15608                           
 15609                           ; BSR set to: 0
 15610  002D08  0E96               	movlw	150
 15611  002D0A  6F61               	movwf	___xxtofl@exp& (0+255),b
 15612  002D0C  D002               	goto	l9816
 15613  002D0E                     l9814:
 15614                           
 15615                           ; BSR set to: 0
 15616  002D0E  2B61               	incf	___xxtofl@exp& (0+255),f,b
 15617  002D10  D84A               	call	PL162	;call to abstracted procedure
 15618  002D12                     l9816:
 15619                           
 15620                           ; BSR set to: 0
 15621  002D12  6A1E               	clrf	??___xxtofl^0,c
 15622  002D14  6A1F               	clrf	(??___xxtofl+1)^0,c
 15623  002D16  6A20               	clrf	(??___xxtofl+2)^0,c
 15624  002D18  0EFE               	movlw	254
 15625  002D1A  1565               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 15626  002D1C  D83E               	call	PL158	;call to abstracted procedure
 15627  002D1E  E008               	bz	l1395
 15628  002D20  D7F6               	goto	l9814
 15629  002D22                     l9818:
 15630                           
 15631                           ; BSR set to: 0
 15632  002D22  2B61               	incf	___xxtofl@exp& (0+255),f,b
 15633                           
 15634                           ; BSR set to: 0
 15635  002D24  2B62               	incf	___xxtofl@arg& (0+255),f,b
 15636  002D26  0E00               	movlw	0
 15637  002D28  2363               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 15638  002D2A  2364               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 15639  002D2C  2365               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 15640                           
 15641                           ; BSR set to: 0
 15642  002D2E  D83B               	call	PL162	;call to abstracted procedure
 15643  002D30                     l1395:
 15644                           
 15645                           ; BSR set to: 0
 15646  002D30  6A1E               	clrf	??___xxtofl^0,c
 15647  002D32  6A1F               	clrf	(??___xxtofl+1)^0,c
 15648  002D34  6A20               	clrf	(??___xxtofl+2)^0,c
 15649  002D36  5165               	movf	(___xxtofl@arg+3)& (0+255),w,b
 15650  002D38  D830               	call	PL158	;call to abstracted procedure
 15651  002D3A  E007               	bz	l9826
 15652  002D3C  D7F2               	goto	l9818
 15653  002D3E                     l9824:
 15654                           
 15655                           ; BSR set to: 0
 15656  002D3E  0761               	decf	___xxtofl@exp& (0+255),f,b
 15657  002D40  90D8               	bcf	status,0,c
 15658  002D42  3762               	rlcf	___xxtofl@arg& (0+255),f,b
 15659  002D44  3763               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 15660  002D46  3764               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 15661  002D48  3765               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 15662  002D4A                     l9826:
 15663                           
 15664                           ; BSR set to: 0
 15665  002D4A  BF64               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 15666  002D4C  D003               	goto	u11590
 15667                           
 15668                           ; BSR set to: 0
 15669  002D4E  0E02               	movlw	2
 15670  002D50  6161               	cpfslt	___xxtofl@exp& (0+255),b
 15671  002D52  D7F5               	goto	l9824
 15672  002D54                     u11590:
 15673                           
 15674                           ; BSR set to: 0
 15675  002D54  A161               	btfss	___xxtofl@exp& (0+255),0,b
 15676                           
 15677                           ; BSR set to: 0
 15678  002D56  9F64               	bcf	(___xxtofl@arg+2)& (0+255),7,b
 15679                           
 15680                           ; BSR set to: 0
 15681  002D58  90D8               	bcf	status,0,c
 15682  002D5A  3361               	rrcf	___xxtofl@exp& (0+255),f,b
 15683                           
 15684                           ; BSR set to: 0
 15685  002D5C  C061  F01E         	movff	___xxtofl@exp,??___xxtofl
 15686  002D60  6A1F               	clrf	(??___xxtofl+1)^0,c
 15687  002D62  6A20               	clrf	(??___xxtofl+2)^0,c
 15688  002D64  6A21               	clrf	(??___xxtofl+3)^0,c
 15689  002D66  C01E  F021         	movff	??___xxtofl,??___xxtofl+3
 15690  002D6A  6A20               	clrf	(??___xxtofl+2)^0,c
 15691  002D6C  6A1F               	clrf	(??___xxtofl+1)^0,c
 15692  002D6E  6A1E               	clrf	??___xxtofl^0,c
 15693  002D70  501E               	movf	??___xxtofl^0,w,c
 15694  002D72  1362               	iorwf	___xxtofl@arg& (0+255),f,b
 15695  002D74  501F               	movf	(??___xxtofl+1)^0,w,c
 15696  002D76  1363               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 15697  002D78  5020               	movf	(??___xxtofl+2)^0,w,c
 15698  002D7A  1364               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 15699  002D7C  5021               	movf	(??___xxtofl+3)^0,w,c
 15700  002D7E  1365               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 15701                           
 15702                           ; BSR set to: 0
 15703  002D80  5160               	movf	___xxtofl@sign& (0+255),w,b
 15704  002D82  E002               	bz	l9842
 15705                           
 15706                           ; BSR set to: 0
 15707  002D84  BE1D               	btfsc	(___xxtofl@val+3)^0,7,c
 15708                           
 15709                           ; BSR set to: 0
 15710  002D86  8F65               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 15711  002D88                     l9842:
 15712                           
 15713                           ; BSR set to: 0
 15714  002D88  C062  F01A         	movff	___xxtofl@arg,?___xxtofl
 15715  002D8C  C063  F01B         	movff	___xxtofl@arg+1,?___xxtofl+1
 15716  002D90  C064  F01C         	movff	___xxtofl@arg+2,?___xxtofl+2
 15717  002D94  C065  F01D         	movff	___xxtofl@arg+3,?___xxtofl+3
 15718                           
 15719                           ; BSR set to: 0
 15720  002D98  0012               	return		;funcret
 15721  002D9A                     __end_of___xxtofl:
 15722                           	callstack 0
 15723  002D9A                     PL158:
 15724                           	callstack 27
 15725  002D9A  6E21               	movwf	(??___xxtofl+3)^0,c
 15726  002D9C  501E               	movf	??___xxtofl^0,w,c
 15727  002D9E  101F               	iorwf	(??___xxtofl+1)^0,w,c
 15728  002DA0  1020               	iorwf	(??___xxtofl+2)^0,w,c
 15729  002DA2  1021               	iorwf	(??___xxtofl+3)^0,w,c
 15730  002DA4  0012               	return	
 15731  002DA6                     __end_ofPL158:
 15732                           	callstack 0
 15733  002DA6                     PL162:
 15734                           	callstack 27
 15735  002DA6  90D8               	bcf	status,0,c
 15736  002DA8  3365               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 15737  002DAA  3364               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 15738  002DAC  3363               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 15739  002DAE  3362               	rrcf	___xxtofl@arg& (0+255),f,b
 15740  002DB0  0012               	return	
 15741  002DB2                     __end_ofPL162:
 15742                           	callstack 0
 15743                           
 15744 ;; *************** function _EncPoll *****************
 15745 ;; Defined at:
 15746 ;;		line 576 in file "main.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;		None
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;		None
 15751 ;; Return value:  Size  Location     Type
 15752 ;;                  1    wreg      char 
 15753 ;; Registers used:
 15754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 15755 ;; Tracked objects:
 15756 ;;		On entry : 3F/1
 15757 ;;		On exit  : 3F/1
 15758 ;;		Unchanged: 3F/0
 15759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15760 ;;      Params:         0       0       0       0       0       0       0
 15761 ;;      Locals:         0       0       0       0       0       0       0
 15762 ;;      Temps:          0       0       0       0       0       0       0
 15763 ;;      Totals:         0       0       0       0       0       0       0
 15764 ;;Total ram usage:        0 bytes
 15765 ;; Hardware stack levels used: 1
 15766 ;; Hardware stack levels required when called: 3
 15767 ;; This function calls:
 15768 ;;		Nothing
 15769 ;; This function is called by:
 15770 ;;		_main
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           	psect	text65
 15775  003CCE                     __ptext65:
 15776                           	callstack 0
 15777  003CCE                     _EncPoll:
 15778                           	callstack 27
 15779                           
 15780                           ; BSR set to: 1
 15781                           ;main.c: 577:     static int8_t EncVal = 0;;main.c: 578:     static uint8_t Enc = 0;;mai
      +                          n.c: 580:     Enc <<= 2;
 15782                           
 15783                           ; BSR set to: 0
 15784                           ;incstack = 0
 15785  003CCE  90D8               	bcf	status,0,c
 15786  003CD0  363E               	rlcf	EncPoll@Enc^0,f,c
 15787  003CD2  90D8               	bcf	status,0,c
 15788  003CD4  363E               	rlcf	EncPoll@Enc^0,f,c
 15789                           
 15790                           ;main.c: 581:     Enc &= 0b00001111;
 15791  003CD6  0E0F               	movlw	15
 15792  003CD8  163E               	andwf	EncPoll@Enc^0,f,c
 15793                           
 15794                           ;main.c: 582:     Enc += ((PORTB & ((1 << 4) | (1 << 5))) >> 4);
 15795  003CDA  3881               	swapf	129,w,c	;volatile
 15796  003CDC  0B0F               	andlw	15
 15797  003CDE  0B03               	andlw	3
 15798  003CE0  263E               	addwf	EncPoll@Enc^0,f,c
 15799                           
 15800                           ; BSR set to: 1
 15801                           ;main.c: 583:     EncVal = EncState_[Enc];
 15802  003CE2  0EED               	movlw	low _EncState_
 15803  003CE4  243E               	addwf	EncPoll@Enc^0,w,c
 15804  003CE6  6EF6               	movwf	tblptrl,c
 15805  003CE8  6AF7               	clrf	tblptrh,c
 15806  003CEA  0E7D               	movlw	high _EncState_
 15807  003CEC  22F7               	addwfc	tblptrh,f,c
 15808  003CEE                     	if	0	;There are less than 3 active tblptr bytes
 15809  003CEE                     	endif
 15810  003CEE  0008               	tblrd		*
 15811  003CF0  CFF5 F03F          	movff	tablat,EncPoll@EncVal
 15812                           
 15813                           ; BSR set to: 1
 15814                           ;main.c: 585:     if (EncVal == 0x7F) EncVal = 0;
 15815  003CF4  0E7F               	movlw	127
 15816  003CF6  183F               	xorwf	EncPoll@EncVal^0,w,c
 15817  003CF8  E101               	bnz	l6758
 15818                           
 15819                           ; BSR set to: 1
 15820  003CFA  6A3F               	clrf	EncPoll@EncVal^0,c
 15821  003CFC                     l6758:
 15822                           
 15823                           ; BSR set to: 1
 15824                           ;main.c: 587:     return EncVal;
 15825  003CFC  503F               	movf	EncPoll@EncVal^0,w,c
 15826                           
 15827                           ; BSR set to: 1
 15828  003CFE  0012               	return		;funcret
 15829  003D00                     __end_of_EncPoll:
 15830                           	callstack 0
 15831                           
 15832 ;; *************** function _Inter_lo *****************
 15833 ;; Defined at:
 15834 ;;		line 7 in file "interrupt.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;		None
 15837 ;; Auto vars:     Size  Location     Type
 15838 ;;		None
 15839 ;; Return value:  Size  Location     Type
 15840 ;;                  1    wreg      void 
 15841 ;; Registers used:
 15842 ;;		wreg, status,2, status,0
 15843 ;; Tracked objects:
 15844 ;;		On entry : 0/0
 15845 ;;		On exit  : 0/0
 15846 ;;		Unchanged: 0/0
 15847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15848 ;;      Params:         0       0       0       0       0       0       0
 15849 ;;      Locals:         0       0       0       0       0       0       0
 15850 ;;      Temps:          3       0       0       0       0       0       0
 15851 ;;      Totals:         3       0       0       0       0       0       0
 15852 ;;Total ram usage:        3 bytes
 15853 ;; Hardware stack levels used: 1
 15854 ;; Hardware stack levels required when called: 2
 15855 ;; This function calls:
 15856 ;;		Nothing
 15857 ;; This function is called by:
 15858 ;;		Interrupt level 1
 15859 ;; This function uses a non-reentrant model
 15860 ;;
 15861                           
 15862                           	psect	intcodelo
 15863  000018                     __pintcodelo:
 15864                           	callstack 0
 15865  000018                     _Inter_lo:
 15866                           	callstack 19
 15867                           
 15868                           ; BSR set to: 1
 15869                           ;incstack = 0
 15870  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 15871  00001A  CFD8 F017          	movff	status,??_Inter_lo
 15872  00001E  CFE8 F018          	movff	wreg,??_Inter_lo+1
 15873  000022  CFE0 F019          	movff	bsr,??_Inter_lo+2
 15874                           
 15875                           ;interrupt.c: 8:     if (TMR0IE && TMR0IF) {
 15876  000026  BAF2               	btfsc	4082,5,c	;volatile
 15877  000028  A4F2               	btfss	4082,2,c	;volatile
 15878  00002A  D004               	goto	i1l6996
 15879                           
 15880                           ;interrupt.c: 10:         tick_t0++;
 15881  00002C  94F2               	bcf	4082,2,c	;volatile
 15882                           
 15883                           ;interrupt.c: 12:         TMR0L = 57;
 15884  00002E  0E39               	movlw	57
 15885  000030  6ED6               	movwf	214,c	;volatile
 15886                           
 15887                           ;interrupt.c: 13:         ADCON0bits.GODONE = 1;
 15888  000032  82C2               	bsf	194,1,c	;volatile
 15889  000034                     i1l6996:
 15890                           
 15891                           ;interrupt.c: 16:     if (TMR1IE && TMR1IF) {
 15892  000034  B09D               	btfsc	3997,0,c	;volatile
 15893  000036  A09E               	btfss	3998,0,c	;volatile
 15894  000038  D006               	goto	i1l7006
 15895                           
 15896                           ;interrupt.c: 17:         TMR1IF = 0;
 15897  00003A  909E               	bcf	3998,0,c	;volatile
 15898                           
 15899                           ;interrupt.c: 18:         tick_t1++;
 15900  00003C  0101               	movlb	1	; () banked
 15901  00003E  2B2C               	incf	_tick_t1& (0+255),f,b
 15902                           
 15903                           ;interrupt.c: 19:         tick_t1_1++;
 15904  000040  2B2B               	incf	_tick_t1_1& (0+255),f,b
 15905                           
 15906                           ; BSR set to: 1
 15907                           ;interrupt.c: 20:         read_key = 1;
 15908  000042  0E01               	movlw	1
 15909  000044  6F2A               	movwf	_read_key& (0+255),b
 15910  000046                     i1l7006:
 15911                           
 15912                           ;interrupt.c: 23:     if (TMR2IE && TMR2IF) {
 15913  000046  B29D               	btfsc	3997,1,c	;volatile
 15914  000048  A29E               	btfss	3998,1,c	;volatile
 15915  00004A  D029               	goto	i1l247
 15916                           
 15917                           ;interrupt.c: 24:         TMR2IF = 0;
 15918  00004C  929E               	bcf	3998,1,c	;volatile
 15919                           
 15920                           ;interrupt.c: 25:         if (++timer_val >= 782)
 15921  00004E  0101               	movlb	1	; () banked
 15922  000050  4B9F               	infsnz	_timer_val& (0+255),f,b
 15923  000052  2BA0               	incf	(_timer_val+1)& (0+255),f,b
 15924  000054  0E0E               	movlw	14
 15925  000056  5D9F               	subwf	_timer_val& (0+255),w,b
 15926  000058  0E03               	movlw	3
 15927  00005A  59A0               	subwfb	(_timer_val+1)& (0+255),w,b
 15928  00005C  E305               	bnc	i1l241
 15929                           
 15930                           ; BSR set to: 1
 15931                           ;interrupt.c: 26:         {;interrupt.c: 27:             timer_val = 0;
 15932  00005E  6B9F               	clrf	_timer_val& (0+255),b
 15933  000060  6BA0               	clrf	(_timer_val+1)& (0+255),b
 15934                           
 15935                           ; BSR set to: 1
 15936                           ;interrupt.c: 28:             time_flag = 1;
 15937  000062  0E01               	movlw	1
 15938  000064  6FA2               	movwf	_time_flag& (0+255),b
 15939                           
 15940                           ; BSR set to: 1
 15941                           ;interrupt.c: 29:             TMR2ON = 0;
 15942  000066  94CA               	bcf	4042,2,c	;volatile
 15943  000068                     i1l241:
 15944                           
 15945                           ; BSR set to: 1
 15946                           ;interrupt.c: 31:         if (sound_enable) {
 15947  000068  5129               	movf	_sound_enable& (0+255),w,b
 15948  00006A  E019               	bz	i1l247
 15949                           
 15950                           ; BSR set to: 1
 15951                           ;interrupt.c: 32:             TMR2ON = 1;
 15952  00006C  84CA               	bsf	4042,2,c	;volatile
 15953                           
 15954                           ; BSR set to: 1
 15955                           ;interrupt.c: 33:             sound_delay++;
 15956  00006E  4A3B               	infsnz	_sound_delay^0,f,c
 15957  000070  2A3C               	incf	(_sound_delay+1)^0,f,c
 15958                           
 15959                           ; BSR set to: 1
 15960                           ;interrupt.c: 34:             if (sound_delay <= 400) {
 15961  000072  0E91               	movlw	145
 15962  000074  5C3B               	subwf	_sound_delay^0,w,c
 15963  000076  0E01               	movlw	1
 15964  000078  583C               	subwfb	(_sound_delay+1)^0,w,c
 15965  00007A  E202               	bc	i1l7028
 15966                           
 15967                           ; BSR set to: 1
 15968                           ;interrupt.c: 37:                 LATCbits.LATC5 = 1;
 15969  00007C  8A8B               	bsf	139,5,c	;volatile
 15970                           
 15971                           ;interrupt.c: 38:             } else if ((sound_delay > 400)&&(sound_delay < 800))
 15972  00007E  D00F               	goto	i1l247
 15973  000080                     i1l7028:
 15974                           
 15975                           ; BSR set to: 1
 15976  000080  0E91               	movlw	145
 15977  000082  5C3B               	subwf	_sound_delay^0,w,c
 15978  000084  0E01               	movlw	1
 15979  000086  583C               	subwfb	(_sound_delay+1)^0,w,c
 15980  000088  E307               	bnc	i1l245
 15981                           
 15982                           ; BSR set to: 1
 15983  00008A  0E20               	movlw	32
 15984  00008C  5C3B               	subwf	_sound_delay^0,w,c
 15985  00008E  0E03               	movlw	3
 15986  000090  583C               	subwfb	(_sound_delay+1)^0,w,c
 15987  000092  E202               	bc	i1l245
 15988                           
 15989                           ; BSR set to: 1
 15990                           ;interrupt.c: 39:                 LATCbits.LATC5 = 0;
 15991  000094  9A8B               	bcf	139,5,c	;volatile
 15992  000096  D003               	goto	i1l247
 15993  000098                     i1l245:
 15994                           
 15995                           ; BSR set to: 1
 15996                           ;interrupt.c: 41:                 LATCbits.LATC5 = 0;
 15997  000098  9A8B               	bcf	139,5,c	;volatile
 15998                           
 15999                           ;interrupt.c: 42:                 sound_delay = 0;
 16000  00009A  6A3B               	clrf	_sound_delay^0,c
 16001  00009C  6A3C               	clrf	(_sound_delay+1)^0,c
 16002  00009E                     i1l247:
 16003  00009E  C019  FFE0         	movff	??_Inter_lo+2,bsr
 16004  0000A2  C018  FFE8         	movff	??_Inter_lo+1,wreg
 16005  0000A6  C017  FFD8         	movff	??_Inter_lo,status
 16006  0000AA  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 16007  0000AC  0010               	retfie	
 16008  0000AE                     __end_of_Inter_lo:
 16009                           	callstack 0
 16010                           
 16011 ;; *************** function _Inter_hi *****************
 16012 ;; Defined at:
 16013 ;;		line 52 in file "interrupt.c"
 16014 ;; Parameters:    Size  Location     Type
 16015 ;;		None
 16016 ;; Auto vars:     Size  Location     Type
 16017 ;;  pulse           2   20[COMRAM] short 
 16018 ;;  lev             2   18[COMRAM] short 
 16019 ;; Return value:  Size  Location     Type
 16020 ;;                  1    wreg      void 
 16021 ;; Registers used:
 16022 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16023 ;; Tracked objects:
 16024 ;;		On entry : 0/0
 16025 ;;		On exit  : 0/0
 16026 ;;		Unchanged: 0/0
 16027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16028 ;;      Params:         0       0       0       0       0       0       0
 16029 ;;      Locals:         6       0       0       0       0       0       0
 16030 ;;      Temps:          4       0       0       0       0       0       0
 16031 ;;      Totals:        10       0       0       0       0       0       0
 16032 ;;Total ram usage:       10 bytes
 16033 ;; Hardware stack levels used: 1
 16034 ;; Hardware stack levels required when called: 1
 16035 ;; This function calls:
 16036 ;;		i2___lmul
 16037 ;;		i2___wmul
 16038 ;; This function is called by:
 16039 ;;		Interrupt level 2
 16040 ;; This function uses a non-reentrant model
 16041 ;;
 16042                           
 16043                           	psect	intcode
 16044  000008                     __pintcode:
 16045                           	callstack 0
 16046  000008                     _Inter_hi:
 16047                           	callstack 19
 16048                           
 16049                           ;incstack = 0
 16050  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16051  00000A  EFAF  F012         	goto	int_func
 16052                           
 16053                           	psect	intcode_body
 16054  00255E                     __pintcode_body:
 16055                           	callstack 19
 16056  00255E                     int_func:
 16057                           	callstack 19
 16058  00255E  CFF3 F00F          	movff	prodl,??_Inter_hi+2
 16059  002562  CFF4 F010          	movff	prodh,??_Inter_hi+3
 16060                           
 16061                           ;interrupt.c: 53: int16_t pulse = 0, lev = t_power + err;
 16062  002566  6A15               	clrf	Inter_hi@pulse^0,c
 16063  002568  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16064  00256A  5039               	movf	_t_power^0,w,c
 16065  00256C  2437               	addwf	_err^0,w,c
 16066  00256E  6E13               	movwf	Inter_hi@lev^0,c
 16067  002570  503A               	movf	(_t_power+1)^0,w,c
 16068  002572  2038               	addwfc	(_err+1)^0,w,c
 16069  002574  6E14               	movwf	(Inter_hi@lev+1)^0,c
 16070                           
 16071                           ;interrupt.c: 56:     if (INT0IE && INT0IF) {
 16072  002576  B8F2               	btfsc	4082,4,c	;volatile
 16073  002578  A2F2               	btfss	4082,1,c	;volatile
 16074  00257A  D058               	goto	i2l252
 16075                           
 16076                           ;interrupt.c: 57:         if (lev >= 50) pulse = 1;
 16077  00257C  BE14               	btfsc	(Inter_hi@lev+1)^0,7,c
 16078  00257E  D008               	goto	i2l7046
 16079  002580  5014               	movf	(Inter_hi@lev+1)^0,w,c
 16080  002582  E103               	bnz	i2u770_40
 16081  002584  0E32               	movlw	50
 16082  002586  5C13               	subwf	Inter_hi@lev^0,w,c
 16083  002588  E303               	bnc	i2l7046
 16084  00258A                     i2u770_40:
 16085  00258A  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16086  00258C  0E01               	movlw	1
 16087  00258E  6E15               	movwf	Inter_hi@pulse^0,c
 16088  002590                     i2l7046:
 16089                           
 16090                           ;interrupt.c: 61:         if (ps * pulse * pp > 0) pulse = 0;
 16091  002590  5045               	movf	_pp^0,w,c
 16092  002592  6E01               	movwf	i2___wmul@multiplier^0,c
 16093  002594  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 16094  002596  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 16095  002598  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 16096  00259A  C035  F003         	movff	_ps,i2___wmul@multiplicand
 16097  00259E  C036  F004         	movff	_ps+1,i2___wmul@multiplicand+1
 16098  0025A2  ECE9  F01E         	call	i2___wmul	;wreg free
 16099  0025A6  C001  F011         	movff	?i2___wmul,_Inter_hi$2885
 16100  0025AA  C002  F012         	movff	?i2___wmul+1,_Inter_hi$2885+1
 16101                           
 16102                           ;interrupt.c: 61:         if (ps * pulse * pp > 0) pulse = 0;
 16103  0025AE  C011  F001         	movff	_Inter_hi$2885,i2___wmul@multiplier
 16104  0025B2  C012  F002         	movff	_Inter_hi$2885+1,i2___wmul@multiplier+1
 16105  0025B6  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 16106  0025BA  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 16107  0025BE  ECE9  F01E         	call	i2___wmul	;wreg free
 16108  0025C2  BE02               	btfsc	(?i2___wmul+1)^0,7,c
 16109  0025C4  D006               	goto	i2l7052
 16110  0025C6  5002               	movf	(?i2___wmul+1)^0,w,c
 16111  0025C8  E102               	bnz	i2u771_40
 16112  0025CA  0401               	decf	?i2___wmul^0,w,c
 16113  0025CC  E302               	bnc	i2l7052
 16114  0025CE                     i2u771_40:
 16115  0025CE  6A15               	clrf	Inter_hi@pulse^0,c
 16116  0025D0  6A16               	clrf	(Inter_hi@pulse+1)^0,c
 16117  0025D2                     i2l7052:
 16118                           
 16119                           ;interrupt.c: 62:         if (pulse) {
 16120  0025D2  5015               	movf	Inter_hi@pulse^0,w,c
 16121  0025D4  1016               	iorwf	(Inter_hi@pulse+1)^0,w,c
 16122  0025D6  E008               	bz	i2l255
 16123                           
 16124                           ;interrupt.c: 63:             LATAbits.LA5 = 1;
 16125  0025D8  8A89               	bsf	137,5,c	;volatile
 16126                           
 16127                           ;interrupt.c: 64:             err = lev - 100;
 16128  0025DA  0E9C               	movlw	156
 16129  0025DC  2413               	addwf	Inter_hi@lev^0,w,c
 16130  0025DE  6E37               	movwf	_err^0,c
 16131  0025E0  0EFF               	movlw	255
 16132  0025E2  2014               	addwfc	(Inter_hi@lev+1)^0,w,c
 16133  0025E4  6E38               	movwf	(_err+1)^0,c
 16134                           
 16135                           ;interrupt.c: 65:         } else {
 16136  0025E6  D005               	goto	i2l256
 16137  0025E8                     i2l255:
 16138                           
 16139                           ;interrupt.c: 66:             LATAbits.LA5 = 0;
 16140  0025E8  9A89               	bcf	137,5,c	;volatile
 16141                           
 16142                           ;interrupt.c: 67:             err = lev;
 16143  0025EA  C013  F037         	movff	Inter_hi@lev,_err
 16144  0025EE  C014  F038         	movff	Inter_hi@lev+1,_err+1
 16145  0025F2                     i2l256:
 16146                           
 16147                           ;interrupt.c: 69:         TMR3ON = 1;
 16148  0025F2  80B1               	bsf	4017,0,c	;volatile
 16149                           
 16150                           ;interrupt.c: 70:         ps += pp * pulse;
 16151  0025F4  5045               	movf	_pp^0,w,c
 16152  0025F6  6E01               	movwf	i2___wmul@multiplier^0,c
 16153  0025F8  6A02               	clrf	(i2___wmul@multiplier+1)^0,c
 16154  0025FA  BE01               	btfsc	i2___wmul@multiplier^0,7,c
 16155  0025FC  0602               	decf	(i2___wmul@multiplier+1)^0,f,c
 16156  0025FE  C015  F003         	movff	Inter_hi@pulse,i2___wmul@multiplicand
 16157  002602  C016  F004         	movff	Inter_hi@pulse+1,i2___wmul@multiplicand+1
 16158  002606  ECE9  F01E         	call	i2___wmul	;wreg free
 16159  00260A  5001               	movf	?i2___wmul^0,w,c
 16160  00260C  2635               	addwf	_ps^0,f,c
 16161  00260E  5002               	movf	(?i2___wmul+1)^0,w,c
 16162  002610  2236               	addwfc	(_ps+1)^0,f,c
 16163                           
 16164                           ;interrupt.c: 71:         pp = -pp;
 16165  002612  6C45               	negf	_pp^0,c
 16166                           
 16167                           ;interrupt.c: 73:         if (zero <= (50 - 1))
 16168  002614  0E32               	movlw	50
 16169  002616  6041               	cpfslt	_zero^0,c
 16170  002618  D001               	goto	i2l7066
 16171                           
 16172                           ;interrupt.c: 74:             zero++;
 16173  00261A  2A41               	incf	_zero^0,f,c
 16174  00261C                     i2l7066:
 16175                           
 16176                           ;interrupt.c: 75:         if (getU == 1) {
 16177  00261C  0440               	decf	_getU^0,w,c
 16178  00261E  E105               	bnz	i2l258
 16179                           
 16180                           ;interrupt.c: 76:             getU = 0;
 16181  002620  6A40               	clrf	_getU^0,c
 16182                           
 16183                           ;interrupt.c: 77:             cnt_adc = 0;
 16184  002622  0101               	movlb	1	; () banked
 16185  002624  6B1A               	clrf	_cnt_adc& (0+255),b
 16186  002626  6B1B               	clrf	(_cnt_adc+1)& (0+255),b
 16187                           
 16188                           ;interrupt.c: 78:             zero = 0;
 16189  002628  6A41               	clrf	_zero^0,c
 16190  00262A                     i2l258:
 16191                           
 16192                           ;interrupt.c: 80:         INT0IF = 0;
 16193  00262A  92F2               	bcf	4082,1,c	;volatile
 16194  00262C                     i2l252:
 16195                           
 16196                           ;interrupt.c: 84:     if (ADIE && ADIF) {
 16197  00262C  BC9D               	btfsc	3997,6,c	;volatile
 16198  00262E  AC9E               	btfss	3998,6,c	;volatile
 16199  002630  D03B               	goto	i2l7084
 16200                           
 16201                           ;interrupt.c: 85:         if (zero < 50) {
 16202  002632  0E32               	movlw	50
 16203  002634  6041               	cpfslt	_zero^0,c
 16204  002636  D037               	goto	i2l7082
 16205                           
 16206                           ;interrupt.c: 86:             U_meas = ((ADRESH << 8) + ADRESL);
 16207  002638  50C3               	movf	195,w,c	;volatile
 16208  00263A  CFC4 F00D          	movff	4036,??_Inter_hi	;volatile
 16209  00263E  6A0E               	clrf	(??_Inter_hi+1)^0,c
 16210  002640  C00D  F00E         	movff	??_Inter_hi,??_Inter_hi+1
 16211  002644  6A0D               	clrf	??_Inter_hi^0,c
 16212  002646  260D               	addwf	??_Inter_hi^0,f,c
 16213  002648  0E00               	movlw	0
 16214  00264A  220E               	addwfc	(??_Inter_hi+1)^0,f,c
 16215  00264C  C00D  F029         	movff	??_Inter_hi,_U_meas
 16216  002650  C00E  F02A         	movff	??_Inter_hi+1,_U_meas+1
 16217  002654  BE2A               	btfsc	(_U_meas+1)^0,7,c
 16218  002656  0EFF               	movlw	-1
 16219  002658  6E2B               	movwf	(_U_meas+2)^0,c
 16220  00265A  6E2C               	movwf	(_U_meas+3)^0,c
 16221                           
 16222                           ;interrupt.c: 87:             U_meas *= U_meas;
 16223  00265C  C029  F001         	movff	_U_meas,i2___lmul@multiplier
 16224  002660  C02A  F002         	movff	_U_meas+1,i2___lmul@multiplier+1
 16225  002664  C02B  F003         	movff	_U_meas+2,i2___lmul@multiplier+2
 16226  002668  C02C  F004         	movff	_U_meas+3,i2___lmul@multiplier+3
 16227  00266C  C029  F005         	movff	_U_meas,i2___lmul@multiplicand
 16228  002670  C02A  F006         	movff	_U_meas+1,i2___lmul@multiplicand+1
 16229  002674  C02B  F007         	movff	_U_meas+2,i2___lmul@multiplicand+2
 16230  002678  C02C  F008         	movff	_U_meas+3,i2___lmul@multiplicand+3
 16231  00267C  EC7A  F01C         	call	i2___lmul	;wreg free
 16232  002680  C001  F029         	movff	?i2___lmul,_U_meas
 16233  002684  C002  F02A         	movff	?i2___lmul+1,_U_meas+1
 16234  002688  C003  F02B         	movff	?i2___lmul+2,_U_meas+2
 16235  00268C  C004  F02C         	movff	?i2___lmul+3,_U_meas+3
 16236                           
 16237                           ;interrupt.c: 88:             U_summ += U_meas;
 16238  002690  5029               	movf	_U_meas^0,w,c
 16239  002692  0101               	movlb	1	; () banked
 16240  002694  2710               	addwf	_U_summ& (0+255),f,b
 16241  002696  502A               	movf	(_U_meas+1)^0,w,c
 16242  002698  2311               	addwfc	(_U_summ+1)& (0+255),f,b
 16243  00269A  502B               	movf	(_U_meas+2)^0,w,c
 16244  00269C  2312               	addwfc	(_U_summ+2)& (0+255),f,b
 16245  00269E  502C               	movf	(_U_meas+3)^0,w,c
 16246  0026A0  2313               	addwfc	(_U_summ+3)& (0+255),f,b
 16247                           
 16248                           ; BSR set to: 1
 16249                           ;interrupt.c: 89:             cnt_adc++;
 16250  0026A2  4B1A               	infsnz	_cnt_adc& (0+255),f,b
 16251  0026A4  2B1B               	incf	(_cnt_adc+1)& (0+255),f,b
 16252  0026A6                     i2l7082:
 16253                           
 16254                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
 16255  0026A6  9C9E               	bcf	158,6,c	;volatile
 16256  0026A8                     i2l7084:
 16257                           
 16258                           ;interrupt.c: 100:     if (TMR3IE && TMR3IF){
 16259  0026A8  B2A0               	btfsc	4000,1,c	;volatile
 16260  0026AA  A2A1               	btfss	4001,1,c	;volatile
 16261  0026AC  D003               	goto	i2l262
 16262                           
 16263                           ;interrupt.c: 101:         TMR3IF = 0;
 16264  0026AE  92A1               	bcf	4001,1,c	;volatile
 16265                           
 16266                           ;interrupt.c: 102:         LATAbits.LA5 = 0;
 16267  0026B0  9A89               	bcf	137,5,c	;volatile
 16268                           
 16269                           ;interrupt.c: 103:         TMR3ON = 0;
 16270  0026B2  90B1               	bcf	4017,0,c	;volatile
 16271  0026B4                     i2l262:
 16272  0026B4  C010  FFF4         	movff	??_Inter_hi+3,prodh
 16273  0026B8  C00F  FFF3         	movff	??_Inter_hi+2,prodl
 16274  0026BC  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16275  0026BE  0011               	retfie		f
 16276  0026C0                     __end_of_Inter_hi:
 16277                           	callstack 0
 16278                           
 16279 ;; *************** function i2___wmul *****************
 16280 ;; Defined at:
 16281 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;  multiplier      2    0[COMRAM] unsigned int 
 16284 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;  product         2    4[COMRAM] unsigned int 
 16287 ;; Return value:  Size  Location     Type
 16288 ;;                  2    0[COMRAM] unsigned int 
 16289 ;; Registers used:
 16290 ;;		wreg, status,2, status,0, prodl, prodh
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/0
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16296 ;;      Params:         4       0       0       0       0       0       0
 16297 ;;      Locals:         2       0       0       0       0       0       0
 16298 ;;      Temps:          0       0       0       0       0       0       0
 16299 ;;      Totals:         6       0       0       0       0       0       0
 16300 ;;Total ram usage:        6 bytes
 16301 ;; Hardware stack levels used: 1
 16302 ;; This function calls:
 16303 ;;		Nothing
 16304 ;; This function is called by:
 16305 ;;		_Inter_hi
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           	psect	text68
 16310  003DD2                     __ptext68:
 16311                           	callstack 0
 16312  003DD2                     i2___wmul:
 16313                           	callstack 19
 16314                           
 16315                           ;incstack = 0
 16316  003DD2  5001               	movf	i2___wmul@multiplier^0,w,c
 16317  003DD4  0203               	mulwf	i2___wmul@multiplicand^0,c
 16318  003DD6  CFF3 F005          	movff	prodl,i2___wmul@product
 16319  003DDA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16320  003DDE  5001               	movf	i2___wmul@multiplier^0,w,c
 16321  003DE0  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
 16322  003DE2  50F3               	movf	243,w,c
 16323  003DE4  2606               	addwf	(i2___wmul@product+1)^0,f,c
 16324  003DE6  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
 16325  003DE8  0203               	mulwf	i2___wmul@multiplicand^0,c
 16326  003DEA  50F3               	movf	243,w,c
 16327  003DEC  2606               	addwf	(i2___wmul@product+1)^0,f,c
 16328  003DEE  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16329  003DF2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16330  003DF6  0012               	return		;funcret
 16331  003DF8                     __end_ofi2___wmul:
 16332                           	callstack 0
 16333                           
 16334 ;; *************** function i2___lmul *****************
 16335 ;; Defined at:
 16336 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;  multiplier      4    0[COMRAM] unsigned long 
 16339 ;;  multiplicand    4    4[COMRAM] unsigned long 
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;  product         4    8[COMRAM] unsigned long 
 16342 ;; Return value:  Size  Location     Type
 16343 ;;                  4    0[COMRAM] unsigned long 
 16344 ;; Registers used:
 16345 ;;		wreg, status,2, status,0
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16351 ;;      Params:         8       0       0       0       0       0       0
 16352 ;;      Locals:         4       0       0       0       0       0       0
 16353 ;;      Temps:          0       0       0       0       0       0       0
 16354 ;;      Totals:        12       0       0       0       0       0       0
 16355 ;;Total ram usage:       12 bytes
 16356 ;; Hardware stack levels used: 1
 16357 ;; This function calls:
 16358 ;;		Nothing
 16359 ;; This function is called by:
 16360 ;;		_Inter_hi
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           	psect	text69
 16365  0038F4                     __ptext69:
 16366                           	callstack 0
 16367  0038F4                     i2___lmul:
 16368                           	callstack 19
 16369                           
 16370                           ;incstack = 0
 16371  0038F4  6A09               	clrf	i2___lmul@product^0,c
 16372  0038F6  6A0A               	clrf	(i2___lmul@product+1)^0,c
 16373  0038F8  6A0B               	clrf	(i2___lmul@product+2)^0,c
 16374  0038FA  6A0C               	clrf	(i2___lmul@product+3)^0,c
 16375  0038FC                     i2l742:
 16376  0038FC  A001               	btfss	i2___lmul@multiplier^0,0,c
 16377  0038FE  D008               	goto	i2l6982
 16378  003900  5005               	movf	i2___lmul@multiplicand^0,w,c
 16379  003902  2609               	addwf	i2___lmul@product^0,f,c
 16380  003904  5006               	movf	(i2___lmul@multiplicand+1)^0,w,c
 16381  003906  220A               	addwfc	(i2___lmul@product+1)^0,f,c
 16382  003908  5007               	movf	(i2___lmul@multiplicand+2)^0,w,c
 16383  00390A  220B               	addwfc	(i2___lmul@product+2)^0,f,c
 16384  00390C  5008               	movf	(i2___lmul@multiplicand+3)^0,w,c
 16385  00390E  220C               	addwfc	(i2___lmul@product+3)^0,f,c
 16386  003910                     i2l6982:
 16387  003910  90D8               	bcf	status,0,c
 16388  003912  3605               	rlcf	i2___lmul@multiplicand^0,f,c
 16389  003914  3606               	rlcf	(i2___lmul@multiplicand+1)^0,f,c
 16390  003916  3607               	rlcf	(i2___lmul@multiplicand+2)^0,f,c
 16391  003918  3608               	rlcf	(i2___lmul@multiplicand+3)^0,f,c
 16392  00391A  90D8               	bcf	status,0,c
 16393  00391C  3204               	rrcf	(i2___lmul@multiplier+3)^0,f,c
 16394  00391E  3203               	rrcf	(i2___lmul@multiplier+2)^0,f,c
 16395  003920  3202               	rrcf	(i2___lmul@multiplier+1)^0,f,c
 16396  003922  3201               	rrcf	i2___lmul@multiplier^0,f,c
 16397  003924  5001               	movf	i2___lmul@multiplier^0,w,c
 16398  003926  1002               	iorwf	(i2___lmul@multiplier+1)^0,w,c
 16399  003928  1003               	iorwf	(i2___lmul@multiplier+2)^0,w,c
 16400  00392A  1004               	iorwf	(i2___lmul@multiplier+3)^0,w,c
 16401  00392C  E1E7               	bnz	i2l742
 16402  00392E  C009  F001         	movff	i2___lmul@product,?i2___lmul
 16403  003932  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 16404  003936  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 16405  00393A  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 16406  00393E  0012               	return		;funcret
 16407  003940                     __end_ofi2___lmul:
 16408                           	callstack 0
 16409                           
 16410                           	psect	rparam
 16411  0000                     
 16412                           	psect	temp
 16413  000046                     btemp:
 16414                           	callstack 0
 16415  000046                     	ds	1
 16416  0000                     int$flags	set	btemp
 16417  0000                     wtemp8	set	btemp+1
 16418  0000                     ttemp5	set	btemp+1
 16419  0000                     ttemp6	set	btemp+4
 16420  0000                     ttemp7	set	btemp+8
 16421                           
 16422                           	psect	idloc
 16423                           
 16424                           ;Config register IDLOC0 @ 0x200000
 16425                           ;	unspecified, using default values
 16426  200000                     	org	2097152
 16427  200000  FF                 	db	255
 16428                           
 16429                           ;Config register IDLOC1 @ 0x200001
 16430                           ;	unspecified, using default values
 16431  200001                     	org	2097153
 16432  200001  FF                 	db	255
 16433                           
 16434                           ;Config register IDLOC2 @ 0x200002
 16435                           ;	unspecified, using default values
 16436  200002                     	org	2097154
 16437  200002  FF                 	db	255
 16438                           
 16439                           ;Config register IDLOC3 @ 0x200003
 16440                           ;	unspecified, using default values
 16441  200003                     	org	2097155
 16442  200003  FF                 	db	255
 16443                           
 16444                           ;Config register IDLOC4 @ 0x200004
 16445                           ;	unspecified, using default values
 16446  200004                     	org	2097156
 16447  200004  FF                 	db	255
 16448                           
 16449                           ;Config register IDLOC5 @ 0x200005
 16450                           ;	unspecified, using default values
 16451  200005                     	org	2097157
 16452  200005  FF                 	db	255
 16453                           
 16454                           ;Config register IDLOC6 @ 0x200006
 16455                           ;	unspecified, using default values
 16456  200006                     	org	2097158
 16457  200006  FF                 	db	255
 16458                           
 16459                           ;Config register IDLOC7 @ 0x200007
 16460                           ;	unspecified, using default values
 16461  200007                     	org	2097159
 16462  200007  FF                 	db	255
 16463                           
 16464                           	psect	config
 16465                           
 16466                           ; Padding undefined space
 16467  300000                     	org	3145728
 16468  300000  FF                 	db	255
 16469                           
 16470                           ;Config register CONFIG1H @ 0x300001
 16471                           ;	Oscillator Selection bits
 16472                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
 16473                           ;	Fail-Safe Clock Monitor Enable bit
 16474                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 16475                           ;	Internal/External Oscillator Switchover bit
 16476                           ;	IESO = OFF, Oscillator Switchover mode disabled
 16477  300001                     	org	3145729
 16478  300001  08                 	db	8
 16479                           
 16480                           ;Config register CONFIG2L @ 0x300002
 16481                           ;	Power-up Timer Enable bit
 16482                           ;	PWRT = ON, PWRT enabled
 16483                           ;	Brown-out Reset Enable bits
 16484                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 16485                           ;	Brown Out Reset Voltage bits
 16486                           ;	BORV = 18, VBOR set to 1.8 V nominal
 16487  300002                     	org	3145730
 16488  300002  1E                 	db	30
 16489                           
 16490                           ;Config register CONFIG2H @ 0x300003
 16491                           ;	Watchdog Timer Enable bit
 16492                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
 16493                           ;	Watchdog Timer Postscale Select bits
 16494                           ;	WDTPS = 2048, 1:2048
 16495  300003                     	org	3145731
 16496  300003  17                 	db	23
 16497                           
 16498                           ; Padding undefined space
 16499  300004                     	org	3145732
 16500  300004  FF                 	db	255
 16501                           
 16502                           ;Config register CONFIG3H @ 0x300005
 16503                           ;	CCP2 MUX bit
 16504                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
 16505                           ;	PORTB A/D Enable bit
 16506                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 16507                           ;	Low-Power Timer1 Oscillator Enable bit
 16508                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 16509                           ;	HFINTOSC Fast Start-up
 16510                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
 16511                           ;	MCLR Pin Enable bit
 16512                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 16513  300005                     	org	3145733
 16514  300005  80                 	db	128
 16515                           
 16516                           ;Config register CONFIG4L @ 0x300006
 16517                           ;	Stack Full/Underflow Reset Enable bit
 16518                           ;	STVREN = ON, Stack full/underflow will cause Reset
 16519                           ;	Single-Supply ICSP Enable bit
 16520                           ;	LVP = OFF, Single-Supply ICSP disabled
 16521                           ;	Extended Instruction Set Enable bit
 16522                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 16523                           ;	Background Debugger Enable bit
 16524                           ;	DEBUG = 0x1, unprogrammed default
 16525  300006                     	org	3145734
 16526  300006  81                 	db	129
 16527                           
 16528                           ; Padding undefined space
 16529  300007                     	org	3145735
 16530  300007  FF                 	db	255
 16531                           
 16532                           ;Config register CONFIG5L @ 0x300008
 16533                           ;	Code Protection Block 0
 16534                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 16535                           ;	Code Protection Block 1
 16536                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 16537                           ;	Code Protection Block 2
 16538                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 16539                           ;	Code Protection Block 3
 16540                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 16541  300008                     	org	3145736
 16542  300008  0F                 	db	15
 16543                           
 16544                           ;Config register CONFIG5H @ 0x300009
 16545                           ;	Boot Block Code Protection bit
 16546                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 16547                           ;	Data EEPROM Code Protection bit
 16548                           ;	CPD = OFF, Data EEPROM not code-protected
 16549  300009                     	org	3145737
 16550  300009  C0                 	db	192
 16551                           
 16552                           ;Config register CONFIG6L @ 0x30000A
 16553                           ;	Write Protection Block 0
 16554                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 16555                           ;	Write Protection Block 1
 16556                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 16557                           ;	Write Protection Block 2
 16558                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 16559                           ;	Write Protection Block 3
 16560                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 16561  30000A                     	org	3145738
 16562  30000A  0F                 	db	15
 16563                           
 16564                           ;Config register CONFIG6H @ 0x30000B
 16565                           ;	Configuration Register Write Protection bit
 16566                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 16567                           ;	Boot Block Write Protection bit
 16568                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 16569                           ;	Data EEPROM Write Protection bit
 16570                           ;	WRTD = OFF, Data EEPROM not write-protected
 16571  30000B                     	org	3145739
 16572  30000B  E0                 	db	224
 16573                           
 16574                           ;Config register CONFIG7L @ 0x30000C
 16575                           ;	Table Read Protection Block 0
 16576                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 16577                           ;	Table Read Protection Block 1
 16578                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 16579                           ;	Table Read Protection Block 2
 16580                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 16581                           ;	Table Read Protection Block 3
 16582                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 16583  30000C                     	org	3145740
 16584  30000C  0F                 	db	15
 16585                           
 16586                           ;Config register CONFIG7H @ 0x30000D
 16587                           ;	Boot Block Table Read Protection bit
 16588                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 16589  30000D                     	org	3145741
 16590  30000D  40                 	db	64
 16591                           tosu	equ	0xFFF
 16592                           tosh	equ	0xFFE
 16593                           tosl	equ	0xFFD
 16594                           stkptr	equ	0xFFC
 16595                           pclatu	equ	0xFFB
 16596                           pclath	equ	0xFFA
 16597                           pcl	equ	0xFF9
 16598                           tblptru	equ	0xFF8
 16599                           tblptrh	equ	0xFF7
 16600                           tblptrl	equ	0xFF6
 16601                           tablat	equ	0xFF5
 16602                           prodh	equ	0xFF4
 16603                           prodl	equ	0xFF3
 16604                           indf0	equ	0xFEF
 16605                           postinc0	equ	0xFEE
 16606                           postdec0	equ	0xFED
 16607                           preinc0	equ	0xFEC
 16608                           plusw0	equ	0xFEB
 16609                           fsr0h	equ	0xFEA
 16610                           fsr0l	equ	0xFE9
 16611                           wreg	equ	0xFE8
 16612                           indf1	equ	0xFE7
 16613                           postinc1	equ	0xFE6
 16614                           postdec1	equ	0xFE5
 16615                           preinc1	equ	0xFE4
 16616                           plusw1	equ	0xFE3
 16617                           fsr1h	equ	0xFE2
 16618                           fsr1l	equ	0xFE1
 16619                           bsr	equ	0xFE0
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           preinc2	equ	0xFDC
 16624                           plusw2	equ	0xFDB
 16625                           fsr2h	equ	0xFDA
 16626                           fsr2l	equ	0xFD9
 16627                           status	equ	0xFD8

Data Sizes:
    Strings     421
    Constant    173
    Data        8
    BSS         194
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      69
    BANK0           160    157     157
    BANK1           256     83     253
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    nanf@s	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_49(CODE[1]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_46(CODE[4]), STR_41(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_46(CODE[4]), STR_41(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 22
		 -> vfpfcnvrt@ct(BANK0[3]), STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), 
		 -> STR_27(CODE[10]), STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), 
		 -> STR_21(CODE[10]), STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), 
		 -> STR_4(CODE[6]), STR_2(CODE[15]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 22
		 -> vfpfcnvrt@ct(BANK0[3]), STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), 
		 -> STR_27(CODE[10]), STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), 
		 -> STR_21(CODE[10]), STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), 
		 -> STR_4(CODE[6]), STR_2(CODE[15]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> stoa@nuls(BANK0[7]), dbuf(BANK1[80]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), 
		 -> STR_3(CODE[9]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> dbuf(BANK1[80]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK1[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK1[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), U_real(BANK1[2]), 
		 -> compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> stoa@nuls(BANK0[7]), ?_sprintf(BANK1[2]), STR_20(CODE[4]), STR_19(CODE[3]), 
		 -> U_real(BANK1[2]), compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK1[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[10]), STR_29(CODE[22]), STR_28(CODE[11]), STR_27(CODE[10]), 
		 -> STR_26(CODE[22]), STR_25(CODE[9]), STR_24(CODE[10]), STR_21(CODE[10]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 21
		 -> TxtBuf(BANK1[21]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S2264$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2264$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    ds18b20_crc8@data_in	PTR unsigned char  size(2) Largest target is 9
		 -> scratch(BANK1[9]), 

    readTemp_Single@buf	PTR unsigned short  size(2) Largest target is 2
		 -> temperature(BANK1[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(2) Largest target is 1
		 -> time_flag(BANK1[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(2) Largest target is 2
		 -> timer_val(BANK1[2]), 

    readTemp_Single@minus	PTR unsigned char  size(2) Largest target is 1
		 -> minus(BANK1[1]), 

    main$1544	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_20(CODE[4]), STR_19(CODE[3]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_7(CODE[8]), symbol_6(CODE[8]), symbol_5(CODE[8]), symbol_4(CODE[8]), 
		 -> symbol_3(CODE[8]), symbol_2(CODE[8]), symbol_1(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_23(CODE[11]), STR_22(CODE[11]), STR_16(CODE[19]), STR_15(CODE[19]), 
		 -> STR_13(CODE[21]), STR_12(CODE[15]), STR_11(CODE[20]), STR_10(CODE[19]), 
		 -> STR_9(CODE[22]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), TxtBuf(BANK1[21]), STR_1(CODE[21]), 


Critical Paths under _main in COMRAM

    _main->_lcdPrint
    _main->_readTemp_Single
    _sqrtf->___xxtofl
    _sqrtf->_nanf
    _show_lcd_main->___lwmod
    _show_lcd_main->_lcdPrint
    _vfpfcnvrt->_ctoa
    _vfpfcnvrt->_stoa
    _vfpfcnvrt->_strncmp
    _utoa->_pad
    _stoa->_fputc
    _efgtoa->_pad
    _tolower->_isupper
    _pad->_fputc
    _fputs->_fputc
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    ___flmul->___xxtofl
    ___fldiv->___xxtofl
    _ctoa->_fputc
    _fputc->_putch
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _calc_power->___lwmod
    ___wmul->___lwmod
    ___lwmod->___lwdiv
    _readTemp_Single->_ds18b20_crc8
    _init_cpu->_cgrom_char
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble

Critical Paths under _Inter_lo in COMRAM

    None.

Critical Paths under _Inter_hi in COMRAM

    _Inter_hi->i2___lmul

Critical Paths under _main in BANK0

    _main->_show_lcd_main
    _sqrtf->___fladd
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _utoa->_pad
    _efgtoa->___fltol
    _pad->_fputs
    _floorf->___fldiv
    ___fltol->_sqrtf
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___flge->___flmul
    ___fldiv->___xxtofl
    _atoi->___wmul
    _calc_power->___wmul
    ___wmul->___lwmod

Critical Paths under _Inter_lo in BANK0

    None.

Critical Paths under _Inter_hi in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf
    _show_lcd_main->_sprintf
    _vfpfcnvrt->_efgtoa

Critical Paths under _Inter_lo in BANK1

    None.

Critical Paths under _Inter_hi in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Inter_lo in BANK2

    None.

Critical Paths under _Inter_hi in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Inter_lo in BANK3

    None.

Critical Paths under _Inter_hi in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Inter_lo in BANK4

    None.

Critical Paths under _Inter_hi in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Inter_lo in BANK5

    None.

Critical Paths under _Inter_hi in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  211294
                                            153 BANK0      4     4      0
                                             77 BANK1      6     6      0
                            _EncPoll
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                            ___lldiv
                             ___lmul
                            ___lwdiv
                           ___xxtofl
                         _calc_power
                           _clearLCD
                           _init_cpu
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                    _readTemp_Single
                           _read_eep
                      _show_lcd_main
                            _sprintf
                              _sqrtf
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     424
                                             25 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _sqrtf                                               49    45      4   10679
                                             47 BANK0     45    41      4
                            ___fladd
                             ___flge
                            ___flmul
                           ___xxtofl (ARG)
                               _nanf
 ---------------------------------------------------------------------------------
 (2) _nanf                                                 8     4      4      99
                                             25 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _show_lcd_main                                        2     2      0   89674
                                            151 BANK0      2     2      0
                            ___lwdiv
                            ___lwmod
                         _calc_power
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14   61342
                                             50 BANK1     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   58654
                                            143 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    39      5   58037
                                            112 BANK0     31    26      5
                               _atoi
                               _ctoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    7951
                                             17 BANK0     32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                             25 COMRAM     1     1      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                             25 COMRAM     9     9      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (4) _strncmp                                             11     5      6     865
                                             25 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    3310
                                             35 COMRAM     1     1      0
                                              0 BANK0     21    17      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              62    55      7   33833
                                            100 BANK0     12     5      7
                                              0 BANK1     50    50      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _tolower                                              6     4      2    1105
                                             31 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            _isupper
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     551
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _strcpy                                              10     6      4    1037
                                             25 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    6539
                                             35 COMRAM     1     1      0
                                              7 BANK0     10     4      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     310
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    2648
                                              0 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     669
                                             31 BANK0     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       14    10      4     375
                                             25 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     697
                                             33 COMRAM     2     2      0
                                             92 BANK0      8     4      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _sqrtf (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    4336
                                             47 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             16     8      8    3771
                                             31 BANK0     16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     155
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4105
                                              6 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1346
                                             31 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     770
                                             25 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2872
                                              6 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     613
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             25 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     5      3    2622
                                             35 COMRAM     1     1      0
                                              0 BANK0      7     4      3
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    2148
                                             26 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    2654
                                              7 BANK0     10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     371
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1328
                                             29 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdPrint                                             6     4      2    8263
                                             34 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     4      1    4468
                                             29 COMRAM     5     4      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _calc_power                                          21    15      6    9086
                                              7 BANK0     21    15      6
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1482
                                              1 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    2572
                                             32 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    2581
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1106
                                             25 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     601
                                             25 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     402
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readTemp_Single                                     16     8      8    1932
                                             33 COMRAM     3     3      0
                                              0 BANK0     12     4      8
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0     136
                                             25 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         8     5      3     554
                                             25 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      46
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_cpu                                             2     2      0    5780
                                             33 COMRAM     2     2      0
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     232
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     198
                                             26 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             2     2      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2718
                                             30 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             1     1      0    1297
                                             29 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    2830
                                             29 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1297
                                             27 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     124
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     746
                                             25 COMRAM     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _EncPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _Inter_lo                                            3     3      0       0
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _Inter_hi                                           10    10      0     618
                                             12 COMRAM    10    10      0
                           i2___lmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     315
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (12) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EncPoll
   ___fladd
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___fldiv
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
     _sqrtf (ARG)
       ___fladd
       ___flge
         ___flmul (ARG)
       ___flmul
       ___xxtofl (ARG)
       _nanf (ARG)
   ___lldiv
   ___lmul
   ___lwdiv
   ___xxtofl
   _calc_power
     ___lldiv
     ___lmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _init_cpu
     _cgrom_char
       _lcdWrite
     _initLCD
       _clearLCD
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _readTemp_Single
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _read_eep
   _show_lcd_main
     ___lwdiv
     ___lwmod
     _calc_power
     _lcdPrint
     _lcd_gotoxy
     _lcd_putc
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _fputc
               _putch
           _efgtoa
             ___awdiv
             ___awmod
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
               ___fladd
               ___flmul (ARG)
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _isupper
             _pad
               _fputc
               _fputs
                 _fputc
               _strlen
             _strcpy
             _tolower
               _isupper
           _fputc
           _isdigit
           _isupper
           _stoa
             _fputc
             _strlen
           _strncmp
           _tolower
           _utoa
             ___lodiv
             ___lomod
             _pad
   _sprintf
   _sqrtf
   _write_eep

 _Inter_lo (ROOT)

 _Inter_hi (ROOT)
   i2___lmul
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      36        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     53      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      9D       5       98.1%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     24      45       1       73.4%
BITBIGSFRllllll     1C      0       0      34        0.0%
BITBIGSFRhhlhhh     1A      0       0      17        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhhlhhl      7      0       0      23        0.0%
BITBIGSFRllllhh      6      0       0      31        0.0%
BITBIGSFRlllhhl      6      0       0      30        0.0%
BITBIGSFRhhlhlh      6      0       0      24        0.0%
BITBIGSFRllhl        6      0       0      29        0.0%
BITBIGSFRhhlhhl      5      0       0      22        0.0%
BITBIGSFRlhh         3      0       0      27        0.0%
BITBIGSFRhhlhhl      2      0       0      19        0.0%
BITBIGSFRhhlhhl      2      0       0      20        0.0%
BITBIGSFRlllllh      1      0       0      32        0.0%
BITBIGSFRlllllh      1      0       0      33        0.0%
BITBIGSFRllhh        1      0       0      28        0.0%
BITBIGSFRhhlhhl      1      0       0      18        0.0%
BITBIGSFRhhlhhl      1      0       0      21        0.0%
BITBIGSFRhhlhll      1      0       0      25        0.0%
BITBIGSFRhhll        1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DF      35        0.0%
DATA                 0      0     1DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jul 11 21:06:19 2022

            ___fldiv@aexp 007E              ___fldiv@bexp 007D              ___fldiv@sign 0076  
                      PL2 1402                        PL4 1416                        PL6 143A  
                      PL8 146C              ___awdiv@sign 001F                        _pp 0045  
                      _ps 0035                        bsr 000FE0       ___wmul@multiplicand 0063  
            lcdWrite@byte 001D                       PL10 17F6                       PL20 08EA  
                     PL12 147A                       PL30 1812                       PL22 202A  
                     PL14 2E92                       PL40 2E9E                       PL32 181E  
                     PL24 0F84                       PL16 0F34                       PL50 100E  
                     PL42 0FAC                       PL34 1482                       PL26 1806  
                     PL18 0F52                       PL60 223A                       PL52 1022  
                     PL44 0FBA                       PL36 0F96                       PL28 091C  
                     PL70 14AA                       PL62 1828                       PL54 1BDE  
                     PL46 0FDC                       PL38 302E                       PL80 2534  
                     PL72 2046                       PL64 2036                       PL56 1034  
                     PL48 0FFE                       PL90 0950                       PL82 1838  
                     PL74 1050                       PL66 148A                       PL58 1042  
                     PL92 107A                       PL84 2254                       PL76 3236  
                     PL68 149A                       PL94 184C                       PL86 0946  
                     PL78 205E                       PL96 108C                       PL88 1068  
                     PL98 109E              lcdWrite@type 001C                       l116 3CA6  
                     l125 3A1E                       l522 0254                       l515 01AC  
                     l533 0400                       l561 063A                       l529 0366  
                     l642 3B24                       l562 0660                       l715 3D70  
                     l571 06EA                       l644 3B50                       l556 058C  
                     l565 0682                       l742 3812                       l558 05D8  
                     l559 05EE                       l760 3686                       l576 078A  
                     l579 07AC                       l692 3882                       l996 33B8  
                     l998 33E4                       _PR2 000FCB                       _pad 3524  
                     _err 0037              ___awmod@sign 001F                       wreg 000FE8  
         lcdNibble@nibble 001B              ___flmul@aexp 0073             write_eep@data 001A  
            ___flmul@bexp 0074              ___flmul@sign 0072              ___flmul@temp 007D  
            ___flmul@prod 0079               lcd_gotoxy@x 0021               lcd_gotoxy@y 001E  
                    PL100 0962                      PL110 3596                      PL102 10B0  
                    PL200 208E                      PL120 1870                      PL112 10D4  
                    PL104 10C2                      PL210 280C                      PL202 3378  
                    PL130 348A                      PL122 10E6                      PL114 1E28  
                    PL106 30E2                      PL212 2EAC                      PL204 14D4  
                    PL140 2B86                      PL132 097A                      PL124 3244  
                    PL116 2B74                      PL108 27EE                      PL206 1880  
                    PL150 1BF0                      PL142 351A                      PL134 0980  
                    PL126 0974                      PL118 185E                      PL208 1886  
                    PL160 3404                      PL152 10F8                      PL144 206C  
                    PL136 303C                      PL128 2A6C                      PL170 3752  
                    PL162 2DA6                      PL154 1E3A                      PL146 098A  
                    PL138 14BA                      PL180 110C                      PL172 1E50  
                    PL164 2546                      PL156 2800                      PL148 2076  
                    PL190 0998                      PL182 1BFE                      PL174 2A76  
                    PL166 2552                      PL158 2D9A                      PL192 2084  
                    PL184 30F4                      PL176 14CA                      PL168 1E44  
                    PL194 1E64                      PL186 1C08                      PL178 1102  
                    PL196 09A2                      PL188 1E5A                      PL198 1876  
             _sound_delay 003B              ___fltol@exp1 0023                      l1311 20E4  
                    l1224 39CA                      l1234 3A92                      l1250 1C32  
                    l1307 20B8                      l1171 2F5E                      l1317 2192  
                    l1341 1E8E                      l1181 3186                      l1262 1CF4  
                    l1335 2224                      l1263 1CE6                      l1255 1C64  
                    l1328 21DE                      l1329 21DA                      l1345 1EAE  
                    l1505 0B7A                      l1450 353C                      l1531 0D6A  
                    l1364 2000                      l1356 1FB6                      l1452 3540  
                    l1357 1FB2                      l1533 0D6E                      l1294 1E02  
                    l1278 1D90                      l1287 1DD8                      l1288 1DD4  
                    l1713 3C2E                      l1395 2D30                      l1388 2CE4  
                    l1468 3440                      l1804 3BF6                      l1590 227E  
                    l1569 2AE2                      l1763 1A28                      l1588 2276  
                    l1766 1ABA                      l1687 3024                      l1759 19F6  
                    l1768 1B4A                      l1699 24C8                      ?_pad 0067  
                    l8000 216C                      l8012 21A6                      l8006 2190  
                    l8200 35DA                      l8040 2210                      l8202 35E2  
                    l8034 21FE                      l8018 21AE                      l8130 1F68  
                    l9002 1150                      l8220 3616                      l8212 3600  
                    l8300 3E2A                      l9004 1172                      l8046 2230  
                    l8070 1E90                      l9022 11B2                      _ADIE 007CEE  
                    l8216 360A                      l8240 36C2                      l8232 36AA  
                    l8048 2232                      l8152 1FD0                      l8136 1F86  
                    l9120 13DE                      l9040 11F4                      l9016 11A0  
                    _ADIF 007CF6                      l8242 36CA                      l8082 1EAA  
                    l8330 32B6                      l8322 329E                      l9114 13CA  
                    l9106 136A                      l9034 11E2                      l9018 11B0  
                    l9130 13F0                      l6636 3B26                      l9220 3646  
                    l8500 3446                      l8252 36EA                      l8236 36B6  
                    l8156 1FE8                      l8084 1EB0                      l8068 1E8A  
                    l8332 32C2                      l8308 3264                      l8412 30B4  
                    l9124 13E8                      l9060 1264                      l9052 123A  
                    l9036 11F2                      l6646 3B3E                      l9230 3678  
                    l9150 3A26                      l8326 32AE                      l8350 2EEE  
                    l9208 3828                      l9240 399A                      l9152 3A2A  
                    l9320 2DDA                      l8504 345E                      l8256 36F6  
                    l8248 36E0                      l8272 374E                      l8264 371C  
                    l8280 339E                      l8168 2014                      l8088 1EC2  
                    l8408 30AC                      l8424 3950                      l8520 09F0  
                    l8360 2F48                      l9072 12AC                      l6488 3DFA  
                    l9402 385E                      l9218 363A                      l9242 39A2  
                    l9330 2E52                      l9322 2DE6                      l9314 2DB4  
                    l7706 3EA0                      l8194 35CA                      l8338 32DA  
                    l8418 30DA                      l8442 2456                      l8610 0B84  
                    l8370 312A                      l9082 12E2                      l9252 39C0  
                    l9260 3A6A                      l9148 3A22                      l9156 3A30  
                    l9332 2E7A                      l7716 34AC                      l8508 347A  
                    l8188 35BA                      l8268 3732                      l8292 3400  
                    l7820 1D04                      l8460 2522                      l8452 24EA  
                    l8532 0A12                      l8540 0A26                      l8348 2EDA  
                    l9068 1282                      l6758 3CFC                      l9350 3C7A  
                    l9414 3890                      l9406 3872                      l9422 389C  
                    l9262 3A72                      l9158 3A4E                      l9326 2E16  
                    l9318 2DD0                      l9334 2E7E                      l8286 33CE  
                    l7830 1D24                      l7806 1CEE                      l7910 3C3C  
                    l8606 0B66                      l8550 0A4E                      l9184 3AE0  
                    l7808 1CF2                      l7744 1C46                      l7736 1C2E  
                    l8456 2502                      l7920 3B64                      l8392 355E  
                    l8384 352E                      l8624 0BD2                      l8616 0B8A  
                    l8552 0A5C                      l8376 3170                      l8368 3116  
                    l9096 1330                      l9088 12F4                      l9602 29EC  
                    l8490 3420                      l7914 3C54                      l8706 0DAC  
                    l8626 0BD8                      l8554 0A66                      l9268 3A88  
                    l8900 2F8E                      l8492 342C                      l7828 1D20  
                    l7756 1C60                      l8396 357A                      l8388 3546  
                    l8644 0BFE                      l8636 0BF4                      l9276 37C8  
                    l9700 1B2E                      l9630 2A4C                      l8910 2FCA  
                    l7854 1D9A                      l7870 1DBA                      l7838 1D28  
                    l7766 1C7A                      l7918 3B60                      l8806 0F02  
                    l8718 0DCA                      l8726 0DDA                      l8734 0DEC  
                    l8742 0E0C                      l8670 0CA2                      l8654 0C32  
                    l8662 0C60                      l8590 0B18                      l8558 0A8E  
                    l9278 37F0                      l9392 3AC0                      l8904 2FA8  
                    l8496 3436                      l7864 1DB0                      l7848 1D80  
                    l8648 0C0C                      l8584 0AE4                      l8568 0AB6  
                    l8576 0AC6                      l8840 2B04                      l8906 2FAE  
                    l8770 0E62                      l8754 0E36                      l8594 0B26  
                    l8842 2B0E                      l8826 2AA6                      l8930 31CC  
                    l9722 151A                      l9812 2D08                      l9388 3AA0  
                    l9580 2994                      l9548 2956                      l8916 2FF2  
                    l8908 2FB4                      l7964 20E0                      l7948 20B4  
                    l7796 1CB6                      l8772 0E6A                      l8676 0CD6  
                    l8588 0B02                      l8852 2B5A                      l8836 2AF8  
                    l8932 31DA                      l9660 1968                      l9814 2D0E  
                    l7982 2124                      l7886 1DF2                      l8782 0EB0  
                    l8694 0D7C                      l8870 22B2                      l9726 152C  
                    l9654 1946                      l9910 022E                      l9902 021A  
                    l9824 2D3E                      l9816 2D12                      l9808 2CF4  
                    l9568 2980                      l7992 215C                      l7896 1E0A  
                    l8792 0ED4                      l8688 0D48                      l8856 2B66  
                    l8848 2B42                      l8880 2382                      l9752 1610  
                    l9680 1A50                      l9664 19B6                      l9648 1914  
                    l9842 2D88                      l9826 2D4A                      l9818 2D22  
                    l9594 29CA                      l7978 2116                      l7898 1E0C  
                    l9754 1668                      l9922 024C                      l9906 0224  
                    l8948 3CA8                      l8980 1134                      l9756 16D0  
                    l9764 170A                      l9668 19CA                      l8990 1140  
                    l8982 1138                      l9782 178E                      l9766 1734  
                    l9686 1AC6                      l9926 0262                      STR_1 7EF0  
                    l8896 2F8A                      l9784 17A4                      l9960 03E4  
                    l9928 0266                      l9936 026E                      STR_2 7F62  
                    STR_3 7FC9                      l8994 1144                      l8986 113C  
                    l8978 1132                      l9962 03EC                      STR_4 7FDB  
                    STR_5 7EC6                      l9788 17B2                      l9972 043E  
                    l9892 01BA                      STR_6 7EDB                      STR_7 7EB1  
                    l8998 1148                      l9990 047E                      l9982 0458  
                    STR_8 7E9C                      STR_9 7E5A                      l9968 0402  
                    l9986 046C                      l9978 044C          ow_reset@presence 001B  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
                    u9000 220A                      u9010 221C                      u9100 1EB8  
                    u8330 34A6                      u9300 36CE                      u9140 1FAC  
                    u8500 1CFA                      u8350 34DE                      u9240 35E6  
                    u8450 1CD4                      u9180 1FDC                      u9420 325A  
                    u9500 2EF2                      _RBPU 007F8F                      u9350 374A  
                    u9190 1FF4                      u8710 1DFA                      u8630 1DBE  
                    u9430 3282                      u8650 1DCE                      u9530 312E  
                    u9435 3278                      u9700 2444                      u9470 32C6  
                    u9800 3D52                      u8760 3B7E                      u9635 30BE  
                    u9820 3C2C                      u9740 24B0                      u9660 3982  
                    u8780 3D24                      u9725 246A                      u9830 32F8  
                    u9590 307C                      u9726 2470                      u8790 3D26  
                    u9727 247E                      u8767 3B7A                      u8960 21D4  
                    u9760 24F0                      u9745 24AE                      u9850 330E  
                    u9690 2426                      u9595 3072                      u9667 397E  
                    u9908 333C                      u9765 24EE                      u9870 3326  
                    u9790 3D50                      u9695 241C                      u9848 32FA  
                    u9890 333A                      u9868 3310                      u9980 0A06  
                    u9888 3328                      _TXIF 007CF4                      _WPUB 000F7C  
              _AlarmTempT 0126             calc_power@p_w 007A             calc_power@res 0067  
                    _dbuf 012D                      _coef 0108                      _getU 0040  
           calc_power@pwr 0079                      _atoi 2F80                      _ctoa 3410  
                    _main 00B2                      _nanf 3E3C                      _prec 002F  
                    _nout 0114                      pad@i 006D                      pad@p 006B  
                    fsr1h 000FE2                      fsr2h 000FDA                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      pad@w 006F  
                    fsr2l 000FD9                      _stoa 2A80                      btemp 0046  
                    _zero 0041                      _utoa 225E             write_byte@val 001D  
           ___fpclassifyf 304C                      prodh 000FF4                      prodl 000FF3  
                    start 00AE           ___fldiv@new_exp 0077           __end_of_EncPoll 3D00  
            ___param_bank 000000                     ??_pad 0024              _sound_enable 0129  
                   l10030 0504                     l10200 07C4                     l10210 0802  
                   l10130 06A0                     l10122 067A                     l10050 0558  
                   l10042 0536                     l10034 050E                     l10026 04EE  
                   l10116 0644                     l10142 06E2                     l10126 0688  
                   l10046 054A                     l10038 0522                     l10224 0860  
                   l10136 06C2                     l10056 056C                     l10234 0884  
                   l10162 073E                     l10146 06EE                     l10090 0602  
                   l10058 0584                     l10252 08BA                     l10192 07B2  
                   l10168 0758                     l10088 05F8                     l10188 07A4  
           ___fltol@sign1 0022                     ?_atoi 0067                     ?_ctoa 0060  
         __end_of___fladd 1E28                     ?_main 0001                     ?_nanf 001A  
         __end_of___fldiv 223A           __end_of___awdiv 3620           __end_of___flneg 3E3C  
                   _EEADR 000FA9                     STR_10 7F2D                     STR_11 7F19  
                   STR_20 7FF5                     STR_12 7F53                     STR_13 7E9C  
                   STR_21 7FB5                     STR_30 7FBF                     STR_22 7F8A  
                   STR_14 7F05                     STR_15 7F2D                     STR_31 7FE1  
                   STR_23 7F95                     STR_32 7FE9                     STR_24 7FAB  
                   STR_16 7F40                     STR_41 7FF9                     STR_25 7FD2  
                   STR_17 7F71                     STR_18 7FA0                     STR_26 7E70  
                   STR_19 7FFC                     STR_35 7FE5                     STR_27 7FBF  
                   STR_44 7FF1                     STR_36 7FED                     STR_28 7F7F  
         __end_of___awmod 3700                     STR_29 7E86                     STR_46 7FF1  
                   STR_39 7FF9                     STR_49 7E6F           __end_of___flmul 202A  
         __end_of___flsub 3BCA           __end_of___fltol 32EC                     ?_stoa 0060  
         __end_of___lldiv 3698                     ?_utoa 0071                     u11000 364A  
                   u10120 0B9E                     u10060 0B3E                     u11030 39A6  
                   u11110 2E10                     u10230 0CCE                     u11120 2E2E  
                   u10160 0BF0                     u11130 2E60                     u10410 0EC2  
                   u10090 0B72                     u11060 3A76                     u11140 2E8C  
                   u10500 2B28                     u12100 0840                     u11117 2E0E  
                   u12005 0728                     u10430 0EFA                     u10350 0E20  
                   u11310 1924                     u11127 2E2C                     u10600 23B8  
                   u12040 079E                     u11137 2E5E                     u10441 2A8A  
         ??_show_lcd_main 0025                     u11090 2DF4                     u10530 2B6A  
                   u11147 2E8A                     u10507 2B24           __end_of___lodiv 2F80  
                   u12115 0842                     u10700 3214           ___awdiv@divisor 001C  
                   u10630 3004                     u10710 3224                     u10550 226E  
                   u12207 28BC                     u12217 3B0C                     u11097 2DF2  
                   u10705 3210                     u11345 197C                     u11194 3AB8  
                   u10490 2B08                     u11346 1982                     u12307 2BCA  
                   u12227 3D64                     u11195 3AB4                     u10707 320C  
                   u11435 1B8E                     u11347 1990                     u12147 00C2  
                   u10660 31EA                     u10580 23A8                     u10900 1322  
                   u10820 1202                     u12317 2BDE                     u12237 3D72  
                   u10717 3220                     u12157 0146                     u10590 23B4  
                   u12407 3CAA                     u12327 2BF6                     u12247 38B0  
                   u11295 2A10                     u12167 2DC2                     u12417 334A  
                   u12337 2C0E                     u12257 38C2                     u12177 3AC6  
                   u12427 3362                     u12347 2C26                     u12267 38E4  
                   u12187 3E5E                     u10667 31E6                     u11900 0674  
                   u12357 2C42                     u12277 2BA0                     u12197 3E6A  
                   u11590 2D54                     u10790 11C0                     u11830 0466  
                   u12367 2C5E                     u12287 2BAE                     u10944 3AF0  
                   u11920 0698                     u11808 0412                     u12377 2C74  
                   u12297 2BBC                     u10945 3AEC                     u11930 06AE  
                   u12387 2C90                     u11940 06BC                     u11860 04FE  
                   u11780 03F6                     u12397 3E82                     u11950 06CE  
                   u11790 040E                     u11960 06DC           __end_of___lomod 31A8  
                   u11990 0726           __end_of___lwdiv 39D4                     i1l241 0068  
                   i1l245 0098                     i1l247 009E           __end_of___lwmod 3A9C  
                   i2l252 262C                     i2l262 26B4                     i2l255 25E8  
                   i2l256 25F2                     i2l258 262A                     i2l742 38FC  
         ___awdiv@counter 001E              vfpfcnvrt@fmt 00D2              vfpfcnvrt@llu 00D9  
                   _TMR0L 000FD6                     _SPBRG 000FAF                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTC 000F82                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94                     _TXREG 000FAD  
     ___lmul@multiplicand 001E           __end_of_initLCD 2CA4            calc_power@u_rl 006B  
                   _flags 0031                     _fract 7DFD                     _r_dec 011E  
                   _fputc 349A                     _fputs 3C36           __end_of_isdigit 3D58  
                   _minus 01A1                     _t_res 0104                     atoi@n 006F  
                   pad@fp 0067                     atoi@s 0067                     _power 0121  
                   _width 002D                     ctoa@c 0062                     _putch 3E9E  
                   ctoa@l 0063                     ctoa@w 0065                     _sqrtf 188C  
                   nanf@s 001A                     nanf@u 001E           __end_of_isspace 3C36  
          write_byte@temp 001E            __pbitbssCOMRAM 0220           __end_of_isupper 3D2C  
            main@powerOFF 011C                     tablat 000FF5          __end_ofi2___lmul 3940  
        __end_ofi2___wmul 3DF8                     plusw1 000FE3                     plusw2 000FDB  
                   stoa@i 006B                     stoa@l 0073                     stoa@p 0071  
                   stoa@s 0062                     stoa@w 006D                     ttemp5 0047  
                   ttemp6 004A                     ttemp7 004E                     utoa@d 0073  
                   utoa@i 008F                     utoa@n 0087                     utoa@p 0083  
                   utoa@w 0085                     status 000FD8                     wtemp8 0047  
         __end_of_sprintf 3A1A            ?___fpclassifyf 001A           __end_of_tolower 3C00  
         __end_of_strncmp 3236          ___lodiv@dividend 0060              __end_ofPL100 0974  
            __end_ofPL110 35A8              __end_ofPL102 10C2              __end_ofPL200 2098  
            __end_ofPL120 1876              __end_ofPL112 10E6              __end_ofPL104 10D4  
            __end_ofPL210 2814              __end_ofPL202 3382              __end_ofPL130 349A  
            __end_ofPL122 10F8              __end_ofPL114 1E3A              __end_ofPL106 30F4  
            __end_ofPL212 2EB2              __end_ofPL204 14DC              __end_ofPL140 2B96  
            __end_ofPL132 0980              __end_ofPL124 3250              __end_ofPL116 2B86  
            __end_ofPL108 2800              __end_ofPL206 1886              __end_ofPL150 1BFE  
            __end_ofPL142 3524              __end_ofPL134 098A              __end_ofPL126 097A  
            __end_ofPL118 1870              __end_ofPL208 188C              __end_ofPL160 3410  
            __end_ofPL152 1102              __end_ofPL144 2076              __end_ofPL136 304C  
            __end_ofPL128 2A76              __end_ofPL170 375E              __end_ofPL162 2DB2  
            __end_ofPL154 1E44              __end_ofPL146 0998              __end_ofPL138 14CA  
            __end_ofPL180 1116              __end_ofPL172 1E5A              __end_ofPL164 2552  
            __end_ofPL156 280C              __end_ofPL148 2084              __end_ofPL190 09A2  
            __end_ofPL182 1C08              __end_ofPL174 2A80              __end_ofPL166 255E  
            __end_ofPL158 2DA6              __end_ofPL192 208E              __end_ofPL184 30FE  
            __end_ofPL176 14D4              __end_ofPL168 1E50              __end_ofPL194 1E6E  
            __end_ofPL186 1C12              __end_ofPL178 110C              __end_ofPL196 09AC  
            __end_ofPL188 1E64              __end_ofPL198 1880           write_bit@bitval 001A  
         __initialization 375E           ds18b20_crc8@crc 0021              __end_of_atoi 302E  
            __end_of_ctoa 348A              __end_of_main 08EA              __end_of_nanf 3E58  
            __end_of_stoa 2B74              __end_of_utoa 23E2           _readTemp_Single 294E  
     ds18b20_crc8@data_in 001A          __end_of_Inter_hi 26C0          __end_of_Inter_lo 00AE  
                  ??_atoi 0069                    ??_ctoa 0024                    ??_main 00F9  
                  ??_nanf 001E          main@alarm_enable 0220                    ??_stoa 0024  
                  ??_utoa 007B             __activetblptr 000002             ?_init_ds18b20 0001  
        ___lodiv@quotient 001A                    _ADCON1 000FC1                    ?_fputc 001B  
                  ?_fputs 0060                    _ADRESH 000FC4                    _ADRESL 000FC3  
                  _EEDATA 000FA8                    _EECON2 000FA7          ___awdiv@dividend 001A  
                  ?_putch 0001                    ?_sqrtf 008F                    _INT0IE 007F94  
                  _INT0IF 007F91                    i1l7006 0046                    i1l7028 0080  
                  i2l7052 25D2                    i2l7046 2590                    i2l7082 26A6  
                  i2l7066 261C                    i2l7084 26A8                    i1l6996 0034  
                  i2l6982 3910                 ??_EncPoll 001A             vfpfcnvrt@done 00E3  
                  _TMR0IE 007F95                    _TMR0IF 007F92                    _TMR1IE 007CE8  
                  _TMR1IF 007CF0                    _TMR1CS 007E69                    _TMR2IE 007CE9  
                  _TMR2IF 007CF1                    _TMR3IE 007D01                    _TMR3IF 007D09  
                  _TMR1IP 007CF8                    _TMR3IP 007D11                    _SPBRGH 000FB0  
                  _TMR1ON 007E68          i2___lmul@product 0009                    _TMR2ON 007E52  
                  _TMR3ON 007D88          __end_of___xxtofl 2D9A               Inter_hi@lev 0013  
        __end_of_clearLCD 3E8C                    _U_meas 0029          __end_of_lcdPrint 2E92  
                  _U_real 019B                    _TempEn 0125                    _U_summ 0110  
        __end_of_lcdWrite 3CCE              vfprintf@cfmt 00F5                    ___flge 3382  
        __end_of_lcd_putc 3EB6                    ___fleq 3700                    _TxtBuf 017D  
                  ___lmul 3808                 ??___fladd 0087                    ___wmul 3DAC  
               ??___fldiv 006E                 ??___awdiv 001E                 ??___flneg 001E  
               ??___awmod 001E                 ??___flmul 006E                 ??___flsub 0022  
               ??___fltol 00C0                 ??___lldiv 0022                 ??___lodiv 001A  
               ??___lomod 001A                    _efgtoa 09AC                 ??___lwdiv 001E  
               ??___lwmod 0025                    _isTemp 0128                    _floorf 23E2  
        __end_of_init_cpu 294E          __end_of_read_bit 3E74          __end_of_read_eep 3E9E  
                  clear_0 3796                    clear_1 37A4          ___awdiv@quotient 0020  
         ___awmod@divisor 001C                    isa$std 000001           ___awmod@counter 001E  
                  pad@buf 0069                    ctoa@fp 0060                    _strcpy 3940  
                  _strlen 3B56            ??_init_ds18b20 0020                 ??_initLCD 001F  
           _Inter_hi$2885 0011                    fputc@c 001B                    fputs@c 0064  
                  fputs@i 0065              __pdataCOMRAM 0045                    fputs@s 0060  
               ??_isdigit 001C           ___fpclassifyf@e 0060           ___fpclassifyf@u 0062  
         ___fpclassifyf@x 001A              __mediumconst 7DAC                 ??_isspace 001C  
        __end_of_ow_reset 38F4                    tblptrh 000FF7                 ??_isupper 001C  
                  tblptrl 000FF6                    tblptru 000FF8                    stoa@cp 006F  
                  stoa@fp 0060          __end_of_vfprintf 3808             main@whole_dec 0221  
                  utoa@fp 0071                    sqrtf@i 009C                    sqrtf@m 00B0  
                  sqrtf@q 00A4                    sqrtf@r 00B4                    sqrtf@s 0098  
                  sqrtf@t 00A8                    sqrtf@x 008F                    sqrtf@z 00AC  
               ??_sprintf 0025                 ??_tolower 0060                 ??_strncmp 0020  
        __end_of_symbol_1 7E5A          __end_of_symbol_2 7E52          __end_of_symbol_3 7E4A  
        __end_of_symbol_4 7E42          __end_of_symbol_5 7E3A          __end_of_symbol_6 7E32  
        __end_of_symbol_7 7E2A                ___flge@ff1 007F           ??___fpclassifyf 001E  
              ___flge@ff2 0083              ___xxtofl@arg 0062              ___xxtofl@exp 0061  
            ___xxtofl@val 001A                ___fleq@ff1 001A                ___fleq@ff2 001E  
              __accesstop 0060   __end_of__initialization 37AA                ___flneg@f1 001A  
       __end_of_EncState_ 7DFD             ___rparam_used 000001   __end_of_readTemp_Single 2A6C  
        write_eep@address 001B                ___fltol@f1 00BC      __end_of_compile_date 7E19  
        ds18b20_crc8@data 001E      __end_of_compile_time 7E22            __pcstackCOMRAM 0001  
            __pidataBANK1 3EC0             __end_of_fract 7E0D             __end_of_fputc 351A  
           __end_of_fputs 3C6A    ds18b20_crc8@loop_count 0020             __end_of_putch 3EAA  
           __end_of_sqrtf 1BDE                __end_ofPL2 1416                __end_ofPL4 143A  
              __end_ofPL6 146C                __end_ofPL8 147A             EncPoll@EncVal 003F  
           ?_ds18b20_crc8 001A                 ?i2___lmul 0001                 ?i2___wmul 0001  
              _calc_power 26C0         lcd_gotoxy@address 0022                   ??_fputc 001F  
                 ??_fputs 0024                   ??_putch 001A                   ??_sqrtf 0093  
              __pbssBANK1 0100                 ?_Inter_hi 0001                 ?_Inter_lo 0001  
 ds18b20_crc8@bit_counter 001D                   ?___flge 007F                   ?___fleq 001A  
                 ?___lmul 001A                   ?___wmul 0061                   ?_efgtoa 00C4  
                 ?_floorf 007F       __end_of_HD44780_CYR 7DED            ___lmul@product 0060  
          ??_ds18b20_crc8 001D                _cgrom_char 3C6A                   ?_strcpy 001A  
                 ?_strlen 001A                ??i2___lmul 0009                ??i2___wmul 0005  
                 _T1OSCEN 007E6B             _eusartRxCount 0042                 ?___xxtofl 001A  
               ?_clearLCD 0001                _lcd_gotoxy 3A1A                 ?_lcdPrint 0023  
               ?_lcdWrite 001C                 ?_lcd_putc 0001          ___lomod@dividend 0060  
                 _EncData 0116                   _EncPoll 3CCE                 ?_init_cpu 0001  
               ?_read_eep 001A                 ?_read_bit 0001                ??_Inter_hi 000D  
              ??_Inter_lo 0017                _key_GetKey 3EB6      __end_of_init_ds18b20 3DAC  
       __end_of_lcdNibble 3378          ?_readTemp_Single 0060                   __Hparam 0000  
                 _TempEnT 0124                   __Lparam 0000                 ?_ow_reset 0001  
                 ___fladd 1C12                   ___fldiv 2098                   ___awdiv 35A8  
                 ___flneg 3E1C                   ___awmod 3698                   ___flmul 1E6E  
                 ___flsub 3B90                   ___fltol 3250                   ___lldiv 3620  
                 ___lodiv 2EB2                   ___lomod 30FE                   ___lwdiv 398A  
                 ___lwmod 3A5C                 ?_vfprintf 00EF                   __pcinit 375E  
               _ANSELbits 000F7E                   __ramtop 0600  readTemp_Single@time_flag 0064  
                 __ptext0 00B2                   __ptext1 3DF8                   __ptext2 188C  
                 __ptext3 3E3C                   __ptext4 14DC                   __ptext5 39D4  
                 __ptext6 37B8                   __ptext7 1116                   __ptext8 225E  
                 __ptext9 30FE                   _cnt_adc 011A                 _T0CONbits 000FD5  
readTemp_Single@timer_val 0066                   _initLCD 2B96                 _T1CONbits 000FCD  
               _T2CONbits 000FCA                   _isdigit 3D2C                   _is_stab 0226  
              ??___xxtofl 001E                 _T3CONbits 000FB1         __end_of_key_press 3B56  
        ___awmod@dividend 001A     __end_of_show_lcd_main 17F6         __end_of_read_byte 3ADC  
              ??_clearLCD 001E                   _isspace 3C00                   _r_whole 011F  
             ?_calc_power 0067                   _tick_t1 012C                   _scratch 0192  
                 _isupper 3D00                   _t_power 0039                   efgtoa@c 00CA  
                 efgtoa@d 01B5                   efgtoa@e 01CD                   efgtoa@f 00C6  
                 efgtoa@g 01C9                   efgtoa@h 01BF                   efgtoa@i 01C7  
                 efgtoa@l 01C3                   efgtoa@m 01AF                   efgtoa@n 01CF  
                 efgtoa@p 01B9                   efgtoa@t 01A9                   efgtoa@u 01D1  
                 efgtoa@w 01BB                   _show_tp 0224                   atoi@neg 006D  
              ??_lcdPrint 0060                ??_lcdWrite 001D                   _sprintf 39D4  
                 _tolower 3BCA                   _strncmp 31A8            __pintcode_body 255E  
              ??_lcd_putc 001E      end_of_initialization 37AA                   floorf@e 008D  
                 floorf@m 0089                   floorf@u 008F                   floorf@x 007F  
                 fputc@fp 001D              key_press@key 001A             __Lmediumconst 7DAC  
              ??_init_cpu 0022                   int_func 255E                   fputs@fp 0062  
     i2___wmul@multiplier 0001                ??_read_eep 001C                ??_read_bit 001A  
         ___lldiv@divisor 001E           ___lldiv@counter 0064               _HD44780_CYR 7DAD  
       __end_of_vfpfcnvrt 1402                efgtoa@mode 01BE                efgtoa@sign 01B7  
               _RCSTAbits 000FAB                ??_ow_reset 001A                   postdec1 000FE5  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE       i2___lmul@multiplier 0001              read_byte@val 001C  
              ??_vfprintf 0025                   sqrtf@ix 00B8                   strcpy@d 0022  
                 strlen@a 001C                   strcpy@s 0020                   strlen@s 001A  
             ?_cgrom_char 001E                 _PORTBbits 000F81               ___fladd@grs 008E  
           key_GetKey@key 001A         __end_of_write_bit 3D84         __end_of_write_eep 3E1C  
           ___xxtofl@sign 0060                 _TRISBbits 000F93                 _TRISCbits 000F94  
             ?_lcd_gotoxy 001E              _compile_date 7E0D               ___fldiv@grs 0079  
            _compile_time 7E19               ___fldiv@rem 0072               ___flmul@grs 0075  
    __end_of_ds18b20_crc8 38A6               ?_key_GetKey 0001                 _TXSTAbits 000FAC  
               _AlarmTemp 0127              calc_power@tt 006F                 _EncState_ 7DED  
         _calc_power$2870 0077           _calc_power$2869 0073            __end_of___flge 3404  
          __end_of___fleq 3752            __end_of___lmul 3858               vfpfcnvrt@ap 00D3  
             vfpfcnvrt@cp 00E1               vfpfcnvrt@ct 00EB               vfpfcnvrt@fp 00D0  
          __end_of___wmul 3DD2               _BAUDCONbits 000FB8             __pidataCOMRAM 3EC7  
          __end_of_efgtoa 0F34                _write_byte 3ADC            __end_of_floorf 2534  
              floorf@F526 0100          i2___wmul@product 0005            __end_of_strcpy 398A  
          __end_of_strlen 3B90               __end_ofPL10 1806               __end_ofPL20 091C  
             __end_ofPL12 1482               __end_ofPL30 181E               __end_ofPL22 2036  
             __end_ofPL14 2E9E               __end_ofPL40 2EAC               __end_ofPL32 1828  
             __end_ofPL24 0F96               __end_ofPL16 0F52               __end_ofPL50 1022  
             __end_ofPL42 0FBA               __end_ofPL34 148A               __end_ofPL26 1812  
             __end_ofPL18 0F84               __end_ofPL60 2254               __end_ofPL52 1034  
             __end_ofPL44 0FDC               __end_ofPL36 0FAC               __end_ofPL28 0946  
             __end_ofPL70 14BA               __end_ofPL62 1838               __end_ofPL54 1BF0  
             __end_ofPL46 0FFE               __end_ofPL38 303C               __end_ofPL80 2546  
             __end_ofPL72 205E               __end_ofPL64 2046               __end_ofPL56 1042  
             __end_ofPL48 100E               __end_ofPL90 0962               __end_ofPL82 184C  
             __end_ofPL74 1068               __end_ofPL66 149A               __end_ofPL58 1050  
             __end_ofPL92 108C               __end_ofPL84 225E               __end_ofPL76 3244  
             __end_ofPL68 14AA               __end_ofPL94 185E               __end_ofPL86 0950  
             __end_ofPL78 206C               __end_ofPL96 109E               __end_ofPL88 107A  
             __end_ofPL98 10B0       start_initialization 375E           ___lodiv@divisor 0068  
         ___lodiv@counter 0022               __end_of_pad 3596     __end_of___fpclassifyf 30E2  
ds18b20_crc8@feedback_bit 001F               vfprintf@fmt 00F1                  ??___flge 0087  
                ??___fleq 0060                  ??___lmul 0022                  ??___wmul 0025  
                ??_efgtoa 00CB               __pdataBANK1 01F6                  ??_floorf 0083  
         read_eep@address 001A                read_byte@i 001D                  ??_strcpy 001E  
                ??_strlen 001C                 ___fladd@a 0083                 ___fladd@b 007F  
               ___fldiv@a 006A                 ___fldiv@b 0066              _init_ds18b20 3D84  
               ___flmul@a 006A                 ___flmul@b 0066               __pbssCOMRAM 0025  
               ___flsub@a 0093                 ___flsub@b 008F             __pcstackBANK0 0060  
           __pcstackBANK1 01A3                  ?_EncPoll 0001      readTemp_Single@minus 0062  
   ds18b20_crc8@num_bytes 001C               _efgtoa$2411 01A5               _efgtoa$2403 01A3  
             _efgtoa$2412 01A7                 _main$1544 01F4                 _main$2868 01F0  
        ___lwdiv@dividend 001A                 __pintcode 0008             __pmediumconst 7DAC  
               _lcdNibble 32EC                  ?___fladd 007F                  ?___fldiv 0066  
                ?___awdiv 001A                  ?___flneg 001A                  ?___awmod 001A  
                ?___flmul 0066                  ?___flsub 008F                  ?___fltol 00BC  
                ?___lldiv 001A                  ?___lodiv 0060                  ?___lomod 0060  
                ?___lwdiv 001A                  ?___lwmod 0021               __pintcodelo 0018  
             ?_write_byte 0001   _eusartTxBufferRemaining 0043           ___lomod@divisor 0068  
                ?_initLCD 0001           ___lomod@counter 001A                  ?_isdigit 001A  
               _count_enc 0120              ??_calc_power 006D                  ?_isspace 001A  
                ?_isupper 001A          ___lwdiv@quotient 001F                  ?_sprintf 01D5  
                ?_tolower 0020                 _key_press 3B1A                 _read_byte 3A9C  
                ?_strncmp 001A            ___wmul@product 0065                  _LATAbits 000F89  
                _LATCbits 000F8B                  _IPR1bits 000F9F                  _PIE1bits 000F9D  
               _tick_t1_1 012B          readTemp_Single@i 0069                  _PIR1bits 000F9E  
                i2u770_40 258A                  i2u771_40 25CE                  _RCONbits 000FD0  
              ?_lcdNibble 0001                 _time_flag 01A2        __end_of_calc_power 27EE  
               _power_100 0223                 _timer_val 019F                 lcdPrint@t 0023  
               _vfpfcnvrt 1116              ??_cgrom_char 0021                 _watt_disp 0118  
              _ADCON0bits 000FC2                _ADCON2bits 000FC0              _ds18b20_crc8 3858  
       ___wmul@multiplier 0061                  i2___lmul 38F4                  i2___wmul 3DD2  
             _isTempReady 0123                 _sqrtU_sum 010C             Inter_hi@pulse 0015  
               lcd_putc@c 001E               write_byte@i 001F              ??_lcd_gotoxy 001F  
            _isspace$2517 0020                vfpfcnvrt@c 00EE                vfpfcnvrt@f 00E7  
              ?_key_press 0001                 _write_bit 3D58                 _write_eep 3DF8  
       ___lmul@multiplier 001A               _INTCON2bits 000FF1                ?_read_byte 0001  
               copy_data0 3772              ??_key_GetKey 001A                  _Inter_hi 0008  
                _Inter_lo 0018                _EECON1bits 000FA6        __end_of_cgrom_char 3C9C  
                __Hrparam 0000                vfprintf@ap 00F3                  __Lrparam 0000  
              vfprintf@fp 00EF        __end_of_lcd_gotoxy 3A5C            key_press@count 0033  
   i2___wmul@multiplicand 0003                ?_vfpfcnvrt 00D0        ___fpclassifyf@F465 0025  
     readTemp_Single@temp 006A                sprintf@fmt 01D7                  ___xxtofl 2CA4  
                _clearLCD 3E74               _key_pressed 003D        __end_of_key_GetKey 3EC0  
         ___lwdiv@divisor 001C           ___lwdiv@counter 001E                  __ptext10 2EB2  
                __ptext11 31A8                  __ptext20 23E2                  __ptext12 2A80  
                __ptext21 304C                  __ptext13 09AC                  __ptext30 3698  
                __ptext22 3250                  __ptext14 3BCA                  __ptext31 35A8  
                __ptext23 3B90                  __ptext15 3D00                  __ptext40 3A1A  
                __ptext32 3410                  __ptext24 1C12                  __ptext16 3940  
                __ptext41 26C0                  __ptext33 349A                  __ptext25 3E1C  
                __ptext17 3524                  __ptext50 3E58                  __ptext42 3DAC  
                __ptext34 3E9E                  __ptext26 1E6E                  __ptext18 3B56  
                __ptext51 3858                  __ptext43 3A5C                  __ptext35 2F80  
                __ptext27 3382                  __ptext19 3C36                  __ptext60 3E74  
                __ptext52 3B1A                  __ptext44 398A                  __ptext36 3C00  
                __ptext28 3700                  __ptext61 3C6A                  __ptext53 3EB6  
                __ptext45 3808                  __ptext37 3D2C                  __ptext29 2098  
                __ptext62 3C9C                  __ptext54 2814                  __ptext46 3620  
                __ptext38 3EAA                  __ptext63 32EC                  __ptext55 3D84  
                __ptext47 3E8C                  __ptext39 2DB2                  __ptext64 2CA4  
                __ptext56 3ADC                  __ptext48 294E                  __ptext65 3CCE  
                __ptext57 3D58                  __ptext49 3A9C                  __ptext58 38A6  
                __ptext59 2B96                  __ptext68 3DD2                  __ptext69 38F4  
                _lcdPrint 2DB2                  _lcdWrite 3C9C                ?_write_eep 001A  
              ?_write_bit 0001                  _lcd_putc 3EAA                  _inc_data 0222  
              strcpy@dest 001A                  _init_cpu 2814                  _read_bit 3E58  
                _read_eep 3E8C                  _read_key 012A                  _is_power 0225  
                _sel_main 011D         cgrom_char@address 0020                  efgtoa@fp 00C4  
                efgtoa@ne 01AD                  efgtoa@pp 01AB                  efgtoa@ou 01B1  
               stoa@F1169 01F6                  isa$xinst 000000               ??_lcdNibble 001A  
                _ow_reset 38A6                  int$flags 0046      show_lcd_main@pwr_dsp 00F7  
                _vfprintf 37B8                  _symbol_1 7E52                  _symbol_2 7E4A  
                _symbol_3 7E42                  _symbol_4 7E3A                  _symbol_5 7E32  
                _symbol_6 7E2A                  _symbol_7 7E22                 putch@data 001A  
          _vfpfcnvrt$2452 00E5               _OSCTUNEbits 000F9B                _INTCONbits 000FF2  
   i2___lmul@multiplicand 0005         ??_readTemp_Single 0022             _show_lcd_main 14DC  
                isdigit@c 001A               ??_key_press 001A               ??_read_byte 001A  
              EncPoll@Enc 003E        readTemp_Single@buf 0060                  intlevel1 0000  
                intlevel2 0000                 sprintf@ap 01E3        readTemp_Single@tmp 0068  
        ___lwmod@dividend 0021                  isspace@c 001A          ___lldiv@dividend 001A  
               strcpy@src 001C                  isupper@c 001A                 strncmp@_l 001A  
               strncmp@_r 001C                _OSCCONbits 000FD3               efgtoa@nmode 01BD  
             ??_vfpfcnvrt 00D5          cgrom_char@symbol 001E                  stoa@nuls 0064  
            ??_write_byte 001B               _temperature 019D                  sprintf@f 01E5  
                tolower@c 0020                  sprintf@s 01D5          ___lldiv@quotient 0060  
         ___lwmod@divisor 0023            ?_show_lcd_main 0001           ___lwmod@counter 0060  
                strncmp@l 0021                  strncmp@n 001E                  strncmp@r 0023  
             cgrom_char@i 0021               ??_write_eep 001B               ??_write_bit 001A  
           ___fladd@signs 008B               _pressed_key 0122     sqrtf@__xc8_float_word 00A0  
            ___fladd@aexp 008C              ___fladd@bexp 008D        __end_of_write_byte 3B1A  
