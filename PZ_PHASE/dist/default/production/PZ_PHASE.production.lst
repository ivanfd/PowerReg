

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Sep 29 15:25:24 2023

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F25K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    62                           	psect	pa_nodes0,global,class=CODE,delta=1
    63  0000                     
    64                           ; Version 2.40
    65                           ; Generated 17/11/2021 GMT
    66                           ; 
    67                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F25K20 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	eeprom_data
   101  F00000  18 14 5A 00 00 00 00 00 	db	24,20,90,0,0,0,0,0	;# 
   102  0000                     
   103                           	psect	idataCOMRAM
   104  001EE7                     __pidataCOMRAM:
   105                           	callstack 0
   106                           
   107                           ;initializer for _angle_U_ocr
   108  001EE7  4650               	dw	18000
   109                           
   110                           	psect	idataBANK0
   111  001EE4                     __pidataBANK0:
   112                           	callstack 0
   113                           
   114                           ;initializer for _angleU
   115  001EE4  4650               	dw	18000
   116                           
   117                           ;initializer for _stab
   118  001EE6  01                 	db	1
   119                           
   120                           	psect	mediumconst
   121  007DC6                     __pmediumconst:
   122                           	callstack 0
   123  007DC6  00                 	db	0
   124  007DC7                     _HD44780_CYR:
   125                           	callstack 0
   126  007DC7  41                 	db	65
   127  007DC8  A0                 	db	160
   128  007DC9  42                 	db	66
   129  007DCA  A1                 	db	161
   130  007DCB  E0                 	db	224
   131  007DCC  45                 	db	69
   132  007DCD  A3                 	db	163
   133  007DCE  A4                 	db	164
   134  007DCF  A5                 	db	165
   135  007DD0  A6                 	db	166
   136  007DD1  4B                 	db	75
   137  007DD2  A7                 	db	167
   138  007DD3  4D                 	db	77
   139  007DD4  48                 	db	72
   140  007DD5  4F                 	db	79
   141  007DD6  A8                 	db	168
   142  007DD7  50                 	db	80
   143  007DD8  43                 	db	67
   144  007DD9  54                 	db	84
   145  007DDA  A9                 	db	169
   146  007DDB  AA                 	db	170
   147  007DDC  58                 	db	88
   148  007DDD  E1                 	db	225
   149  007DDE  AB                 	db	171
   150  007DDF  AC                 	db	172
   151  007DE0  E2                 	db	226
   152  007DE1  AD                 	db	173
   153  007DE2  AE                 	db	174
   154  007DE3  62                 	db	98
   155  007DE4  AF                 	db	175
   156  007DE5  B0                 	db	176
   157  007DE6  B1                 	db	177
   158  007DE7  61                 	db	97
   159  007DE8  B2                 	db	178
   160  007DE9  B3                 	db	179
   161  007DEA  B4                 	db	180
   162  007DEB  E3                 	db	227
   163  007DEC  65                 	db	101
   164  007DED  B6                 	db	182
   165  007DEE  B7                 	db	183
   166  007DEF  B8                 	db	184
   167  007DF0  B9                 	db	185
   168  007DF1  BA                 	db	186
   169  007DF2  BB                 	db	187
   170  007DF3  BC                 	db	188
   171  007DF4  BD                 	db	189
   172  007DF5  6F                 	db	111
   173  007DF6  BE                 	db	190
   174  007DF7  70                 	db	112
   175  007DF8  63                 	db	99
   176  007DF9  BF                 	db	191
   177  007DFA  79                 	db	121
   178  007DFB  E4                 	db	228
   179  007DFC  78                 	db	120
   180  007DFD  E5                 	db	229
   181  007DFE  C0                 	db	192
   182  007DFF  C1                 	db	193
   183  007E00  E6                 	db	230
   184  007E01  C2                 	db	194
   185  007E02  C3                 	db	195
   186  007E03  C4                 	db	196
   187  007E04  C5                 	db	197
   188  007E05  C6                 	db	198
   189  007E06  C7                 	db	199
   190  007E07                     __end_of_HD44780_CYR:
   191                           	callstack 0
   192  007E07                     _EncState_:
   193                           	callstack 0
   194  007E07  00                 	db	0
   195  007E08  FF                 	db	255
   196  007E09  01                 	db	1
   197  007E0A  7F                 	db	127
   198  007E0B  01                 	db	1
   199  007E0C  00                 	db	0
   200  007E0D  7F                 	db	127
   201  007E0E  FF                 	db	255
   202  007E0F  FF                 	db	255
   203  007E10  7F                 	db	127
   204  007E11  00                 	db	0
   205  007E12  01                 	db	1
   206  007E13  7F                 	db	127
   207  007E14  01                 	db	1
   208  007E15  FF                 	db	255
   209  007E16  00                 	db	0
   210  007E17                     __end_of_EncState_:
   211                           	callstack 0
   212  007E17                     _fract:
   213                           	callstack 0
   214  007E17  00                 	db	0
   215  007E18  01                 	db	1
   216  007E19  01                 	db	1
   217  007E1A  02                 	db	2
   218  007E1B  02                 	db	2
   219  007E1C  03                 	db	3
   220  007E1D  04                 	db	4
   221  007E1E  04                 	db	4
   222  007E1F  05                 	db	5
   223  007E20  06                 	db	6
   224  007E21  06                 	db	6
   225  007E22  07                 	db	7
   226  007E23  07                 	db	7
   227  007E24  08                 	db	8
   228  007E25  09                 	db	9
   229  007E26  09                 	db	9
   230  007E27                     __end_of_fract:
   231                           	callstack 0
   232  007E27                     _dpowers:
   233                           	callstack 0
   234  007E27  0001               	dw	1
   235  007E29  000A               	dw	10
   236  007E2B  0064               	dw	100
   237  007E2D  03E8               	dw	1000
   238  007E2F  2710               	dw	10000
   239  007E31                     __end_of_dpowers:
   240                           	callstack 0
   241  007E31                     _compile_date:
   242                           	callstack 0
   243  007E31  53                 	db	83
   244  007E32  65                 	db	101
   245  007E33  70                 	db	112
   246  007E34  20                 	db	32
   247  007E35  32                 	db	50
   248  007E36  39                 	db	57
   249  007E37  20                 	db	32
   250  007E38  32                 	db	50
   251  007E39  30                 	db	48
   252  007E3A  32                 	db	50
   253  007E3B  33                 	db	51
   254  007E3C  00                 	db	0
   255  007E3D                     __end_of_compile_date:
   256                           	callstack 0
   257  007E3D                     _compile_time:
   258                           	callstack 0
   259  007E3D  31                 	db	49
   260  007E3E  35                 	db	53
   261  007E3F  3A                 	db	58
   262  007E40  32                 	db	50
   263  007E41  35                 	db	53
   264  007E42  3A                 	db	58
   265  007E43  31                 	db	49
   266  007E44  36                 	db	54
   267  007E45  00                 	db	0
   268  007E46                     __end_of_compile_time:
   269                           	callstack 0
   270  007E46                     _symbol_7:
   271                           	callstack 0
   272  007E46  06                 	db	6
   273  007E47  09                 	db	9
   274  007E48  09                 	db	9
   275  007E49  06                 	db	6
   276  007E4A  00                 	db	0
   277  007E4B  00                 	db	0
   278  007E4C  00                 	db	0
   279  007E4D  00                 	db	0
   280  007E4E                     __end_of_symbol_7:
   281                           	callstack 0
   282  007E4E                     _symbol_6:
   283                           	callstack 0
   284  007E4E  00                 	db	0
   285  007E4F  0E                 	db	14
   286  007E50  1F                 	db	31
   287  007E51  1B                 	db	27
   288  007E52  1F                 	db	31
   289  007E53  0E                 	db	14
   290  007E54  00                 	db	0
   291  007E55  00                 	db	0
   292  007E56                     __end_of_symbol_6:
   293                           	callstack 0
   294  007E56                     _symbol_5:
   295                           	callstack 0
   296  007E56  00                 	db	0
   297  007E57  00                 	db	0
   298  007E58  1F                 	db	31
   299  007E59  1F                 	db	31
   300  007E5A  1F                 	db	31
   301  007E5B  00                 	db	0
   302  007E5C  00                 	db	0
   303  007E5D  00                 	db	0
   304  007E5E                     __end_of_symbol_5:
   305                           	callstack 0
   306  007E5E                     _symbol_4:
   307                           	callstack 0
   308  007E5E  00                 	db	0
   309  007E5F  04                 	db	4
   310  007E60  0F                 	db	15
   311  007E61  1F                 	db	31
   312  007E62  0F                 	db	15
   313  007E63  04                 	db	4
   314  007E64  00                 	db	0
   315  007E65  00                 	db	0
   316  007E66                     __end_of_symbol_4:
   317                           	callstack 0
   318  007E66                     _symbol_3:
   319                           	callstack 0
   320  007E66  00                 	db	0
   321  007E67  04                 	db	4
   322  007E68  1E                 	db	30
   323  007E69  1F                 	db	31
   324  007E6A  1E                 	db	30
   325  007E6B  04                 	db	4
   326  007E6C  00                 	db	0
   327  007E6D  00                 	db	0
   328  007E6E                     __end_of_symbol_3:
   329                           	callstack 0
   330  007E6E                     _symbol_2:
   331                           	callstack 0
   332  007E6E  0E                 	db	14
   333  007E6F  11                 	db	17
   334  007E70  11                 	db	17
   335  007E71  11                 	db	17
   336  007E72  0A                 	db	10
   337  007E73  1B                 	db	27
   338  007E74  00                 	db	0
   339  007E75  00                 	db	0
   340  007E76                     __end_of_symbol_2:
   341                           	callstack 0
   342  007E76                     _symbol_1:
   343                           	callstack 0
   344  007E76  00                 	db	0
   345  007E77  00                 	db	0
   346  007E78  08                 	db	8
   347  007E79  15                 	db	21
   348  007E7A  02                 	db	2
   349  007E7B  00                 	db	0
   350  007E7C  00                 	db	0
   351  007E7D  00                 	db	0
   352  007E7E                     __end_of_symbol_1:
   353                           	callstack 0
   354  0000                     _CCPR2H	set	4028
   355  0000                     _CCPR2L	set	4027
   356  0000                     _ADCON0bits	set	4034
   357  0000                     _ADCON1	set	4033
   358  0000                     _ADCON2bits	set	4032
   359  0000                     _TRISB	set	3987
   360  0000                     _LATB	set	3978
   361  0000                     _PORTB	set	3969
   362  0000                     _PORTC	set	3970
   363  0000                     _ADRESL	set	4035
   364  0000                     _ADRESH	set	4036
   365  0000                     _LATCbits	set	3979
   366  0000                     _EECON2	set	4007
   367  0000                     _EEDATA	set	4008
   368  0000                     _EEADR	set	4009
   369  0000                     _TMR2ON	set	32338
   370  0000                     _TMR1ON	set	32360
   371  0000                     _TRISBbits	set	3987
   372  0000                     _PORTBbits	set	3969
   373  0000                     _T2CONbits	set	4042
   374  0000                     _T1CONbits	set	4045
   375  0000                     _INTCON2bits	set	4081
   376  0000                     _TRISC	set	3988
   377  0000                     _LATC	set	3979
   378  0000                     _LATA	set	3977
   379  0000                     _PIR1bits	set	3998
   380  0000                     _TMR3ON	set	32136
   381  0000                     _TMR1IP	set	31992
   382  0000                     _T1OSCEN	set	32363
   383  0000                     _TMR1CS	set	32361
   384  0000                     _ADIF	set	31990
   385  0000                     _ADIE	set	31982
   386  0000                     _CCP1IF	set	31986
   387  0000                     _CCP1IE	set	31978
   388  0000                     _INT0IF	set	32657
   389  0000                     _INT0IE	set	32660
   390  0000                     _TMR2IF	set	31985
   391  0000                     _TMR2IE	set	31977
   392  0000                     _TMR1IF	set	31984
   393  0000                     _TMR1IE	set	31976
   394  0000                     _TMR0IF	set	32658
   395  0000                     _TMR0IE	set	32661
   396  0000                     _WPUB	set	3964
   397  0000                     _PORTA	set	3968
   398  0000                     _LATAbits	set	3977
   399  0000                     _TRISCbits	set	3988
   400  0000                     _EECON1bits	set	4006
   401  0000                     _TXIF	set	31988
   402  0000                     _RCSTAbits	set	4011
   403  0000                     _TXSTAbits	set	4012
   404  0000                     _TXREG	set	4013
   405  0000                     _INTCONbits	set	4082
   406  0000                     _IPR1bits	set	3999
   407  0000                     _TMR3IE	set	32001
   408  0000                     _TMR3IP	set	32017
   409  0000                     _SPBRG	set	4015
   410  0000                     _SPBRGH	set	4016
   411  0000                     _BAUDCONbits	set	4024
   412  0000                     _OSCTUNEbits	set	3995
   413  0000                     _PIE1bits	set	3997
   414  0000                     _CCP2CONbits	set	4026
   415  0000                     _CCP1CONbits	set	4029
   416  0000                     _CCPR1L	set	4030
   417  0000                     _CCPR1H	set	4031
   418  0000                     _T3CONbits	set	4017
   419  0000                     _TRISA	set	3986
   420  0000                     _RCONbits	set	4048
   421  0000                     _OSCCONbits	set	4051
   422  0000                     _TMR1H	set	4047
   423  0000                     _TMR1L	set	4046
   424  0000                     _PR2	set	4043
   425  0000                     _T0CONbits	set	4053
   426  0000                     _RBPU	set	32655
   427  0000                     _ANSELbits	set	3966
   428  007E7E                     STR_9:
   429  007E7E  20                 	db	32
   430  007E7F  20                 	db	32
   431  007E80  20                 	db	32
   432  007E81  20                 	db	32
   433  007E82  20                 	db	32
   434  007E83  20                 	db	32
   435  007E84  20                 	db	32
   436  007E85  20                 	db	32
   437  007E86  20                 	db	32
   438  007E87  45                 	db	69	;'E'
   439  007E88  58                 	db	88	;'X'
   440  007E89  49                 	db	73	;'I'
   441  007E8A  54                 	db	84	;'T'
   442  007E8B  20                 	db	32
   443  007E8C  20                 	db	32
   444  007E8D  20                 	db	32
   445  007E8E  20                 	db	32
   446  007E8F  20                 	db	32
   447  007E90  20                 	db	32
   448  007E91  20                 	db	32
   449  007E92  20                 	db	32
   450  007E93  00                 	db	0
   451  007E94                     STR_8:
   452  007E94  20                 	db	32
   453  007E95  20                 	db	32
   454  007E96  20                 	db	32
   455  007E97  20                 	db	32
   456  007E98  20                 	db	32
   457  007E99  41                 	db	65	;'A'
   458  007E9A  4C                 	db	76	;'L'
   459  007E9B  41                 	db	65	;'A'
   460  007E9C  52                 	db	82	;'R'
   461  007E9D  4D                 	db	77	;'M'
   462  007E9E  20                 	db	32
   463  007E9F  54                 	db	84	;'T'
   464  007EA0  45                 	db	69	;'E'
   465  007EA1  4D                 	db	77	;'M'
   466  007EA2  50                 	db	80	;'P'
   467  007EA3  20                 	db	32
   468  007EA4  20                 	db	32
   469  007EA5  20                 	db	32
   470  007EA6  20                 	db	32
   471  007EA7  20                 	db	32
   472  007EA8  00                 	db	0
   473  007EA9                     STR_7:
   474  007EA9  20                 	db	32
   475  007EAA  20                 	db	32
   476  007EAB  20                 	db	32
   477  007EAC  53                 	db	83	;'S'
   478  007EAD  45                 	db	69	;'E'
   479  007EAE  54                 	db	84	;'T'
   480  007EAF  20                 	db	32
   481  007EB0  31                 	db	49	;'1'
   482  007EB1  30                 	db	48	;'0'
   483  007EB2  30                 	db	48	;'0'
   484  007EB3  25                 	db	37
   485  007EB4  20                 	db	32
   486  007EB5  50                 	db	80	;'P'
   487  007EB6  4F                 	db	79	;'O'
   488  007EB7  57                 	db	87	;'W'
   489  007EB8  45                 	db	69	;'E'
   490  007EB9  52                 	db	82	;'R'
   491  007EBA  20                 	db	32
   492  007EBB  20                 	db	32
   493  007EBC  20                 	db	32
   494  007EBD  00                 	db	0
   495  007EBE                     STR_5:
   496  007EBE  20                 	db	32
   497  007EBF  20                 	db	32
   498  007EC0  20                 	db	32
   499  007EC1  45                 	db	69	;'E'
   500  007EC2  44                 	db	68	;'D'
   501  007EC3  49                 	db	73	;'I'
   502  007EC4  54                 	db	84	;'T'
   503  007EC5  20                 	db	32
   504  007EC6  52                 	db	82	;'R'
   505  007EC7  45                 	db	69	;'E'
   506  007EC8  53                 	db	83	;'S'
   507  007EC9  49                 	db	73	;'I'
   508  007ECA  53                 	db	83	;'S'
   509  007ECB  54                 	db	84	;'T'
   510  007ECC  41                 	db	65	;'A'
   511  007ECD  4E                 	db	78	;'N'
   512  007ECE  43                 	db	67	;'C'
   513  007ECF  45                 	db	69	;'E'
   514  007ED0  20                 	db	32
   515  007ED1  20                 	db	32
   516  007ED2  00                 	db	0
   517  007ED3                     STR_6:
   518  007ED3  20                 	db	32
   519  007ED4  20                 	db	32
   520  007ED5  53                 	db	83	;'S'
   521  007ED6  41                 	db	65	;'A'
   522  007ED7  56                 	db	86	;'V'
   523  007ED8  45                 	db	69	;'E'
   524  007ED9  20                 	db	32
   525  007EDA  4C                 	db	76	;'L'
   526  007EDB  4F                 	db	79	;'O'
   527  007EDC  41                 	db	65	;'A'
   528  007EDD  44                 	db	68	;'D'
   529  007EDE  20                 	db	32
   530  007EDF  44                 	db	68	;'D'
   531  007EE0  45                 	db	69	;'E'
   532  007EE1  46                 	db	70	;'F'
   533  007EE2  41                 	db	65	;'A'
   534  007EE3  55                 	db	85	;'U'
   535  007EE4  4C                 	db	76	;'L'
   536  007EE5  54                 	db	84	;'T'
   537  007EE6  20                 	db	32
   538  007EE7  00                 	db	0
   539  007EE8                     STR_14:
   540  007EE8  52                 	db	82	;'R'
   541  007EE9  65                 	db	101	;'e'
   542  007EEA  73                 	db	115	;'s'
   543  007EEB  69                 	db	105	;'i'
   544  007EEC  73                 	db	115	;'s'
   545  007EED  74                 	db	116	;'t'
   546  007EEE  3A                 	db	58	;':'
   547  007EEF  25                 	db	37
   548  007EF0  30                 	db	48	;'0'
   549  007EF1  32                 	db	50	;'2'
   550  007EF2  75                 	db	117	;'u'
   551  007EF3  2E                 	db	46
   552  007EF4  25                 	db	37
   553  007EF5  75                 	db	117	;'u'
   554  007EF6  20                 	db	32
   555  007EF7  4F                 	db	79	;'O'
   556  007EF8  68                 	db	104	;'h'
   557  007EF9  6D                 	db	109	;'m'
   558  007EFA  20                 	db	32
   559  007EFB  00                 	db	0
   560  007EFC                     STR_1:
   561  007EFC  2D                 	db	45
   562  007EFD  50                 	db	80	;'P'
   563  007EFE  48                 	db	72	;'H'
   564  007EFF  41                 	db	65	;'A'
   565  007F00  53                 	db	83	;'S'
   566  007F01  45                 	db	69	;'E'
   567  007F02  20                 	db	32
   568  007F03  44                 	db	68	;'D'
   569  007F04  49                 	db	73	;'I'
   570  007F05  4D                 	db	77	;'M'
   571  007F06  4D                 	db	77	;'M'
   572  007F07  45                 	db	69	;'E'
   573  007F08  52                 	db	82	;'R'
   574  007F09  20                 	db	32
   575  007F0A  53                 	db	83	;'S'
   576  007F0B  54                 	db	84	;'T'
   577  007F0C  41                 	db	65	;'A'
   578  007F0D  42                 	db	66	;'B'
   579  007F0E  2D                 	db	45
   580  007F0F  00                 	db	0
   581  007F10                     STR_11:
   582  007F10  4C                 	db	76	;'L'
   583  007F11  6F                 	db	111	;'o'
   584  007F12  6E                 	db	110	;'n'
   585  007F13  67                 	db	103	;'g'
   586  007F14  20                 	db	32
   587  007F15  70                 	db	112	;'p'
   588  007F16  72                 	db	114	;'r'
   589  007F17  65                 	db	101	;'e'
   590  007F18  73                 	db	115	;'s'
   591  007F19  73                 	db	115	;'s'
   592  007F1A  20                 	db	32
   593  007F1B  66                 	db	102	;'f'
   594  007F1C  6F                 	db	111	;'o'
   595  007F1D  72                 	db	114	;'r'
   596  007F1E  20                 	db	32
   597  007F1F  73                 	db	115	;'s'
   598  007F20  61                 	db	97	;'a'
   599  007F21  76                 	db	118	;'v'
   600  007F22  65                 	db	101	;'e'
   601  007F23  00                 	db	0
   602  007F24                     STR_10:
   603  007F24  20                 	db	32
   604  007F25  20                 	db	32
   605  007F26  2D                 	db	45
   606  007F27  20                 	db	32
   607  007F28  57                 	db	87	;'W'
   608  007F29  68                 	db	104	;'h'
   609  007F2A  6F                 	db	111	;'o'
   610  007F2B  6C                 	db	108	;'l'
   611  007F2C  65                 	db	101	;'e'
   612  007F2D  20                 	db	32
   613  007F2E  70                 	db	112	;'p'
   614  007F2F  61                 	db	97	;'a'
   615  007F30  72                 	db	114	;'r'
   616  007F31  74                 	db	116	;'t'
   617  007F32  20                 	db	32
   618  007F33  2D                 	db	45
   619  007F34  20                 	db	32
   620  007F35  20                 	db	32
   621  007F36  00                 	db	0
   622  007F37                     STR_16:
   623  007F37  20                 	db	32
   624  007F38  20                 	db	32
   625  007F39  2D                 	db	45
   626  007F3A  20                 	db	32
   627  007F3B  46                 	db	70	;'F'
   628  007F3C  72                 	db	114	;'r'
   629  007F3D  61                 	db	97	;'a'
   630  007F3E  63                 	db	99	;'c'
   631  007F3F  74                 	db	116	;'t'
   632  007F40  20                 	db	32
   633  007F41  70                 	db	112	;'p'
   634  007F42  61                 	db	97	;'a'
   635  007F43  72                 	db	114	;'r'
   636  007F44  74                 	db	116	;'t'
   637  007F45  20                 	db	32
   638  007F46  2D                 	db	45
   639  007F47  20                 	db	32
   640  007F48  20                 	db	32
   641  007F49  00                 	db	0
   642  007F4A                     STR_12:
   643  007F4A  20                 	db	32
   644  007F4B  20                 	db	32
   645  007F4C  20                 	db	32
   646  007F4D  20                 	db	32
   647  007F4E  74                 	db	116	;'t'
   648  007F4F  6F                 	db	111	;'o'
   649  007F50  20                 	db	32
   650  007F51  45                 	db	69	;'E'
   651  007F52  45                 	db	69	;'E'
   652  007F53  50                 	db	80	;'P'
   653  007F54  52                 	db	82	;'R'
   654  007F55  4F                 	db	79	;'O'
   655  007F56  4D                 	db	77	;'M'
   656  007F57  2E                 	db	46
   657  007F58  00                 	db	0
   658  007F59                     STR_2:
   659  007F59  28                 	db	40
   660  007F5A  63                 	db	99	;'c'
   661  007F5B  29                 	db	41
   662  007F5C  49                 	db	73	;'I'
   663  007F5D  76                 	db	118	;'v'
   664  007F5E  61                 	db	97	;'a'
   665  007F5F  6E                 	db	110	;'n'
   666  007F60  5F                 	db	95	;'_'
   667  007F61  66                 	db	102	;'f'
   668  007F62  64                 	db	100	;'d'
   669  007F63  20                 	db	32
   670  007F64  76                 	db	118	;'v'
   671  007F65  25                 	db	37
   672  007F66  73                 	db	115	;'s'
   673  007F67  00                 	db	0
   674  007F68                     STR_17:
   675  007F68  54                 	db	84	;'T'
   676  007F69  65                 	db	101	;'e'
   677  007F6A  6D                 	db	109	;'m'
   678  007F6B  70                 	db	112	;'p'
   679  007F6C  3A                 	db	58	;':'
   680  007F6D  25                 	db	37
   681  007F6E  75                 	db	117	;'u'
   682  007F6F  25                 	db	37
   683  007F70  63                 	db	99	;'c'
   684  007F71  25                 	db	37
   685  007F72  2D                 	db	45
   686  007F73  34                 	db	52	;'4'
   687  007F74  63                 	db	99	;'c'
   688  007F75  00                 	db	0
   689  007F76                     STR_24:
   690  007F76  55                 	db	85	;'U'
   691  007F77  2D                 	db	45
   692  007F78  53                 	db	83	;'S'
   693  007F79  65                 	db	101	;'e'
   694  007F7A  74                 	db	116	;'t'
   695  007F7B  3A                 	db	58	;':'
   696  007F7C  25                 	db	37
   697  007F7D  2D                 	db	45
   698  007F7E  33                 	db	51	;'3'
   699  007F7F  75                 	db	117	;'u'
   700  007F80  56                 	db	86	;'V'
   701  007F81  00                 	db	0
   702  007F82                     STR_25:
   703  007F82  55                 	db	85	;'U'
   704  007F83  2D                 	db	45
   705  007F84  4F                 	db	79	;'O'
   706  007F85  75                 	db	117	;'u'
   707  007F86  74                 	db	116	;'t'
   708  007F87  3A                 	db	58	;':'
   709  007F88  25                 	db	37
   710  007F89  2D                 	db	45
   711  007F8A  33                 	db	51	;'3'
   712  007F8B  75                 	db	117	;'u'
   713  007F8C  56                 	db	86	;'V'
   714  007F8D  00                 	db	0
   715  007F8E                     STR_27:
   716  007F8E  41                 	db	65	;'A'
   717  007F8F  2D                 	db	45
   718  007F90  6C                 	db	108	;'l'
   719  007F91  65                 	db	101	;'e'
   720  007F92  3A                 	db	58	;':'
   721  007F93  25                 	db	37
   722  007F94  2D                 	db	45
   723  007F95  35                 	db	53	;'5'
   724  007F96  75                 	db	117	;'u'
   725  007F97  20                 	db	32
   726  007F98  00                 	db	0
   727  007F99                     STR_21:
   728  007F99  55                 	db	85	;'U'
   729  007F9A  2D                 	db	45
   730  007F9B  49                 	db	73	;'I'
   731  007F9C  6E                 	db	110	;'n'
   732  007F9D  3A                 	db	58	;':'
   733  007F9E  25                 	db	37
   734  007F9F  2D                 	db	45
   735  007FA0  33                 	db	51	;'3'
   736  007FA1  75                 	db	117	;'u'
   737  007FA2  56                 	db	86	;'V'
   738  007FA3  00                 	db	0
   739  007FA4                     STR_29:
   740  007FA4  50                 	db	80	;'P'
   741  007FA5  2A                 	db	42
   742  007FA6  3A                 	db	58	;':'
   743  007FA7  25                 	db	37
   744  007FA8  63                 	db	99	;'c'
   745  007FA9  25                 	db	37
   746  007FAA  2D                 	db	45
   747  007FAB  34                 	db	52	;'4'
   748  007FAC  75                 	db	117	;'u'
   749  007FAD  57                 	db	87	;'W'
   750  007FAE  00                 	db	0
   751  007FAF                     STR_30:
   752  007FAF  50                 	db	80	;'P'
   753  007FB0  72                 	db	114	;'r'
   754  007FB1  3A                 	db	58	;':'
   755  007FB2  25                 	db	37
   756  007FB3  63                 	db	99	;'c'
   757  007FB4  25                 	db	37
   758  007FB5  2D                 	db	45
   759  007FB6  34                 	db	52	;'4'
   760  007FB7  75                 	db	117	;'u'
   761  007FB8  57                 	db	87	;'W'
   762  007FB9  00                 	db	0
   763  007FBA                     STR_18:
   764  007FBA  41                 	db	65	;'A'
   765  007FBB  6C                 	db	108	;'l'
   766  007FBC  61                 	db	97	;'a'
   767  007FBD  72                 	db	114	;'r'
   768  007FBE  6D                 	db	109	;'m'
   769  007FBF  3A                 	db	58	;':'
   770  007FC0  25                 	db	37
   771  007FC1  2D                 	db	45
   772  007FC2  33                 	db	51	;'3'
   773  007FC3  73                 	db	115	;'s'
   774  007FC4  00                 	db	0
   775  007FC5                     STR_22:
   776  007FC5  4E                 	db	78	;'N'
   777  007FC6  4F                 	db	79	;'O'
   778  007FC7  54                 	db	84	;'T'
   779  007FC8  20                 	db	32
   780  007FC9  53                 	db	83	;'S'
   781  007FCA  54                 	db	84	;'T'
   782  007FCB  41                 	db	65	;'A'
   783  007FCC  42                 	db	66	;'B'
   784  007FCD  21                 	db	33
   785  007FCE  00                 	db	0
   786  007FCF                     STR_23:
   787  007FCF  53                 	db	83	;'S'
   788  007FD0  54                 	db	84	;'T'
   789  007FD1  41                 	db	65	;'A'
   790  007FD2  42                 	db	66	;'B'
   791  007FD3  49                 	db	73	;'I'
   792  007FD4  4C                 	db	76	;'L'
   793  007FD5  49                 	db	73	;'I'
   794  007FD6  5A                 	db	90	;'Z'
   795  007FD7  45                 	db	69	;'E'
   796  007FD8  00                 	db	0
   797  007FD9                     STR_3:
   798  007FD9  31                 	db	49	;'1'
   799  007FDA  38                 	db	56	;'8'
   800  007FDB  2E                 	db	46
   801  007FDC  31                 	db	49	;'1'
   802  007FDD  30                 	db	48	;'0'
   803  007FDE  2E                 	db	46
   804  007FDF  32                 	db	50	;'2'
   805  007FE0  32                 	db	50	;'2'
   806  007FE1  00                 	db	0
   807  007FE2                     STR_28:
   808  007FE2  25                 	db	37
   809  007FE3  63                 	db	99	;'c'
   810  007FE4  3D                 	db	61	;'='
   811  007FE5  25                 	db	37
   812  007FE6  75                 	db	117	;'u'
   813  007FE7  2E                 	db	46
   814  007FE8  25                 	db	37
   815  007FE9  75                 	db	117	;'u'
   816  007FEA  00                 	db	0
   817  007FEB                     STR_31:
   818  007FEB  28                 	db	40
   819  007FEC  6E                 	db	110	;'n'
   820  007FED  75                 	db	117	;'u'
   821  007FEE  6C                 	db	108	;'l'
   822  007FEF  6C                 	db	108	;'l'
   823  007FF0  29                 	db	41
   824  007FF1  00                 	db	0
   825  007FF2                     STR_4:
   826  007FF2  25                 	db	37
   827  007FF3  73                 	db	115	;'s'
   828  007FF4  20                 	db	32
   829  007FF5  25                 	db	37
   830  007FF6  73                 	db	115	;'s'
   831  007FF7  00                 	db	0
   832  007FF8                     STR_20:
   833  007FF8  4F                 	db	79	;'O'
   834  007FF9  46                 	db	70	;'F'
   835  007FFA  46                 	db	70	;'F'
   836  007FFB  00                 	db	0
   837  007FFC                     STR_19:
   838  007FFC  4F                 	db	79	;'O'
   839  007FFD  4E                 	db	78	;'N'
   840  007FFE  00                 	db	0
   841  007FFF  00                 	db	0	; dummy byte at the end
   842  0000                     
   843                           ; #config settings
   844                           
   845                           	psect	cinit
   846  001A3E                     __pcinit:
   847                           	callstack 0
   848  001A3E                     start_initialization:
   849                           	callstack 0
   850  001A3E                     __initialization:
   851                           	callstack 0
   852                           
   853                           ; Initialize objects allocated to BANK0 (3 bytes)
   854                           ; load TBLPTR registers with __pidataBANK0
   855  001A3E  0EE4               	movlw	low __pidataBANK0
   856  001A40  6EF6               	movwf	tblptrl,c
   857  001A42  0E1E               	movlw	high __pidataBANK0
   858  001A44  6EF7               	movwf	tblptrh,c
   859  001A46  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   860  001A48  6EF8               	movwf	tblptru,c
   861  001A4A  0009               	tblrd		*+	;fetch initializer
   862  001A4C  CFF5 F0CE          	movff	tablat,__pdataBANK0
   863  001A50  0009               	tblrd		*+	;fetch initializer
   864  001A52  CFF5 F0CF          	movff	tablat,__pdataBANK0+1
   865  001A56  0009               	tblrd		*+	;fetch initializer
   866  001A58  CFF5 F0D0          	movff	tablat,__pdataBANK0+2
   867                           
   868                           ; Initialize objects allocated to COMRAM (2 bytes)
   869                           ; load TBLPTR registers with __pidataCOMRAM
   870  001A5C  0EE7               	movlw	low __pidataCOMRAM
   871  001A5E  6EF6               	movwf	tblptrl,c
   872  001A60  0E1E               	movlw	high __pidataCOMRAM
   873  001A62  6EF7               	movwf	tblptrh,c
   874  001A64  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   875  001A66  6EF8               	movwf	tblptru,c
   876  001A68  0009               	tblrd		*+	;fetch initializer
   877  001A6A  CFF5 F048          	movff	tablat,__pdataCOMRAM
   878  001A6E  0009               	tblrd		*+	;fetch initializer
   879  001A70  CFF5 F049          	movff	tablat,__pdataCOMRAM+1
   880                           
   881                           ; Clear objects allocated to BANK0 (77 bytes)
   882  001A74  EE00  F060         	lfsr	0,__pbssBANK0
   883  001A78  0E4D               	movlw	77
   884  001A7A                     clear_0:
   885  001A7A  6AEE               	clrf	postinc0,c
   886  001A7C  06E8               	decf	wreg,f,c
   887  001A7E  E1FD               	bnz	clear_0
   888                           
   889                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   890  001A80  6A47               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   891                           
   892                           ; Clear objects allocated to COMRAM (23 bytes)
   893  001A82  EE00  F030         	lfsr	0,__pbssCOMRAM
   894  001A86  0E17               	movlw	23
   895  001A88                     clear_1:
   896  001A88  6AEE               	clrf	postinc0,c
   897  001A8A  06E8               	decf	wreg,f,c
   898  001A8C  E1FD               	bnz	clear_1
   899  001A8E                     end_of_initialization:
   900                           	callstack 0
   901  001A8E                     __end_of__initialization:
   902                           	callstack 0
   903  001A8E  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   904  001A90  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   905  001A92  0E00               	movlw	low (__Lmediumconst shr (0+16))
   906  001A94  6EF8               	movwf	tblptru,c
   907  001A96  0100               	movlb	0
   908  001A98  EF6A  F000         	goto	_main	;jump to C main() function
   909                           
   910                           	psect	bitbssCOMRAM
   911  000238                     __pbitbssCOMRAM:
   912                           	callstack 0
   913  000238                     main@alarm_enable:
   914                           	callstack 0
   915  000238                     	ds	1
   916  000239                     main@whole_dec:
   917                           	callstack 0
   918  000239                     	ds	1
   919  00023A                     _inc_data:
   920                           	callstack 0
   921  00023A                     	ds	1
   922  00023B                     _show_tp:
   923                           	callstack 0
   924  00023B                     	ds	1
   925  00023C                     _is_stab:
   926                           	callstack 0
   927  00023C                     	ds	1
   928  00023D                     _enTmp:
   929                           	callstack 0
   930  00023D                     	ds	1
   931  00023E                     _power_100:
   932                           	callstack 0
   933  00023E                     	ds	1
   934                           
   935                           	psect	bssCOMRAM
   936  000030                     __pbssCOMRAM:
   937                           	callstack 0
   938  000030                     _U_meas:
   939                           	callstack 0
   940  000030                     	ds	4
   941  000034                     key_press@count:
   942                           	callstack 0
   943  000034                     	ds	2
   944  000036                     _watt_disp:
   945                           	callstack 0
   946  000036                     	ds	2
   947  000038                     _sound_delay:
   948                           	callstack 0
   949  000038                     	ds	2
   950  00003A                     _key_pressed:
   951                           	callstack 0
   952  00003A                     	ds	1
   953  00003B                     EncPoll@Enc:
   954                           	callstack 0
   955  00003B                     	ds	1
   956  00003C                     EncPoll@EncVal:
   957                           	callstack 0
   958  00003C                     	ds	1
   959  00003D                     _isTemp:
   960                           	callstack 0
   961  00003D                     	ds	1
   962  00003E                     _getU:
   963                           	callstack 0
   964  00003E                     	ds	1
   965  00003F                     _zero:
   966                           	callstack 0
   967  00003F                     	ds	1
   968  000040                     _triacON:
   969                           	callstack 0
   970  000040                     	ds	1
   971  000041                     _sound_enable:
   972                           	callstack 0
   973  000041                     	ds	1
   974  000042                     _tick_t1_1:
   975                           	callstack 0
   976  000042                     	ds	1
   977  000043                     _eusartRxCount:
   978                           	callstack 0
   979  000043                     	ds	1
   980  000044                     _eusartTxBufferRemaining:
   981                           	callstack 0
   982  000044                     	ds	1
   983  000045                     _timer_val:
   984                           	callstack 0
   985  000045                     	ds	2
   986                           
   987                           	psect	dataCOMRAM
   988  000048                     __pdataCOMRAM:
   989                           	callstack 0
   990  000048                     _angle_U_ocr:
   991                           	callstack 0
   992  000048                     	ds	2
   993                           
   994                           	psect	bssBANK0
   995  000060                     __pbssBANK0:
   996                           	callstack 0
   997  000060                     _t_res:
   998                           	callstack 0
   999  000060                     	ds	4
  1000  000064                     _sqrtU_sum:
  1001                           	callstack 0
  1002  000064                     	ds	4
  1003  000068                     _U_summTriac:
  1004                           	callstack 0
  1005  000068                     	ds	4
  1006  00006C                     _U_summ:
  1007                           	callstack 0
  1008  00006C                     	ds	4
  1009  000070                     _EncData:
  1010                           	callstack 0
  1011  000070                     	ds	2
  1012  000072                     _U_Out:
  1013                           	callstack 0
  1014  000072                     	ds	2
  1015  000074                     _U_real:
  1016                           	callstack 0
  1017  000074                     	ds	2
  1018  000076                     _oldOldTemperature:
  1019                           	callstack 0
  1020  000076                     	ds	2
  1021  000078                     _oldTemperature:
  1022                           	callstack 0
  1023  000078                     	ds	2
  1024  00007A                     _cnt_adc:
  1025                           	callstack 0
  1026  00007A                     	ds	2
  1027  00007C                     main@powerOFF:
  1028                           	callstack 0
  1029  00007C                     	ds	1
  1030  00007D                     _sel_main:
  1031                           	callstack 0
  1032  00007D                     	ds	1
  1033  00007E                     _r_dec:
  1034                           	callstack 0
  1035  00007E                     	ds	1
  1036  00007F                     _r_whole:
  1037                           	callstack 0
  1038  00007F                     	ds	1
  1039  000080                     _count_enc:
  1040                           	callstack 0
  1041  000080                     	ds	1
  1042  000081                     _u_set:
  1043                           	callstack 0
  1044  000081                     	ds	1
  1045  000082                     _pressed_key:
  1046                           	callstack 0
  1047  000082                     	ds	1
  1048  000083                     _isTempReady:
  1049                           	callstack 0
  1050  000083                     	ds	1
  1051  000084                     _TempEnT:
  1052                           	callstack 0
  1053  000084                     	ds	1
  1054  000085                     _TempEn:
  1055                           	callstack 0
  1056  000085                     	ds	1
  1057  000086                     _AlarmTempT:
  1058                           	callstack 0
  1059  000086                     	ds	1
  1060  000087                     _AlarmTemp:
  1061                           	callstack 0
  1062  000087                     	ds	1
  1063  000088                     _countTmp:
  1064                           	callstack 0
  1065  000088                     	ds	1
  1066  000089                     _read_key:
  1067                           	callstack 0
  1068  000089                     	ds	1
  1069  00008A                     _tick_t1:
  1070                           	callstack 0
  1071  00008A                     	ds	1
  1072  00008B                     _TxtBuf:
  1073                           	callstack 0
  1074  00008B                     	ds	21
  1075  0000A0                     _scratch:
  1076                           	callstack 0
  1077  0000A0                     	ds	9
  1078  0000A9                     _temperature:
  1079                           	callstack 0
  1080  0000A9                     	ds	2
  1081  0000AB                     _minus:
  1082                           	callstack 0
  1083  0000AB                     	ds	1
  1084  0000AC                     _time_flag:
  1085                           	callstack 0
  1086  0000AC                     	ds	1
  1087                           
  1088                           	psect	dataBANK0
  1089  0000CE                     __pdataBANK0:
  1090                           	callstack 0
  1091  0000CE                     _angleU:
  1092                           	callstack 0
  1093  0000CE                     	ds	2
  1094  0000D0                     _stab:
  1095                           	callstack 0
  1096  0000D0                     	ds	1
  1097                           
  1098                           	psect	cstackBANK0
  1099  0000AD                     __pcstackBANK0:
  1100                           	callstack 0
  1101  0000AD                     sqrt@sign:
  1102                           	callstack 0
  1103  0000AD                     sprintf@val:
  1104                           	callstack 0
  1105  0000AD                     calc_power@tt:
  1106                           	callstack 0
  1107                           
  1108                           ; 4 bytes @ 0x0
  1109  0000AD                     	ds	1
  1110  0000AE                     sqrt@i:
  1111                           	callstack 0
  1112                           
  1113                           ; 1 bytes @ 0x1
  1114  0000AE                     	ds	1
  1115  0000AF                     sprintf@prec:
  1116                           	callstack 0
  1117  0000AF                     sqrt@tfrac:
  1118                           	callstack 0
  1119                           
  1120                           ; 4 bytes @ 0x2
  1121  0000AF                     	ds	1
  1122  0000B0                     sprintf@cp:
  1123                           	callstack 0
  1124                           
  1125                           ; 2 bytes @ 0x3
  1126  0000B0                     	ds	1
  1127  0000B1                     _calc_power$2596:
  1128                           	callstack 0
  1129                           
  1130                           ; 4 bytes @ 0x4
  1131  0000B1                     	ds	1
  1132  0000B2                     sprintf@ap:
  1133                           	callstack 0
  1134                           
  1135                           ; 1 bytes @ 0x5
  1136  0000B2                     	ds	1
  1137  0000B3                     sprintf@len:
  1138                           	callstack 0
  1139  0000B3                     sqrt@grs:
  1140                           	callstack 0
  1141                           
  1142                           ; 4 bytes @ 0x6
  1143  0000B3                     	ds	2
  1144  0000B5                     sprintf@flag:
  1145                           	callstack 0
  1146  0000B5                     calc_power@p_w:
  1147                           	callstack 0
  1148                           
  1149                           ; 2 bytes @ 0x8
  1150  0000B5                     	ds	1
  1151  0000B6                     sprintf@c:
  1152                           	callstack 0
  1153                           
  1154                           ; 1 bytes @ 0x9
  1155  0000B6                     	ds	1
  1156  0000B7                     sqrt@p:
  1157                           	callstack 0
  1158  0000B7                     sprintf@width:
  1159                           	callstack 0
  1160                           
  1161                           ; 2 bytes @ 0xA
  1162  0000B7                     	ds	1
  1163  0000B8                     sqrt@exp:
  1164                           	callstack 0
  1165                           
  1166                           ; 2 bytes @ 0xB
  1167  0000B8                     	ds	1
  1168  0000B9                     show_lcd_main@pwr_dsp:
  1169                           	callstack 0
  1170                           
  1171                           ; 2 bytes @ 0xC
  1172  0000B9                     	ds	1
  1173  0000BA                     sqrt@frac:
  1174                           	callstack 0
  1175                           
  1176                           ; 4 bytes @ 0xD
  1177  0000BA                     	ds	4
  1178  0000BE                     sqrt@root:
  1179                           	callstack 0
  1180                           
  1181                           ; 4 bytes @ 0x11
  1182  0000BE                     	ds	4
  1183  0000C2                     ??___fltol:
  1184                           
  1185                           ; 1 bytes @ 0x15
  1186  0000C2                     	ds	4
  1187  0000C6                     ___fltol@sign1:
  1188                           	callstack 0
  1189                           
  1190                           ; 1 bytes @ 0x19
  1191  0000C6                     	ds	1
  1192  0000C7                     ___fltol@exp1:
  1193                           	callstack 0
  1194                           
  1195                           ; 1 bytes @ 0x1A
  1196  0000C7                     	ds	1
  1197  0000C8                     ??_main:
  1198                           
  1199                           ; 1 bytes @ 0x1B
  1200  0000C8                     	ds	4
  1201  0000CC                     _main$1571:
  1202                           	callstack 0
  1203                           
  1204                           ; 2 bytes @ 0x1F
  1205  0000CC                     	ds	2
  1206                           
  1207                           	psect	cstackCOMRAM
  1208  000001                     __pcstackCOMRAM:
  1209                           	callstack 0
  1210  000001                     ?i2___lmul:
  1211                           	callstack 0
  1212  000001                     i2___lmul@multiplier:
  1213                           	callstack 0
  1214                           
  1215                           ; 4 bytes @ 0x0
  1216  000001                     	ds	4
  1217  000005                     i2___lmul@multiplicand:
  1218                           	callstack 0
  1219                           
  1220                           ; 4 bytes @ 0x4
  1221  000005                     	ds	4
  1222  000009                     i2___lmul@product:
  1223                           	callstack 0
  1224                           
  1225                           ; 4 bytes @ 0x8
  1226  000009                     	ds	4
  1227  00000D                     ??_Inter_hi:
  1228                           
  1229                           ; 1 bytes @ 0xC
  1230  00000D                     	ds	2
  1231  00000F                     ??_Inter_lo:
  1232                           
  1233                           ; 1 bytes @ 0xE
  1234  00000F                     	ds	5
  1235  000014                     Inter_lo@tmrtmp:
  1236                           	callstack 0
  1237                           
  1238                           ; 2 bytes @ 0x13
  1239  000014                     	ds	2
  1240  000016                     ??_lcdNibble:
  1241  000016                     ??_ow_reset:
  1242  000016                     ??_read_byte:
  1243  000016                     ??_isdigit:
  1244  000016                     ?___wmul:
  1245                           	callstack 0
  1246  000016                     ?___lwdiv:
  1247                           	callstack 0
  1248  000016                     ?___lmul:
  1249                           	callstack 0
  1250  000016                     ?___lldiv:
  1251                           	callstack 0
  1252  000016                     ?___xxtofl:
  1253                           	callstack 0
  1254  000016                     write_eep@data:
  1255                           	callstack 0
  1256  000016                     key_press@key:
  1257                           	callstack 0
  1258  000016                     key_GetKey@key:
  1259                           	callstack 0
  1260  000016                     ds18b20_crc8@data_in:
  1261                           	callstack 0
  1262  000016                     write_bit@bitval:
  1263                           	callstack 0
  1264  000016                     read_eep@address:
  1265                           	callstack 0
  1266  000016                     ___wmul@multiplier:
  1267                           	callstack 0
  1268  000016                     ___lwdiv@dividend:
  1269                           	callstack 0
  1270  000016                     ___lmul@multiplier:
  1271                           	callstack 0
  1272  000016                     ___lldiv@dividend:
  1273                           	callstack 0
  1274  000016                     ___xxtofl@val:
  1275                           	callstack 0
  1276                           
  1277                           ; 4 bytes @ 0x15
  1278  000016                     	ds	1
  1279  000017                     ??_write_byte:
  1280  000017                     write_eep@address:
  1281                           	callstack 0
  1282  000017                     lcdNibble@nibble:
  1283                           	callstack 0
  1284  000017                     ds18b20_crc8@num_bytes:
  1285                           	callstack 0
  1286  000017                     ow_reset@presence:
  1287                           	callstack 0
  1288  000017                     _isdigit$2376:
  1289                           	callstack 0
  1290                           
  1291                           ; 1 bytes @ 0x16
  1292  000017                     	ds	1
  1293  000018                     lcdWrite@type:
  1294                           	callstack 0
  1295  000018                     ds18b20_crc8@bit_counter:
  1296                           	callstack 0
  1297  000018                     read_byte@val:
  1298                           	callstack 0
  1299  000018                     isdigit@c:
  1300                           	callstack 0
  1301  000018                     ___wmul@multiplicand:
  1302                           	callstack 0
  1303  000018                     ___lwdiv@divisor:
  1304                           	callstack 0
  1305                           
  1306                           ; 2 bytes @ 0x17
  1307  000018                     	ds	1
  1308  000019                     lcdWrite@byte:
  1309                           	callstack 0
  1310  000019                     ds18b20_crc8@data:
  1311                           	callstack 0
  1312  000019                     read_byte@i:
  1313                           	callstack 0
  1314  000019                     write_byte@val:
  1315                           	callstack 0
  1316                           
  1317                           ; 1 bytes @ 0x18
  1318  000019                     	ds	1
  1319  00001A                     ??_clearLCD:
  1320  00001A                     ??___xxtofl:
  1321  00001A                     lcd_gotoxy@y:
  1322                           	callstack 0
  1323  00001A                     lcd_putc@c:
  1324                           	callstack 0
  1325  00001A                     ds18b20_crc8@feedback_bit:
  1326                           	callstack 0
  1327  00001A                     write_byte@temp:
  1328                           	callstack 0
  1329  00001A                     ___lwdiv@counter:
  1330                           	callstack 0
  1331  00001A                     cgrom_char@symbol:
  1332                           	callstack 0
  1333  00001A                     ___wmul@product:
  1334                           	callstack 0
  1335  00001A                     ___lmul@multiplicand:
  1336                           	callstack 0
  1337  00001A                     ___lldiv@divisor:
  1338                           	callstack 0
  1339                           
  1340                           ; 4 bytes @ 0x19
  1341  00001A                     	ds	1
  1342  00001B                     ??_initLCD:
  1343  00001B                     lcd_gotoxy@x:
  1344                           	callstack 0
  1345  00001B                     ds18b20_crc8@loop_count:
  1346                           	callstack 0
  1347  00001B                     write_byte@i:
  1348                           	callstack 0
  1349  00001B                     ___lwdiv@quotient:
  1350                           	callstack 0
  1351                           
  1352                           ; 2 bytes @ 0x1A
  1353  00001B                     	ds	1
  1354  00001C                     lcd_gotoxy@address:
  1355                           	callstack 0
  1356  00001C                     cgrom_char@address:
  1357                           	callstack 0
  1358  00001C                     ds18b20_crc8@crc:
  1359                           	callstack 0
  1360                           
  1361                           ; 1 bytes @ 0x1B
  1362  00001C                     	ds	1
  1363  00001D                     ?___lwmod:
  1364                           	callstack 0
  1365  00001D                     cgrom_char@i:
  1366                           	callstack 0
  1367  00001D                     readTemp_Single@buf:
  1368                           	callstack 0
  1369  00001D                     lcdPrint@t:
  1370                           	callstack 0
  1371  00001D                     ___lwmod@dividend:
  1372                           	callstack 0
  1373                           
  1374                           ; 2 bytes @ 0x1C
  1375  00001D                     	ds	1
  1376  00001E                     ??_init_cpu:
  1377  00001E                     readTemp_Single@minus:
  1378                           	callstack 0
  1379  00001E                     ___xxtofl@sign:
  1380                           	callstack 0
  1381  00001E                     ___lmul@product:
  1382                           	callstack 0
  1383  00001E                     ___lldiv@quotient:
  1384                           	callstack 0
  1385                           
  1386                           ; 4 bytes @ 0x1D
  1387  00001E                     	ds	1
  1388  00001F                     ??_lcdPrint:
  1389  00001F                     readTemp_Single@time_flag:
  1390                           	callstack 0
  1391  00001F                     ___xxtofl@exp:
  1392                           	callstack 0
  1393  00001F                     ___lwmod@divisor:
  1394                           	callstack 0
  1395                           
  1396                           ; 2 bytes @ 0x1E
  1397  00001F                     	ds	1
  1398  000020                     readTemp_Single@timer_val:
  1399                           	callstack 0
  1400  000020                     ___xxtofl@arg:
  1401                           	callstack 0
  1402                           
  1403                           ; 4 bytes @ 0x1F
  1404  000020                     	ds	1
  1405  000021                     ??_readTemp_Single:
  1406  000021                     ___lwmod@counter:
  1407                           	callstack 0
  1408                           
  1409                           ; 1 bytes @ 0x20
  1410  000021                     	ds	1
  1411  000022                     ?_sprintf:
  1412                           	callstack 0
  1413  000022                     sprintf@sp:
  1414                           	callstack 0
  1415  000022                     ___lldiv@counter:
  1416                           	callstack 0
  1417                           
  1418                           ; 1 bytes @ 0x21
  1419  000022                     	ds	1
  1420  000023                     ?_calc_power:
  1421                           	callstack 0
  1422  000023                     readTemp_Single@tmp:
  1423                           	callstack 0
  1424  000023                     sprintf@f:
  1425                           	callstack 0
  1426  000023                     calc_power@res:
  1427                           	callstack 0
  1428                           
  1429                           ; 4 bytes @ 0x22
  1430  000023                     	ds	1
  1431  000024                     ?_sqrt:
  1432                           	callstack 0
  1433  000024                     readTemp_Single@i:
  1434                           	callstack 0
  1435  000024                     sqrt@a:
  1436                           	callstack 0
  1437                           
  1438                           ; 4 bytes @ 0x23
  1439  000024                     	ds	1
  1440  000025                     readTemp_Single@temp:
  1441                           	callstack 0
  1442                           
  1443                           ; 2 bytes @ 0x24
  1444  000025                     	ds	2
  1445  000027                     calc_power@u_rl:
  1446                           	callstack 0
  1447                           
  1448                           ; 2 bytes @ 0x26
  1449  000027                     	ds	1
  1450  000028                     ??_sqrt:
  1451                           
  1452                           ; 1 bytes @ 0x27
  1453  000028                     	ds	1
  1454  000029                     
  1455                           ; 1 bytes @ 0x28
  1456  000029                     	ds	2
  1457  00002B                     ??_sprintf:
  1458                           
  1459                           ; 1 bytes @ 0x2A
  1460  00002B                     	ds	1
  1461  00002C                     ?___fltol:
  1462                           	callstack 0
  1463  00002C                     ___fltol@f1:
  1464                           	callstack 0
  1465                           
  1466                           ; 4 bytes @ 0x2B
  1467  00002C                     	ds	3
  1468  00002F                     
  1469                           ; 1 bytes @ 0x2E
  1470  00002F                     	ds	1
  1471                           
  1472 ;;
  1473 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1474 ;;
  1475 ;; *************** function _main *****************
  1476 ;; Defined at:
  1477 ;;		line 93 in file "main.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 3F/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1491 ;;      Params:         0       0       0       0       0       0       0
  1492 ;;      Locals:         0       2       0       0       0       0       0
  1493 ;;      Temps:          0       4       0       0       0       0       0
  1494 ;;      Totals:         0       6       0       0       0       0       0
  1495 ;;Total ram usage:        6 bytes
  1496 ;; Hardware stack levels required when called: 8
  1497 ;; This function calls:
  1498 ;;		_EncPoll
  1499 ;;		___fltol
  1500 ;;		___lldiv
  1501 ;;		___lmul
  1502 ;;		___lwdiv
  1503 ;;		___wmul
  1504 ;;		___xxtofl
  1505 ;;		_calc_power
  1506 ;;		_clearLCD
  1507 ;;		_init_cpu
  1508 ;;		_key_GetKey
  1509 ;;		_key_press
  1510 ;;		_lcdPrint
  1511 ;;		_lcd_gotoxy
  1512 ;;		_lcd_preload
  1513 ;;		_lcd_putc
  1514 ;;		_readTemp_Single
  1515 ;;		_read_eep
  1516 ;;		_show_lcd_main
  1517 ;;		_sprintf
  1518 ;;		_sqrt
  1519 ;;		_write_eep
  1520 ;; This function is called by:
  1521 ;;		Startup code after reset
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text0
  1526  0000D4                     __ptext0:
  1527                           	callstack 0
  1528  0000D4                     _main:
  1529                           	callstack 23
  1530                           
  1531                           ;main.c: 95: static __bit whole_dec = 0;;main.c: 96: static __bit alarm_enable = 0;;main
      +                          .c: 97: static uint8_t powerOFF = 0;;main.c: 100: init_cpu();
  1532                           
  1533                           ;incstack = 0
  1534  0000D4  ECA2  F008         	call	_init_cpu	;wreg free
  1535                           
  1536                           ;main.c: 102: _delay((unsigned long)((10)*(64000000/4000.0)));
  1537  0000D8  0ED0               	movlw	208
  1538  0000DA  0100               	movlb	0	; () banked
  1539  0000DC  6FC8               	movwf	??_main& (0+255),b
  1540  0000DE  0EC9               	movlw	201
  1541  0000E0                     u5467:
  1542  0000E0  2EE8               	decfsz	wreg,f,c
  1543  0000E2  D7FE               	bra	u5467
  1544  0000E4  2FC8               	decfsz	??_main& (0+255),f,b
  1545  0000E6  D7FC               	bra	u5467
  1546  0000E8  F000 F000          	nop2	
  1547                           
  1548                           ;main.c: 105: lcd_gotoxy(1, 1);
  1549  0000EC  0E01               	movlw	1
  1550  0000EE  6E1A               	movwf	lcd_gotoxy@y^0,c
  1551  0000F0  EC80  F00E         	call	_lcd_gotoxy
  1552                           
  1553                           ;main.c: 106: lcdPrint("-PHASE DIMMER STAB-");
  1554  0000F4  0EFC               	movlw	low STR_1
  1555  0000F6  6E1D               	movwf	lcdPrint@t^0,c
  1556  0000F8  0E7E               	movlw	high STR_1
  1557  0000FA  6E1E               	movwf	(lcdPrint@t+1)^0,c
  1558  0000FC  EC41  F00B         	call	_lcdPrint	;wreg free
  1559                           
  1560                           ;main.c: 107: lcd_gotoxy(1, 2);
  1561  000100  ECA5  F004         	call	PL38	;call to abstracted procedure
  1562  000104  EC80  F00E         	call	_lcd_gotoxy
  1563                           
  1564                           ;main.c: 108: sprintf(TxtBuf, "(c)Ivan_fd v%s", "18.10.22");
  1565  000108  0E8B               	movlw	low _TxtBuf
  1566  00010A  6E22               	movwf	sprintf@sp^0,c
  1567  00010C  0E59               	movlw	low STR_2
  1568  00010E  6E23               	movwf	sprintf@f^0,c
  1569  000110  0E7F               	movlw	high STR_2
  1570  000112  6E24               	movwf	(sprintf@f+1)^0,c
  1571  000114  0ED9               	movlw	low STR_3
  1572  000116  6E25               	movwf	(?_sprintf+3)^0,c
  1573  000118  0E7F               	movlw	high STR_3
  1574  00011A  6E26               	movwf	(?_sprintf+4)^0,c
  1575  00011C  EC61  F006         	call	_sprintf	;wreg free
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 109: lcdPrint(TxtBuf);
  1579  000120  EC42  F006         	call	PL30	;call to abstracted procedure
  1580  000124  EC41  F00B         	call	_lcdPrint	;wreg free
  1581                           
  1582                           ;main.c: 110: lcd_gotoxy(1, 3);
  1583  000128  ECA2  F004         	call	PL34	;call to abstracted procedure
  1584  00012C  EC80  F00E         	call	_lcd_gotoxy
  1585                           
  1586                           ;main.c: 111: sprintf(TxtBuf, "%s %s", compile_date, compile_time);
  1587  000130  0E8B               	movlw	low _TxtBuf
  1588  000132  6E22               	movwf	sprintf@sp^0,c
  1589  000134  0EF2               	movlw	low STR_4
  1590  000136  6E23               	movwf	sprintf@f^0,c
  1591  000138  0E7F               	movlw	high STR_4
  1592  00013A  6E24               	movwf	(sprintf@f+1)^0,c
  1593  00013C  0E31               	movlw	low _compile_date
  1594  00013E  6E25               	movwf	(?_sprintf+3)^0,c
  1595  000140  0E7E               	movlw	high _compile_date
  1596  000142  6E26               	movwf	(?_sprintf+4)^0,c
  1597  000144  0E3D               	movlw	low _compile_time
  1598  000146  6E27               	movwf	(?_sprintf+5)^0,c
  1599  000148  0E7E               	movlw	high _compile_time
  1600  00014A  6E28               	movwf	(?_sprintf+6)^0,c
  1601  00014C  EC61  F006         	call	_sprintf	;wreg free
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 112: lcdPrint(TxtBuf);
  1605  000150  EC42  F006         	call	PL30	;call to abstracted procedure
  1606  000154  EC41  F00B         	call	_lcdPrint	;wreg free
  1607                           
  1608                           ;main.c: 115: _delay((unsigned long)((2000)*(64000000/4000.0)));
  1609  000158  0EA3               	movlw	163
  1610  00015A  0100               	movlb	0	; () banked
  1611  00015C  6FC9               	movwf	(??_main+1)& (0+255),b
  1612  00015E  0E57               	movlw	87
  1613  000160  6FC8               	movwf	??_main& (0+255),b
  1614  000162  0E02               	movlw	2
  1615  000164                     u5477:
  1616  000164  2EE8               	decfsz	wreg,f,c
  1617  000166  D7FE               	bra	u5477
  1618  000168  2FC8               	decfsz	??_main& (0+255),f,b
  1619  00016A  D7FC               	bra	u5477
  1620  00016C  2FC9               	decfsz	(??_main+1)& (0+255),f,b
  1621  00016E  D7FA               	bra	u5477
  1622  000170  F000               	nop	
  1623  000172  0004               	clrwdt		;# 
  1624                           
  1625                           ;main.c: 117: clearLCD();
  1626  000174  EC52  F00F         	call	_clearLCD	;wreg free
  1627                           
  1628                           ;main.c: 118: AlarmTemp = read_eep(3);
  1629  000178  6A17               	clrf	(read_eep@address+1)^0,c
  1630  00017A  0E03               	movlw	3
  1631  00017C  6E16               	movwf	read_eep@address^0,c
  1632  00017E  EC5E  F00F         	call	_read_eep	;wreg free
  1633  000182  0100               	movlb	0	; () banked
  1634  000184  6F87               	movwf	_AlarmTemp& (0+255),b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 119: TempEn = read_eep(4);
  1638  000186  6A17               	clrf	(read_eep@address+1)^0,c
  1639  000188  0E04               	movlw	4
  1640  00018A  6E16               	movwf	read_eep@address^0,c
  1641  00018C  EC5E  F00F         	call	_read_eep	;wreg free
  1642  000190  0100               	movlb	0	; () banked
  1643  000192  6F85               	movwf	_TempEn& (0+255),b
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 120: U_Out = read_eep(2);
  1647  000194  6A17               	clrf	(read_eep@address+1)^0,c
  1648  000196  0E02               	movlw	2
  1649  000198  6E16               	movwf	read_eep@address^0,c
  1650  00019A  EC5E  F00F         	call	_read_eep	;wreg free
  1651  00019E  0100               	movlb	0	; () banked
  1652  0001A0  6F72               	movwf	_U_Out& (0+255),b
  1653  0001A2  6B73               	clrf	(_U_Out+1)& (0+255),b
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 121: EncData = U_Out;
  1657  0001A4  DBB8               	call	PL18	;call to abstracted procedure
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 122: r_whole = read_eep(0);
  1661  0001A6  6A17               	clrf	(read_eep@address+1)^0,c
  1662  0001A8  6A16               	clrf	read_eep@address^0,c
  1663  0001AA  EC5E  F00F         	call	_read_eep	;wreg free
  1664  0001AE  0100               	movlb	0	; () banked
  1665  0001B0  6F7F               	movwf	_r_whole& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 123: r_dec = read_eep(1);
  1669  0001B2  6A17               	clrf	(read_eep@address+1)^0,c
  1670  0001B4  0E01               	movlw	1
  1671  0001B6  6E16               	movwf	read_eep@address^0,c
  1672  0001B8  EC5E  F00F         	call	_read_eep	;wreg free
  1673  0001BC  0100               	movlb	0	; () banked
  1674  0001BE  6F7E               	movwf	_r_dec& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 124: t_res = (uint32_t) (r_whole * 1000 + r_dec * 10);
  1678  0001C0  C07F  F016         	movff	_r_whole,___wmul@multiplier
  1679  0001C4  6A17               	clrf	(___wmul@multiplier+1)^0,c
  1680  0001C6  0E03               	movlw	3
  1681  0001C8  6E19               	movwf	(___wmul@multiplicand+1)^0,c
  1682  0001CA  0EE8               	movlw	232
  1683  0001CC  6E18               	movwf	___wmul@multiplicand^0,c
  1684  0001CE  EC11  F00F         	call	___wmul	;wreg free
  1685  0001D2  0100               	movlb	0	; () banked
  1686  0001D4  DBC4               	call	PL42	;call to abstracted procedure
  1687  0001D6  5016               	movf	?___wmul^0,w,c
  1688  0001D8  27C8               	addwf	??_main& (0+255),f,b
  1689  0001DA  5017               	movf	(?___wmul+1)^0,w,c
  1690  0001DC  23C9               	addwfc	(??_main+1)& (0+255),f,b
  1691  0001DE  C0C8  F060         	movff	??_main,_t_res
  1692  0001E2  C0C9  F061         	movff	??_main+1,_t_res+1
  1693  0001E6  0E00               	movlw	0
  1694  0001E8  BF61               	btfsc	(_t_res+1)& (0+255),7,b
  1695  0001EA  0EFF               	movlw	-1
  1696  0001EC  6F62               	movwf	(_t_res+2)& (0+255),b
  1697  0001EE  6F63               	movwf	(_t_res+3)& (0+255),b
  1698  0001F0                     l544:
  1699  0001F0  0004               	clrwdt		;# 
  1700                           
  1701                           ;main.c: 128: if (read_key) {
  1702  0001F2  0100               	movlb	0	; () banked
  1703  0001F4  5189               	movf	_read_key& (0+255),w,b
  1704  0001F6  E003               	bz	l5600
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 129: key_press();
  1708  0001F8  EC62  F00E         	call	_key_press	;wreg free
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 130: read_key = 0;
  1712  0001FC  6B89               	clrf	_read_key& (0+255),b
  1713  0001FE                     l5600:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 131: };main.c: 132: pressed_key = key_GetKey();
  1717  0001FE  EC6D  F00F         	call	_key_GetKey	;wreg free
  1718  000202  6F82               	movwf	_pressed_key& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 134: oldOldTemperature = temperature;
  1722  000204  C0A9  F076         	movff	_temperature,_oldOldTemperature
  1723  000208  C0AA  F077         	movff	_temperature+1,_oldOldTemperature+1
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 135: isTempReady = readTemp_Single(&temperature, &minus, &time_flag, (uint8_t *
      +                          ) & timer_val);
  1727  00020C  0EA9               	movlw	low _temperature
  1728  00020E  6E1D               	movwf	readTemp_Single@buf^0,c
  1729  000210  0EAB               	movlw	low _minus
  1730  000212  6E1E               	movwf	readTemp_Single@minus^0,c
  1731  000214  0EAC               	movlw	low _time_flag
  1732  000216  6E1F               	movwf	readTemp_Single@time_flag^0,c
  1733  000218  0E45               	movlw	low _timer_val
  1734  00021A  6E20               	movwf	readTemp_Single@timer_val^0,c
  1735  00021C  EC40  F00A         	call	_readTemp_Single	;wreg free
  1736  000220  0100               	movlb	0	; () banked
  1737  000222  6F83               	movwf	_isTempReady& (0+255),b
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 137: if ((oldTemperature != temperature) && (enTmp == 0)) {
  1741  000224  51A9               	movf	_temperature& (0+255),w,b
  1742  000226  1978               	xorwf	_oldTemperature& (0+255),w,b
  1743  000228  E103               	bnz	u4860
  1744  00022A  51AA               	movf	(_temperature+1)& (0+255),w,b
  1745  00022C  1979               	xorwf	(_oldTemperature+1)& (0+255),w,b
  1746  00022E  E007               	bz	l5612
  1747  000230                     u4860:
  1748                           
  1749                           ; BSR set to: 0
  1750  000230  BA47               	btfsc	(_enTmp/(0+8))^0,_enTmp& (0+7),c
  1751  000232  D005               	goto	l5612
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 138: oldTemperature = temperature;
  1755  000234  C0A9  F078         	movff	_temperature,_oldTemperature
  1756  000238  C0AA  F079         	movff	_temperature+1,_oldTemperature+1
  1757                           
  1758                           ;main.c: 139: enTmp = 1;
  1759  00023C  8A47               	bsf	(_enTmp/(0+8))^0,_enTmp& (0+7),c
  1760  00023E                     l5612:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 140: };main.c: 142: if ((isTempReady == 1) && (enTmp))
  1764  00023E  0583               	decf	_isTempReady& (0+255),w,b
  1765  000240  E102               	bnz	l5618
  1766                           
  1767                           ; BSR set to: 0
  1768  000242  BA47               	btfsc	(_enTmp/(0+8))^0,_enTmp& (0+7),c
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;main.c: 143: countTmp++;
  1772  000244  2B88               	incf	_countTmp& (0+255),f,b
  1773  000246                     l5618:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 145: if (countTmp >= 3) {
  1777  000246  0E02               	movlw	2
  1778  000248  6588               	cpfsgt	_countTmp& (0+255),b
  1779  00024A  D003               	goto	l548
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 146: countTmp = 0;
  1783  00024C  6B88               	clrf	_countTmp& (0+255),b
  1784                           
  1785                           ;main.c: 147: enTmp = 0;
  1786  00024E  9A47               	bcf	(_enTmp/(0+8))^0,_enTmp& (0+7),c
  1787                           
  1788                           ;main.c: 148: } else
  1789  000250  D004               	goto	l5622
  1790  000252                     l548:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 149: temperature = oldOldTemperature;
  1794  000252  C076  F0A9         	movff	_oldOldTemperature,_temperature
  1795  000256  C077  F0AA         	movff	_oldOldTemperature+1,_temperature+1
  1796  00025A                     l5622:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 160: if (TempEn) {
  1800  00025A  5185               	movf	_TempEn& (0+255),w,b
  1801  00025C  E018               	bz	l5630
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 161: if ((temperature / 10) >= AlarmTemp) {
  1805  00025E  5187               	movf	_AlarmTemp& (0+255),w,b
  1806  000260  6FC8               	movwf	??_main& (0+255),b
  1807  000262  6BC9               	clrf	(??_main+1)& (0+255),b
  1808  000264  C0A9  F016         	movff	_temperature,___lwdiv@dividend
  1809  000268  C0AA  F017         	movff	_temperature+1,___lwdiv@dividend+1
  1810  00026C  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  1811  00026E  0E0A               	movlw	10
  1812  000270  6E18               	movwf	___lwdiv@divisor^0,c
  1813  000272  EC9A  F00D         	call	___lwdiv	;wreg free
  1814  000276  0100               	movlb	0	; () banked
  1815  000278  51C8               	movf	??_main& (0+255),w,b
  1816  00027A  5C16               	subwf	?___lwdiv^0,w,c
  1817  00027C  51C9               	movf	(??_main+1)& (0+255),w,b
  1818  00027E  5817               	subwfb	(?___lwdiv+1)^0,w,c
  1819  000280  E306               	bnc	l5630
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 162: TMR1ON = 0;
  1823  000282  90CD               	bcf	4045,0,c	;volatile
  1824                           
  1825                           ;main.c: 163: LATAbits.LA5 = 0;
  1826  000284  9A89               	bcf	137,5,c	;volatile
  1827                           
  1828                           ;main.c: 164: ;;main.c: 165: power_100 = 0;
  1829  000286  9C47               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 166: sound_enable = 1;
  1833  000288  0E01               	movlw	1
  1834  00028A  6E41               	movwf	_sound_enable^0,c
  1835                           
  1836                           ;main.c: 167: powerOFF = 1;
  1837  00028C  6F7C               	movwf	main@powerOFF& (0+255),b
  1838  00028E                     l5630:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 168: };main.c: 169: };main.c: 171: if (isTempReady == 1)
  1842  00028E  0583               	decf	_isTempReady& (0+255),w,b
  1843  000290  E102               	bnz	l5634
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 172: isTemp = 1;
  1847  000292  0E01               	movlw	1
  1848  000294  6E3D               	movwf	_isTemp^0,c
  1849  000296                     l5634:
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;main.c: 173: if (isTempReady == 3)
  1853  000296  0E03               	movlw	3
  1854  000298  1983               	xorwf	_isTempReady& (0+255),w,b
  1855  00029A  E102               	bnz	l5638
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 174: isTemp = 3;
  1859  00029C  0E03               	movlw	3
  1860  00029E  6E3D               	movwf	_isTemp^0,c
  1861  0002A0                     l5638:
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 177: count_enc += EncPoll();
  1865  0002A0  ECCE  F00E         	call	_EncPoll	;wreg free
  1866  0002A4  2780               	addwf	_count_enc& (0+255),f,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;main.c: 178: if (((count_enc % 4) == 0) && !(count_enc == 0)) {
  1870  0002A6  C080  F0C8         	movff	_count_enc,??_main
  1871  0002AA  0E03               	movlw	3
  1872  0002AC  17C8               	andwf	??_main& (0+255),f,b
  1873  0002AE  E11A               	bnz	l5662
  1874                           
  1875                           ; BSR set to: 0
  1876  0002B0  5180               	movf	_count_enc& (0+255),w,b
  1877  0002B2  E018               	bz	l5662
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 179: if ((count_enc & (1 << (7)))) {
  1881  0002B4  AF80               	btfss	_count_enc& (0+255),7,b
  1882  0002B6  D00A               	goto	l555
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 180: if (inc_data)
  1886  0002B8  A447               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  1887  0002BA  D004               	goto	l5650
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 181: EncData -= 10;
  1891  0002BC  0EF6               	movlw	246
  1892  0002BE  2770               	addwf	_EncData& (0+255),f,b
  1893  0002C0  0EFF               	movlw	255
  1894  0002C2  D009               	goto	L1
  1895  0002C4                     l5650:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 182: else{;main.c: 183: EncData--;
  1899  0002C4  0770               	decf	_EncData& (0+255),f,b
  1900  0002C6  A0D8               	btfss	status,0,c
  1901  0002C8  0771               	decf	(_EncData+1)& (0+255),f,b
  1902  0002CA  D009               	goto	l5656
  1903  0002CC                     l555:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 187: if (inc_data)
  1907  0002CC  A447               	btfss	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  1908  0002CE  D005               	goto	l5654
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 188: EncData += 10;
  1912  0002D0  0E0A               	movlw	10
  1913  0002D2  2770               	addwf	_EncData& (0+255),f,b
  1914  0002D4  0E00               	movlw	0
  1915  0002D6                     L1:
  1916  0002D6  2371               	addwfc	(_EncData+1)& (0+255),f,b
  1917  0002D8  D002               	goto	l5656
  1918  0002DA                     l5654:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 189: else{;main.c: 190: EncData++;
  1922  0002DA  4B70               	infsnz	_EncData& (0+255),f,b
  1923  0002DC  2B71               	incf	(_EncData+1)& (0+255),f,b
  1924  0002DE                     l5656:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 195: is_power = 0;
  1928  0002DE  6B80               	clrf	_count_enc& (0+255),b
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 196: show_tp = 1;
  1932  0002E0  8647               	bsf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 197: tick_t1_1 = 0;
  1936  0002E2  6A42               	clrf	_tick_t1_1^0,c
  1937  0002E4                     l5662:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 198: };main.c: 201: if (!getU && (zero == 10)) {
  1941  0002E4  503E               	movf	_getU^0,w,c
  1942  0002E6  E170               	bnz	l5692
  1943                           
  1944                           ; BSR set to: 0
  1945  0002E8  0E0A               	movlw	10
  1946  0002EA  183F               	xorwf	_zero^0,w,c
  1947  0002EC  E16D               	bnz	l5692
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 202: sqrtU_sum = U_summ / cnt_adc;
  1951  0002EE  C06C  F016         	movff	_U_summ,___lldiv@dividend
  1952  0002F2  C06D  F017         	movff	_U_summ+1,___lldiv@dividend+1
  1953  0002F6  C06E  F018         	movff	_U_summ+2,___lldiv@dividend+2
  1954  0002FA  C06F  F019         	movff	_U_summ+3,___lldiv@dividend+3
  1955  0002FE  DB28               	call	PL40	;call to abstracted procedure
  1956  000300  ECE4  F00C         	call	___lldiv	;wreg free
  1957                           
  1958                           ;main.c: 203: U_real = (uint16_t)sqrt(sqrtU_sum);
  1959  000304  DAEE               	call	PL8	;call to abstracted procedure
  1960  000306  ECBA  F009         	call	___xxtofl
  1961  00030A  DB13               	call	PL22	;call to abstracted procedure
  1962  00030C  ECCF  F007         	call	_sqrt	;wreg free
  1963  000310  DB07               	call	PL20	;call to abstracted procedure
  1964  000312  ECB6  F00B         	call	___fltol	;wreg free
  1965  000316  C02C  F074         	movff	?___fltol,_U_real
  1966  00031A  C02D  F075         	movff	?___fltol+1,_U_real+1
  1967                           
  1968                           ;main.c: 205: sqrtU_sum = U_summTriac / cnt_adc;
  1969  00031E  C068  F016         	movff	_U_summTriac,___lldiv@dividend
  1970  000322  C069  F017         	movff	_U_summTriac+1,___lldiv@dividend+1
  1971  000326  C06A  F018         	movff	_U_summTriac+2,___lldiv@dividend+2
  1972  00032A  C06B  F019         	movff	_U_summTriac+3,___lldiv@dividend+3
  1973  00032E  DB10               	call	PL40	;call to abstracted procedure
  1974  000330  ECE4  F00C         	call	___lldiv	;wreg free
  1975                           
  1976                           ;main.c: 206: U_Out = (uint16_t)sqrt(sqrtU_sum);
  1977  000334  DAD6               	call	PL8	;call to abstracted procedure
  1978  000336  ECBA  F009         	call	___xxtofl
  1979  00033A  DAFB               	call	PL22	;call to abstracted procedure
  1980  00033C  ECCF  F007         	call	_sqrt	;wreg free
  1981  000340  DAEF               	call	PL20	;call to abstracted procedure
  1982  000342  ECB6  F00B         	call	___fltol	;wreg free
  1983  000346  C02C  F072         	movff	?___fltol,_U_Out
  1984  00034A  C02D  F073         	movff	?___fltol+1,_U_Out+1
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 208: U_summTriac = 0;
  1988  00034E  6B68               	clrf	_U_summTriac& (0+255),b
  1989  000350  6B69               	clrf	(_U_summTriac+1)& (0+255),b
  1990  000352  6B6A               	clrf	(_U_summTriac+2)& (0+255),b
  1991  000354  6B6B               	clrf	(_U_summTriac+3)& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 209: U_summ = 0;
  1995  000356  6B6C               	clrf	_U_summ& (0+255),b
  1996  000358  6B6D               	clrf	(_U_summ+1)& (0+255),b
  1997  00035A  6B6E               	clrf	(_U_summ+2)& (0+255),b
  1998  00035C  6B6F               	clrf	(_U_summ+3)& (0+255),b
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;main.c: 210: getU = 1;
  2002  00035E  0E01               	movlw	1
  2003  000360  6E3E               	movwf	_getU^0,c
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;main.c: 213: if (u_set > U_real) {
  2007  000362  5181               	movf	_u_set& (0+255),w,b
  2008  000364  5D74               	subwf	_U_real& (0+255),w,b
  2009  000366  0E00               	movlw	0
  2010  000368  5975               	subwfb	(_U_real+1)& (0+255),w,b
  2011  00036A  E202               	bc	l562
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;main.c: 214: is_stab = 0;
  2015  00036C  9847               	bcf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2016                           
  2017                           ;main.c: 215: } else
  2018  00036E  D001               	goto	l5678
  2019  000370                     l562:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 216: is_stab = 1;
  2023  000370  8847               	bsf	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  2024  000372                     l5678:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;main.c: 218: if(powerOFF)
  2028  000372  517C               	movf	main@powerOFF& (0+255),w,b
  2029  000374  E001               	bz	l564
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;main.c: 219: TMR1ON = 0;
  2033  000376  90CD               	bcf	4045,0,c	;volatile
  2034  000378                     l564:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;main.c: 221: if(power_100){
  2038  000378  AC47               	btfss	(_power_100/(0+8))^0,_power_100& (0+7),c
  2039  00037A  D002               	goto	l5684
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 222: TMR1ON = 0;
  2043  00037C  90CD               	bcf	4045,0,c	;volatile
  2044                           
  2045                           ;main.c: 223: LATAbits.LA5 = 1;
  2046  00037E  8A89               	bsf	137,5,c	;volatile
  2047  000380                     l5684:
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;main.c: 224: };main.c: 227: LATAbits.LA3 = !LATAbits.LA3;
  2051  000380  B689               	btfsc	137,3,c	;volatile
  2052  000382  D003               	goto	u5050
  2053  000384  6BC8               	clrf	??_main& (0+255),b
  2054  000386  2BC8               	incf	??_main& (0+255),f,b
  2055  000388  D002               	goto	u5068
  2056  00038A                     u5050:
  2057  00038A  0100               	movlb	0	; () banked
  2058  00038C  6BC8               	clrf	??_main& (0+255),b
  2059  00038E                     u5068:
  2060  00038E  47C8               	rlncf	??_main& (0+255),f,b
  2061  000390  47C8               	rlncf	??_main& (0+255),f,b
  2062  000392  47C8               	rlncf	??_main& (0+255),f,b
  2063  000394  5089               	movf	137,w,c	;volatile
  2064  000396  19C8               	xorwf	??_main& (0+255),w,b
  2065  000398  0BF7               	andlw	-9
  2066  00039A  19C8               	xorwf	??_main& (0+255),w,b
  2067  00039C  6E89               	movwf	137,c	;volatile
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 228: if (power_100)
  2071  00039E  AC47               	btfss	(_power_100/(0+8))^0,_power_100& (0+7),c
  2072  0003A0  D008               	goto	l5690
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;main.c: 229: watt_disp = calc_power(t_res, U_real);
  2076  0003A2  DAB0               	call	PL12	;call to abstracted procedure
  2077  0003A4  C074  F027         	movff	_U_real,calc_power@u_rl
  2078  0003A8  C075  F028         	movff	_U_real+1,calc_power@u_rl+1
  2079  0003AC  EC04  F00C         	call	_calc_power	;wreg free
  2080  0003B0  D007               	goto	L2
  2081  0003B2                     l5690:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 230: else;main.c: 231: watt_disp = calc_power(t_res, U_Out);
  2085  0003B2  DAA8               	call	PL12	;call to abstracted procedure
  2086  0003B4  C072  F027         	movff	_U_Out,calc_power@u_rl
  2087  0003B8  C073  F028         	movff	_U_Out+1,calc_power@u_rl+1
  2088  0003BC  EC04  F00C         	call	_calc_power	;wreg free
  2089  0003C0                     L2:
  2090  0003C0  C023  F036         	movff	?_calc_power,_watt_disp
  2091  0003C4  C024  F037         	movff	?_calc_power+1,_watt_disp+1
  2092  0003C8                     l5692:
  2093                           
  2094                           ;main.c: 232: };main.c: 234: if (stab > 99) {
  2095  0003C8  0E63               	movlw	99
  2096  0003CA  0100               	movlb	0	; () banked
  2097  0003CC  65D0               	cpfsgt	_stab& (0+255),b
  2098  0003CE  D020               	goto	l5708
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;main.c: 235: stab = 0;
  2102  0003D0  6BD0               	clrf	_stab& (0+255),b
  2103                           
  2104                           ;main.c: 237: if (power_100 || powerOFF)
  2105  0003D2  BC47               	btfsc	(_power_100/(0+8))^0,_power_100& (0+7),c
  2106  0003D4  D002               	goto	u5100
  2107                           
  2108                           ; BSR set to: 0
  2109  0003D6  517C               	movf	main@powerOFF& (0+255),w,b
  2110  0003D8  E002               	bz	l5700
  2111  0003DA                     u5100:
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;main.c: 238: angleU = 18000;
  2115  0003DA  DAD3               	call	PL82	;call to abstracted procedure
  2116  0003DC  D00A               	goto	l572
  2117  0003DE                     l5700:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;main.c: 239: else;main.c: 240: angleU = angleU - (u_set - U_Out);
  2121  0003DE  5181               	movf	_u_set& (0+255),w,b
  2122  0003E0  5D72               	subwf	_U_Out& (0+255),w,b
  2123  0003E2  6FC8               	movwf	??_main& (0+255),b
  2124  0003E4  0E00               	movlw	0
  2125  0003E6  5973               	subwfb	(_U_Out+1)& (0+255),w,b
  2126  0003E8  6FC9               	movwf	(??_main+1)& (0+255),b
  2127  0003EA  51C8               	movf	??_main& (0+255),w,b
  2128  0003EC  27CE               	addwf	_angleU& (0+255),f,b
  2129  0003EE  51C9               	movf	(??_main+1)& (0+255),w,b
  2130  0003F0  23CF               	addwfc	(_angleU+1)& (0+255),f,b
  2131  0003F2                     l572:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;main.c: 242: if (angleU < 1200)
  2135  0003F2  0EB0               	movlw	176
  2136  0003F4  5DCE               	subwf	_angleU& (0+255),w,b
  2137  0003F6  0E04               	movlw	4
  2138  0003F8  59CF               	subwfb	(_angleU+1)& (0+255),w,b
  2139  0003FA  E204               	bc	l5704
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;main.c: 243: angleU = 1200;
  2143  0003FC  0E04               	movlw	4
  2144  0003FE  6FCF               	movwf	(_angleU+1)& (0+255),b
  2145  000400  0EB0               	movlw	176
  2146  000402  6FCE               	movwf	_angleU& (0+255),b
  2147  000404                     l5704:
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;main.c: 244: if (angleU > 18000)
  2151  000404  0E51               	movlw	81
  2152  000406  5DCE               	subwf	_angleU& (0+255),w,b
  2153  000408  0E46               	movlw	70
  2154  00040A  59CF               	subwfb	(_angleU+1)& (0+255),w,b
  2155  00040C  E301               	bnc	l5708
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 245: angleU = 18000;
  2159  00040E  DAB9               	call	PL82	;call to abstracted procedure
  2160  000410                     l5708:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 246: };main.c: 248: angle_U_ocr = angleU;
  2164  000410  C0CE  F048         	movff	_angleU,_angle_U_ocr
  2165  000414  C0CF  F049         	movff	_angleU+1,_angle_U_ocr+1
  2166                           
  2167                           ;main.c: 251: switch (sel_main) {
  2168  000418  D254               	goto	l6006
  2169  00041A                     l5710:
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;main.c: 255: if (tick_t1 >= 6) {
  2173  00041A  0E05               	movlw	5
  2174  00041C  658A               	cpfsgt	_tick_t1& (0+255),b
  2175  00041E  D003               	goto	l5716
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 256: tick_t1 = 0;
  2179  000420  6B8A               	clrf	_tick_t1& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 257: show_lcd_main();
  2183  000422  ECCB  F004         	call	_show_lcd_main	;wreg free
  2184  000426                     l5716:
  2185                           
  2186                           ;main.c: 258: };main.c: 262: if (EncData < 0)
  2187  000426  0100               	movlb	0	; () banked
  2188  000428  AF71               	btfss	(_EncData+1)& (0+255),7,b
  2189  00042A  D003               	goto	l5720
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 263: EncData = 0;
  2193  00042C  6B70               	clrf	_EncData& (0+255),b
  2194  00042E  6B71               	clrf	(_EncData+1)& (0+255),b
  2195  000430  D00A               	goto	l5724
  2196  000432                     l5720:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;main.c: 264: else if (EncData > 250)
  2200  000432  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2201  000434  D008               	goto	l5724
  2202  000436  5171               	movf	(_EncData+1)& (0+255),w,b
  2203  000438  E103               	bnz	u5150
  2204  00043A  0EFB               	movlw	251
  2205  00043C  5D70               	subwf	_EncData& (0+255),w,b
  2206  00043E  E303               	bnc	l5724
  2207  000440                     u5150:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;main.c: 265: EncData = 250;
  2211  000440  6B71               	clrf	(_EncData+1)& (0+255),b
  2212  000442  0EFA               	movlw	250
  2213  000444  6F70               	movwf	_EncData& (0+255),b
  2214  000446                     l5724:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 266: u_set = (uint8_t)EncData;
  2218  000446  C070  F081         	movff	_EncData,_u_set
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;main.c: 272: if (pressed_key == 1) {
  2222  00044A  0582               	decf	_pressed_key& (0+255),w,b
  2223  00044C  E10C               	bnz	l5742
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;main.c: 274: lcd_preload();
  2227  00044E  EC9A  F00C         	call	_lcd_preload	;wreg free
  2228                           
  2229                           ;main.c: 276: is_power = 1;
  2230  000452  C070  F072         	movff	_EncData,_U_Out
  2231  000456  C071  F073         	movff	_EncData+1,_U_Out+1
  2232                           
  2233                           ;main.c: 277: power_100 = 0;
  2234  00045A  9C47               	bcf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2235                           
  2236                           ;main.c: 278: powerOFF = 0;
  2237  00045C  0100               	movlb	0	; () banked
  2238  00045E  6B7C               	clrf	main@powerOFF& (0+255),b
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;main.c: 280: sound_enable = 0;
  2242  000460  6A41               	clrf	_sound_enable^0,c
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 281: LATCbits.LATC5 = 0;
  2246  000462  9A8B               	bcf	139,5,c	;volatile
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 282: TMR1ON = 1;
  2250  000464  80CD               	bsf	4045,0,c	;volatile
  2251  000466                     l5742:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;main.c: 284: };main.c: 286: if (pressed_key == 2) {
  2255  000466  0E02               	movlw	2
  2256  000468  1982               	xorwf	_pressed_key& (0+255),w,b
  2257  00046A  E001 D6C1          	bnz	l544
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 287: clearLCD();
  2261  00046E  EC52  F00F         	call	_clearLCD	;wreg free
  2262                           
  2263                           ;main.c: 288: sel_main = 3;
  2264  000472  0E03               	movlw	3
  2265  000474  0100               	movlb	0	; () banked
  2266  000476  6F7D               	movwf	_sel_main& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 289: lcd_gotoxy(5, 2);
  2270  000478  0E02               	movlw	2
  2271  00047A  6E1A               	movwf	lcd_gotoxy@y^0,c
  2272  00047C  0E05               	movlw	5
  2273  00047E  EC80  F00E         	call	_lcd_gotoxy
  2274                           
  2275                           ;main.c: 290: lcd_putc(0x04);
  2276  000482  0E04               	movlw	4
  2277  000484  EC67  F00F         	call	_lcd_putc
  2278                           
  2279                           ;main.c: 291: lcd_putc(0x05);
  2280  000488  0E05               	movlw	5
  2281  00048A  EC67  F00F         	call	_lcd_putc
  2282                           
  2283                           ;main.c: 292: lcd_putc(0x05);
  2284  00048E  0E05               	movlw	5
  2285  000490  EC67  F00F         	call	_lcd_putc
  2286                           
  2287                           ;main.c: 293: lcd_putc(0x05);
  2288  000494  0E05               	movlw	5
  2289  000496  EC67  F00F         	call	_lcd_putc
  2290                           
  2291                           ;main.c: 294: lcd_putc(0x05);
  2292  00049A  0E05               	movlw	5
  2293  00049C  EC67  F00F         	call	_lcd_putc
  2294                           
  2295                           ;main.c: 295: lcd_putc(' ');
  2296  0004A0  0E20               	movlw	32
  2297  0004A2  EC67  F00F         	call	_lcd_putc
  2298                           
  2299                           ;main.c: 296: lcd_putc(0x06);
  2300  0004A6  0E06               	movlw	6
  2301  0004A8  EC67  F00F         	call	_lcd_putc
  2302                           
  2303                           ;main.c: 297: lcd_putc(' ');
  2304  0004AC  0E20               	movlw	32
  2305  0004AE  EC67  F00F         	call	_lcd_putc
  2306                           
  2307                           ;main.c: 298: lcd_putc(0x05);
  2308  0004B2  0E05               	movlw	5
  2309  0004B4  EC67  F00F         	call	_lcd_putc
  2310                           
  2311                           ;main.c: 299: lcd_putc(0x05);
  2312  0004B8  0E05               	movlw	5
  2313  0004BA  EC67  F00F         	call	_lcd_putc
  2314                           
  2315                           ;main.c: 300: lcd_putc(0x05);
  2316  0004BE  0E05               	movlw	5
  2317  0004C0  EC67  F00F         	call	_lcd_putc
  2318                           
  2319                           ;main.c: 301: lcd_putc(0x05);
  2320  0004C4  0E05               	movlw	5
  2321  0004C6  EC67  F00F         	call	_lcd_putc
  2322                           
  2323                           ;main.c: 302: lcd_putc(0x03);
  2324  0004CA  0E03               	movlw	3
  2325  0004CC  EC67  F00F         	call	_lcd_putc
  2326                           
  2327                           ;main.c: 304: EncData = 0;
  2328  0004D0  0100               	movlb	0	; () banked
  2329  0004D2  6B70               	clrf	_EncData& (0+255),b
  2330  0004D4  6B71               	clrf	(_EncData+1)& (0+255),b
  2331  0004D6  D68C               	goto	l544
  2332  0004D8                     l5778:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 312: if (EncData > 4)
  2336  0004D8  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2337  0004DA  D008               	goto	l5782
  2338  0004DC  5171               	movf	(_EncData+1)& (0+255),w,b
  2339  0004DE  E103               	bnz	u5180
  2340  0004E0  0E05               	movlw	5
  2341  0004E2  5D70               	subwf	_EncData& (0+255),w,b
  2342  0004E4  E303               	bnc	l5782
  2343  0004E6                     u5180:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 313: EncData = 4;
  2347  0004E6  6B71               	clrf	(_EncData+1)& (0+255),b
  2348  0004E8  0E04               	movlw	4
  2349  0004EA  6F70               	movwf	_EncData& (0+255),b
  2350  0004EC                     l5782:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 314: if (EncData < 0)
  2354  0004EC  AF71               	btfss	(_EncData+1)& (0+255),7,b
  2355  0004EE  D032               	goto	l5808
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 315: EncData = 0;
  2359  0004F0  6B70               	clrf	_EncData& (0+255),b
  2360  0004F2  6B71               	clrf	(_EncData+1)& (0+255),b
  2361  0004F4  D02F               	goto	l5808
  2362  0004F6                     l5786:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 319: lcd_gotoxy(1, 3);
  2366  0004F6  DA26               	call	PL34	;call to abstracted procedure
  2367  0004F8  EC80  F00E         	call	_lcd_gotoxy
  2368                           
  2369                           ;main.c: 320: lcdPrint("   EDIT RESISTANCE  ");
  2370  0004FC  0EBE               	movlw	low STR_5
  2371  0004FE  6E1D               	movwf	lcdPrint@t^0,c
  2372  000500  0E7E               	movlw	high STR_5
  2373  000502  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2374  000504  EC41  F00B         	call	_lcdPrint	;wreg free
  2375                           
  2376                           ;main.c: 321: break;
  2377  000508  D031               	goto	l5810
  2378  00050A                     l5790:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 323: lcd_gotoxy(1, 3);
  2382  00050A  DA1C               	call	PL34	;call to abstracted procedure
  2383  00050C  EC80  F00E         	call	_lcd_gotoxy
  2384                           
  2385                           ;main.c: 324: lcdPrint("  SAVE LOAD DEFAULT ");
  2386  000510  0ED3               	movlw	low STR_6
  2387  000512  6E1D               	movwf	lcdPrint@t^0,c
  2388  000514  0E7E               	movlw	high STR_6
  2389  000516  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2390  000518  EC41  F00B         	call	_lcdPrint	;wreg free
  2391                           
  2392                           ;main.c: 325: break;
  2393  00051C  D027               	goto	l5810
  2394  00051E                     l5794:
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 327: lcd_gotoxy(1, 3);
  2398  00051E  DA12               	call	PL34	;call to abstracted procedure
  2399  000520  EC80  F00E         	call	_lcd_gotoxy
  2400                           
  2401                           ;main.c: 328: lcdPrint("   SET 100% POWER   ");
  2402  000524  0EA9               	movlw	low STR_7
  2403  000526  6E1D               	movwf	lcdPrint@t^0,c
  2404  000528  0E7E               	movlw	high STR_7
  2405  00052A  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2406  00052C  EC41  F00B         	call	_lcdPrint	;wreg free
  2407                           
  2408                           ;main.c: 329: break;
  2409  000530  D01D               	goto	l5810
  2410  000532                     l5798:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 331: lcd_gotoxy(1, 3);
  2414  000532  DA08               	call	PL34	;call to abstracted procedure
  2415  000534  EC80  F00E         	call	_lcd_gotoxy
  2416                           
  2417                           ;main.c: 332: lcdPrint("     ALARM TEMP     ");
  2418  000538  DA1F               	call	PL80	;call to abstracted procedure
  2419  00053A  EC41  F00B         	call	_lcdPrint	;wreg free
  2420                           
  2421                           ;main.c: 333: break;
  2422  00053E  D016               	goto	l5810
  2423  000540                     l5802:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;main.c: 335: lcd_gotoxy(1, 3);
  2427  000540  DA01               	call	PL34	;call to abstracted procedure
  2428  000542  EC80  F00E         	call	_lcd_gotoxy
  2429                           
  2430                           ;main.c: 336: lcdPrint("         EXIT        ");
  2431  000546  0E7E               	movlw	low STR_9
  2432  000548  6E1D               	movwf	lcdPrint@t^0,c
  2433  00054A  0E7E               	movlw	high STR_9
  2434  00054C  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2435  00054E  EC41  F00B         	call	_lcdPrint	;wreg free
  2436                           
  2437                           ;main.c: 337: break; }
  2438  000552  D00C               	goto	l5810
  2439  000554                     l5808:
  2440                           
  2441                           ; BSR set to: 0
  2442                           
  2443                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2444                           ; Switch size 1, requested type "space"
  2445                           ; Number of cases is 1, Range of values is 0 to 0
  2446                           ; switch strategies available:
  2447                           ; Name         Instructions Cycles
  2448                           ; simple_byte            4     3 (average)
  2449                           ;	Chosen strategy is simple_byte
  2450  000554  DA0B               	call	PL64	;call to abstracted procedure
  2451  000556  E10A               	bnz	l5810
  2452                           
  2453                           ; BSR set to: 0
  2454                           ; Switch size 1, requested type "space"
  2455                           ; Number of cases is 5, Range of values is 0 to 4
  2456                           ; switch strategies available:
  2457                           ; Name         Instructions Cycles
  2458                           ; simple_byte           16     9 (average)
  2459                           ;	Chosen strategy is simple_byte
  2460  000558  51C8               	movf	??_main& (0+255),w,b
  2461  00055A  E0CD               	bz	l5786
  2462  00055C  0A01               	xorlw	1	; case 1
  2463  00055E  E0D5               	bz	l5790
  2464  000560  0A03               	xorlw	3	; case 2
  2465  000562  E0DD               	bz	l5794
  2466  000564  0A01               	xorlw	1	; case 3
  2467  000566  E0E5               	bz	l5798
  2468  000568  0A07               	xorlw	7	; case 4
  2469  00056A  E0EA               	bz	l5802
  2470  00056C                     l5810:
  2471                           
  2472                           ;main.c: 338: if (pressed_key == 1) {
  2473  00056C  0100               	movlb	0	; () banked
  2474  00056E  0582               	decf	_pressed_key& (0+255),w,b
  2475  000570  E056               	bz	l5870
  2476  000572  D63E               	goto	l544
  2477  000574                     l5814:
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 342: clearLCD();
  2481  000574  EC52  F00F         	call	_clearLCD	;wreg free
  2482                           
  2483                           ;main.c: 343: EncData = r_whole;
  2484  000578  C07F  F070         	movff	_r_whole,_EncData
  2485  00057C  0100               	movlb	0	; () banked
  2486  00057E  6B71               	clrf	(_EncData+1)& (0+255),b
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;main.c: 344: whole_dec = 1;
  2490  000580  8247               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2491                           
  2492                           ;main.c: 345: lcd_gotoxy(1, 2);
  2493  000582  D9E3               	call	PL38	;call to abstracted procedure
  2494  000584  EC80  F00E         	call	_lcd_gotoxy
  2495                           
  2496                           ;main.c: 346: lcdPrint("  - Whole part -  ");
  2497  000588  DA01               	call	PL88	;call to abstracted procedure
  2498  00058A  EC41  F00B         	call	_lcdPrint	;wreg free
  2499                           
  2500                           ;main.c: 347: lcd_gotoxy(1, 3);
  2501  00058E  D9DA               	call	PL34	;call to abstracted procedure
  2502  000590  EC80  F00E         	call	_lcd_gotoxy
  2503                           
  2504                           ;main.c: 348: lcdPrint("Long press for save");
  2505  000594  0E10               	movlw	low STR_11
  2506  000596  6E1D               	movwf	lcdPrint@t^0,c
  2507  000598  0E7F               	movlw	high STR_11
  2508  00059A  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2509  00059C  EC41  F00B         	call	_lcdPrint	;wreg free
  2510                           
  2511                           ;main.c: 349: lcd_gotoxy(1, 4);
  2512  0005A0  EC5E  F006         	call	PL98	;call to abstracted procedure
  2513  0005A4  EC80  F00E         	call	_lcd_gotoxy
  2514                           
  2515                           ;main.c: 350: lcdPrint("    to EEPROM.");
  2516  0005A8  0E4A               	movlw	low STR_12
  2517  0005AA  6E1D               	movwf	lcdPrint@t^0,c
  2518  0005AC  0E7F               	movlw	high STR_12
  2519  0005AE  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2520  0005B0  EC41  F00B         	call	_lcdPrint	;wreg free
  2521                           
  2522                           ;main.c: 351: sel_main = 1;
  2523  0005B4  0E01               	movlw	1
  2524  0005B6  0100               	movlb	0	; () banked
  2525  0005B8  6F7D               	movwf	_sel_main& (0+255),b
  2526                           
  2527                           ;main.c: 352: break;
  2528  0005BA  D61A               	goto	l544
  2529  0005BC                     l598:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 354: sel_main = 0;
  2533  0005BC  6B7D               	clrf	_sel_main& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 355: write_eep(2, U_Out);
  2537  0005BE  C072  F016         	movff	_U_Out,write_eep@data
  2538  0005C2  0E02               	movlw	2
  2539  0005C4  EC24  F00F         	call	_write_eep
  2540                           
  2541                           ;main.c: 356: EncData = U_Out;
  2542  0005C8  D9A6               	call	PL18	;call to abstracted procedure
  2543                           
  2544                           ;main.c: 357: clearLCD();
  2545  0005CA  EC52  F00F         	call	_clearLCD	;wreg free
  2546                           
  2547                           ;main.c: 358: break;
  2548  0005CE  D610               	goto	l544
  2549  0005D0                     l599:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;main.c: 360: sel_main = 0;
  2553  0005D0  6B7D               	clrf	_sel_main& (0+255),b
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 361: clearLCD();
  2557  0005D2  EC52  F00F         	call	_clearLCD	;wreg free
  2558                           
  2559                           ;main.c: 362: power_100 = 1;
  2560  0005D6  8C47               	bsf	(_power_100/(0+8))^0,_power_100& (0+7),c
  2561                           
  2562                           ;main.c: 363: EncData = U_Out;
  2563  0005D8  D99E               	call	PL18	;call to abstracted procedure
  2564                           
  2565                           ;main.c: 364: show_tp = 0;
  2566  0005DA  9647               	bcf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  2567                           
  2568                           ;main.c: 365: break;
  2569  0005DC  D609               	goto	l544
  2570  0005DE                     l5844:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 367: sel_main = 4;
  2574  0005DE  0E04               	movlw	4
  2575  0005E0  6F7D               	movwf	_sel_main& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 368: clearLCD();
  2579  0005E2  EC52  F00F         	call	_clearLCD	;wreg free
  2580                           
  2581                           ;main.c: 369: AlarmTempT = AlarmTemp;
  2582  0005E6  C087  F086         	movff	_AlarmTemp,_AlarmTempT
  2583                           
  2584                           ;main.c: 370: alarm_enable = 0;
  2585  0005EA  9047               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  2586                           
  2587                           ;main.c: 371: EncData = AlarmTempT;
  2588  0005EC  C086  F070         	movff	_AlarmTempT,_EncData
  2589  0005F0  0100               	movlb	0	; () banked
  2590  0005F2  6B71               	clrf	(_EncData+1)& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 372: TempEnT = TempEn;
  2594  0005F4  C085  F084         	movff	_TempEn,_TempEnT
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 373: lcd_gotoxy(1, 1);
  2598  0005F8  0E01               	movlw	1
  2599  0005FA  6E1A               	movwf	lcd_gotoxy@y^0,c
  2600  0005FC  EC80  F00E         	call	_lcd_gotoxy
  2601                           
  2602                           ;main.c: 374: lcdPrint("     ALARM TEMP     ");
  2603  000600  D9BB               	call	PL80	;call to abstracted procedure
  2604  000602  EC41  F00B         	call	_lcdPrint	;wreg free
  2605                           
  2606                           ;main.c: 375: lcd_gotoxy(1, 2);
  2607  000606  D9A1               	call	PL38	;call to abstracted procedure
  2608  000608  EC80  F00E         	call	_lcd_gotoxy
  2609                           
  2610                           ;main.c: 376: lcd_putc(0x03);
  2611  00060C  0E03               	movlw	3
  2612  00060E  EC67  F00F         	call	_lcd_putc
  2613                           
  2614                           ;main.c: 377: break;
  2615  000612  D5EE               	goto	l544
  2616  000614                     l601:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 379: sel_main = 0;
  2620  000614  6B7D               	clrf	_sel_main& (0+255),b
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;main.c: 380: clearLCD();
  2624  000616  EC52  F00F         	call	_clearLCD	;wreg free
  2625                           
  2626                           ;main.c: 381: EncData = U_Out;
  2627  00061A  D97D               	call	PL18	;call to abstracted procedure
  2628                           
  2629                           ;main.c: 382: break; }
  2630  00061C  D5E9               	goto	l544
  2631  00061E                     l5870:
  2632                           
  2633                           ; BSR set to: 0
  2634                           
  2635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2636                           ; Switch size 1, requested type "space"
  2637                           ; Number of cases is 1, Range of values is 0 to 0
  2638                           ; switch strategies available:
  2639                           ; Name         Instructions Cycles
  2640                           ; simple_byte            4     3 (average)
  2641                           ;	Chosen strategy is simple_byte
  2642  00061E  D9A6               	call	PL64	;call to abstracted procedure
  2643  000620  E001 D5E6          	bnz	l544
  2644                           
  2645                           ; BSR set to: 0
  2646                           ; Switch size 1, requested type "space"
  2647                           ; Number of cases is 5, Range of values is 0 to 4
  2648                           ; switch strategies available:
  2649                           ; Name         Instructions Cycles
  2650                           ; simple_byte           16     9 (average)
  2651                           ;	Chosen strategy is simple_byte
  2652  000624  51C8               	movf	??_main& (0+255),w,b
  2653  000626  E0A6               	bz	l5814
  2654  000628  0A01               	xorlw	1	; case 1
  2655  00062A  E0C8               	bz	l598
  2656  00062C  0A03               	xorlw	3	; case 2
  2657  00062E  E0D0               	bz	l599
  2658  000630  0A01               	xorlw	1	; case 3
  2659  000632  E0D5               	bz	l5844
  2660  000634  0A07               	xorlw	7	; case 4
  2661  000636  E0EE               	bz	l601
  2662  000638  D5DB               	goto	l544
  2663  00063A                     l602:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 392: if (whole_dec) {
  2667  00063A  A247               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2668  00063C  D011               	goto	l5880
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 393: if (EncData >= 100)
  2672  00063E  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2673  000640  D008               	goto	l5876
  2674  000642  5171               	movf	(_EncData+1)& (0+255),w,b
  2675  000644  E103               	bnz	u5220
  2676  000646  0E64               	movlw	100
  2677  000648  5D70               	subwf	_EncData& (0+255),w,b
  2678  00064A  E303               	bnc	l5876
  2679  00064C                     u5220:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;main.c: 394: EncData = 99;
  2683  00064C  6B71               	clrf	(_EncData+1)& (0+255),b
  2684  00064E  0E63               	movlw	99
  2685  000650  6F70               	movwf	_EncData& (0+255),b
  2686  000652                     l5876:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 395: if (EncData < 0)
  2690  000652  AF71               	btfss	(_EncData+1)& (0+255),7,b
  2691  000654  D002               	goto	l605
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 396: EncData = 0;
  2695  000656  6B70               	clrf	_EncData& (0+255),b
  2696  000658  6B71               	clrf	(_EncData+1)& (0+255),b
  2697  00065A                     l605:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 397: r_whole = (uint8_t) EncData;
  2701  00065A  C070  F07F         	movff	_EncData,_r_whole
  2702                           
  2703                           ;main.c: 398: } else {
  2704  00065E  D032               	goto	l5900
  2705  000660                     l5880:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 399: if (EncData >= 100)
  2709  000660  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2710  000662  D009               	goto	l5884
  2711  000664  5171               	movf	(_EncData+1)& (0+255),w,b
  2712  000666  E103               	bnz	u5240
  2713  000668  0E64               	movlw	100
  2714  00066A  5D70               	subwf	_EncData& (0+255),w,b
  2715  00066C  E304               	bnc	l5884
  2716  00066E                     u5240:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 400: EncData = 99;
  2720  00066E  0E00               	movlw	0
  2721  000670  6F71               	movwf	(_EncData+1)& (0+255),b
  2722  000672  0E63               	movlw	99
  2723  000674  6F70               	movwf	_EncData& (0+255),b
  2724  000676                     l5884:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;main.c: 401: if ((EncData < 10) && (EncData > 5))
  2728  000676  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2729  000678  D005               	goto	u5250
  2730  00067A  5171               	movf	(_EncData+1)& (0+255),w,b
  2731  00067C  E10D               	bnz	l5890
  2732  00067E  0E0A               	movlw	10
  2733  000680  5D70               	subwf	_EncData& (0+255),w,b
  2734  000682  E20A               	bc	l5890
  2735  000684                     u5250:
  2736                           
  2737                           ; BSR set to: 0
  2738  000684  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2739  000686  D008               	goto	l5890
  2740  000688  5171               	movf	(_EncData+1)& (0+255),w,b
  2741  00068A  E103               	bnz	u5260
  2742  00068C  0E06               	movlw	6
  2743  00068E  5D70               	subwf	_EncData& (0+255),w,b
  2744  000690  E303               	bnc	l5890
  2745  000692                     u5260:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 402: EncData = 0;
  2749  000692  6B70               	clrf	_EncData& (0+255),b
  2750  000694  6B71               	clrf	(_EncData+1)& (0+255),b
  2751  000696  D010               	goto	l5896
  2752  000698                     l5890:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 403: else if ((EncData > 0) && (EncData < 5))
  2756  000698  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2757  00069A  D00E               	goto	l5896
  2758  00069C  5171               	movf	(_EncData+1)& (0+255),w,b
  2759  00069E  E102               	bnz	u5270
  2760  0006A0  0570               	decf	_EncData& (0+255),w,b
  2761  0006A2  E30A               	bnc	l5896
  2762  0006A4                     u5270:
  2763                           
  2764                           ; BSR set to: 0
  2765  0006A4  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2766  0006A6  D005               	goto	u5280
  2767  0006A8  5171               	movf	(_EncData+1)& (0+255),w,b
  2768  0006AA  E106               	bnz	l5896
  2769  0006AC  0E05               	movlw	5
  2770  0006AE  5D70               	subwf	_EncData& (0+255),w,b
  2771  0006B0  E203               	bc	l5896
  2772  0006B2                     u5280:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 404: EncData = 10;
  2776  0006B2  6B71               	clrf	(_EncData+1)& (0+255),b
  2777  0006B4  0E0A               	movlw	10
  2778  0006B6  6F70               	movwf	_EncData& (0+255),b
  2779  0006B8                     l5896:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 405: if (EncData < 0)
  2783  0006B8  AF71               	btfss	(_EncData+1)& (0+255),7,b
  2784  0006BA  D002               	goto	l611
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 406: EncData = 0;
  2788  0006BC  6B70               	clrf	_EncData& (0+255),b
  2789  0006BE  6B71               	clrf	(_EncData+1)& (0+255),b
  2790  0006C0                     l611:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 408: r_dec = (uint8_t) EncData;
  2794  0006C0  C070  F07E         	movff	_EncData,_r_dec
  2795  0006C4                     l5900:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 409: };main.c: 410: sprintf(TxtBuf, "Resist:%02u.%u Ohm ", r_whole, r_dec);
  2799  0006C4  0E8B               	movlw	low _TxtBuf
  2800  0006C6  6E22               	movwf	sprintf@sp^0,c
  2801  0006C8  0EE8               	movlw	low STR_14
  2802  0006CA  6E23               	movwf	sprintf@f^0,c
  2803  0006CC  0E7E               	movlw	high STR_14
  2804  0006CE  6E24               	movwf	(sprintf@f+1)^0,c
  2805  0006D0  C07F  F025         	movff	_r_whole,?_sprintf+3
  2806  0006D4  6A26               	clrf	(?_sprintf+4)^0,c
  2807  0006D6  C07E  F027         	movff	_r_dec,?_sprintf+5
  2808  0006DA  6A28               	clrf	(?_sprintf+6)^0,c
  2809  0006DC  EC61  F006         	call	_sprintf	;wreg free
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 411: lcd_gotoxy(1, 1);
  2813  0006E0  0E01               	movlw	1
  2814  0006E2  6E1A               	movwf	lcd_gotoxy@y^0,c
  2815  0006E4  EC80  F00E         	call	_lcd_gotoxy
  2816                           
  2817                           ;main.c: 412: lcdPrint(TxtBuf);
  2818  0006E8  EC42  F006         	call	PL30	;call to abstracted procedure
  2819  0006EC  EC41  F00B         	call	_lcdPrint	;wreg free
  2820                           
  2821                           ;main.c: 414: if (pressed_key == 1) {
  2822  0006F0  0100               	movlb	0	; () banked
  2823  0006F2  0582               	decf	_pressed_key& (0+255),w,b
  2824  0006F4  E11D               	bnz	l5922
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 415: whole_dec = ~whole_dec;
  2828  0006F6  B247               	btfsc	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2829  0006F8  D002               	goto	u5310
  2830  0006FA  8247               	bsf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2831  0006FC  D001               	goto	u5325
  2832  0006FE                     u5310:
  2833  0006FE  9247               	bcf	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2834  000700                     u5325:
  2835                           
  2836                           ;main.c: 416: if (whole_dec) {
  2837  000700  A247               	btfss	(main@whole_dec/(0+8))^0,main@whole_dec& (0+7),c
  2838  000702  D009               	goto	l5916
  2839                           
  2840                           ;main.c: 417: lcd_gotoxy(1, 2);
  2841  000704  D922               	call	PL38	;call to abstracted procedure
  2842  000706  EC80  F00E         	call	_lcd_gotoxy
  2843                           
  2844                           ;main.c: 418: lcdPrint("  - Whole part -  ");
  2845  00070A  D940               	call	PL88	;call to abstracted procedure
  2846  00070C  EC41  F00B         	call	_lcdPrint	;wreg free
  2847                           
  2848                           ;main.c: 419: EncData = r_whole;
  2849  000710  C07F  F070         	movff	_r_whole,_EncData
  2850  000714  D00B               	goto	L3
  2851  000716                     l5916:
  2852                           
  2853                           ;main.c: 421: lcd_gotoxy(1, 2);
  2854  000716  D919               	call	PL38	;call to abstracted procedure
  2855  000718  EC80  F00E         	call	_lcd_gotoxy
  2856                           
  2857                           ;main.c: 422: lcdPrint("  - Fract part -  ");
  2858  00071C  0E37               	movlw	low STR_16
  2859  00071E  6E1D               	movwf	lcdPrint@t^0,c
  2860  000720  0E7F               	movlw	high STR_16
  2861  000722  6E1E               	movwf	(lcdPrint@t+1)^0,c
  2862  000724  EC41  F00B         	call	_lcdPrint	;wreg free
  2863                           
  2864                           ;main.c: 423: EncData = r_dec;
  2865  000728  C07E  F070         	movff	_r_dec,_EncData
  2866  00072C                     L3:
  2867  00072C  0100               	movlb	0	; () banked
  2868  00072E  6B71               	clrf	(_EncData+1)& (0+255),b
  2869  000730                     l5922:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;main.c: 424: };main.c: 425: };main.c: 427: if (pressed_key == 2) {
  2873  000730  0E02               	movlw	2
  2874  000732  1982               	xorwf	_pressed_key& (0+255),w,b
  2875  000734  E001 D55C          	bnz	l544
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 428: clearLCD();
  2879  000738  EC52  F00F         	call	_clearLCD	;wreg free
  2880                           
  2881                           ;main.c: 429: sel_main = 0;
  2882  00073C  0100               	movlb	0	; () banked
  2883  00073E  6B7D               	clrf	_sel_main& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 431: t_res = (uint32_t) r_whole * 1000 + r_dec * 10;
  2887  000740  D90E               	call	PL42	;call to abstracted procedure
  2888  000742  0E00               	movlw	0
  2889  000744  BFC9               	btfsc	(??_main+1)& (0+255),7,b
  2890  000746  0EFF               	movlw	255
  2891  000748  6FCA               	movwf	(??_main+2)& (0+255),b
  2892  00074A  6FCB               	movwf	(??_main+3)& (0+255),b
  2893  00074C  517F               	movf	_r_whole& (0+255),w,b
  2894  00074E  6E16               	movwf	___lmul@multiplier^0,c
  2895  000750  6A17               	clrf	(___lmul@multiplier+1)^0,c
  2896  000752  6A18               	clrf	(___lmul@multiplier+2)^0,c
  2897  000754  6A19               	clrf	(___lmul@multiplier+3)^0,c
  2898  000756  EC48  F00C         	call	PL48	;call to abstracted procedure
  2899  00075A  EC4E  F00D         	call	___lmul	;wreg free
  2900  00075E  0100               	movlb	0	; () banked
  2901  000760  51C8               	movf	??_main& (0+255),w,b
  2902  000762  2416               	addwf	?___lmul^0,w,c
  2903  000764  6F60               	movwf	_t_res& (0+255),b
  2904  000766  51C9               	movf	(??_main+1)& (0+255),w,b
  2905  000768  2017               	addwfc	(?___lmul+1)^0,w,c
  2906  00076A  6F61               	movwf	(_t_res+1)& (0+255),b
  2907  00076C  51CA               	movf	(??_main+2)& (0+255),w,b
  2908  00076E  2018               	addwfc	(?___lmul+2)^0,w,c
  2909  000770  6F62               	movwf	(_t_res+2)& (0+255),b
  2910  000772  51CB               	movf	(??_main+3)& (0+255),w,b
  2911  000774  2019               	addwfc	(?___lmul+3)^0,w,c
  2912  000776  6F63               	movwf	(_t_res+3)& (0+255),b
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;main.c: 433: write_eep(0, r_whole);
  2916  000778  C07F  F016         	movff	_r_whole,write_eep@data
  2917  00077C  0E00               	movlw	0
  2918  00077E  EC24  F00F         	call	_write_eep
  2919                           
  2920                           ;main.c: 434: write_eep(1, r_dec);
  2921  000782  C07E  F016         	movff	_r_dec,write_eep@data
  2922  000786  0E01               	movlw	1
  2923  000788  EC24  F00F         	call	_write_eep
  2924                           
  2925                           ;main.c: 435: EncData = U_Out;
  2926  00078C  D8C4               	call	PL18	;call to abstracted procedure
  2927                           
  2928                           ;main.c: 436: inc_data = 0;
  2929  00078E  9447               	bcf	(_inc_data/(0+8))^0,_inc_data& (0+7),c
  2930  000790  D52F               	goto	l544
  2931  000792                     l616:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 443: if (!alarm_enable) {
  2935  000792  B047               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  2936  000794  D011               	goto	l5946
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 444: if (EncData > 105)
  2940  000796  BF71               	btfsc	(_EncData+1)& (0+255),7,b
  2941  000798  D008               	goto	l5942
  2942  00079A  5171               	movf	(_EncData+1)& (0+255),w,b
  2943  00079C  E103               	bnz	u5360
  2944  00079E  0E6A               	movlw	106
  2945  0007A0  5D70               	subwf	_EncData& (0+255),w,b
  2946  0007A2  E303               	bnc	l5942
  2947  0007A4                     u5360:
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 445: EncData = 105;
  2951  0007A4  6B71               	clrf	(_EncData+1)& (0+255),b
  2952  0007A6  0E69               	movlw	105
  2953  0007A8  6F70               	movwf	_EncData& (0+255),b
  2954  0007AA                     l5942:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 446: if (EncData < 0)
  2958  0007AA  AF71               	btfss	(_EncData+1)& (0+255),7,b
  2959  0007AC  D002               	goto	l619
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 447: EncData = 0;
  2963  0007AE  6B70               	clrf	_EncData& (0+255),b
  2964  0007B0  6B71               	clrf	(_EncData+1)& (0+255),b
  2965  0007B2                     l619:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 448: AlarmTempT = (uint8_t) EncData;
  2969  0007B2  C070  F086         	movff	_EncData,_AlarmTempT
  2970                           
  2971                           ;main.c: 450: } else {
  2972  0007B6  D008               	goto	l5954
  2973  0007B8                     l5946:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 451: if (count_enc < 0)
  2977  0007B8  BF80               	btfsc	_count_enc& (0+255),7,b
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;main.c: 452: TempEnT = 0;
  2981  0007BA  6B84               	clrf	_TempEnT& (0+255),b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;main.c: 453: if (count_enc > 0)
  2985  0007BC  5180               	movf	_count_enc& (0+255),w,b
  2986  0007BE  0A80               	xorlw	128
  2987  0007C0  0F7F               	addlw	-129
  2988  0007C2  E302               	bnc	l5954
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 454: TempEnT = 1;
  2992  0007C4  0E01               	movlw	1
  2993  0007C6  6F84               	movwf	_TempEnT& (0+255),b
  2994  0007C8                     l5954:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;main.c: 455: };main.c: 457: sprintf(TxtBuf, "Temp:%u%c%-4c", AlarmTempT, 7, 'C');
  2998  0007C8  0E8B               	movlw	low _TxtBuf
  2999  0007CA  6E22               	movwf	sprintf@sp^0,c
  3000  0007CC  0E68               	movlw	low STR_17
  3001  0007CE  6E23               	movwf	sprintf@f^0,c
  3002  0007D0  0E7F               	movlw	high STR_17
  3003  0007D2  6E24               	movwf	(sprintf@f+1)^0,c
  3004  0007D4  C086  F025         	movff	_AlarmTempT,?_sprintf+3
  3005  0007D8  6A26               	clrf	(?_sprintf+4)^0,c
  3006  0007DA  0E00               	movlw	0
  3007  0007DC  6E28               	movwf	(?_sprintf+6)^0,c
  3008  0007DE  0E07               	movlw	7
  3009  0007E0  6E27               	movwf	(?_sprintf+5)^0,c
  3010  0007E2  0E00               	movlw	0
  3011  0007E4  6E2A               	movwf	(?_sprintf+8)^0,c
  3012  0007E6  0E43               	movlw	67
  3013  0007E8  6E29               	movwf	(?_sprintf+7)^0,c
  3014  0007EA  EC61  F006         	call	_sprintf	;wreg free
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 458: lcd_gotoxy(2, 2);
  3018  0007EE  0E02               	movlw	2
  3019  0007F0  6E1A               	movwf	lcd_gotoxy@y^0,c
  3020  0007F2  EC80  F00E         	call	_lcd_gotoxy
  3021                           
  3022                           ;main.c: 459: lcdPrint(TxtBuf);
  3023  0007F6  EC42  F006         	call	PL30	;call to abstracted procedure
  3024  0007FA  EC41  F00B         	call	_lcdPrint	;wreg free
  3025                           
  3026                           ;main.c: 461: sprintf(TxtBuf, "Alarm:%-3s", (TempEnT) ? "ON" : "OFF");
  3027  0007FE  0100               	movlb	0	; () banked
  3028  000800  5184               	movf	_TempEnT& (0+255),w,b
  3029  000802  E104               	bnz	l5964
  3030                           
  3031                           ; BSR set to: 0
  3032  000804  0EF8               	movlw	low STR_20
  3033  000806  6FCC               	movwf	_main$1571& (0+255),b
  3034  000808  0E7F               	movlw	high STR_20
  3035  00080A  D003               	goto	L4
  3036  00080C                     l5964:
  3037                           
  3038                           ; BSR set to: 0
  3039  00080C  0EFC               	movlw	low STR_19
  3040  00080E  6FCC               	movwf	_main$1571& (0+255),b
  3041  000810  0E7F               	movlw	high STR_19
  3042  000812                     L4:
  3043  000812  6FCD               	movwf	(_main$1571+1)& (0+255),b
  3044                           
  3045                           ; BSR set to: 0
  3046  000814  0E8B               	movlw	low _TxtBuf
  3047  000816  6E22               	movwf	sprintf@sp^0,c
  3048  000818  0EBA               	movlw	low STR_18
  3049  00081A  6E23               	movwf	sprintf@f^0,c
  3050  00081C  0E7F               	movlw	high STR_18
  3051  00081E  6E24               	movwf	(sprintf@f+1)^0,c
  3052  000820  C0CC  F025         	movff	_main$1571,?_sprintf+3
  3053  000824  C0CD  F026         	movff	_main$1571+1,?_sprintf+4
  3054  000828  EC61  F006         	call	_sprintf	;wreg free
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;main.c: 462: lcd_gotoxy(2, 3);
  3058  00082C  0E03               	movlw	3
  3059  00082E  6E1A               	movwf	lcd_gotoxy@y^0,c
  3060  000830  0E02               	movlw	2
  3061  000832  EC80  F00E         	call	_lcd_gotoxy
  3062                           
  3063                           ;main.c: 463: lcdPrint(TxtBuf);
  3064  000836  EC42  F006         	call	PL30	;call to abstracted procedure
  3065  00083A  EC41  F00B         	call	_lcdPrint	;wreg free
  3066                           
  3067                           ;main.c: 465: if (pressed_key == 1) {
  3068  00083E  0100               	movlb	0	; () banked
  3069  000840  0582               	decf	_pressed_key& (0+255),w,b
  3070  000842  E126               	bnz	l5988
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 466: alarm_enable = ~alarm_enable;
  3074  000844  B047               	btfsc	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3075  000846  D002               	goto	u5420
  3076  000848  8047               	bsf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3077  00084A  D001               	goto	u5435
  3078  00084C                     u5420:
  3079  00084C  9047               	bcf	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3080  00084E                     u5435:
  3081                           
  3082                           ;main.c: 467: if (alarm_enable) {
  3083  00084E  A047               	btfss	(main@alarm_enable/(0+8))^0,main@alarm_enable& (0+7),c
  3084  000850  D00D               	goto	l5978
  3085                           
  3086                           ;main.c: 469: lcd_gotoxy(1, 3);
  3087  000852  D878               	call	PL34	;call to abstracted procedure
  3088  000854  EC80  F00E         	call	_lcd_gotoxy
  3089                           
  3090                           ;main.c: 470: lcd_putc(0x03);
  3091  000858  0E03               	movlw	3
  3092  00085A  EC67  F00F         	call	_lcd_putc
  3093                           
  3094                           ;main.c: 471: lcd_gotoxy(1, 2);
  3095  00085E  D875               	call	PL38	;call to abstracted procedure
  3096  000860  EC80  F00E         	call	_lcd_gotoxy
  3097                           
  3098                           ;main.c: 472: lcd_putc(' ');
  3099  000864  0E20               	movlw	32
  3100  000866  EC67  F00F         	call	_lcd_putc
  3101                           
  3102                           ;main.c: 473: } else {
  3103  00086A  D012               	goto	l5988
  3104  00086C                     l5978:
  3105                           
  3106                           ;main.c: 474: EncData = (int8_t) AlarmTempT;
  3107  00086C  0100               	movlb	0	; () banked
  3108  00086E  5186               	movf	_AlarmTempT& (0+255),w,b
  3109  000870  6F70               	movwf	_EncData& (0+255),b
  3110  000872  6B71               	clrf	(_EncData+1)& (0+255),b
  3111  000874  BF70               	btfsc	_EncData& (0+255),7,b
  3112  000876  0771               	decf	(_EncData+1)& (0+255),f,b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 475: lcd_gotoxy(1, 2);
  3116  000878  D868               	call	PL38	;call to abstracted procedure
  3117  00087A  EC80  F00E         	call	_lcd_gotoxy
  3118                           
  3119                           ;main.c: 476: lcd_putc(0x03);
  3120  00087E  0E03               	movlw	3
  3121  000880  EC67  F00F         	call	_lcd_putc
  3122                           
  3123                           ;main.c: 477: lcd_gotoxy(1, 3);
  3124  000884  D85F               	call	PL34	;call to abstracted procedure
  3125  000886  EC80  F00E         	call	_lcd_gotoxy
  3126                           
  3127                           ;main.c: 478: lcd_putc(' ');
  3128  00088A  0E20               	movlw	32
  3129  00088C  EC67  F00F         	call	_lcd_putc
  3130  000890                     l5988:
  3131                           
  3132                           ;main.c: 480: };main.c: 481: };main.c: 483: if (pressed_key == 2) {
  3133  000890  0E02               	movlw	2
  3134  000892  0100               	movlb	0	; () banked
  3135  000894  1982               	xorwf	_pressed_key& (0+255),w,b
  3136  000896  E001 D4AB          	bnz	l544
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 484: clearLCD();
  3140  00089A  EC52  F00F         	call	_clearLCD	;wreg free
  3141                           
  3142                           ;main.c: 485: sel_main = 0;
  3143  00089E  0100               	movlb	0	; () banked
  3144  0008A0  6B7D               	clrf	_sel_main& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 487: EncData = U_Out;
  3148  0008A2  D839               	call	PL18	;call to abstracted procedure
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 488: AlarmTemp = AlarmTempT;
  3152  0008A4  C086  F087         	movff	_AlarmTempT,_AlarmTemp
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 489: TempEn = TempEnT;
  3156  0008A8  C084  F085         	movff	_TempEnT,_TempEn
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 490: write_eep(3, AlarmTemp);
  3160  0008AC  C087  F016         	movff	_AlarmTemp,write_eep@data
  3161  0008B0  0E03               	movlw	3
  3162  0008B2  EC24  F00F         	call	_write_eep
  3163                           
  3164                           ;main.c: 491: write_eep(4, TempEn);
  3165  0008B6  C085  F016         	movff	_TempEn,write_eep@data
  3166  0008BA  0E04               	movlw	4
  3167  0008BC  EC24  F00F         	call	_write_eep
  3168  0008C0  D497               	goto	l544
  3169  0008C2                     l6006:
  3170                           
  3171                           ; BSR set to: 0
  3172  0008C2  517D               	movf	_sel_main& (0+255),w,b
  3173                           
  3174                           ; Switch size 1, requested type "space"
  3175                           ; Number of cases is 5, Range of values is 0 to 4
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte           16     9 (average)
  3179                           ;	Chosen strategy is simple_byte
  3180  0008C4  E101 D5A9          	bz	l5710
  3181  0008C8  0A01               	xorlw	1	; case 1
  3182  0008CA  E101 D6B6          	bz	l602
  3183  0008CE  0A03               	xorlw	3	; case 2
  3184  0008D0  E101 D48E          	bz	l544
  3185  0008D4  0A01               	xorlw	1	; case 3
  3186  0008D6  E101 D5FF          	bz	l5778
  3187  0008DA  0A07               	xorlw	7	; case 4
  3188  0008DC  E101 D759          	bz	l616
  3189                           
  3190                           ; BSR set to: 0
  3191  0008E0  D487               	goto	l544
  3192  0008E2                     __end_of_main:
  3193                           	callstack 0
  3194  0008E2                     PL8:
  3195                           	callstack 23
  3196  0008E2  C016  F064         	movff	?___lldiv,_sqrtU_sum
  3197  0008E6  C017  F065         	movff	?___lldiv+1,_sqrtU_sum+1
  3198  0008EA  C018  F066         	movff	?___lldiv+2,_sqrtU_sum+2
  3199  0008EE  C019  F067         	movff	?___lldiv+3,_sqrtU_sum+3
  3200  0008F2  C064  F016         	movff	_sqrtU_sum,___xxtofl@val
  3201  0008F6  C065  F017         	movff	_sqrtU_sum+1,___xxtofl@val+1
  3202  0008FA  C066  F018         	movff	_sqrtU_sum+2,___xxtofl@val+2
  3203  0008FE  C067  F019         	movff	_sqrtU_sum+3,___xxtofl@val+3
  3204  000902  0C00               	retlw	0
  3205  000904                     __end_ofPL8:
  3206                           	callstack 0
  3207  000904                     PL12:
  3208                           	callstack 23
  3209  000904  C060  F023         	movff	_t_res,calc_power@res
  3210  000908  C061  F024         	movff	_t_res+1,calc_power@res+1
  3211  00090C  C062  F025         	movff	_t_res+2,calc_power@res+2
  3212  000910  C063  F026         	movff	_t_res+3,calc_power@res+3
  3213  000914  0012               	return	
  3214  000916                     __end_ofPL12:
  3215                           	callstack 0
  3216  000916                     PL18:
  3217                           	callstack 23
  3218  000916  C072  F070         	movff	_U_Out,_EncData
  3219  00091A  C073  F071         	movff	_U_Out+1,_EncData+1
  3220  00091E  0012               	return	
  3221  000920                     __end_ofPL18:
  3222                           	callstack 0
  3223  000920                     PL20:
  3224                           	callstack 23
  3225  000920  C024  F02C         	movff	?_sqrt,___fltol@f1
  3226  000924  C025  F02D         	movff	?_sqrt+1,___fltol@f1+1
  3227  000928  C026  F02E         	movff	?_sqrt+2,___fltol@f1+2
  3228  00092C  C027  F02F         	movff	?_sqrt+3,___fltol@f1+3
  3229  000930  0012               	return	
  3230  000932                     __end_ofPL20:
  3231                           	callstack 0
  3232  000932                     PL22:
  3233                           	callstack 23
  3234  000932  C016  F024         	movff	?___xxtofl,sqrt@a
  3235  000936  C017  F025         	movff	?___xxtofl+1,sqrt@a+1
  3236  00093A  C018  F026         	movff	?___xxtofl+2,sqrt@a+2
  3237  00093E  C019  F027         	movff	?___xxtofl+3,sqrt@a+3
  3238  000942  0012               	return	
  3239  000944                     __end_ofPL22:
  3240                           	callstack 0
  3241  000944                     PL34:
  3242                           	callstack 23
  3243  000944  0E03               	movlw	3
  3244  000946  6E1A               	movwf	lcd_gotoxy@y^0,c
  3245  000948  0C01               	retlw	1
  3246  00094A                     __end_ofPL34:
  3247                           	callstack 0
  3248  00094A                     PL38:
  3249                           	callstack 23
  3250  00094A  0E02               	movlw	2
  3251  00094C  6E1A               	movwf	lcd_gotoxy@y^0,c
  3252  00094E  0C01               	retlw	1
  3253  000950                     __end_ofPL38:
  3254                           	callstack 0
  3255  000950                     PL40:
  3256                           	callstack 23
  3257  000950  C07A  F01A         	movff	_cnt_adc,___lldiv@divisor
  3258  000954  C07B  F01B         	movff	_cnt_adc+1,___lldiv@divisor+1
  3259  000958  6A1C               	clrf	(___lldiv@divisor+2)^0,c
  3260  00095A  6A1D               	clrf	(___lldiv@divisor+3)^0,c
  3261  00095C  0012               	return	
  3262  00095E                     __end_ofPL40:
  3263                           	callstack 0
  3264  00095E                     PL42:
  3265                           	callstack 23
  3266  00095E  517E               	movf	_r_dec& (0+255),w,b
  3267  000960  0D0A               	mullw	10
  3268  000962  CFF3 F0C8          	movff	prodl,??_main
  3269  000966  CFF4 F0C9          	movff	prodh,??_main+1
  3270  00096A  0012               	return	
  3271  00096C                     __end_ofPL42:
  3272                           	callstack 0
  3273  00096C                     PL64:
  3274                           	callstack 23
  3275  00096C  C070  F0C8         	movff	_EncData,??_main
  3276  000970  C071  F0C9         	movff	_EncData+1,??_main+1
  3277  000974  51C9               	movf	(??_main+1)& (0+255),w,b
  3278  000976  0012               	return	
  3279  000978                     __end_ofPL64:
  3280                           	callstack 0
  3281  000978                     PL80:
  3282                           	callstack 23
  3283  000978  0E94               	movlw	low STR_8
  3284  00097A  6E1D               	movwf	lcdPrint@t^0,c
  3285  00097C  0E7E               	movlw	high STR_8
  3286  00097E  6E1E               	movwf	(lcdPrint@t+1)^0,c
  3287  000980  0012               	return	
  3288  000982                     __end_ofPL80:
  3289                           	callstack 0
  3290  000982                     PL82:
  3291                           	callstack 23
  3292  000982  0E46               	movlw	70
  3293  000984  6FCF               	movwf	(_angleU+1)& (0+255),b
  3294  000986  0E50               	movlw	80
  3295  000988  6FCE               	movwf	_angleU& (0+255),b
  3296  00098A  0C50               	retlw	80
  3297  00098C                     __end_ofPL82:
  3298                           	callstack 0
  3299  00098C                     PL88:
  3300                           	callstack 23
  3301  00098C  0E24               	movlw	low STR_10
  3302  00098E  6E1D               	movwf	lcdPrint@t^0,c
  3303  000990  0E7F               	movlw	high STR_10
  3304  000992  6E1E               	movwf	(lcdPrint@t+1)^0,c
  3305  000994  0012               	return	
  3306  000996                     __end_ofPL88:
  3307                           	callstack 0
  3308                           
  3309 ;; *************** function _write_eep *****************
  3310 ;; Defined at:
  3311 ;;		line 5 in file "eeprom.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  address         1    wreg     unsigned char 
  3314 ;;  data            1   21[COMRAM] unsigned char 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  address         1   22[COMRAM] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3326 ;;      Params:         1       0       0       0       0       0       0
  3327 ;;      Locals:         1       0       0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0
  3329 ;;      Totals:         2       0       0       0       0       0       0
  3330 ;;Total ram usage:        2 bytes
  3331 ;; Hardware stack levels used: 1
  3332 ;; Hardware stack levels required when called: 3
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text1
  3341  001E48                     __ptext1:
  3342                           	callstack 0
  3343  001E48                     _write_eep:
  3344                           	callstack 27
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;incstack = 0
  3348                           ;write_eep@address stored from wreg
  3349  001E48  6E17               	movwf	write_eep@address^0,c
  3350  001E4A                     
  3351                           ;eeprom.c: 8: {}
  3352  001E4A  B2A6               	btfsc	166,1,c	;volsfr
  3353  001E4C  D7FE               	goto	l3658
  3354                           
  3355                           ;eeprom.c: 11: EEADR = address;
  3356  001E4E  C017  FFA9         	movff	write_eep@address,4009	;volatile
  3357                           
  3358                           ;eeprom.c: 12: EEDATA = data;
  3359  001E52  C016  FFA8         	movff	write_eep@data,4008	;volatile
  3360                           
  3361                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  3362  001E56  9EA6               	bcf	166,7,c	;volsfr
  3363                           
  3364                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  3365  001E58  9CA6               	bcf	166,6,c	;volsfr
  3366                           
  3367                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  3368  001E5A  84A6               	bsf	166,2,c	;volsfr
  3369                           
  3370                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  3371  001E5C  9EF2               	bcf	242,7,c	;volatile
  3372                           
  3373                           ;eeprom.c: 18: EECON2 = 0x55;
  3374  001E5E  0E55               	movlw	85
  3375  001E60  6EA7               	movwf	167,c	;volsfr
  3376                           
  3377                           ;eeprom.c: 19: EECON2 = 0xAA;
  3378  001E62  0EAA               	movlw	170
  3379  001E64  6EA7               	movwf	167,c	;volsfr
  3380                           
  3381                           ;eeprom.c: 20: EECON1bits.WR = 1;
  3382  001E66  82A6               	bsf	166,1,c	;volsfr
  3383                           
  3384                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  3385  001E68  8EF2               	bsf	242,7,c	;volatile
  3386  001E6A  0CAA               	retlw	170	;funcret
  3387  001E6C                     __end_of_write_eep:
  3388                           	callstack 0
  3389                           
  3390 ;; *************** function _sqrt *****************
  3391 ;; Defined at:
  3392 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\sprcsqrt.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  a               4   35[COMRAM] void 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  root            4   17[BANK0 ] struct .
  3397 ;;  frac            4   13[BANK0 ] unsigned long 
  3398 ;;  grs             4    6[BANK0 ] unsigned long 
  3399 ;;  tfrac           4    2[BANK0 ] unsigned long 
  3400 ;;  exp             2   11[BANK0 ] int 
  3401 ;;  p               1   10[BANK0 ] unsigned char 
  3402 ;;  i               1    1[BANK0 ] unsigned char 
  3403 ;;  sign            1    0[BANK0 ] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  4   35[COMRAM] unsigned char 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 3F/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3413 ;;      Params:         4       0       0       0       0       0       0
  3414 ;;      Locals:         0      21       0       0       0       0       0
  3415 ;;      Temps:          4       0       0       0       0       0       0
  3416 ;;      Totals:         8      21       0       0       0       0       0
  3417 ;;Total ram usage:       29 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 3
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text2
  3428  000F9E                     __ptext2:
  3429                           	callstack 0
  3430  000F9E                     _sqrt:
  3431                           	callstack 27
  3432                           
  3433                           ;incstack = 0
  3434  000F9E  5027               	movf	(sqrt@a+3)^0,w,c
  3435  000FA0  0B80               	andlw	128
  3436  000FA2  0100               	movlb	0	; () banked
  3437  000FA4  6FAD               	movwf	sqrt@sign& (0+255),b
  3438  000FA6  5027               	movf	(sqrt@a+3)^0,w,c
  3439  000FA8  2427               	addwf	(sqrt@a+3)^0,w,c
  3440  000FAA  6FB7               	movwf	sqrt@p& (0+255),b
  3441                           
  3442                           ; BSR set to: 0
  3443  000FAC  BE26               	btfsc	(sqrt@a+2)^0,7,c
  3444                           
  3445                           ; BSR set to: 0
  3446  000FAE  81B7               	bsf	sqrt@p& (0+255),0,b
  3447                           
  3448                           ; BSR set to: 0
  3449  000FB0  C0B7  F0B8         	movff	sqrt@p,sqrt@exp
  3450  000FB4  6BB9               	clrf	(sqrt@exp+1)& (0+255),b
  3451                           
  3452                           ; BSR set to: 0
  3453  000FB6  5024               	movf	sqrt@a^0,w,c
  3454  000FB8  6FBA               	movwf	sqrt@frac& (0+255),b
  3455  000FBA  5025               	movf	(sqrt@a+1)^0,w,c
  3456  000FBC  6FBB               	movwf	(sqrt@frac+1)& (0+255),b
  3457  000FBE  0E7F               	movlw	127
  3458  000FC0  1426               	andwf	(sqrt@a+2)^0,w,c
  3459  000FC2  6FBC               	movwf	(sqrt@frac+2)& (0+255),b
  3460  000FC4  6BBD               	clrf	(sqrt@frac+3)& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463  000FC6  51B8               	movf	sqrt@exp& (0+255),w,b
  3464  000FC8  11B9               	iorwf	(sqrt@exp+1)& (0+255),w,b
  3465  000FCA  E004               	bz	u2870
  3466                           
  3467                           ; BSR set to: 0
  3468  000FCC  8FBC               	bsf	(sqrt@frac+2)& (0+255),7,b
  3469                           
  3470                           ; BSR set to: 0
  3471  000FCE  29B8               	incf	sqrt@exp& (0+255),w,b
  3472  000FD0  11B9               	iorwf	(sqrt@exp+1)& (0+255),w,b
  3473  000FD2  E101               	bnz	l3952
  3474  000FD4                     u2870:
  3475                           
  3476                           ; BSR set to: 0
  3477  000FD4  D8B2               	call	PL78	;call to abstracted procedure
  3478  000FD6                     l3952:
  3479                           
  3480                           ; BSR set to: 0
  3481  000FD6  51B8               	movf	sqrt@exp& (0+255),w,b
  3482  000FD8  11B9               	iorwf	(sqrt@exp+1)& (0+255),w,b
  3483  000FDA  E105               	bnz	l3956
  3484                           
  3485                           ; BSR set to: 0
  3486  000FDC  6A24               	clrf	?_sqrt^0,c
  3487  000FDE  6A25               	clrf	(?_sqrt+1)^0,c
  3488  000FE0  6A26               	clrf	(?_sqrt+2)^0,c
  3489  000FE2  6A27               	clrf	(?_sqrt+3)^0,c
  3490  000FE4  0012               	return	
  3491  000FE6                     l3956:
  3492                           
  3493                           ; BSR set to: 0
  3494  000FE6  51AD               	movf	sqrt@sign& (0+255),w,b
  3495  000FE8  E012               	bz	l3966
  3496                           
  3497                           ; BSR set to: 0
  3498  000FEA  6BBE               	clrf	sqrt@root& (0+255),b
  3499  000FEC  6BBF               	clrf	(sqrt@root+1)& (0+255),b
  3500  000FEE  0E40               	movlw	64
  3501  000FF0  6FC0               	movwf	(sqrt@root+2)& (0+255),b
  3502  000FF2  6BC1               	clrf	(sqrt@root+3)& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505  000FF4  0E80               	movlw	128
  3506  000FF6  13C0               	iorwf	(sqrt@root+2)& (0+255),f,b
  3507  000FF8  0EFF               	movlw	255
  3508  000FFA  13C1               	iorwf	(sqrt@root+3)& (0+255),f,b
  3509  000FFC                     l3962:
  3510                           
  3511                           ; BSR set to: 0
  3512  000FFC  C0BE  F024         	movff	sqrt@root,?_sqrt
  3513  001000  C0BF  F025         	movff	sqrt@root+1,?_sqrt+1
  3514  001004  C0C0  F026         	movff	sqrt@root+2,?_sqrt+2
  3515  001008  C0C1  F027         	movff	sqrt@root+3,?_sqrt+3
  3516  00100C  0012               	return	
  3517  00100E                     l3966:
  3518                           
  3519                           ; BSR set to: 0
  3520  00100E  29B8               	incf	sqrt@exp& (0+255),w,b
  3521  001010  11B9               	iorwf	(sqrt@exp+1)& (0+255),w,b
  3522  001012  E107               	bnz	l3974
  3523                           
  3524                           ; BSR set to: 0
  3525  001014  6BBE               	clrf	sqrt@root& (0+255),b
  3526  001016  6BBF               	clrf	(sqrt@root+1)& (0+255),b
  3527  001018  0E80               	movlw	128
  3528  00101A  6FC0               	movwf	(sqrt@root+2)& (0+255),b
  3529  00101C  0E7F               	movlw	127
  3530  00101E  6FC1               	movwf	(sqrt@root+3)& (0+255),b
  3531  001020  D7ED               	goto	l3962
  3532  001022                     l3974:
  3533                           
  3534                           ; BSR set to: 0
  3535  001022  0E81               	movlw	129
  3536  001024  27B8               	addwf	sqrt@exp& (0+255),f,b
  3537  001026  0EFF               	movlw	255
  3538  001028  23B9               	addwfc	(sqrt@exp+1)& (0+255),f,b
  3539  00102A  51B8               	movf	sqrt@exp& (0+255),w,b
  3540  00102C  0B01               	andlw	1
  3541  00102E  6FB7               	movwf	sqrt@p& (0+255),b
  3542  001030  35B9               	rlcf	(sqrt@exp+1)& (0+255),w,b
  3543  001032  33B9               	rrcf	(sqrt@exp+1)& (0+255),f,b
  3544  001034  33B8               	rrcf	sqrt@exp& (0+255),f,b
  3545  001036  0E7F               	movlw	127
  3546  001038  27B8               	addwf	sqrt@exp& (0+255),f,b
  3547  00103A  0E00               	movlw	0
  3548  00103C  23B9               	addwfc	(sqrt@exp+1)& (0+255),f,b
  3549  00103E  90D8               	bcf	status,0,c
  3550  001040  35BA               	rlcf	sqrt@frac& (0+255),w,b
  3551  001042  6FAF               	movwf	sqrt@tfrac& (0+255),b
  3552  001044  35BB               	rlcf	(sqrt@frac+1)& (0+255),w,b
  3553  001046  6FB0               	movwf	(sqrt@tfrac+1)& (0+255),b
  3554  001048  35BC               	rlcf	(sqrt@frac+2)& (0+255),w,b
  3555  00104A  6FB1               	movwf	(sqrt@tfrac+2)& (0+255),b
  3556  00104C  35BD               	rlcf	(sqrt@frac+3)& (0+255),w,b
  3557  00104E  6FB2               	movwf	(sqrt@tfrac+3)& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560  001050  D874               	call	PL78	;call to abstracted procedure
  3561                           
  3562                           ; BSR set to: 0
  3563  001052  0E00               	movlw	0
  3564  001054  6FB3               	movwf	sqrt@grs& (0+255),b
  3565  001056  6FB4               	movwf	(sqrt@grs+1)& (0+255),b
  3566  001058  6FB5               	movwf	(sqrt@grs+2)& (0+255),b
  3567  00105A  0E01               	movlw	1
  3568  00105C  6FB6               	movwf	(sqrt@grs+3)& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571  00105E  51B7               	movf	sqrt@p& (0+255),w,b
  3572  001060  E001               	bz	l3984
  3573                           
  3574                           ; BSR set to: 0
  3575  001062  D865               	call	PL68	;call to abstracted procedure
  3576  001064                     l3984:
  3577                           
  3578                           ; BSR set to: 0
  3579  001064  6BAE               	clrf	sqrt@i& (0+255),b
  3580  001066  D032               	goto	l3998
  3581  001068                     l3986:
  3582                           
  3583                           ; BSR set to: 0
  3584  001068  51B3               	movf	sqrt@grs& (0+255),w,b
  3585  00106A  13BA               	iorwf	sqrt@frac& (0+255),f,b
  3586  00106C  51B4               	movf	(sqrt@grs+1)& (0+255),w,b
  3587  00106E  13BB               	iorwf	(sqrt@frac+1)& (0+255),f,b
  3588  001070  51B5               	movf	(sqrt@grs+2)& (0+255),w,b
  3589  001072  13BC               	iorwf	(sqrt@frac+2)& (0+255),f,b
  3590  001074  51B6               	movf	(sqrt@grs+3)& (0+255),w,b
  3591  001076  13BD               	iorwf	(sqrt@frac+3)& (0+255),f,b
  3592  001078  51BA               	movf	sqrt@frac& (0+255),w,b
  3593  00107A  5DAF               	subwf	sqrt@tfrac& (0+255),w,b
  3594  00107C  51BB               	movf	(sqrt@frac+1)& (0+255),w,b
  3595  00107E  59B0               	subwfb	(sqrt@tfrac+1)& (0+255),w,b
  3596  001080  51BC               	movf	(sqrt@frac+2)& (0+255),w,b
  3597  001082  59B1               	subwfb	(sqrt@tfrac+2)& (0+255),w,b
  3598  001084  51BD               	movf	(sqrt@frac+3)& (0+255),w,b
  3599  001086  59B2               	subwfb	(sqrt@tfrac+3)& (0+255),w,b
  3600  001088  E30A               	bnc	l3990
  3601                           
  3602                           ; BSR set to: 0
  3603  00108A  51BA               	movf	sqrt@frac& (0+255),w,b
  3604  00108C  5FAF               	subwf	sqrt@tfrac& (0+255),f,b
  3605  00108E  51BB               	movf	(sqrt@frac+1)& (0+255),w,b
  3606  001090  5BB0               	subwfb	(sqrt@tfrac+1)& (0+255),f,b
  3607  001092  51BC               	movf	(sqrt@frac+2)& (0+255),w,b
  3608  001094  5BB1               	subwfb	(sqrt@tfrac+2)& (0+255),f,b
  3609  001096  51BD               	movf	(sqrt@frac+3)& (0+255),w,b
  3610  001098  5BB2               	subwfb	(sqrt@tfrac+3)& (0+255),f,b
  3611  00109A  D83A               	call	PL24	;call to abstracted procedure
  3612  00109C  D010               	goto	l3992
  3613  00109E                     l3990:
  3614                           
  3615                           ; BSR set to: 0
  3616  00109E  1DB3               	comf	sqrt@grs& (0+255),w,b
  3617  0010A0  6E28               	movwf	??_sqrt^0,c
  3618  0010A2  1DB4               	comf	(sqrt@grs+1)& (0+255),w,b
  3619  0010A4  6E29               	movwf	(??_sqrt+1)^0,c
  3620  0010A6  1DB5               	comf	(sqrt@grs+2)& (0+255),w,b
  3621  0010A8  6E2A               	movwf	(??_sqrt+2)^0,c
  3622  0010AA  1DB6               	comf	(sqrt@grs+3)& (0+255),w,b
  3623  0010AC  6E2B               	movwf	(??_sqrt+3)^0,c
  3624  0010AE  5028               	movf	??_sqrt^0,w,c
  3625  0010B0  17BA               	andwf	sqrt@frac& (0+255),f,b
  3626  0010B2  5029               	movf	(??_sqrt+1)^0,w,c
  3627  0010B4  17BB               	andwf	(sqrt@frac+1)& (0+255),f,b
  3628  0010B6  502A               	movf	(??_sqrt+2)^0,w,c
  3629  0010B8  17BC               	andwf	(sqrt@frac+2)& (0+255),f,b
  3630  0010BA  502B               	movf	(??_sqrt+3)^0,w,c
  3631  0010BC  17BD               	andwf	(sqrt@frac+3)& (0+255),f,b
  3632  0010BE                     l3992:
  3633                           
  3634                           ; BSR set to: 0
  3635  0010BE  90D8               	bcf	status,0,c
  3636  0010C0  33B6               	rrcf	(sqrt@grs+3)& (0+255),f,b
  3637  0010C2  33B5               	rrcf	(sqrt@grs+2)& (0+255),f,b
  3638  0010C4  33B4               	rrcf	(sqrt@grs+1)& (0+255),f,b
  3639  0010C6  33B3               	rrcf	sqrt@grs& (0+255),f,b
  3640                           
  3641                           ; BSR set to: 0
  3642  0010C8  D832               	call	PL68	;call to abstracted procedure
  3643                           
  3644                           ; BSR set to: 0
  3645  0010CA  2BAE               	incf	sqrt@i& (0+255),f,b
  3646  0010CC                     l3998:
  3647                           
  3648                           ; BSR set to: 0
  3649  0010CC  0E18               	movlw	24
  3650  0010CE  65AE               	cpfsgt	sqrt@i& (0+255),b
  3651  0010D0  D7CB               	goto	l3986
  3652                           
  3653                           ; BSR set to: 0
  3654  0010D2  D827               	call	PL32	;call to abstracted procedure
  3655                           
  3656                           ; BSR set to: 0
  3657  0010D4  0E01               	movlw	1
  3658  0010D6  15BA               	andwf	sqrt@frac& (0+255),w,b
  3659  0010D8  6FB3               	movwf	sqrt@grs& (0+255),b
  3660  0010DA  6BB4               	clrf	(sqrt@grs+1)& (0+255),b
  3661  0010DC  6BB5               	clrf	(sqrt@grs+2)& (0+255),b
  3662  0010DE  6BB6               	clrf	(sqrt@grs+3)& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665  0010E0  D820               	call	PL32	;call to abstracted procedure
  3666  0010E2  D816               	call	PL24	;call to abstracted procedure
  3667                           
  3668                           ; BSR set to: 0
  3669  0010E4  A1BD               	btfss	(sqrt@frac+3)& (0+255),0,b
  3670  0010E6  D003               	goto	l4010
  3671                           
  3672                           ; BSR set to: 0
  3673  0010E8  D81C               	call	PL32	;call to abstracted procedure
  3674  0010EA  4BB8               	infsnz	sqrt@exp& (0+255),f,b
  3675  0010EC  2BB9               	incf	(sqrt@exp+1)& (0+255),f,b
  3676  0010EE                     l4010:
  3677                           
  3678                           ; BSR set to: 0
  3679  0010EE  51BA               	movf	sqrt@frac& (0+255),w,b
  3680  0010F0  6FBE               	movwf	sqrt@root& (0+255),b
  3681  0010F2  51BB               	movf	(sqrt@frac+1)& (0+255),w,b
  3682  0010F4  6FBF               	movwf	(sqrt@root+1)& (0+255),b
  3683  0010F6  0E7F               	movlw	127
  3684  0010F8  15BC               	andwf	(sqrt@frac+2)& (0+255),w,b
  3685  0010FA  6FC0               	movwf	(sqrt@root+2)& (0+255),b
  3686  0010FC  6BC1               	clrf	(sqrt@root+3)& (0+255),b
  3687                           
  3688                           ; BSR set to: 0
  3689  0010FE  C0B8  F0B7         	movff	sqrt@exp,sqrt@p
  3690                           
  3691                           ; BSR set to: 0
  3692  001102  B1B7               	btfsc	sqrt@p& (0+255),0,b
  3693                           
  3694                           ; BSR set to: 0
  3695  001104  8FC0               	bsf	(sqrt@root+2)& (0+255),7,b
  3696                           
  3697                           ; BSR set to: 0
  3698  001106  90D8               	bcf	status,0,c
  3699  001108  31B7               	rrcf	sqrt@p& (0+255),w,b
  3700  00110A  6FC1               	movwf	(sqrt@root+3)& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703  00110C  9FC1               	bcf	(sqrt@root+3)& (0+255),7,b
  3704  00110E  D776               	goto	l3962
  3705  001110                     __end_of_sqrt:
  3706                           	callstack 0
  3707  001110                     PL24:
  3708                           	callstack 27
  3709  001110  51B3               	movf	sqrt@grs& (0+255),w,b
  3710  001112  27BA               	addwf	sqrt@frac& (0+255),f,b
  3711  001114  51B4               	movf	(sqrt@grs+1)& (0+255),w,b
  3712  001116  23BB               	addwfc	(sqrt@frac+1)& (0+255),f,b
  3713  001118  51B5               	movf	(sqrt@grs+2)& (0+255),w,b
  3714  00111A  23BC               	addwfc	(sqrt@frac+2)& (0+255),f,b
  3715  00111C  51B6               	movf	(sqrt@grs+3)& (0+255),w,b
  3716  00111E  23BD               	addwfc	(sqrt@frac+3)& (0+255),f,b
  3717  001120  0012               	return	
  3718  001122                     __end_ofPL24:
  3719                           	callstack 0
  3720  001122                     PL32:
  3721                           	callstack 27
  3722  001122  90D8               	bcf	status,0,c
  3723  001124  33BD               	rrcf	(sqrt@frac+3)& (0+255),f,b
  3724  001126  33BC               	rrcf	(sqrt@frac+2)& (0+255),f,b
  3725  001128  33BB               	rrcf	(sqrt@frac+1)& (0+255),f,b
  3726  00112A  33BA               	rrcf	sqrt@frac& (0+255),f,b
  3727  00112C  0012               	return	
  3728  00112E                     __end_ofPL32:
  3729                           	callstack 0
  3730  00112E                     PL68:
  3731                           	callstack 27
  3732  00112E  90D8               	bcf	status,0,c
  3733  001130  37AF               	rlcf	sqrt@tfrac& (0+255),f,b
  3734  001132  37B0               	rlcf	(sqrt@tfrac+1)& (0+255),f,b
  3735  001134  37B1               	rlcf	(sqrt@tfrac+2)& (0+255),f,b
  3736  001136  37B2               	rlcf	(sqrt@tfrac+3)& (0+255),f,b
  3737  001138  0012               	return	
  3738  00113A                     __end_ofPL68:
  3739                           	callstack 0
  3740  00113A                     PL78:
  3741                           	callstack 27
  3742  00113A  6BBA               	clrf	sqrt@frac& (0+255),b
  3743  00113C  6BBB               	clrf	(sqrt@frac+1)& (0+255),b
  3744  00113E  6BBC               	clrf	(sqrt@frac+2)& (0+255),b
  3745  001140  6BBD               	clrf	(sqrt@frac+3)& (0+255),b
  3746  001142  0012               	return	
  3747  001144                     __end_ofPL78:
  3748                           	callstack 0
  3749                           
  3750 ;; *************** function _show_lcd_main *****************
  3751 ;; Defined at:
  3752 ;;		line 676 in file "main.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  pwr_dsp         2   12[BANK0 ] unsigned int 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 3F/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3766 ;;      Params:         0       0       0       0       0       0       0
  3767 ;;      Locals:         0       2       0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0
  3769 ;;      Totals:         0       2       0       0       0       0       0
  3770 ;;Total ram usage:        2 bytes
  3771 ;; Hardware stack levels used: 1
  3772 ;; Hardware stack levels required when called: 7
  3773 ;; This function calls:
  3774 ;;		___lwdiv
  3775 ;;		___lwmod
  3776 ;;		_calc_power
  3777 ;;		_lcdPrint
  3778 ;;		_lcd_gotoxy
  3779 ;;		_lcd_putc
  3780 ;;		_sprintf
  3781 ;; This function is called by:
  3782 ;;		_main
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text3
  3787  000996                     __ptext3:
  3788                           	callstack 0
  3789  000996                     _show_lcd_main:
  3790                           	callstack 23
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;main.c: 677: uint16_t pwr_dsp;;main.c: 679: sprintf(TxtBuf, "U-In:%-3uV", U_real);
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;incstack = 0
  3797  000996  0E8B               	movlw	low _TxtBuf
  3798  000998  6E22               	movwf	sprintf@sp^0,c
  3799  00099A  0E99               	movlw	low STR_21
  3800  00099C  6E23               	movwf	sprintf@f^0,c
  3801  00099E  0E7F               	movlw	high STR_21
  3802  0009A0  6E24               	movwf	(sprintf@f+1)^0,c
  3803  0009A2  D981               	call	PL76	;call to abstracted procedure
  3804  0009A4  EC61  F006         	call	_sprintf	;wreg free
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;main.c: 680: lcd_gotoxy(1, 1);
  3808  0009A8  0E01               	movlw	1
  3809  0009AA  6E1A               	movwf	lcd_gotoxy@y^0,c
  3810  0009AC  EC80  F00E         	call	_lcd_gotoxy
  3811                           
  3812                           ;main.c: 681: lcdPrint(TxtBuf);
  3813  0009B0  D969               	call	PL30	;call to abstracted procedure
  3814  0009B2  EC41  F00B         	call	_lcdPrint	;wreg free
  3815                           
  3816                           ;main.c: 683: if (!is_stab) {
  3817  0009B6  B847               	btfsc	(_is_stab/(0+8))^0,_is_stab& (0+7),c
  3818  0009B8  D00A               	goto	l5422
  3819                           
  3820                           ;main.c: 684: lcd_gotoxy(12, 1);
  3821  0009BA  D97D               	call	PL96	;call to abstracted procedure
  3822  0009BC  EC80  F00E         	call	_lcd_gotoxy
  3823                           
  3824                           ;main.c: 685: lcdPrint("NOT STAB!");
  3825  0009C0  0EC5               	movlw	low STR_22
  3826  0009C2  6E1D               	movwf	lcdPrint@t^0,c
  3827  0009C4  0E7F               	movlw	high STR_22
  3828  0009C6  6E1E               	movwf	(lcdPrint@t+1)^0,c
  3829  0009C8  EC41  F00B         	call	_lcdPrint	;wreg free
  3830                           
  3831                           ;main.c: 686: } else {
  3832  0009CC  D009               	goto	l5426
  3833  0009CE                     l5422:
  3834                           
  3835                           ;main.c: 687: lcd_gotoxy(12, 1);
  3836  0009CE  D973               	call	PL96	;call to abstracted procedure
  3837  0009D0  EC80  F00E         	call	_lcd_gotoxy
  3838                           
  3839                           ;main.c: 688: lcdPrint("STABILIZE");
  3840  0009D4  0ECF               	movlw	low STR_23
  3841  0009D6  6E1D               	movwf	lcdPrint@t^0,c
  3842  0009D8  0E7F               	movlw	high STR_23
  3843  0009DA  6E1E               	movwf	(lcdPrint@t+1)^0,c
  3844  0009DC  EC41  F00B         	call	_lcdPrint	;wreg free
  3845  0009E0                     l5426:
  3846                           
  3847                           ;main.c: 689: };main.c: 691: sprintf(TxtBuf, "U-Set:%-3uV", u_set);
  3848  0009E0  0E8B               	movlw	low _TxtBuf
  3849  0009E2  6E22               	movwf	sprintf@sp^0,c
  3850  0009E4  0E76               	movlw	low STR_24
  3851  0009E6  6E23               	movwf	sprintf@f^0,c
  3852  0009E8  0E7F               	movlw	high STR_24
  3853  0009EA  6E24               	movwf	(sprintf@f+1)^0,c
  3854  0009EC  C081  F025         	movff	_u_set,?_sprintf+3
  3855  0009F0  6A26               	clrf	(?_sprintf+4)^0,c
  3856  0009F2  EC61  F006         	call	_sprintf	;wreg free
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;main.c: 692: lcd_gotoxy(1, 3);
  3860  0009F6  ECA2  F004         	call	PL34	;call to abstracted procedure
  3861  0009FA  EC80  F00E         	call	_lcd_gotoxy
  3862                           
  3863                           ;main.c: 693: lcdPrint(TxtBuf);
  3864  0009FE  D942               	call	PL30	;call to abstracted procedure
  3865  000A00  EC41  F00B         	call	_lcdPrint	;wreg free
  3866                           
  3867                           ;main.c: 696: if (power_100)
  3868  000A04  AC47               	btfss	(_power_100/(0+8))^0,_power_100& (0+7),c
  3869  000A06  D005               	goto	l5436
  3870                           
  3871                           ;main.c: 697: sprintf(TxtBuf, "U-Out:%-3uV", U_real);
  3872  000A08  D941               	call	PL62	;call to abstracted procedure
  3873  000A0A  D94D               	call	PL76	;call to abstracted procedure
  3874  000A0C  EC61  F006         	call	_sprintf	;wreg free
  3875  000A10  D007               	goto	l5438
  3876  000A12                     l5436:
  3877                           
  3878                           ;main.c: 698: else;main.c: 699: sprintf(TxtBuf, "U-Out:%-3uV", U_Out);
  3879  000A12  D93C               	call	PL62	;call to abstracted procedure
  3880  000A14  C072  F025         	movff	_U_Out,?_sprintf+3
  3881  000A18  C073  F026         	movff	_U_Out+1,?_sprintf+4
  3882  000A1C  EC61  F006         	call	_sprintf	;wreg free
  3883  000A20                     l5438:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 700: lcd_gotoxy(1, 2);
  3887  000A20  ECA5  F004         	call	PL38	;call to abstracted procedure
  3888  000A24  EC80  F00E         	call	_lcd_gotoxy
  3889                           
  3890                           ;main.c: 701: lcdPrint(TxtBuf);
  3891  000A28  D92D               	call	PL30	;call to abstracted procedure
  3892  000A2A  EC41  F00B         	call	_lcdPrint	;wreg free
  3893                           
  3894                           ;main.c: 705: sprintf(TxtBuf, "A-le:%-5u ", angleU);
  3895  000A2E  0E8B               	movlw	low _TxtBuf
  3896  000A30  6E22               	movwf	sprintf@sp^0,c
  3897  000A32  0E8E               	movlw	low STR_27
  3898  000A34  6E23               	movwf	sprintf@f^0,c
  3899  000A36  0E7F               	movlw	high STR_27
  3900  000A38  6E24               	movwf	(sprintf@f+1)^0,c
  3901  000A3A  C0CE  F025         	movff	_angleU,?_sprintf+3
  3902  000A3E  C0CF  F026         	movff	_angleU+1,?_sprintf+4
  3903  000A42  EC61  F006         	call	_sprintf	;wreg free
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;main.c: 706: lcd_gotoxy(1, 4);
  3907  000A46  D93A               	call	PL98	;call to abstracted procedure
  3908  000A48  EC80  F00E         	call	_lcd_gotoxy
  3909                           
  3910                           ;main.c: 707: lcdPrint(TxtBuf);
  3911  000A4C  D91B               	call	PL30	;call to abstracted procedure
  3912  000A4E  EC41  F00B         	call	_lcdPrint	;wreg free
  3913                           
  3914                           ;main.c: 709: sprintf(TxtBuf, "%c=%u.%u", 0x02, r_whole, r_dec);
  3915  000A52  0E8B               	movlw	low _TxtBuf
  3916  000A54  6E22               	movwf	sprintf@sp^0,c
  3917  000A56  0EE2               	movlw	low STR_28
  3918  000A58  6E23               	movwf	sprintf@f^0,c
  3919  000A5A  0E7F               	movlw	high STR_28
  3920  000A5C  6E24               	movwf	(sprintf@f+1)^0,c
  3921  000A5E  6A26               	clrf	(?_sprintf+4)^0,c
  3922  000A60  0E02               	movlw	2
  3923  000A62  6E25               	movwf	(?_sprintf+3)^0,c
  3924  000A64  C07F  F027         	movff	_r_whole,?_sprintf+5
  3925  000A68  6A28               	clrf	(?_sprintf+6)^0,c
  3926  000A6A  C07E  F029         	movff	_r_dec,?_sprintf+7
  3927  000A6E  6A2A               	clrf	(?_sprintf+8)^0,c
  3928  000A70  EC61  F006         	call	_sprintf	;wreg free
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;main.c: 710: lcd_gotoxy(12, 3);
  3932  000A74  0E03               	movlw	3
  3933  000A76  6E1A               	movwf	lcd_gotoxy@y^0,c
  3934  000A78  0E0C               	movlw	12
  3935  000A7A  EC80  F00E         	call	_lcd_gotoxy
  3936                           
  3937                           ;main.c: 711: lcdPrint(TxtBuf);
  3938  000A7E  D902               	call	PL30	;call to abstracted procedure
  3939  000A80  EC41  F00B         	call	_lcdPrint	;wreg free
  3940                           
  3941                           ;main.c: 718: lcd_gotoxy(12, 4);
  3942  000A84  0E04               	movlw	4
  3943  000A86  6E1A               	movwf	lcd_gotoxy@y^0,c
  3944  000A88  0E0C               	movlw	12
  3945  000A8A  EC80  F00E         	call	_lcd_gotoxy
  3946                           
  3947                           ;main.c: 719: lcd_putc('T');
  3948  000A8E  0E54               	movlw	84
  3949  000A90  EC67  F00F         	call	_lcd_putc
  3950                           
  3951                           ;main.c: 720: lcd_putc(':');
  3952  000A94  0E3A               	movlw	58
  3953  000A96  EC67  F00F         	call	_lcd_putc
  3954                           
  3955                           ;main.c: 721: if (TempEn) {
  3956  000A9A  0100               	movlb	0	; () banked
  3957  000A9C  5185               	movf	_TempEn& (0+255),w,b
  3958  000A9E  E101 D096          	bz	l655
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;main.c: 722: if (isTemp == 1) {
  3962  000AA2  043D               	decf	_isTemp^0,w,c
  3963  000AA4  E17A               	bnz	l5472
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 723: if (((temperature / 1000) % 10) == 0) {
  3967  000AA6  D8EB               	call	PL28	;call to abstracted procedure
  3968  000AA8  D8E4               	call	PL4	;call to abstracted procedure
  3969  000AAA  EC9A  F00D         	call	___lwdiv	;wreg free
  3970  000AAE  D8D9               	call	PL2	;call to abstracted procedure
  3971  000AB0  EC24  F00E         	call	___lwmod	;wreg free
  3972  000AB4  501D               	movf	?___lwmod^0,w,c
  3973  000AB6  101E               	iorwf	(?___lwmod+1)^0,w,c
  3974  000AB8  E146               	bnz	l5470
  3975                           
  3976                           ;main.c: 724: if (((temperature / 100) % 10) == 0) {
  3977  000ABA  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  3978  000ABC  0E64               	movlw	100
  3979  000ABE  D8D9               	call	PL4	;call to abstracted procedure
  3980  000AC0  EC9A  F00D         	call	___lwdiv	;wreg free
  3981  000AC4  D8CE               	call	PL2	;call to abstracted procedure
  3982  000AC6  EC24  F00E         	call	___lwmod	;wreg free
  3983  000ACA  501D               	movf	?___lwmod^0,w,c
  3984  000ACC  101E               	iorwf	(?___lwmod+1)^0,w,c
  3985  000ACE  E119               	bnz	l5468
  3986                           
  3987                           ;main.c: 725: lcd_putc(((temperature / 10) % 10) + 48);
  3988  000AD0  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  3989  000AD2  0E0A               	movlw	10
  3990  000AD4  D8CE               	call	PL4	;call to abstracted procedure
  3991  000AD6  EC9A  F00D         	call	___lwdiv	;wreg free
  3992  000ADA  D8C3               	call	PL2	;call to abstracted procedure
  3993  000ADC  EC24  F00E         	call	___lwmod	;wreg free
  3994  000AE0  501D               	movf	?___lwmod^0,w,c
  3995  000AE2  0F30               	addlw	48
  3996  000AE4  EC67  F00F         	call	_lcd_putc
  3997                           
  3998                           ;main.c: 728: lcd_putc(7);
  3999  000AE8  0E07               	movlw	7
  4000  000AEA  EC67  F00F         	call	_lcd_putc
  4001                           
  4002                           ;main.c: 729: lcd_putc(' ');
  4003  000AEE  0E20               	movlw	32
  4004  000AF0  EC67  F00F         	call	_lcd_putc
  4005                           
  4006                           ;main.c: 730: lcd_putc(' ');
  4007  000AF4  0E20               	movlw	32
  4008  000AF6  EC67  F00F         	call	_lcd_putc
  4009                           
  4010                           ;main.c: 731: lcd_putc(' ');
  4011  000AFA  0E20               	movlw	32
  4012  000AFC  EC67  F00F         	call	_lcd_putc
  4013                           
  4014                           ;main.c: 733: } else {
  4015  000B00  D07D               	goto	l5480
  4016  000B02                     l5468:
  4017                           
  4018                           ;main.c: 734: lcd_putc(((temperature / 100) % 10) + 48);
  4019  000B02  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  4020  000B04  0E64               	movlw	100
  4021  000B06  D8B5               	call	PL4	;call to abstracted procedure
  4022  000B08  EC9A  F00D         	call	___lwdiv	;wreg free
  4023  000B0C  D8AA               	call	PL2	;call to abstracted procedure
  4024  000B0E  EC24  F00E         	call	___lwmod	;wreg free
  4025  000B12  501D               	movf	?___lwmod^0,w,c
  4026  000B14  0F30               	addlw	48
  4027  000B16  EC67  F00F         	call	_lcd_putc
  4028                           
  4029                           ;main.c: 735: lcd_putc(((temperature / 10) % 10) + 48);
  4030  000B1A  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  4031  000B1C  0E0A               	movlw	10
  4032  000B1E  D8A9               	call	PL4	;call to abstracted procedure
  4033  000B20  EC9A  F00D         	call	___lwdiv	;wreg free
  4034  000B24  D89E               	call	PL2	;call to abstracted procedure
  4035  000B26  EC24  F00E         	call	___lwmod	;wreg free
  4036  000B2A  501D               	movf	?___lwmod^0,w,c
  4037  000B2C  0F30               	addlw	48
  4038  000B2E  EC67  F00F         	call	_lcd_putc
  4039                           
  4040                           ;main.c: 738: lcd_putc(7);
  4041  000B32  0E07               	movlw	7
  4042  000B34  EC67  F00F         	call	_lcd_putc
  4043                           
  4044                           ;main.c: 739: lcd_putc(' ');
  4045  000B38  0E20               	movlw	32
  4046  000B3A  EC67  F00F         	call	_lcd_putc
  4047                           
  4048                           ;main.c: 740: lcd_putc(' ');
  4049  000B3E  0E20               	movlw	32
  4050  000B40  EC67  F00F         	call	_lcd_putc
  4051  000B44  D05B               	goto	l5480
  4052  000B46                     l5470:
  4053                           
  4054                           ;main.c: 744: lcd_putc(((temperature / 1000) % 10) + 48);
  4055  000B46  D89B               	call	PL28	;call to abstracted procedure
  4056  000B48  D894               	call	PL4	;call to abstracted procedure
  4057  000B4A  EC9A  F00D         	call	___lwdiv	;wreg free
  4058  000B4E  D889               	call	PL2	;call to abstracted procedure
  4059  000B50  EC24  F00E         	call	___lwmod	;wreg free
  4060  000B54  501D               	movf	?___lwmod^0,w,c
  4061  000B56  0F30               	addlw	48
  4062  000B58  EC67  F00F         	call	_lcd_putc
  4063                           
  4064                           ;main.c: 745: lcd_putc(((temperature / 100) % 10) + 48);
  4065  000B5C  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  4066  000B5E  0E64               	movlw	100
  4067  000B60  D888               	call	PL4	;call to abstracted procedure
  4068  000B62  EC9A  F00D         	call	___lwdiv	;wreg free
  4069  000B66  D87D               	call	PL2	;call to abstracted procedure
  4070  000B68  EC24  F00E         	call	___lwmod	;wreg free
  4071  000B6C  501D               	movf	?___lwmod^0,w,c
  4072  000B6E  0F30               	addlw	48
  4073  000B70  EC67  F00F         	call	_lcd_putc
  4074                           
  4075                           ;main.c: 746: lcd_putc(((temperature / 10) % 10) + 48);
  4076  000B74  6A19               	clrf	(___lwdiv@divisor+1)^0,c
  4077  000B76  0E0A               	movlw	10
  4078  000B78  D87C               	call	PL4	;call to abstracted procedure
  4079  000B7A  EC9A  F00D         	call	___lwdiv	;wreg free
  4080  000B7E  D871               	call	PL2	;call to abstracted procedure
  4081  000B80  EC24  F00E         	call	___lwmod	;wreg free
  4082  000B84  501D               	movf	?___lwmod^0,w,c
  4083  000B86  0F30               	addlw	48
  4084  000B88  EC67  F00F         	call	_lcd_putc
  4085                           
  4086                           ;main.c: 749: lcd_putc(7);
  4087  000B8C  0E07               	movlw	7
  4088  000B8E  EC67  F00F         	call	_lcd_putc
  4089                           
  4090                           ;main.c: 750: lcd_putc(' ');
  4091  000B92  0E20               	movlw	32
  4092  000B94  EC67  F00F         	call	_lcd_putc
  4093  000B98  D031               	goto	l5480
  4094  000B9A                     l5472:
  4095                           
  4096                           ; BSR set to: 0
  4097  000B9A  0E03               	movlw	3
  4098  000B9C  183D               	xorwf	_isTemp^0,w,c
  4099  000B9E  E12E               	bnz	l5480
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;main.c: 754: lcd_putc('?');
  4103  000BA0  0E3F               	movlw	63
  4104  000BA2  EC67  F00F         	call	_lcd_putc
  4105                           
  4106                           ;main.c: 755: lcd_putc('?');
  4107  000BA6  0E3F               	movlw	63
  4108  000BA8  EC67  F00F         	call	_lcd_putc
  4109                           
  4110                           ;main.c: 756: lcd_putc('?');
  4111  000BAC  0E3F               	movlw	63
  4112  000BAE  EC67  F00F         	call	_lcd_putc
  4113                           
  4114                           ;main.c: 757: lcd_putc(' ');
  4115  000BB2  0E20               	movlw	32
  4116  000BB4  EC67  F00F         	call	_lcd_putc
  4117                           
  4118                           ;main.c: 758: lcd_putc(' ');
  4119  000BB8  0E20               	movlw	32
  4120  000BBA  EC67  F00F         	call	_lcd_putc
  4121                           
  4122                           ;main.c: 759: lcd_putc(' ');
  4123  000BBE  0E20               	movlw	32
  4124  000BC0  EC67  F00F         	call	_lcd_putc
  4125                           
  4126                           ;main.c: 760: lcd_putc(' ');
  4127  000BC4  0E20               	movlw	32
  4128  000BC6  EC67  F00F         	call	_lcd_putc
  4129                           
  4130                           ;main.c: 763: TMR2ON = 1;
  4131  000BCA  84CA               	bsf	4042,2,c	;volatile
  4132  000BCC  D017               	goto	l5480
  4133  000BCE                     l655:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;main.c: 766: sound_enable = 0;
  4137  000BCE  6A41               	clrf	_sound_enable^0,c
  4138                           
  4139                           ;main.c: 767: LATCbits.LATC5 = 0;
  4140  000BD0  9A8B               	bcf	139,5,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 768: lcd_putc('-');
  4144  000BD2  0E2D               	movlw	45
  4145  000BD4  EC67  F00F         	call	_lcd_putc
  4146                           
  4147                           ;main.c: 769: lcd_putc('O');
  4148  000BD8  0E4F               	movlw	79
  4149  000BDA  EC67  F00F         	call	_lcd_putc
  4150                           
  4151                           ;main.c: 770: lcd_putc('F');
  4152  000BDE  0E46               	movlw	70
  4153  000BE0  EC67  F00F         	call	_lcd_putc
  4154                           
  4155                           ;main.c: 771: lcd_putc('F');
  4156  000BE4  0E46               	movlw	70
  4157  000BE6  EC67  F00F         	call	_lcd_putc
  4158                           
  4159                           ;main.c: 772: lcd_putc('-');
  4160  000BEA  0E2D               	movlw	45
  4161  000BEC  EC67  F00F         	call	_lcd_putc
  4162                           
  4163                           ;main.c: 773: lcd_putc(' ');
  4164  000BF0  0E20               	movlw	32
  4165  000BF2  EC67  F00F         	call	_lcd_putc
  4166                           
  4167                           ;main.c: 774: lcd_putc(' ');
  4168  000BF6  0E20               	movlw	32
  4169  000BF8  EC67  F00F         	call	_lcd_putc
  4170  000BFC                     l5480:
  4171                           
  4172                           ;main.c: 775: };main.c: 777: if ((tick_t1_1 <= 100) && (show_tp)) {
  4173  000BFC  0E65               	movlw	101
  4174  000BFE  6042               	cpfslt	_tick_t1_1^0,c
  4175  000C00  D01F               	goto	l5492
  4176  000C02  A647               	btfss	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4177  000C04  D01D               	goto	l5492
  4178                           
  4179                           ;main.c: 779: pwr_dsp = calc_power(t_res, u_set);
  4180  000C06  EC82  F004         	call	PL12	;call to abstracted procedure
  4181  000C0A  C081  F027         	movff	_u_set,calc_power@u_rl
  4182  000C0E  6A28               	clrf	(calc_power@u_rl+1)^0,c
  4183  000C10  EC04  F00C         	call	_calc_power	;wreg free
  4184  000C14  C023  F0B9         	movff	?_calc_power,show_lcd_main@pwr_dsp
  4185  000C18  C024  F0BA         	movff	?_calc_power+1,show_lcd_main@pwr_dsp+1
  4186                           
  4187                           ;main.c: 781: sprintf(TxtBuf, "P*:%c%-4uW", 0x01, pwr_dsp);
  4188  000C1C  0E8B               	movlw	low _TxtBuf
  4189  000C1E  6E22               	movwf	sprintf@sp^0,c
  4190  000C20  0EA4               	movlw	low STR_29
  4191  000C22  6E23               	movwf	sprintf@f^0,c
  4192  000C24  0E7F               	movlw	high STR_29
  4193  000C26  D839               	call	PL72	;call to abstracted procedure
  4194  000C28  C0B9  F027         	movff	show_lcd_main@pwr_dsp,?_sprintf+5
  4195  000C2C  C0BA  F028         	movff	show_lcd_main@pwr_dsp+1,?_sprintf+6
  4196  000C30  EC61  F006         	call	_sprintf	;wreg free
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;main.c: 782: lcd_gotoxy(12, 2);
  4200  000C34  D83D               	call	PL94	;call to abstracted procedure
  4201  000C36  EC80  F00E         	call	_lcd_gotoxy
  4202  000C3A                     l5490:
  4203                           
  4204                           ;main.c: 783: lcdPrint(TxtBuf);
  4205  000C3A  D824               	call	PL30	;call to abstracted procedure
  4206  000C3C  EF41  F00B         	goto	_lcdPrint	;wreg free
  4207  000C40                     l5492:
  4208                           
  4209                           ;main.c: 793: sprintf(TxtBuf, "Pr:%c%-4uW", 0x01, watt_disp);
  4210  000C40  0E8B               	movlw	low _TxtBuf
  4211  000C42  6E22               	movwf	sprintf@sp^0,c
  4212  000C44  0EAF               	movlw	low STR_30
  4213  000C46  6E23               	movwf	sprintf@f^0,c
  4214  000C48  0E7F               	movlw	high STR_30
  4215  000C4A  D827               	call	PL72	;call to abstracted procedure
  4216  000C4C  C036  F027         	movff	_watt_disp,?_sprintf+5
  4217  000C50  C037  F028         	movff	_watt_disp+1,?_sprintf+6
  4218  000C54  EC61  F006         	call	_sprintf	;wreg free
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;main.c: 795: show_tp = 0;
  4222  000C58  9647               	bcf	(_show_tp/(0+8))^0,_show_tp& (0+7),c
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;main.c: 796: lcd_gotoxy(12, 2);
  4226  000C5A  D82A               	call	PL94	;call to abstracted procedure
  4227  000C5C  EC80  F00E         	call	_lcd_gotoxy
  4228  000C60  D7EC               	goto	l5490
  4229  000C62                     __end_of_show_lcd_main:
  4230                           	callstack 0
  4231  000C62                     PL2:
  4232                           	callstack 23
  4233  000C62  C016  F01D         	movff	?___lwdiv,___lwmod@dividend
  4234  000C66  C017  F01E         	movff	?___lwdiv+1,___lwmod@dividend+1
  4235  000C6A  6A20               	clrf	(___lwmod@divisor+1)^0,c
  4236  000C6C  0E0A               	movlw	10
  4237  000C6E  6E1F               	movwf	___lwmod@divisor^0,c
  4238  000C70  0C0A               	retlw	10
  4239  000C72                     __end_ofPL2:
  4240                           	callstack 0
  4241  000C72                     PL4:
  4242                           	callstack 23
  4243  000C72  6E18               	movwf	___lwdiv@divisor^0,c
  4244  000C74  C0A9  F016         	movff	_temperature,___lwdiv@dividend
  4245  000C78  C0AA  F017         	movff	_temperature+1,___lwdiv@dividend+1
  4246  000C7C  0012               	return	
  4247  000C7E                     __end_ofPL4:
  4248                           	callstack 0
  4249  000C7E                     PL28:
  4250                           	callstack 23
  4251  000C7E  0E03               	movlw	3
  4252  000C80  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  4253  000C82  0CE8               	retlw	232
  4254  000C84                     __end_ofPL28:
  4255                           	callstack 0
  4256  000C84                     PL30:
  4257                           	callstack 23
  4258  000C84  0E8B               	movlw	low _TxtBuf
  4259  000C86  6E1D               	movwf	lcdPrint@t^0,c
  4260  000C88  6A1E               	clrf	(lcdPrint@t+1)^0,c
  4261  000C8A  0012               	return	
  4262  000C8C                     __end_ofPL30:
  4263                           	callstack 0
  4264  000C8C                     PL62:
  4265                           	callstack 23
  4266  000C8C  0E8B               	movlw	low _TxtBuf
  4267  000C8E  6E22               	movwf	sprintf@sp^0,c
  4268  000C90  0E82               	movlw	low STR_25
  4269  000C92  6E23               	movwf	sprintf@f^0,c
  4270  000C94  0E7F               	movlw	high STR_25
  4271  000C96  6E24               	movwf	(sprintf@f+1)^0,c
  4272  000C98  0012               	return	
  4273  000C9A                     __end_ofPL62:
  4274                           	callstack 0
  4275  000C9A                     PL72:
  4276                           	callstack 23
  4277  000C9A  6E24               	movwf	(sprintf@f+1)^0,c
  4278  000C9C  0E00               	movlw	0
  4279  000C9E  6E26               	movwf	(?_sprintf+4)^0,c
  4280  000CA0  0E01               	movlw	1
  4281  000CA2  6E25               	movwf	(?_sprintf+3)^0,c
  4282  000CA4  0C01               	retlw	1
  4283  000CA6                     __end_ofPL72:
  4284                           	callstack 0
  4285  000CA6                     PL76:
  4286                           	callstack 23
  4287  000CA6  C074  F025         	movff	_U_real,?_sprintf+3
  4288  000CAA  C075  F026         	movff	_U_real+1,?_sprintf+4
  4289  000CAE  0012               	return	
  4290  000CB0                     __end_ofPL76:
  4291                           	callstack 0
  4292  000CB0                     PL94:
  4293                           	callstack 23
  4294  000CB0  0E02               	movlw	2
  4295  000CB2  6E1A               	movwf	lcd_gotoxy@y^0,c
  4296  000CB4  0C0C               	retlw	12
  4297  000CB6                     __end_ofPL94:
  4298                           	callstack 0
  4299  000CB6                     PL96:
  4300                           	callstack 23
  4301  000CB6  0E01               	movlw	1
  4302  000CB8  6E1A               	movwf	lcd_gotoxy@y^0,c
  4303  000CBA  0C0C               	retlw	12
  4304  000CBC                     __end_ofPL96:
  4305                           	callstack 0
  4306  000CBC                     PL98:
  4307                           	callstack 23
  4308  000CBC  0E04               	movlw	4
  4309  000CBE  6E1A               	movwf	lcd_gotoxy@y^0,c
  4310  000CC0  0C01               	retlw	1
  4311  000CC2                     __end_ofPL98:
  4312                           	callstack 0
  4313                           
  4314 ;; *************** function _sprintf *****************
  4315 ;; Defined at:
  4316 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  sp              1   33[COMRAM] PTR unsigned char 
  4319 ;;		 -> TxtBuf(21), 
  4320 ;;  f               2   34[COMRAM] PTR const unsigned char 
  4321 ;;		 -> STR_30(11), STR_29(11), STR_28(9), STR_27(11), 
  4322 ;;		 -> STR_26(12), STR_25(12), STR_24(12), STR_21(11), 
  4323 ;;		 -> STR_18(11), STR_17(14), STR_14(20), STR_4(6), 
  4324 ;;		 -> STR_2(15), 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  tmpval          4    0        struct .
  4327 ;;  width           2   10[BANK0 ] int 
  4328 ;;  len             2    6[BANK0 ] unsigned int 
  4329 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  4330 ;;		 -> STR_31(7), sprintf@c(1), ?_sprintf(2), STR_20(4), 
  4331 ;;		 -> STR_19(3), compile_time(9), compile_date(12), STR_3(9), 
  4332 ;;  val             2    0[BANK0 ] unsigned int 
  4333 ;;  c               1    9[BANK0 ] unsigned char 
  4334 ;;  flag            1    8[BANK0 ] unsigned char 
  4335 ;;  ap              1    5[BANK0 ] PTR void [1]
  4336 ;;		 -> ?_sprintf(2), 
  4337 ;;  prec            1    2[BANK0 ] char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  2   33[COMRAM] int 
  4340 ;; Registers used:
  4341 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 3F/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4347 ;;      Params:         9       0       0       0       0       0       0
  4348 ;;      Locals:         0      12       0       0       0       0       0
  4349 ;;      Temps:          4       0       0       0       0       0       0
  4350 ;;      Totals:        13      12       0       0       0       0       0
  4351 ;;Total ram usage:       25 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; Hardware stack levels required when called: 4
  4354 ;; This function calls:
  4355 ;;		___lwdiv
  4356 ;;		___lwmod
  4357 ;;		___wmul
  4358 ;;		_isdigit
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;;		_show_lcd_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text4
  4366  000CC2                     __ptext4:
  4367                           	callstack 0
  4368  000CC2                     _sprintf:
  4369                           	callstack 26
  4370                           
  4371                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  4372                           
  4373                           ;incstack = 0
  4374  000CC2  0E25               	movlw	low (?_sprintf+3)
  4375  000CC4  0100               	movlb	0	; () banked
  4376  000CC6  6FB2               	movwf	sprintf@ap& (0+255),b
  4377                           
  4378                           ;doprnt.c: 553: while((c = *f++)) {
  4379  000CC8  D12E               	goto	u4630
  4380  000CCA                     l5048:
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;doprnt.c: 555: if(c != '%')
  4384  000CCA  0E25               	movlw	37
  4385  000CCC  19B6               	xorwf	sprintf@c& (0+255),w,b
  4386  000CCE  E002               	bz	l783
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  4390                           
  4391                           ; BSR set to: 0
  4392  000CD0  D954               	call	PL44	;call to abstracted procedure
  4393                           
  4394                           ;doprnt.c: 559: continue;
  4395  000CD2  D129               	goto	u4630
  4396  000CD4                     l783:
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  4400  000CD4  6BB7               	clrf	sprintf@width& (0+255),b
  4401  000CD6  6BB8               	clrf	(sprintf@width+1)& (0+255),b
  4402                           
  4403                           ;doprnt.c: 565: flag = 0;
  4404  000CD8  6BB5               	clrf	sprintf@flag& (0+255),b
  4405  000CDA  D005               	goto	l5060
  4406  000CDC                     l5054:
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;doprnt.c: 571: flag |= 0x08;
  4410  000CDC  87B5               	bsf	sprintf@flag& (0+255),3,b
  4411  000CDE  D001               	goto	L5
  4412  000CE0                     l5056:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;doprnt.c: 597: flag |= 0x04;
  4416  000CE0  85B5               	bsf	sprintf@flag& (0+255),2,b
  4417  000CE2                     L5:
  4418                           
  4419                           ;doprnt.c: 598: f++;
  4420  000CE2  4A23               	infsnz	sprintf@f^0,f,c
  4421  000CE4  2A24               	incf	(sprintf@f+1)^0,f,c
  4422  000CE6                     l5060:
  4423                           
  4424                           ; BSR set to: 0
  4425  000CE6  D92A               	call	PL14	;call to abstracted procedure
  4426                           
  4427                           ; Switch size 1, requested type "space"
  4428                           ; Number of cases is 2, Range of values is 45 to 48
  4429                           ; switch strategies available:
  4430                           ; Name         Instructions Cycles
  4431                           ; simple_byte            7     4 (average)
  4432                           ;	Chosen strategy is simple_byte
  4433  000CE8  0A2D               	xorlw	45	; case 45
  4434  000CEA  E0F8               	bz	l5054
  4435  000CEC  0A1D               	xorlw	29	; case 48
  4436  000CEE  E0F8               	bz	l5056
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;doprnt.c: 610: if(flag & 0x08)
  4440  000CF0  B7B5               	btfsc	sprintf@flag& (0+255),3,b
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;doprnt.c: 611: flag &= ~0x04;
  4444  000CF2  95B5               	bcf	sprintf@flag& (0+255),2,b
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  4448  000CF4  D923               	call	PL14	;call to abstracted procedure
  4449  000CF6  EC36  F00F         	call	_isdigit
  4450  000CFA  E201 D09E          	bnc	l5130
  4451                           
  4452                           ;doprnt.c: 615: width = 0;
  4453  000CFE  0100               	movlb	0	; () banked
  4454  000D00  6BB7               	clrf	sprintf@width& (0+255),b
  4455  000D02  6BB8               	clrf	(sprintf@width+1)& (0+255),b
  4456  000D04                     l5068:
  4457                           
  4458                           ;doprnt.c: 617: width *= 10;
  4459  000D04  C0B7  F016         	movff	sprintf@width,___wmul@multiplier
  4460  000D08  C0B8  F017         	movff	sprintf@width+1,___wmul@multiplier+1
  4461  000D0C  6A19               	clrf	(___wmul@multiplicand+1)^0,c
  4462  000D0E  0E0A               	movlw	10
  4463  000D10  6E18               	movwf	___wmul@multiplicand^0,c
  4464  000D12  EC11  F00F         	call	___wmul	;wreg free
  4465  000D16  C016  F0B7         	movff	?___wmul,sprintf@width
  4466  000D1A  C017  F0B8         	movff	?___wmul+1,sprintf@width+1
  4467                           
  4468                           ;doprnt.c: 618: width += *f++ - '0';
  4469  000D1E  0ED0               	movlw	208
  4470  000D20  6E2B               	movwf	??_sprintf^0,c
  4471  000D22  682C               	setf	(??_sprintf+1)^0,c
  4472  000D24  D90B               	call	PL14	;call to abstracted procedure
  4473  000D26  6E2D               	movwf	(??_sprintf+2)^0,c
  4474  000D28  6A2E               	clrf	(??_sprintf+3)^0,c
  4475  000D2A  502B               	movf	??_sprintf^0,w,c
  4476  000D2C  262D               	addwf	(??_sprintf+2)^0,f,c
  4477  000D2E  502C               	movf	(??_sprintf+1)^0,w,c
  4478  000D30  222E               	addwfc	(??_sprintf+3)^0,f,c
  4479  000D32  502D               	movf	(??_sprintf+2)^0,w,c
  4480  000D34  0100               	movlb	0	; () banked
  4481  000D36  27B7               	addwf	sprintf@width& (0+255),f,b
  4482  000D38  502E               	movf	(??_sprintf+3)^0,w,c
  4483  000D3A  23B8               	addwfc	(sprintf@width+1)& (0+255),f,b
  4484                           
  4485                           ; BSR set to: 0
  4486  000D3C  4A23               	infsnz	sprintf@f^0,f,c
  4487  000D3E  2A24               	incf	(sprintf@f+1)^0,f,c
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  4491  000D40  D8FD               	call	PL14	;call to abstracted procedure
  4492  000D42  EC36  F00F         	call	_isdigit
  4493  000D46  E379               	bnc	l5130
  4494  000D48  D7DD               	goto	l5068
  4495  000D4A                     l5076:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4499  000D4A  51B2               	movf	sprintf@ap& (0+255),w,b
  4500  000D4C  6ED9               	movwf	fsr2l,c
  4501  000D4E  6ADA               	clrf	fsr2h,c
  4502  000D50  CFDE F0B0          	movff	postinc2,sprintf@cp
  4503  000D54  CFDD F0B1          	movff	postdec2,sprintf@cp+1
  4504                           
  4505                           ; BSR set to: 0
  4506  000D58  0E02               	movlw	2
  4507  000D5A  27B2               	addwf	sprintf@ap& (0+255),f,b
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 766: if(!cp)
  4511  000D5C  51B0               	movf	sprintf@cp& (0+255),w,b
  4512  000D5E  11B1               	iorwf	(sprintf@cp+1)& (0+255),w,b
  4513  000D60  E104               	bnz	l5084
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 767: cp = "(null)";
  4517  000D62  0EEB               	movlw	low STR_31
  4518  000D64  6FB0               	movwf	sprintf@cp& (0+255),b
  4519  000D66  0E7F               	movlw	high STR_31
  4520  000D68  6FB1               	movwf	(sprintf@cp+1)& (0+255),b
  4521  000D6A                     l5084:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;doprnt.c: 771: len = 0;
  4525  000D6A  6BB3               	clrf	sprintf@len& (0+255),b
  4526  000D6C  6BB4               	clrf	(sprintf@len+1)& (0+255),b
  4527                           
  4528                           ;doprnt.c: 772: while(cp[len])
  4529  000D6E  D003               	goto	l5088
  4530  000D70                     l5086:
  4531                           
  4532                           ;doprnt.c: 773: len++;
  4533  000D70  0100               	movlb	0	; () banked
  4534  000D72  4BB3               	infsnz	sprintf@len& (0+255),f,b
  4535  000D74  2BB4               	incf	(sprintf@len+1)& (0+255),f,b
  4536  000D76                     l5088:
  4537                           
  4538                           ; BSR set to: 0
  4539  000D76  51B3               	movf	sprintf@len& (0+255),w,b
  4540  000D78  25B0               	addwf	sprintf@cp& (0+255),w,b
  4541  000D7A  6E2B               	movwf	??_sprintf^0,c
  4542  000D7C  51B4               	movf	(sprintf@len+1)& (0+255),w,b
  4543  000D7E  21B1               	addwfc	(sprintf@cp+1)& (0+255),w,b
  4544  000D80  6E2C               	movwf	(??_sprintf+1)^0,c
  4545  000D82  C02B  FFF6         	movff	??_sprintf,tblptrl
  4546  000D86  C02C  FFF7         	movff	??_sprintf+1,tblptrh
  4547  000D8A  6AF8               	clrf	tblptru,c
  4548  000D8C  0E05               	movlw	(high __ramtop+-1)
  4549  000D8E  64F7               	cpfsgt	tblptrh,c
  4550  000D90  D003               	bra	u4427
  4551  000D92  0008               	tblrd		*
  4552  000D94  50F5               	movf	tablat,w,c
  4553  000D96  D002               	bra	u4420
  4554  000D98                     u4427:
  4555  000D98  ECA6  F00B         	call	PL6	;call to abstracted procedure
  4556  000D9C                     u4420:
  4557  000D9C  0900               	iorlw	0
  4558  000D9E  E1E8               	bnz	l5086
  4559  000DA0                     u4430:
  4560                           
  4561                           ;doprnt.c: 783: if(((unsigned)width) > len)
  4562  000DA0  0100               	movlb	0	; () banked
  4563  000DA2  51B7               	movf	sprintf@width& (0+255),w,b
  4564  000DA4  5DB3               	subwf	sprintf@len& (0+255),w,b
  4565  000DA6  51B8               	movf	(sprintf@width+1)& (0+255),w,b
  4566  000DA8  59B4               	subwfb	(sprintf@len+1)& (0+255),w,b
  4567  000DAA  E205               	bc	l804
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;doprnt.c: 784: width -= len;
  4571  000DAC  51B3               	movf	sprintf@len& (0+255),w,b
  4572  000DAE  5FB7               	subwf	sprintf@width& (0+255),f,b
  4573  000DB0  51B4               	movf	(sprintf@len+1)& (0+255),w,b
  4574  000DB2  5BB8               	subwfb	(sprintf@width+1)& (0+255),f,b
  4575  000DB4  D002               	goto	l805
  4576  000DB6                     l804:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  4580  000DB6  6BB7               	clrf	sprintf@width& (0+255),b
  4581  000DB8  6BB8               	clrf	(sprintf@width+1)& (0+255),b
  4582  000DBA                     l805:
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;doprnt.c: 788: if(!(flag & 0x08))
  4586  000DBA  B7B5               	btfsc	sprintf@flag& (0+255),3,b
  4587  000DBC  D01C               	goto	l5108
  4588  000DBE  D001               	goto	l5100
  4589  000DC0                     l5096:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 791: ((*sp++ = (' ')));
  4593                           
  4594                           ; BSR set to: 0
  4595  000DC0  D8C4               	call	PL16	;call to abstracted procedure
  4596  000DC2                     l5100:
  4597                           
  4598                           ; BSR set to: 0
  4599  000DC2  D8E8               	call	PL86	;call to abstracted procedure
  4600  000DC4  E1FD               	bnz	l5096
  4601  000DC6  29B8               	incf	(sprintf@width+1)& (0+255),w,b
  4602  000DC8  E016               	bz	l5108
  4603  000DCA  D7FA               	goto	l5096
  4604  000DCC                     l5102:
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  4608  000DCC  C0B0  FFF6         	movff	sprintf@cp,tblptrl
  4609  000DD0  C0B1  FFF7         	movff	sprintf@cp+1,tblptrh
  4610  000DD4  6AF8               	clrf	tblptru,c
  4611  000DD6  5022               	movf	sprintf@sp^0,w,c
  4612  000DD8  6ED9               	movwf	fsr2l,c
  4613  000DDA  6ADA               	clrf	fsr2h,c
  4614  000DDC  0E05               	movlw	(high __ramtop+-1)
  4615  000DDE  64F7               	cpfsgt	tblptrh,c
  4616  000DE0  D003               	bra	u4477
  4617  000DE2  0008               	tblrd		*
  4618  000DE4  50F5               	movf	tablat,w,c
  4619  000DE6  D002               	bra	u4470
  4620  000DE8                     u4477:
  4621  000DE8  ECA6  F00B         	call	PL6	;call to abstracted procedure
  4622  000DEC                     u4470:
  4623  000DEC  6EDF               	movwf	indf2,c
  4624  000DEE  0100               	movlb	0	; () banked
  4625  000DF0  4BB0               	infsnz	sprintf@cp& (0+255),f,b
  4626  000DF2  2BB1               	incf	(sprintf@cp+1)& (0+255),f,b
  4627                           
  4628                           ; BSR set to: 0
  4629  000DF4  2A22               	incf	sprintf@sp^0,f,c
  4630  000DF6                     l5108:
  4631                           
  4632                           ; BSR set to: 0
  4633  000DF6  07B3               	decf	sprintf@len& (0+255),f,b
  4634  000DF8  A0D8               	btfss	status,0,c
  4635  000DFA  07B4               	decf	(sprintf@len+1)& (0+255),f,b
  4636  000DFC  29B3               	incf	sprintf@len& (0+255),w,b
  4637  000DFE  E1E6               	bnz	l5102
  4638  000E00  29B4               	incf	(sprintf@len+1)& (0+255),w,b
  4639  000E02  E1E4               	bnz	l5102
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 796: if(flag & 0x08)
  4643  000E04  A7B5               	btfss	sprintf@flag& (0+255),3,b
  4644  000E06  D08F               	goto	u4630
  4645  000E08  D001               	goto	l5116
  4646  000E0A                     l5112:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;doprnt.c: 798: ((*sp++ = (' ')));
  4650                           
  4651                           ; BSR set to: 0
  4652  000E0A  D89F               	call	PL16	;call to abstracted procedure
  4653  000E0C                     l5116:
  4654                           
  4655                           ; BSR set to: 0
  4656  000E0C  D8C3               	call	PL86	;call to abstracted procedure
  4657  000E0E  E1FD               	bnz	l5112
  4658  000E10  29B8               	incf	(sprintf@width+1)& (0+255),w,b
  4659  000E12  E101 D088          	bz	u4630
  4660  000E16  D7F9               	goto	l5112
  4661  000E18                     l5118:
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 825: c = (char)(*(int *)__va_arg((*(int **)ap), (int)0));
  4665  000E18  51B2               	movf	sprintf@ap& (0+255),w,b
  4666  000E1A  6ED9               	movwf	fsr2l,c
  4667  000E1C  6ADA               	clrf	fsr2h,c
  4668  000E1E  50DF               	movf	indf2,w,c
  4669  000E20  6FB6               	movwf	sprintf@c& (0+255),b
  4670                           
  4671                           ; BSR set to: 0
  4672  000E22  0E02               	movlw	2
  4673  000E24  27B2               	addwf	sprintf@ap& (0+255),f,b
  4674  000E26                     l5122:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 831: cp = (char *)&c;
  4678  000E26  0EB6               	movlw	low sprintf@c
  4679  000E28  6FB0               	movwf	sprintf@cp& (0+255),b
  4680  000E2A  6BB1               	clrf	(sprintf@cp+1)& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 832: len = 1;
  4684  000E2C  6BB4               	clrf	(sprintf@len+1)& (0+255),b
  4685  000E2E  0E01               	movlw	1
  4686  000E30  6FB3               	movwf	sprintf@len& (0+255),b
  4687                           
  4688                           ;doprnt.c: 833: goto dostring;
  4689  000E32  D7B6               	goto	u4430
  4690  000E34                     l5126:
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;doprnt.c: 844: flag |= 0xC0;
  4694  000E34  0EC0               	movlw	192
  4695  000E36  13B5               	iorwf	sprintf@flag& (0+255),f,b
  4696                           
  4697                           ;doprnt.c: 845: break;
  4698  000E38  D00E               	goto	l5132
  4699  000E3A                     l5130:
  4700  000E3A  C023  FFF6         	movff	sprintf@f,tblptrl
  4701  000E3E  D895               	call	PL36	;call to abstracted procedure
  4702  000E40  0100               	movlb	0	; () banked
  4703  000E42  51B6               	movf	sprintf@c& (0+255),w,b
  4704                           
  4705                           ; Switch size 1, requested type "space"
  4706                           ; Number of cases is 4, Range of values is 0 to 117
  4707                           ; switch strategies available:
  4708                           ; Name         Instructions Cycles
  4709                           ; simple_byte           13     7 (average)
  4710                           ;	Chosen strategy is simple_byte
  4711  000E44  E076               	bz	u4640
  4712  000E46  0A63               	xorlw	99	; case 99
  4713  000E48  E0E7               	bz	l5118
  4714  000E4A  0A10               	xorlw	16	; case 115
  4715  000E4C  E101 D77D          	bz	l5076
  4716  000E50  0A06               	xorlw	6	; case 117
  4717  000E52  E0F0               	bz	l5126
  4718  000E54  D7E8               	goto	l5122
  4719  000E56                     l5132:
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  4723  000E56  51B2               	movf	sprintf@ap& (0+255),w,b
  4724  000E58  6ED9               	movwf	fsr2l,c
  4725  000E5A  6ADA               	clrf	fsr2h,c
  4726  000E5C  CFDE F0AD          	movff	postinc2,sprintf@val
  4727  000E60  CFDD F0AE          	movff	postdec2,sprintf@val+1
  4728                           
  4729                           ; BSR set to: 0
  4730  000E64  0E02               	movlw	2
  4731  000E66  27B2               	addwf	sprintf@ap& (0+255),f,b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  4735  000E68  0E01               	movlw	1
  4736  000E6A  6FB6               	movwf	sprintf@c& (0+255),b
  4737  000E6C                     l5138:
  4738                           
  4739                           ; BSR set to: 0
  4740  000E6C  0E05               	movlw	5
  4741  000E6E  19B6               	xorwf	sprintf@c& (0+255),w,b
  4742  000E70  E00A               	bz	l5150
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 1332: if(val < dpowers[c])
  4746  000E72  51B6               	movf	sprintf@c& (0+255),w,b
  4747  000E74  D871               	call	PL26	;call to abstracted procedure
  4748  000E76  50F5               	movf	tablat,w,c
  4749  000E78  5DAD               	subwf	sprintf@val& (0+255),w,b
  4750  000E7A  0009               	tblrd		*+
  4751  000E7C  50F5               	movf	tablat,w,c
  4752  000E7E  59AE               	subwfb	(sprintf@val+1)& (0+255),w,b
  4753  000E80  E302               	bnc	l5150
  4754                           
  4755                           ; BSR set to: 0
  4756  000E82  2BB6               	incf	sprintf@c& (0+255),f,b
  4757  000E84  D7F3               	goto	l5138
  4758  000E86                     l5150:
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;doprnt.c: 1407: if(width > c)
  4762  000E86  51B6               	movf	sprintf@c& (0+255),w,b
  4763  000E88  6E2B               	movwf	??_sprintf^0,c
  4764  000E8A  6A2C               	clrf	(??_sprintf+1)^0,c
  4765  000E8C  51B7               	movf	sprintf@width& (0+255),w,b
  4766  000E8E  5C2B               	subwf	??_sprintf^0,w,c
  4767  000E90  502C               	movf	(??_sprintf+1)^0,w,c
  4768  000E92  0A80               	xorlw	128
  4769  000E94  6E2D               	movwf	(??_sprintf+2)^0,c
  4770  000E96  51B8               	movf	(sprintf@width+1)& (0+255),w,b
  4771  000E98  0A80               	xorlw	128
  4772  000E9A  582D               	subwfb	(??_sprintf+2)^0,w,c
  4773  000E9C  E205               	bc	l824
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1408: width -= c;
  4777  000E9E  51B6               	movf	sprintf@c& (0+255),w,b
  4778  000EA0  5FB7               	subwf	sprintf@width& (0+255),f,b
  4779  000EA2  0E00               	movlw	0
  4780  000EA4  5BB8               	subwfb	(sprintf@width+1)& (0+255),f,b
  4781  000EA6  D002               	goto	l825
  4782  000EA8                     l824:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  4786  000EA8  6BB7               	clrf	sprintf@width& (0+255),b
  4787  000EAA  6BB8               	clrf	(sprintf@width+1)& (0+255),b
  4788  000EAC                     l825:
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 1413: if(flag & 0x04) {
  4792  000EAC  A5B5               	btfss	sprintf@flag& (0+255),2,b
  4793  000EAE  D00D               	goto	l5162
  4794  000EB0                     
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 1441: if(width)
  4797  000EB0  51B7               	movf	sprintf@width& (0+255),w,b
  4798  000EB2  11B8               	iorwf	(sprintf@width+1)& (0+255),w,b
  4799  000EB4  E012               	bz	u4590
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  4803  000EB6  5022               	movf	sprintf@sp^0,w,c
  4804  000EB8  6ED9               	movwf	fsr2l,c
  4805  000EBA  6ADA               	clrf	fsr2h,c
  4806  000EBC  0E30               	movlw	48
  4807  000EBE  6EDF               	movwf	indf2,c
  4808                           
  4809                           ; BSR set to: 0
  4810  000EC0  2A22               	incf	sprintf@sp^0,f,c
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 1444: while(--width);
  4814  000EC2  07B7               	decf	sprintf@width& (0+255),f,b
  4815  000EC4  A0D8               	btfss	status,0,c
  4816  000EC6  07B8               	decf	(sprintf@width+1)& (0+255),f,b
  4817  000EC8  D7F3               	goto	L8
  4818  000ECA                     l5162:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1452: && !(flag & 0x08);doprnt.c: 
      +                          1454: )
  4822  000ECA  51B7               	movf	sprintf@width& (0+255),w,b
  4823  000ECC  11B8               	iorwf	(sprintf@width+1)& (0+255),w,b
  4824  000ECE  E005               	bz	u4590
  4825                           
  4826                           ; BSR set to: 0
  4827  000ED0  B7B5               	btfsc	sprintf@flag& (0+255),3,b
  4828  000ED2  D003               	goto	u4590
  4829  000ED4                     u4580:
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  4833                           
  4834                           ; BSR set to: 0
  4835  000ED4  D83A               	call	PL16	;call to abstracted procedure
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;doprnt.c: 1457: while(--width);
  4839  000ED6  D858               	call	PL74	;call to abstracted procedure
  4840  000ED8  E1FD               	bnz	u4580
  4841  000EDA                     u4590:
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  4845  000EDA  C0B6  F0AF         	movff	sprintf@c,sprintf@prec
  4846                           
  4847                           ;doprnt.c: 1500: while(prec--) {
  4848  000EDE  D016               	goto	l5178
  4849  000EE0                     l5172:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  4853  000EE0  51AF               	movf	sprintf@prec& (0+255),w,b
  4854  000EE2  D83A               	call	PL26	;call to abstracted procedure
  4855  000EE4  CFF5 F018          	movff	tablat,___lwdiv@divisor
  4856  000EE8  000A               	tblrd		*-
  4857  000EEA  CFF5 F019          	movff	tablat,___lwdiv@divisor+1
  4858  000EEE  C0AD  F016         	movff	sprintf@val,___lwdiv@dividend
  4859  000EF2  C0AE  F017         	movff	sprintf@val+1,___lwdiv@dividend+1
  4860  000EF6  EC9A  F00D         	call	___lwdiv	;wreg free
  4861  000EFA  EC31  F006         	call	PL2	;call to abstracted procedure
  4862  000EFE  EC24  F00E         	call	___lwmod	;wreg free
  4863  000F02  501D               	movf	?___lwmod^0,w,c
  4864  000F04  0F30               	addlw	48
  4865  000F06  0100               	movlb	0	; () banked
  4866  000F08  6FB6               	movwf	sprintf@c& (0+255),b
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  4870                           
  4871                           ; BSR set to: 0
  4872  000F0A  D837               	call	PL44	;call to abstracted procedure
  4873  000F0C                     l5178:
  4874                           
  4875                           ; BSR set to: 0
  4876  000F0C  07AF               	decf	sprintf@prec& (0+255),f,b
  4877  000F0E  29AF               	incf	sprintf@prec& (0+255),w,b
  4878  000F10  E1E7               	bnz	l5172
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;doprnt.c: 1551: };doprnt.c: 1554: if((flag & 0x08) && width > 0)
  4882  000F12  B7B5               	btfsc	sprintf@flag& (0+255),3,b
  4883                           
  4884                           ; BSR set to: 0
  4885  000F14  BFB8               	btfsc	(sprintf@width+1)& (0+255),7,b
  4886  000F16  D007               	goto	u4630
  4887  000F18  51B8               	movf	(sprintf@width+1)& (0+255),w,b
  4888  000F1A  E102               	bnz	u4620
  4889  000F1C  05B7               	decf	sprintf@width& (0+255),w,b
  4890  000F1E  E303               	bnc	u4630
  4891  000F20                     u4620:
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;doprnt.c: 1556: ((*sp++ = (' ')));
  4895                           
  4896                           ; BSR set to: 0
  4897  000F20  D814               	call	PL16	;call to abstracted procedure
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;doprnt.c: 1557: while(--width);
  4901  000F22  D832               	call	PL74	;call to abstracted procedure
  4902  000F24  E1FD               	bnz	u4620
  4903  000F26                     u4630:
  4904                           
  4905                           ; BSR set to: 0
  4906  000F26  C023  FFF6         	movff	sprintf@f,tblptrl
  4907  000F2A  D81F               	call	PL36	;call to abstracted procedure
  4908  000F2C  51B6               	movf	sprintf@c& (0+255),w,b
  4909  000F2E  E001 D6CC          	bnz	l5048
  4910  000F32                     u4640:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;doprnt.c: 1564: *sp = 0;
  4914  000F32  5022               	movf	sprintf@sp^0,w,c
  4915  000F34  6ED9               	movwf	fsr2l,c
  4916  000F36  6ADA               	clrf	fsr2h,c
  4917  000F38  6ADF               	clrf	indf2,c
  4918                           
  4919                           ; BSR set to: 0
  4920  000F3A  0C00               	retlw	0	;funcret
  4921  000F3C                     __end_of_sprintf:
  4922                           	callstack 0
  4923  000F3C                     PL14:
  4924                           	callstack 26
  4925  000F3C  C023  FFF6         	movff	sprintf@f,tblptrl
  4926  000F40  C024  FFF7         	movff	sprintf@f+1,tblptrh
  4927  000F44                     	if	0	;tblptru may be non-zero
  4928  000F44                     	endif
  4929  000F44                     	if	0	;tblptru may be non-zero
  4930  000F44                     	endif
  4931  000F44  0008               	tblrd		*
  4932  000F46  50F5               	movf	tablat,w,c
  4933  000F48  0012               	return	
  4934  000F4A                     __end_ofPL14:
  4935                           	callstack 0
  4936  000F4A                     PL16:
  4937                           	callstack 26
  4938  000F4A  5022               	movf	sprintf@sp^0,w,c
  4939  000F4C  6ED9               	movwf	fsr2l,c
  4940  000F4E  6ADA               	clrf	fsr2h,c
  4941  000F50  0E20               	movlw	32
  4942  000F52  6EDF               	movwf	indf2,c
  4943  000F54  2A22               	incf	sprintf@sp^0,f,c
  4944  000F56  0C20               	retlw	32
  4945  000F58                     __end_ofPL16:
  4946                           	callstack 0
  4947  000F58                     PL26:
  4948                           	callstack 26
  4949  000F58  0D02               	mullw	2
  4950  000F5A  0E27               	movlw	low _dpowers
  4951  000F5C  24F3               	addwf	243,w,c
  4952  000F5E  6EF6               	movwf	tblptrl,c
  4953  000F60  0E7E               	movlw	high _dpowers
  4954  000F62  20F4               	addwfc	244,w,c
  4955  000F64  6EF7               	movwf	tblptrh,c
  4956  000F66                     	if	0	;There are less than 3 active tblptr bytes
  4957  000F66                     	endif
  4958  000F66  0009               	tblrd		*+
  4959  000F68  0012               	return	
  4960  000F6A                     __end_ofPL26:
  4961                           	callstack 0
  4962  000F6A                     PL36:
  4963                           	callstack 26
  4964  000F6A  C024  FFF7         	movff	sprintf@f+1,tblptrh
  4965  000F6E  4A23               	infsnz	sprintf@f^0,f,c
  4966  000F70  2A24               	incf	(sprintf@f+1)^0,f,c
  4967  000F72                     	if	0	;tblptru may be non-zero
  4968  000F72                     	endif
  4969  000F72                     	if	0	;tblptru may be non-zero
  4970  000F72                     	endif
  4971  000F72  0008               	tblrd		*
  4972  000F74  CFF5 F0B6          	movff	tablat,sprintf@c
  4973  000F78  0012               	return	
  4974  000F7A                     __end_ofPL36:
  4975                           	callstack 0
  4976  000F7A                     PL44:
  4977                           	callstack 26
  4978  000F7A  5022               	movf	sprintf@sp^0,w,c
  4979  000F7C  6ED9               	movwf	fsr2l,c
  4980  000F7E  6ADA               	clrf	fsr2h,c
  4981  000F80  C0B6  FFDF         	movff	sprintf@c,indf2
  4982  000F84  2A22               	incf	sprintf@sp^0,f,c
  4983  000F86  0012               	return	
  4984  000F88                     __end_ofPL44:
  4985                           	callstack 0
  4986  000F88                     PL74:
  4987                           	callstack 26
  4988  000F88  07B7               	decf	sprintf@width& (0+255),f,b
  4989  000F8A  A0D8               	btfss	status,0,c
  4990  000F8C  07B8               	decf	(sprintf@width+1)& (0+255),f,b
  4991  000F8E  51B7               	movf	sprintf@width& (0+255),w,b
  4992  000F90  11B8               	iorwf	(sprintf@width+1)& (0+255),w,b
  4993  000F92  0012               	return	
  4994  000F94                     __end_ofPL74:
  4995                           	callstack 0
  4996  000F94                     PL86:
  4997                           	callstack 26
  4998  000F94  07B7               	decf	sprintf@width& (0+255),f,b
  4999  000F96  A0D8               	btfss	status,0,c
  5000  000F98  07B8               	decf	(sprintf@width+1)& (0+255),f,b
  5001  000F9A  29B7               	incf	sprintf@width& (0+255),w,b
  5002  000F9C  0012               	return	
  5003  000F9E                     __end_ofPL86:
  5004                           	callstack 0
  5005                           
  5006 ;; *************** function _isdigit *****************
  5007 ;; Defined at:
  5008 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  c               1    wreg     unsigned char 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  c               1   23[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;		None               void
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 3F/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5022 ;;      Params:         0       0       0       0       0       0       0
  5023 ;;      Locals:         2       0       0       0       0       0       0
  5024 ;;      Temps:          1       0       0       0       0       0       0
  5025 ;;      Totals:         3       0       0       0       0       0       0
  5026 ;;Total ram usage:        3 bytes
  5027 ;; Hardware stack levels used: 1
  5028 ;; Hardware stack levels required when called: 3
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_sprintf
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text5
  5037  001E6C                     __ptext5:
  5038                           	callstack 0
  5039  001E6C                     _isdigit:
  5040                           	callstack 26
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;incstack = 0
  5044                           ;isdigit@c stored from wreg
  5045  001E6C  6E18               	movwf	isdigit@c^0,c
  5046  001E6E  6A17               	clrf	_isdigit$2376^0,c
  5047  001E70  0E3A               	movlw	58
  5048  001E72  6018               	cpfslt	isdigit@c^0,c
  5049  001E74  D005               	goto	l4896
  5050  001E76  0E2F               	movlw	47
  5051  001E78  6418               	cpfsgt	isdigit@c^0,c
  5052  001E7A  D002               	goto	l4896
  5053  001E7C  0E01               	movlw	1
  5054  001E7E  6E17               	movwf	_isdigit$2376^0,c
  5055  001E80                     l4896:
  5056  001E80  C017  F016         	movff	_isdigit$2376,??_isdigit
  5057  001E84  3016               	rrcf	??_isdigit^0,w,c
  5058  001E86  0012               	return		;funcret
  5059  001E88                     __end_of_isdigit:
  5060                           	callstack 0
  5061                           
  5062 ;; *************** function ___wmul *****************
  5063 ;; Defined at:
  5064 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  multiplier      2   21[COMRAM] unsigned int 
  5067 ;;  multiplicand    2   23[COMRAM] unsigned int 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  product         2   25[COMRAM] unsigned int 
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  2   21[COMRAM] unsigned int 
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0, prodl, prodh
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5079 ;;      Params:         4       0       0       0       0       0       0
  5080 ;;      Locals:         2       0       0       0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0
  5082 ;;      Totals:         6       0       0       0       0       0       0
  5083 ;;Total ram usage:        6 bytes
  5084 ;; Hardware stack levels used: 1
  5085 ;; Hardware stack levels required when called: 3
  5086 ;; This function calls:
  5087 ;;		Nothing
  5088 ;; This function is called by:
  5089 ;;		_main
  5090 ;;		_sprintf
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text6
  5095  001E22                     __ptext6:
  5096                           	callstack 0
  5097  001E22                     ___wmul:
  5098                           	callstack 26
  5099                           
  5100                           ;incstack = 0
  5101  001E22  5016               	movf	___wmul@multiplier^0,w,c
  5102  001E24  0218               	mulwf	___wmul@multiplicand^0,c
  5103  001E26  CFF3 F01A          	movff	prodl,___wmul@product
  5104  001E2A  CFF4 F01B          	movff	prodh,___wmul@product+1
  5105  001E2E  5016               	movf	___wmul@multiplier^0,w,c
  5106  001E30  0219               	mulwf	(___wmul@multiplicand+1)^0,c
  5107  001E32  50F3               	movf	243,w,c
  5108  001E34  261B               	addwf	(___wmul@product+1)^0,f,c
  5109  001E36  5017               	movf	(___wmul@multiplier+1)^0,w,c
  5110  001E38  0218               	mulwf	___wmul@multiplicand^0,c
  5111  001E3A  50F3               	movf	243,w,c
  5112  001E3C  261B               	addwf	(___wmul@product+1)^0,f,c
  5113  001E3E  C01A  F016         	movff	___wmul@product,?___wmul
  5114  001E42  C01B  F017         	movff	___wmul@product+1,?___wmul+1
  5115  001E46  0012               	return		;funcret
  5116  001E48                     __end_of___wmul:
  5117                           	callstack 0
  5118                           
  5119 ;; *************** function ___lwmod *****************
  5120 ;; Defined at:
  5121 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  dividend        2   28[COMRAM] unsigned int 
  5124 ;;  divisor         2   30[COMRAM] unsigned int 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  counter         1   32[COMRAM] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  2   28[COMRAM] unsigned int 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5136 ;;      Params:         4       0       0       0       0       0       0
  5137 ;;      Locals:         1       0       0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0
  5139 ;;      Totals:         5       0       0       0       0       0       0
  5140 ;;Total ram usage:        5 bytes
  5141 ;; Hardware stack levels used: 1
  5142 ;; Hardware stack levels required when called: 3
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_show_lcd_main
  5147 ;;		_sprintf
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text7
  5152  001C48                     __ptext7:
  5153                           	callstack 0
  5154  001C48                     ___lwmod:
  5155                           	callstack 26
  5156                           
  5157                           ;incstack = 0
  5158  001C48  501F               	movf	___lwmod@divisor^0,w,c
  5159  001C4A  1020               	iorwf	(___lwmod@divisor+1)^0,w,c
  5160  001C4C  E017               	bz	l1333
  5161  001C4E  0E01               	movlw	1
  5162  001C50  6E21               	movwf	___lwmod@counter^0,c
  5163  001C52  D004               	goto	l4964
  5164  001C54                     l4962:
  5165  001C54  90D8               	bcf	status,0,c
  5166  001C56  361F               	rlcf	___lwmod@divisor^0,f,c
  5167  001C58  3620               	rlcf	(___lwmod@divisor+1)^0,f,c
  5168  001C5A  2A21               	incf	___lwmod@counter^0,f,c
  5169  001C5C                     l4964:
  5170  001C5C  AE20               	btfss	(___lwmod@divisor+1)^0,7,c
  5171  001C5E  D7FA               	goto	l4962
  5172  001C60                     u4270:
  5173  001C60  501F               	movf	___lwmod@divisor^0,w,c
  5174  001C62  5C1D               	subwf	___lwmod@dividend^0,w,c
  5175  001C64  5020               	movf	(___lwmod@divisor+1)^0,w,c
  5176  001C66  581E               	subwfb	(___lwmod@dividend+1)^0,w,c
  5177  001C68  E304               	bnc	l4970
  5178  001C6A  501F               	movf	___lwmod@divisor^0,w,c
  5179  001C6C  5E1D               	subwf	___lwmod@dividend^0,f,c
  5180  001C6E  5020               	movf	(___lwmod@divisor+1)^0,w,c
  5181  001C70  5A1E               	subwfb	(___lwmod@dividend+1)^0,f,c
  5182  001C72                     l4970:
  5183  001C72  90D8               	bcf	status,0,c
  5184  001C74  3220               	rrcf	(___lwmod@divisor+1)^0,f,c
  5185  001C76  321F               	rrcf	___lwmod@divisor^0,f,c
  5186  001C78  2E21               	decfsz	___lwmod@counter^0,f,c
  5187  001C7A  D7F2               	goto	u4270
  5188  001C7C                     l1333:
  5189  001C7C  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  5190  001C80  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  5191  001C84  0012               	return		;funcret
  5192  001C86                     __end_of___lwmod:
  5193                           	callstack 0
  5194                           
  5195 ;; *************** function ___lwdiv *****************
  5196 ;; Defined at:
  5197 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  dividend        2   21[COMRAM] unsigned int 
  5200 ;;  divisor         2   23[COMRAM] unsigned int 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  quotient        2   26[COMRAM] unsigned int 
  5203 ;;  counter         1   25[COMRAM] unsigned char 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  2   21[COMRAM] unsigned int 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5213 ;;      Params:         4       0       0       0       0       0       0
  5214 ;;      Locals:         3       0       0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0
  5216 ;;      Totals:         7       0       0       0       0       0       0
  5217 ;;Total ram usage:        7 bytes
  5218 ;; Hardware stack levels used: 1
  5219 ;; Hardware stack levels required when called: 3
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_main
  5224 ;;		_show_lcd_main
  5225 ;;		_sprintf
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text8
  5230  001B34                     __ptext8:
  5231                           	callstack 0
  5232  001B34                     ___lwdiv:
  5233                           	callstack 26
  5234                           
  5235                           ;incstack = 0
  5236  001B34  6A1B               	clrf	___lwdiv@quotient^0,c
  5237  001B36  6A1C               	clrf	(___lwdiv@quotient+1)^0,c
  5238  001B38  5018               	movf	___lwdiv@divisor^0,w,c
  5239  001B3A  1019               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5240  001B3C  E01B               	bz	l1323
  5241  001B3E  0E01               	movlw	1
  5242  001B40  6E1A               	movwf	___lwdiv@counter^0,c
  5243  001B42  D004               	goto	l4944
  5244  001B44                     l4942:
  5245  001B44  90D8               	bcf	status,0,c
  5246  001B46  3618               	rlcf	___lwdiv@divisor^0,f,c
  5247  001B48  3619               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5248  001B4A  2A1A               	incf	___lwdiv@counter^0,f,c
  5249  001B4C                     l4944:
  5250  001B4C  AE19               	btfss	(___lwdiv@divisor+1)^0,7,c
  5251  001B4E  D7FA               	goto	l4942
  5252  001B50                     u4240:
  5253  001B50  90D8               	bcf	status,0,c
  5254  001B52  361B               	rlcf	___lwdiv@quotient^0,f,c
  5255  001B54  361C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5256  001B56  5018               	movf	___lwdiv@divisor^0,w,c
  5257  001B58  5C16               	subwf	___lwdiv@dividend^0,w,c
  5258  001B5A  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  5259  001B5C  5817               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5260  001B5E  E305               	bnc	l4954
  5261  001B60  5018               	movf	___lwdiv@divisor^0,w,c
  5262  001B62  5E16               	subwf	___lwdiv@dividend^0,f,c
  5263  001B64  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  5264  001B66  5A17               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5265  001B68  801B               	bsf	___lwdiv@quotient^0,0,c
  5266  001B6A                     l4954:
  5267  001B6A  90D8               	bcf	status,0,c
  5268  001B6C  3219               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5269  001B6E  3218               	rrcf	___lwdiv@divisor^0,f,c
  5270  001B70  2E1A               	decfsz	___lwdiv@counter^0,f,c
  5271  001B72  D7EE               	goto	u4240
  5272  001B74                     l1323:
  5273  001B74  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
  5274  001B78  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5275  001B7C  0012               	return		;funcret
  5276  001B7E                     __end_of___lwdiv:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _lcd_putc *****************
  5280 ;; Defined at:
  5281 ;;		line 112 in file "hd44780.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  c               1    wreg     unsigned char 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  c               1   25[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5295 ;;      Params:         0       0       0       0       0       0       0
  5296 ;;      Locals:         1       0       0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0
  5298 ;;      Totals:         1       0       0       0       0       0       0
  5299 ;;Total ram usage:        1 bytes
  5300 ;; Hardware stack levels used: 1
  5301 ;; Hardware stack levels required when called: 5
  5302 ;; This function calls:
  5303 ;;		_lcdWrite
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;;		_show_lcd_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text9
  5311  001ECE                     __ptext9:
  5312                           	callstack 0
  5313  001ECE                     _lcd_putc:
  5314                           	callstack 24
  5315                           
  5316                           ;incstack = 0
  5317                           ;lcd_putc@c stored from wreg
  5318  001ECE  6E1A               	movwf	lcd_putc@c^0,c
  5319                           
  5320                           ;hd44780.c: 114: lcdWrite(c, DATA);
  5321  001ED0  0E01               	movlw	1
  5322  001ED2  6E18               	movwf	lcdWrite@type^0,c
  5323  001ED4  501A               	movf	lcd_putc@c^0,w,c
  5324  001ED6  EFB5  F00E         	goto	_lcdWrite
  5325  001EDA                     __end_of_lcd_putc:
  5326                           	callstack 0
  5327                           
  5328 ;; *************** function _lcdPrint *****************
  5329 ;; Defined at:
  5330 ;;		line 118 in file "hd44780.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  t               2   28[COMRAM] PTR const unsigned char 
  5333 ;;		 -> STR_23(10), STR_22(10), STR_16(19), STR_15(19), 
  5334 ;;		 -> STR_13(21), STR_12(15), STR_11(20), STR_10(19), 
  5335 ;;		 -> STR_9(22), STR_8(21), STR_7(21), STR_6(21), 
  5336 ;;		 -> STR_5(21), TxtBuf(21), STR_1(20), 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5348 ;;      Params:         2       0       0       0       0       0       0
  5349 ;;      Locals:         0       0       0       0       0       0       0
  5350 ;;      Temps:          4       0       0       0       0       0       0
  5351 ;;      Totals:         6       0       0       0       0       0       0
  5352 ;;Total ram usage:        6 bytes
  5353 ;; Hardware stack levels used: 1
  5354 ;; Hardware stack levels required when called: 6
  5355 ;; This function calls:
  5356 ;;		_lcdWrite
  5357 ;;		_lcd_gotoxy
  5358 ;; This function is called by:
  5359 ;;		_main
  5360 ;;		_show_lcd_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text10
  5365  001682                     __ptext10:
  5366                           	callstack 0
  5367  001682                     _lcdPrint:
  5368                           	callstack 23
  5369                           
  5370                           ;hd44780.c: 119: while(*t != '\0'){
  5371                           
  5372                           ;incstack = 0
  5373  001682  D05A               	goto	l5028
  5374  001684                     l5008:
  5375                           
  5376                           ;hd44780.c: 122: lcdWrite(1, COMMAND);
  5377  001684  D870               	call	PL92	;call to abstracted procedure
  5378  001686  ECB5  F00E         	call	_lcdWrite
  5379                           
  5380                           ;hd44780.c: 123: _delay((unsigned long)((2)*(64000000/4000.0)));
  5381  00168A  0E2A               	movlw	42
  5382  00168C  6E1F               	movwf	??_lcdPrint^0,c
  5383  00168E  0E8E               	movlw	142
  5384  001690                     u5487:
  5385  001690  2EE8               	decfsz	wreg,f,c
  5386  001692  D7FE               	bra	u5487
  5387  001694  2E1F               	decfsz	??_lcdPrint^0,f,c
  5388  001696  D7FC               	bra	u5487
  5389                           
  5390                           ;hd44780.c: 124: break;
  5391  001698  D04D               	goto	l5026
  5392  00169A                     l5012:
  5393                           
  5394                           ;hd44780.c: 127: lcd_gotoxy(1, 2);
  5395  00169A  ECA5  F004         	call	PL38	;call to abstracted procedure
  5396  00169E  EC80  F00E         	call	_lcd_gotoxy
  5397                           
  5398                           ;hd44780.c: 128: break;
  5399  0016A2  D048               	goto	l5026
  5400  0016A4                     l5014:
  5401                           
  5402                           ;hd44780.c: 131: lcdWrite(0x10, COMMAND);
  5403  0016A4  0E00               	movlw	0
  5404  0016A6  6E18               	movwf	lcdWrite@type^0,c
  5405  0016A8  0E10               	movlw	16
  5406  0016AA  ECB5  F00E         	call	_lcdWrite
  5407                           
  5408                           ;hd44780.c: 132: break;
  5409  0016AE  D042               	goto	l5026
  5410  0016B0                     l5016:
  5411                           
  5412                           ;hd44780.c: 135: if (*t < 0xC0) {
  5413  0016B0  D853               	call	PL10	;call to abstracted procedure
  5414  0016B2  64F7               	cpfsgt	tblptrh,c
  5415  0016B4  D003               	bra	u4297
  5416  0016B6  0008               	tblrd		*
  5417  0016B8  50F5               	movf	tablat,w,c
  5418  0016BA  D001               	bra	u4290
  5419  0016BC                     u4297:
  5420  0016BC  D847               	call	PL6	;call to abstracted procedure
  5421  0016BE                     u4290:
  5422  0016BE  6E1F               	movwf	??_lcdPrint^0,c
  5423  0016C0  0EC0               	movlw	192
  5424  0016C2  601F               	cpfslt	??_lcdPrint^0,c
  5425  0016C4  D00C               	goto	l5020
  5426                           
  5427                           ;hd44780.c: 136: lcdWrite(*t, DATA);
  5428  0016C6  0E01               	movlw	1
  5429  0016C8  6E18               	movwf	lcdWrite@type^0,c
  5430  0016CA  D846               	call	PL10	;call to abstracted procedure
  5431  0016CC  64F7               	cpfsgt	tblptrh,c
  5432  0016CE  D003               	bra	u4317
  5433  0016D0  0008               	tblrd		*
  5434  0016D2  50F5               	movf	tablat,w,c
  5435  0016D4  D001               	bra	u4310
  5436  0016D6                     u4317:
  5437  0016D6  D83A               	call	PL6	;call to abstracted procedure
  5438  0016D8                     u4310:
  5439  0016D8  ECB5  F00E         	call	_lcdWrite
  5440                           
  5441                           ;hd44780.c: 137: } else {
  5442  0016DC  D02B               	goto	l5026
  5443  0016DE                     l5020:
  5444                           
  5445                           ;hd44780.c: 138: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  5446  0016DE  0E01               	movlw	1
  5447  0016E0  6E18               	movwf	lcdWrite@type^0,c
  5448  0016E2  0E40               	movlw	64
  5449  0016E4  6E1F               	movwf	??_lcdPrint^0,c
  5450  0016E6  6820               	setf	(??_lcdPrint+1)^0,c
  5451  0016E8  D837               	call	PL10	;call to abstracted procedure
  5452  0016EA  64F7               	cpfsgt	tblptrh,c
  5453  0016EC  D003               	bra	u4327
  5454  0016EE  0008               	tblrd		*
  5455  0016F0  50F5               	movf	tablat,w,c
  5456  0016F2  D001               	bra	u4320
  5457  0016F4                     u4327:
  5458  0016F4  D82B               	call	PL6	;call to abstracted procedure
  5459  0016F6                     u4320:
  5460  0016F6  6E21               	movwf	(??_lcdPrint+2)^0,c
  5461  0016F8  6A22               	clrf	(??_lcdPrint+3)^0,c
  5462  0016FA  501F               	movf	??_lcdPrint^0,w,c
  5463  0016FC  2621               	addwf	(??_lcdPrint+2)^0,f,c
  5464  0016FE  5020               	movf	(??_lcdPrint+1)^0,w,c
  5465  001700  2222               	addwfc	(??_lcdPrint+3)^0,f,c
  5466  001702  0EC7               	movlw	low _HD44780_CYR
  5467  001704  2421               	addwf	(??_lcdPrint+2)^0,w,c
  5468  001706  6EF6               	movwf	tblptrl,c
  5469  001708  0E7D               	movlw	high _HD44780_CYR
  5470  00170A  2022               	addwfc	(??_lcdPrint+3)^0,w,c
  5471  00170C  6EF7               	movwf	tblptrh,c
  5472  00170E                     	if	0	;There are less than 3 active tblptr bytes
  5473  00170E                     	endif
  5474  00170E  0008               	tblrd		*
  5475  001710  50F5               	movf	tablat,w,c
  5476  001712  ECB5  F00E         	call	_lcdWrite
  5477  001716  D00E               	goto	l5026
  5478  001718                     l5024:
  5479  001718  D81F               	call	PL10	;call to abstracted procedure
  5480  00171A  64F7               	cpfsgt	tblptrh,c
  5481  00171C  D003               	bra	u4337
  5482  00171E  0008               	tblrd		*
  5483  001720  50F5               	movf	tablat,w,c
  5484  001722  D001               	bra	u4330
  5485  001724                     u4337:
  5486  001724  D813               	call	PL6	;call to abstracted procedure
  5487  001726                     u4330:
  5488                           
  5489                           ; Switch size 1, requested type "space"
  5490                           ; Number of cases is 3, Range of values is 8 to 12
  5491                           ; switch strategies available:
  5492                           ; Name         Instructions Cycles
  5493                           ; simple_byte           10     6 (average)
  5494                           ;	Chosen strategy is simple_byte
  5495  001726  0A08               	xorlw	8	; case 8
  5496  001728  E0BD               	bz	l5014
  5497  00172A  0A02               	xorlw	2	; case 10
  5498  00172C  E0B6               	bz	l5012
  5499  00172E  0A06               	xorlw	6	; case 12
  5500  001730  E0A9               	bz	l5008
  5501  001732  D7BE               	goto	l5016
  5502  001734                     l5026:
  5503                           
  5504                           ;hd44780.c: 143: *t++;
  5505  001734  4A1D               	infsnz	lcdPrint@t^0,f,c
  5506  001736  2A1E               	incf	(lcdPrint@t+1)^0,f,c
  5507  001738                     l5028:
  5508  001738  D80F               	call	PL10	;call to abstracted procedure
  5509  00173A  64F7               	cpfsgt	tblptrh,c
  5510  00173C  D003               	bra	u4347
  5511  00173E  0008               	tblrd		*
  5512  001740  50F5               	movf	tablat,w,c
  5513  001742  D001               	bra	u4340
  5514  001744                     u4347:
  5515  001744  D803               	call	PL6	;call to abstracted procedure
  5516  001746                     u4340:
  5517  001746  0900               	iorlw	0
  5518  001748  E1E7               	bnz	l5024
  5519  00174A  0012               	return		;funcret
  5520  00174C                     __end_of_lcdPrint:
  5521                           	callstack 0
  5522  00174C                     PL6:
  5523                           	callstack 23
  5524  00174C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5525  001750  CFF7 FFEA          	movff	tblptrh,fsr0h
  5526  001754  50EF               	movf	indf0,w,c
  5527  001756  0012               	return	
  5528  001758                     __end_ofPL6:
  5529                           	callstack 0
  5530  001758                     PL10:
  5531                           	callstack 23
  5532  001758  C01D  FFF6         	movff	lcdPrint@t,tblptrl
  5533  00175C  C01E  FFF7         	movff	lcdPrint@t+1,tblptrh
  5534  001760  6AF8               	clrf	tblptru,c
  5535  001762  0E05               	movlw	(high __ramtop+-1)
  5536  001764  0012               	return	
  5537  001766                     __end_ofPL10:
  5538                           	callstack 0
  5539  001766                     PL92:
  5540                           	callstack 23
  5541  001766  0E00               	movlw	0
  5542  001768  6E18               	movwf	lcdWrite@type^0,c
  5543  00176A  0C01               	retlw	1
  5544  00176C                     __end_ofPL92:
  5545                           	callstack 0
  5546                           
  5547 ;; *************** function _lcd_gotoxy *****************
  5548 ;; Defined at:
  5549 ;;		line 76 in file "hd44780.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  x               1    wreg     unsigned char 
  5552 ;;  y               1   25[COMRAM] unsigned char 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  x               1   26[COMRAM] unsigned char 
  5555 ;;  address         1   27[COMRAM] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, status,2, status,0, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5565 ;;      Params:         1       0       0       0       0       0       0
  5566 ;;      Locals:         2       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0
  5568 ;;      Totals:         3       0       0       0       0       0       0
  5569 ;;Total ram usage:        3 bytes
  5570 ;; Hardware stack levels used: 1
  5571 ;; Hardware stack levels required when called: 5
  5572 ;; This function calls:
  5573 ;;		_lcdWrite
  5574 ;; This function is called by:
  5575 ;;		_lcdPrint
  5576 ;;		_main
  5577 ;;		_show_lcd_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text11
  5582  001D00                     __ptext11:
  5583                           	callstack 0
  5584  001D00                     _lcd_gotoxy:
  5585                           	callstack 24
  5586                           
  5587                           ;incstack = 0
  5588                           ;lcd_gotoxy@x stored from wreg
  5589  001D00  6E1B               	movwf	lcd_gotoxy@x^0,c
  5590                           
  5591                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 82: switch(y)
  5592  001D02  D009               	goto	l4882
  5593  001D04                     l125:
  5594                           
  5595                           ;hd44780.c: 85: address = 0x00;
  5596  001D04  6A1C               	clrf	lcd_gotoxy@address^0,c
  5597                           
  5598                           ;hd44780.c: 86: break;
  5599  001D06  D011               	goto	l4884
  5600  001D08                     l4874:
  5601                           
  5602                           ;hd44780.c: 89: address = 0x40;
  5603  001D08  0E40               	movlw	64
  5604  001D0A  D003               	goto	L7
  5605  001D0C                     l4876:
  5606                           
  5607                           ;hd44780.c: 93: address = 0x14;
  5608  001D0C  0E14               	movlw	20
  5609  001D0E  D001               	goto	L7
  5610  001D10                     l4878:
  5611                           
  5612                           ;hd44780.c: 97: address = 0x54;
  5613  001D10  0E54               	movlw	84
  5614  001D12                     L7:
  5615  001D12  6E1C               	movwf	lcd_gotoxy@address^0,c
  5616                           
  5617                           ;hd44780.c: 98: break;
  5618  001D14  D00A               	goto	l4884
  5619  001D16                     l4882:
  5620  001D16  501A               	movf	lcd_gotoxy@y^0,w,c
  5621                           
  5622                           ; Switch size 1, requested type "space"
  5623                           ; Number of cases is 4, Range of values is 1 to 4
  5624                           ; switch strategies available:
  5625                           ; Name         Instructions Cycles
  5626                           ; simple_byte           13     7 (average)
  5627                           ;	Chosen strategy is simple_byte
  5628  001D18  0A01               	xorlw	1	; case 1
  5629  001D1A  E0F4               	bz	l125
  5630  001D1C  0A03               	xorlw	3	; case 2
  5631  001D1E  E0F4               	bz	l4874
  5632  001D20  0A01               	xorlw	1	; case 3
  5633  001D22  E0F4               	bz	l4876
  5634  001D24  0A07               	xorlw	7	; case 4
  5635  001D26  E0F4               	bz	l4878
  5636  001D28  D7ED               	goto	l125
  5637  001D2A                     l4884:
  5638                           
  5639                           ;hd44780.c: 106: address += x - 1;
  5640  001D2A  041B               	decf	lcd_gotoxy@x^0,w,c
  5641  001D2C  261C               	addwf	lcd_gotoxy@address^0,f,c
  5642                           
  5643                           ;hd44780.c: 107: lcdWrite(0x80 | address, COMMAND);
  5644  001D2E  6A18               	clrf	lcdWrite@type^0,c
  5645  001D30  501C               	movf	lcd_gotoxy@address^0,w,c
  5646  001D32  0980               	iorlw	128
  5647  001D34  EFB5  F00E         	goto	_lcdWrite
  5648  001D38                     __end_of_lcd_gotoxy:
  5649                           	callstack 0
  5650                           
  5651 ;; *************** function _calc_power *****************
  5652 ;; Defined at:
  5653 ;;		line 825 in file "main.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  res             4   34[COMRAM] unsigned long 
  5656 ;;  u_rl            2   38[COMRAM] unsigned int 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  tt              4    0[BANK0 ] unsigned long 
  5659 ;;  p_w             2    8[BANK0 ] unsigned int 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  2   34[COMRAM] unsigned int 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         6       0       0       0       0       0       0
  5670 ;;      Locals:         0      10       0       0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0
  5672 ;;      Totals:         6      10       0       0       0       0       0
  5673 ;;Total ram usage:       16 bytes
  5674 ;; Hardware stack levels used: 1
  5675 ;; Hardware stack levels required when called: 4
  5676 ;; This function calls:
  5677 ;;		___lldiv
  5678 ;;		___lmul
  5679 ;; This function is called by:
  5680 ;;		_main
  5681 ;;		_show_lcd_main
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text12
  5686  001808                     __ptext12:
  5687                           	callstack 0
  5688  001808                     _calc_power:
  5689                           	callstack 25
  5690                           
  5691                           ;main.c: 826: uint32_t tt;;main.c: 827: uint16_t p_w;;main.c: 829: tt = (uint32_t) u_rl 
      +                          * u_rl * 1000;
  5692                           
  5693                           ;incstack = 0
  5694  001808  C027  F016         	movff	calc_power@u_rl,___lmul@multiplier
  5695  00180C  C028  F017         	movff	calc_power@u_rl+1,___lmul@multiplier+1
  5696  001810  6A18               	clrf	(___lmul@multiplier+2)^0,c
  5697  001812  6A19               	clrf	(___lmul@multiplier+3)^0,c
  5698  001814  C027  F01A         	movff	calc_power@u_rl,___lmul@multiplicand
  5699  001818  C028  F01B         	movff	calc_power@u_rl+1,___lmul@multiplicand+1
  5700  00181C  6A1C               	clrf	(___lmul@multiplicand+2)^0,c
  5701  00181E  6A1D               	clrf	(___lmul@multiplicand+3)^0,c
  5702  001820  EC4E  F00D         	call	___lmul	;wreg free
  5703  001824  C016  F0B1         	movff	?___lmul,_calc_power$2596
  5704  001828  C017  F0B2         	movff	?___lmul+1,_calc_power$2596+1
  5705  00182C  C018  F0B3         	movff	?___lmul+2,_calc_power$2596+2
  5706  001830  C019  F0B4         	movff	?___lmul+3,_calc_power$2596+3
  5707                           
  5708                           ;main.c: 826: uint32_t tt;;main.c: 827: uint16_t p_w;;main.c: 829: tt = (uint32_t) u_rl 
      +                          * u_rl * 1000;
  5709  001834  C0B1  F016         	movff	_calc_power$2596,___lmul@multiplier
  5710  001838  C0B2  F017         	movff	_calc_power$2596+1,___lmul@multiplier+1
  5711  00183C  C0B3  F018         	movff	_calc_power$2596+2,___lmul@multiplier+2
  5712  001840  C0B4  F019         	movff	_calc_power$2596+3,___lmul@multiplier+3
  5713  001844  D825               	call	PL48	;call to abstracted procedure
  5714  001846  EC4E  F00D         	call	___lmul	;wreg free
  5715  00184A  C016  F0AD         	movff	?___lmul,calc_power@tt
  5716  00184E  C017  F0AE         	movff	?___lmul+1,calc_power@tt+1
  5717  001852  C018  F0AF         	movff	?___lmul+2,calc_power@tt+2
  5718  001856  C019  F0B0         	movff	?___lmul+3,calc_power@tt+3
  5719                           
  5720                           ;main.c: 830: p_w = tt / res;
  5721  00185A  C0AD  F016         	movff	calc_power@tt,___lldiv@dividend
  5722  00185E  C0AE  F017         	movff	calc_power@tt+1,___lldiv@dividend+1
  5723  001862  C0AF  F018         	movff	calc_power@tt+2,___lldiv@dividend+2
  5724  001866  C0B0  F019         	movff	calc_power@tt+3,___lldiv@dividend+3
  5725  00186A  C023  F01A         	movff	calc_power@res,___lldiv@divisor
  5726  00186E  C024  F01B         	movff	calc_power@res+1,___lldiv@divisor+1
  5727  001872  C025  F01C         	movff	calc_power@res+2,___lldiv@divisor+2
  5728  001876  C026  F01D         	movff	calc_power@res+3,___lldiv@divisor+3
  5729  00187A  ECE4  F00C         	call	___lldiv	;wreg free
  5730  00187E  C016  F0B5         	movff	?___lldiv,calc_power@p_w
  5731  001882  C017  F0B6         	movff	?___lldiv+1,calc_power@p_w+1
  5732                           
  5733                           ;main.c: 831: return p_w;
  5734  001886  C0B5  F023         	movff	calc_power@p_w,?_calc_power
  5735  00188A  C0B6  F024         	movff	calc_power@p_w+1,?_calc_power+1
  5736  00188E  0012               	return		;funcret
  5737  001890                     __end_of_calc_power:
  5738                           	callstack 0
  5739  001890                     PL48:
  5740                           	callstack 23
  5741  001890  0EE8               	movlw	232
  5742  001892  6E1A               	movwf	___lmul@multiplicand^0,c
  5743  001894  0E03               	movlw	3
  5744  001896  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  5745  001898  6A1C               	clrf	(___lmul@multiplicand+2)^0,c
  5746  00189A  6A1D               	clrf	(___lmul@multiplicand+3)^0,c
  5747  00189C  0C03               	retlw	3
  5748  00189E                     __end_ofPL48:
  5749                           	callstack 0
  5750                           
  5751 ;; *************** function ___lmul *****************
  5752 ;; Defined at:
  5753 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul32.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  multiplier      4   21[COMRAM] unsigned long 
  5756 ;;  multiplicand    4   25[COMRAM] unsigned long 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  product         4   29[COMRAM] unsigned long 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  4   21[COMRAM] unsigned long 
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5768 ;;      Params:         8       0       0       0       0       0       0
  5769 ;;      Locals:         4       0       0       0       0       0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0
  5771 ;;      Totals:        12       0       0       0       0       0       0
  5772 ;;Total ram usage:       12 bytes
  5773 ;; Hardware stack levels used: 1
  5774 ;; Hardware stack levels required when called: 3
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;;		_calc_power
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text13
  5784  001A9C                     __ptext13:
  5785                           	callstack 0
  5786  001A9C                     ___lmul:
  5787                           	callstack 25
  5788                           
  5789                           ;incstack = 0
  5790  001A9C  6A1E               	clrf	___lmul@product^0,c
  5791  001A9E  6A1F               	clrf	(___lmul@product+1)^0,c
  5792  001AA0  6A20               	clrf	(___lmul@product+2)^0,c
  5793  001AA2  6A21               	clrf	(___lmul@product+3)^0,c
  5794  001AA4                     l853:
  5795  001AA4  A016               	btfss	___lmul@multiplier^0,0,c
  5796  001AA6  D008               	goto	l4910
  5797  001AA8  501A               	movf	___lmul@multiplicand^0,w,c
  5798  001AAA  261E               	addwf	___lmul@product^0,f,c
  5799  001AAC  501B               	movf	(___lmul@multiplicand+1)^0,w,c
  5800  001AAE  221F               	addwfc	(___lmul@product+1)^0,f,c
  5801  001AB0  501C               	movf	(___lmul@multiplicand+2)^0,w,c
  5802  001AB2  2220               	addwfc	(___lmul@product+2)^0,f,c
  5803  001AB4  501D               	movf	(___lmul@multiplicand+3)^0,w,c
  5804  001AB6  2221               	addwfc	(___lmul@product+3)^0,f,c
  5805  001AB8                     l4910:
  5806  001AB8  90D8               	bcf	status,0,c
  5807  001ABA  361A               	rlcf	___lmul@multiplicand^0,f,c
  5808  001ABC  361B               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5809  001ABE  361C               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5810  001AC0  361D               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5811  001AC2  90D8               	bcf	status,0,c
  5812  001AC4  3219               	rrcf	(___lmul@multiplier+3)^0,f,c
  5813  001AC6  3218               	rrcf	(___lmul@multiplier+2)^0,f,c
  5814  001AC8  3217               	rrcf	(___lmul@multiplier+1)^0,f,c
  5815  001ACA  3216               	rrcf	___lmul@multiplier^0,f,c
  5816  001ACC  5016               	movf	___lmul@multiplier^0,w,c
  5817  001ACE  1017               	iorwf	(___lmul@multiplier+1)^0,w,c
  5818  001AD0  1018               	iorwf	(___lmul@multiplier+2)^0,w,c
  5819  001AD2  1019               	iorwf	(___lmul@multiplier+3)^0,w,c
  5820  001AD4  E1E7               	bnz	l853
  5821  001AD6  C01E  F016         	movff	___lmul@product,?___lmul
  5822  001ADA  C01F  F017         	movff	___lmul@product+1,?___lmul+1
  5823  001ADE  C020  F018         	movff	___lmul@product+2,?___lmul+2
  5824  001AE2  C021  F019         	movff	___lmul@product+3,?___lmul+3
  5825  001AE6  0012               	return		;funcret
  5826  001AE8                     __end_of___lmul:
  5827                           	callstack 0
  5828                           
  5829 ;; *************** function ___lldiv *****************
  5830 ;; Defined at:
  5831 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  dividend        4   21[COMRAM] unsigned long 
  5834 ;;  divisor         4   25[COMRAM] unsigned long 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  quotient        4   29[COMRAM] unsigned long 
  5837 ;;  counter         1   33[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  4   21[COMRAM] unsigned long 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5847 ;;      Params:         8       0       0       0       0       0       0
  5848 ;;      Locals:         5       0       0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0
  5850 ;;      Totals:        13       0       0       0       0       0       0
  5851 ;;Total ram usage:       13 bytes
  5852 ;; Hardware stack levels used: 1
  5853 ;; Hardware stack levels required when called: 3
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_main
  5858 ;;		_calc_power
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text14
  5863  0019C8                     __ptext14:
  5864                           	callstack 0
  5865  0019C8                     ___lldiv:
  5866                           	callstack 25
  5867                           
  5868                           ;incstack = 0
  5869  0019C8  6A1E               	clrf	___lldiv@quotient^0,c
  5870  0019CA  6A1F               	clrf	(___lldiv@quotient+1)^0,c
  5871  0019CC  6A20               	clrf	(___lldiv@quotient+2)^0,c
  5872  0019CE  6A21               	clrf	(___lldiv@quotient+3)^0,c
  5873  0019D0  501A               	movf	___lldiv@divisor^0,w,c
  5874  0019D2  101B               	iorwf	(___lldiv@divisor+1)^0,w,c
  5875  0019D4  101C               	iorwf	(___lldiv@divisor+2)^0,w,c
  5876  0019D6  101D               	iorwf	(___lldiv@divisor+3)^0,w,c
  5877  0019D8  E029               	bz	l871
  5878  0019DA  0E01               	movlw	1
  5879  0019DC  6E22               	movwf	___lldiv@counter^0,c
  5880  0019DE  D006               	goto	l4922
  5881  0019E0                     l4920:
  5882  0019E0  90D8               	bcf	status,0,c
  5883  0019E2  361A               	rlcf	___lldiv@divisor^0,f,c
  5884  0019E4  361B               	rlcf	(___lldiv@divisor+1)^0,f,c
  5885  0019E6  361C               	rlcf	(___lldiv@divisor+2)^0,f,c
  5886  0019E8  361D               	rlcf	(___lldiv@divisor+3)^0,f,c
  5887  0019EA  2A22               	incf	___lldiv@counter^0,f,c
  5888  0019EC                     l4922:
  5889  0019EC  AE1D               	btfss	(___lldiv@divisor+3)^0,7,c
  5890  0019EE  D7F8               	goto	l4920
  5891  0019F0                     u4210:
  5892  0019F0  90D8               	bcf	status,0,c
  5893  0019F2  361E               	rlcf	___lldiv@quotient^0,f,c
  5894  0019F4  361F               	rlcf	(___lldiv@quotient+1)^0,f,c
  5895  0019F6  3620               	rlcf	(___lldiv@quotient+2)^0,f,c
  5896  0019F8  3621               	rlcf	(___lldiv@quotient+3)^0,f,c
  5897  0019FA  501A               	movf	___lldiv@divisor^0,w,c
  5898  0019FC  5C16               	subwf	___lldiv@dividend^0,w,c
  5899  0019FE  501B               	movf	(___lldiv@divisor+1)^0,w,c
  5900  001A00  5817               	subwfb	(___lldiv@dividend+1)^0,w,c
  5901  001A02  501C               	movf	(___lldiv@divisor+2)^0,w,c
  5902  001A04  5818               	subwfb	(___lldiv@dividend+2)^0,w,c
  5903  001A06  501D               	movf	(___lldiv@divisor+3)^0,w,c
  5904  001A08  5819               	subwfb	(___lldiv@dividend+3)^0,w,c
  5905  001A0A  E309               	bnc	l4932
  5906  001A0C  501A               	movf	___lldiv@divisor^0,w,c
  5907  001A0E  5E16               	subwf	___lldiv@dividend^0,f,c
  5908  001A10  501B               	movf	(___lldiv@divisor+1)^0,w,c
  5909  001A12  5A17               	subwfb	(___lldiv@dividend+1)^0,f,c
  5910  001A14  501C               	movf	(___lldiv@divisor+2)^0,w,c
  5911  001A16  5A18               	subwfb	(___lldiv@dividend+2)^0,f,c
  5912  001A18  501D               	movf	(___lldiv@divisor+3)^0,w,c
  5913  001A1A  5A19               	subwfb	(___lldiv@dividend+3)^0,f,c
  5914  001A1C  801E               	bsf	___lldiv@quotient^0,0,c
  5915  001A1E                     l4932:
  5916  001A1E  90D8               	bcf	status,0,c
  5917  001A20  321D               	rrcf	(___lldiv@divisor+3)^0,f,c
  5918  001A22  321C               	rrcf	(___lldiv@divisor+2)^0,f,c
  5919  001A24  321B               	rrcf	(___lldiv@divisor+1)^0,f,c
  5920  001A26  321A               	rrcf	___lldiv@divisor^0,f,c
  5921  001A28  2E22               	decfsz	___lldiv@counter^0,f,c
  5922  001A2A  D7E2               	goto	u4210
  5923  001A2C                     l871:
  5924  001A2C  C01E  F016         	movff	___lldiv@quotient,?___lldiv
  5925  001A30  C01F  F017         	movff	___lldiv@quotient+1,?___lldiv+1
  5926  001A34  C020  F018         	movff	___lldiv@quotient+2,?___lldiv+2
  5927  001A38  C021  F019         	movff	___lldiv@quotient+3,?___lldiv+3
  5928  001A3C  0012               	return		;funcret
  5929  001A3E                     __end_of___lldiv:
  5930                           	callstack 0
  5931                           
  5932 ;; *************** function _read_eep *****************
  5933 ;; Defined at:
  5934 ;;		line 25 in file "eeprom.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  address         2   21[COMRAM] unsigned short 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      unsigned char 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5948 ;;      Params:         2       0       0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0
  5951 ;;      Totals:         2       0       0       0       0       0       0
  5952 ;;Total ram usage:        2 bytes
  5953 ;; Hardware stack levels used: 1
  5954 ;; Hardware stack levels required when called: 3
  5955 ;; This function calls:
  5956 ;;		Nothing
  5957 ;; This function is called by:
  5958 ;;		_main
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text15
  5963  001EBC                     __ptext15:
  5964                           	callstack 0
  5965  001EBC                     _read_eep:
  5966                           	callstack 27
  5967                           
  5968                           ;eeprom.c: 28: {}
  5969                           
  5970                           ;incstack = 0
  5971  001EBC  B2A6               	btfsc	166,1,c	;volsfr
  5972  001EBE  D7FE               	goto	__ptext15
  5973                           
  5974                           ;eeprom.c: 30: EEADR = address;
  5975  001EC0  C016  FFA9         	movff	read_eep@address,4009	;volatile
  5976                           
  5977                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  5978  001EC4  9EA6               	bcf	166,7,c	;volsfr
  5979                           
  5980                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  5981  001EC6  9CA6               	bcf	166,6,c	;volsfr
  5982                           
  5983                           ;eeprom.c: 33: EECON1bits.RD = 1;
  5984  001EC8  80A6               	bsf	166,0,c	;volsfr
  5985                           
  5986                           ;eeprom.c: 34: return( EEDATA );
  5987  001ECA  50A8               	movf	168,w,c	;volatile
  5988  001ECC  0012               	return		;funcret
  5989  001ECE                     __end_of_read_eep:
  5990                           	callstack 0
  5991                           
  5992 ;; *************** function _readTemp_Single *****************
  5993 ;; Defined at:
  5994 ;;		line 45 in file "ds18b20.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  buf             1   28[COMRAM] PTR unsigned int 
  5997 ;;		 -> temperature(2), 
  5998 ;;  minus           1   29[COMRAM] PTR unsigned char 
  5999 ;;		 -> minus(1), 
  6000 ;;  time_flag       1   30[COMRAM] PTR unsigned char 
  6001 ;;		 -> time_flag(1), 
  6002 ;;  timer_val       1   31[COMRAM] PTR unsigned char 
  6003 ;;		 -> timer_val(2), 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  temp            2   36[COMRAM] unsigned int 
  6006 ;;  i               1   35[COMRAM] unsigned char 
  6007 ;;  tmp             1   34[COMRAM] unsigned char 
  6008 ;;  fptmp           1    0        unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 3F/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6018 ;;      Params:         4       0       0       0       0       0       0
  6019 ;;      Locals:         4       0       0       0       0       0       0
  6020 ;;      Temps:          2       0       0       0       0       0       0
  6021 ;;      Totals:        10       0       0       0       0       0       0
  6022 ;;Total ram usage:       10 bytes
  6023 ;; Hardware stack levels used: 1
  6024 ;; Hardware stack levels required when called: 5
  6025 ;; This function calls:
  6026 ;;		_ds18b20_crc8
  6027 ;;		_ow_reset
  6028 ;;		_read_byte
  6029 ;;		_write_byte
  6030 ;; This function is called by:
  6031 ;;		_main
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           	psect	text16
  6036  001480                     __ptext16:
  6037                           	callstack 0
  6038  001480                     _readTemp_Single:
  6039                           	callstack 25
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;ds18b20.c: 48: uint8_t i, tmp, fptmp;;ds18b20.c: 49: *minus = '+';
  6043                           
  6044                           ; BSR set to: 0
  6045                           
  6046                           ;incstack = 0
  6047  001480  501E               	movf	readTemp_Single@minus^0,w,c
  6048  001482  6ED9               	movwf	fsr2l,c
  6049  001484  6ADA               	clrf	fsr2h,c
  6050  001486  0E2B               	movlw	43
  6051  001488  6EDF               	movwf	indf2,c
  6052                           
  6053                           ;ds18b20.c: 51: switch (*time_flag) {
  6054  00148A  D06E               	goto	l5408
  6055  00148C                     l5326:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;ds18b20.c: 53: if (!ow_reset())
  6059  00148C  EC04  F00E         	call	_ow_reset	;wreg free
  6060  001490  0900               	iorlw	0
  6061  001492  A4D8               	btfss	status,2,c
  6062  001494  0C03               	retlw	3
  6063                           
  6064                           ;ds18b20.c: 54: {;ds18b20.c: 55: write_byte(0xCC);
  6065  001496  0ECC               	movlw	204
  6066  001498  EC43  F00E         	call	_write_byte
  6067                           
  6068                           ;ds18b20.c: 56: write_byte(0x44);
  6069  00149C  0E44               	movlw	68
  6070  00149E  EC43  F00E         	call	_write_byte
  6071                           
  6072                           ;ds18b20.c: 57: *timer_val = 0;
  6073  0014A2  5020               	movf	readTemp_Single@timer_val^0,w,c
  6074  0014A4  6ED9               	movwf	fsr2l,c
  6075  0014A6  6ADA               	clrf	fsr2h,c
  6076  0014A8  6ADF               	clrf	indf2,c
  6077                           
  6078                           ;ds18b20.c: 58: *time_flag = 2;
  6079  0014AA  501F               	movf	readTemp_Single@time_flag^0,w,c
  6080  0014AC  6ED9               	movwf	fsr2l,c
  6081  0014AE  6ADA               	clrf	fsr2h,c
  6082  0014B0  0E02               	movlw	2
  6083  0014B2  6EDF               	movwf	indf2,c
  6084                           
  6085                           ;ds18b20.c: 59: TMR2ON = 1;
  6086  0014B4  84CA               	bsf	4042,2,c	;volatile
  6087                           
  6088                           ;ds18b20.c: 61: return 0;
  6089  0014B6  0C00               	retlw	0
  6090  0014B8                     l5346:
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;ds18b20.c: 67: ow_reset();
  6094  0014B8  EC04  F00E         	call	_ow_reset	;wreg free
  6095                           
  6096                           ;ds18b20.c: 68: write_byte(0xCC);
  6097  0014BC  0ECC               	movlw	204
  6098  0014BE  EC43  F00E         	call	_write_byte
  6099                           
  6100                           ;ds18b20.c: 69: write_byte(0xBE);
  6101  0014C2  0EBE               	movlw	190
  6102  0014C4  EC43  F00E         	call	_write_byte
  6103                           
  6104                           ;ds18b20.c: 70: for (i = 0; i < 9; i++)
  6105  0014C8  6A24               	clrf	readTemp_Single@i^0,c
  6106  0014CA                     l5358:
  6107                           
  6108                           ;ds18b20.c: 71: {;ds18b20.c: 72: scratch[i] = read_byte();
  6109  0014CA  5024               	movf	readTemp_Single@i^0,w,c
  6110  0014CC  0FA0               	addlw	low _scratch
  6111  0014CE  6ED9               	movwf	fsr2l,c
  6112  0014D0  6ADA               	clrf	fsr2h,c
  6113  0014D2  ECE4  F00D         	call	_read_byte	;wreg free
  6114  0014D6  6EDF               	movwf	indf2,c
  6115  0014D8  2A24               	incf	readTemp_Single@i^0,f,c
  6116  0014DA  0E08               	movlw	8
  6117  0014DC  6424               	cpfsgt	readTemp_Single@i^0,c
  6118  0014DE  D7F5               	goto	l5358
  6119                           
  6120                           ;ds18b20.c: 73: };ds18b20.c: 75: if (ds18b20_crc8(scratch, 9)) {
  6121  0014E0  0EA0               	movlw	low _scratch
  6122  0014E2  6E16               	movwf	ds18b20_crc8@data_in^0,c
  6123  0014E4  0E09               	movlw	9
  6124  0014E6  6E17               	movwf	ds18b20_crc8@num_bytes^0,c
  6125  0014E8  ECBF  F00D         	call	_ds18b20_crc8	;wreg free
  6126  0014EC  0900               	iorlw	0
  6127  0014EE  E002               	bz	l5372
  6128                           
  6129                           ;ds18b20.c: 76: *time_flag = 0;
  6130  0014F0  D846               	call	PL84	;call to abstracted procedure
  6131                           
  6132                           ;ds18b20.c: 77: return 5;
  6133  0014F2  0C05               	retlw	5
  6134  0014F4                     l5372:
  6135                           
  6136                           ;ds18b20.c: 78: };ds18b20.c: 80: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scr
      +                          atch[0]);
  6137  0014F4  0100               	movlb	0	; () banked
  6138  0014F6  51A1               	movf	(_scratch+1)& (0+255),w,b
  6139  0014F8  6E21               	movwf	??_readTemp_Single^0,c
  6140  0014FA  51A0               	movf	_scratch& (0+255),w,b
  6141  0014FC  6E25               	movwf	readTemp_Single@temp^0,c
  6142  0014FE  C021  F026         	movff	??_readTemp_Single,readTemp_Single@temp+1
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;ds18b20.c: 83: if (temp & 0x8000) {
  6146  001502  AE26               	btfss	(readTemp_Single@temp+1)^0,7,c
  6147  001504  D009               	goto	l5380
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;ds18b20.c: 84: temp = -temp;
  6151  001506  6C25               	negf	readTemp_Single@temp^0,c
  6152  001508  1E26               	comf	(readTemp_Single@temp+1)^0,f,c
  6153  00150A  B0D8               	btfsc	status,0,c
  6154  00150C  2A26               	incf	(readTemp_Single@temp+1)^0,f,c
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;ds18b20.c: 85: *minus = '-';
  6158  00150E  501E               	movf	readTemp_Single@minus^0,w,c
  6159  001510  6ED9               	movwf	fsr2l,c
  6160  001512  6ADA               	clrf	fsr2h,c
  6161  001514  0E2D               	movlw	45
  6162  001516  6EDF               	movwf	indf2,c
  6163  001518                     l5380:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;ds18b20.c: 86: };ds18b20.c: 88: tmp = temp & 0x0f;
  6167  001518  5025               	movf	readTemp_Single@temp^0,w,c
  6168  00151A  0B0F               	andlw	15
  6169  00151C  6E23               	movwf	readTemp_Single@tmp^0,c
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;ds18b20.c: 89: tmp = fract[tmp];
  6173  00151E  0E17               	movlw	low _fract
  6174  001520  2423               	addwf	readTemp_Single@tmp^0,w,c
  6175  001522  6EF6               	movwf	tblptrl,c
  6176  001524  6AF7               	clrf	tblptrh,c
  6177  001526  0E7E               	movlw	high _fract
  6178  001528  22F7               	addwfc	tblptrh,f,c
  6179  00152A                     	if	0	;There are less than 3 active tblptr bytes
  6180  00152A                     	endif
  6181  00152A  0008               	tblrd		*
  6182  00152C  CFF5 F023          	movff	tablat,readTemp_Single@tmp
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;ds18b20.c: 90: temp = temp >> 4;
  6186  001530  3A25               	swapf	readTemp_Single@temp^0,f,c
  6187  001532  3A26               	swapf	(readTemp_Single@temp+1)^0,f,c
  6188  001534  0E0F               	movlw	15
  6189  001536  1625               	andwf	readTemp_Single@temp^0,f,c
  6190  001538  5026               	movf	(readTemp_Single@temp+1)^0,w,c
  6191  00153A  0BF0               	andlw	240
  6192  00153C  1225               	iorwf	readTemp_Single@temp^0,f,c
  6193  00153E  0E0F               	movlw	15
  6194  001540  1626               	andwf	(readTemp_Single@temp+1)^0,f,c
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;ds18b20.c: 91: temp = (temp & 0x00ff) * 10;
  6198  001542  5025               	movf	readTemp_Single@temp^0,w,c
  6199  001544  0D0A               	mullw	10
  6200  001546  CFF3 F025          	movff	prodl,readTemp_Single@temp
  6201  00154A  CFF4 F026          	movff	prodh,readTemp_Single@temp+1
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;ds18b20.c: 92: temp = temp + tmp;
  6205  00154E  5023               	movf	readTemp_Single@tmp^0,w,c
  6206  001550  2625               	addwf	readTemp_Single@temp^0,f,c
  6207  001552  0E00               	movlw	0
  6208  001554  2226               	addwfc	(readTemp_Single@temp+1)^0,f,c
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;ds18b20.c: 104: *buf = temp;
  6212  001556  501D               	movf	readTemp_Single@buf^0,w,c
  6213  001558  6ED9               	movwf	fsr2l,c
  6214  00155A  6ADA               	clrf	fsr2h,c
  6215  00155C  C025  FFDE         	movff	readTemp_Single@temp,postinc2
  6216  001560  C026  FFDD         	movff	readTemp_Single@temp+1,postdec2
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ds18b20.c: 105: *time_flag = 0;
  6220  001564  D80C               	call	PL84	;call to abstracted procedure
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;ds18b20.c: 106: return 1;
  6224  001566  0C01               	retlw	1
  6225  001568                     l5408:
  6226                           
  6227                           ; BSR set to: 0
  6228  001568  501F               	movf	readTemp_Single@time_flag^0,w,c
  6229  00156A  6ED9               	movwf	fsr2l,c
  6230  00156C  6ADA               	clrf	fsr2h,c
  6231  00156E  50DF               	movf	indf2,w,c
  6232                           
  6233                           ; Switch size 1, requested type "space"
  6234                           ; Number of cases is 3, Range of values is 0 to 2
  6235                           ; switch strategies available:
  6236                           ; Name         Instructions Cycles
  6237                           ; simple_byte           10     6 (average)
  6238                           ;	Chosen strategy is simple_byte
  6239  001570  E08D               	bz	l5326
  6240  001572  0A01               	xorlw	1	; case 1
  6241  001574  E0A1               	bz	l5346
  6242  001576  0A03               	xorlw	3	; case 2
  6243  001578  B4D8               	btfsc	status,2,c
  6244  00157A  0C00               	retlw	0
  6245  00157C  0012               	return		;funcret
  6246  00157E                     __end_of_readTemp_Single:
  6247                           	callstack 0
  6248  00157E                     PL84:
  6249                           	callstack 25
  6250  00157E  501F               	movf	readTemp_Single@time_flag^0,w,c
  6251  001580  6ED9               	movwf	fsr2l,c
  6252  001582  6ADA               	clrf	fsr2h,c
  6253  001584  6ADF               	clrf	indf2,c
  6254  001586  0012               	return	
  6255  001588                     __end_ofPL84:
  6256                           	callstack 0
  6257                           
  6258 ;; *************** function _read_byte *****************
  6259 ;; Defined at:
  6260 ;;		line 50 in file "onewire.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;		None
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;  i               1   24[COMRAM] unsigned char 
  6265 ;;  val             1   23[COMRAM] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      unsigned char 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6275 ;;      Params:         0       0       0       0       0       0       0
  6276 ;;      Locals:         2       0       0       0       0       0       0
  6277 ;;      Temps:          2       0       0       0       0       0       0
  6278 ;;      Totals:         4       0       0       0       0       0       0
  6279 ;;Total ram usage:        4 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 4
  6282 ;; This function calls:
  6283 ;;		_read_bit
  6284 ;; This function is called by:
  6285 ;;		_readTemp_Single
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text17
  6290  001BC8                     __ptext17:
  6291                           	callstack 0
  6292  001BC8                     _read_byte:
  6293                           	callstack 25
  6294                           
  6295                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  6296                           
  6297                           ;incstack = 0
  6298  001BC8  6A18               	clrf	read_byte@val^0,c
  6299                           
  6300                           ;onewire.c: 55: for(i=0;i<8;i++)
  6301  001BCA  6A19               	clrf	read_byte@i^0,c
  6302  001BCC                     l3618:
  6303                           
  6304                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  6305  001BCC  EC44  F00F         	call	_read_bit	;wreg free
  6306  001BD0  0900               	iorlw	0
  6307  001BD2  E00C               	bz	l3622
  6308  001BD4  C019  F016         	movff	read_byte@i,??_read_byte
  6309  001BD8  0E01               	movlw	1
  6310  001BDA  6E17               	movwf	(??_read_byte+1)^0,c
  6311  001BDC  2A16               	incf	??_read_byte^0,f,c
  6312  001BDE  D002               	goto	u2684
  6313  001BE0                     u2685:
  6314  001BE0  90D8               	bcf	status,0,c
  6315  001BE2  3617               	rlcf	(??_read_byte+1)^0,f,c
  6316  001BE4                     u2684:
  6317  001BE4  2E16               	decfsz	??_read_byte^0,f,c
  6318  001BE6  D7FC               	goto	u2685
  6319  001BE8  5017               	movf	(??_read_byte+1)^0,w,c
  6320  001BEA  1218               	iorwf	read_byte@val^0,f,c
  6321  001BEC                     l3622:
  6322                           
  6323                           ;onewire.c: 58: _delay((unsigned long)((120)*(64000000/4000000.0)));
  6324  001BEC  0E03               	movlw	3
  6325  001BEE  6E16               	movwf	??_read_byte^0,c
  6326  001BF0  0E7D               	movlw	125
  6327  001BF2                     u5497:
  6328  001BF2  2EE8               	decfsz	wreg,f,c
  6329  001BF4  D7FE               	bra	u5497
  6330  001BF6  2E16               	decfsz	??_read_byte^0,f,c
  6331  001BF8  D7FC               	bra	u5497
  6332  001BFA  F000               	nop	
  6333  001BFC  2A19               	incf	read_byte@i^0,f,c
  6334  001BFE  0E07               	movlw	7
  6335  001C00  6419               	cpfsgt	read_byte@i^0,c
  6336  001C02  D7E4               	goto	l3618
  6337                           
  6338                           ;onewire.c: 59: };onewire.c: 61: return val;
  6339  001C04  5018               	movf	read_byte@val^0,w,c
  6340  001C06  0012               	return		;funcret
  6341  001C08                     __end_of_read_byte:
  6342                           	callstack 0
  6343                           
  6344 ;; *************** function _read_bit *****************
  6345 ;; Defined at:
  6346 ;;		line 22 in file "onewire.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      unsigned char 
  6353 ;; Registers used:
  6354 ;;		wreg
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6360 ;;      Params:         0       0       0       0       0       0       0
  6361 ;;      Locals:         0       0       0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0
  6363 ;;      Totals:         0       0       0       0       0       0       0
  6364 ;;Total ram usage:        0 bytes
  6365 ;; Hardware stack levels used: 1
  6366 ;; Hardware stack levels required when called: 3
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_read_byte
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text18
  6375  001E88                     __ptext18:
  6376                           	callstack 0
  6377  001E88                     _read_bit:
  6378                           	callstack 25
  6379                           
  6380                           ;onewire.c: 24: PORTBbits.RB7 = 0;
  6381                           
  6382                           ;incstack = 0
  6383  001E88  9E81               	bcf	129,7,c	;volatile
  6384                           
  6385                           ;onewire.c: 25: TRISBbits.TRISB7 = 0;
  6386  001E8A  9E93               	bcf	147,7,c	;volatile
  6387                           
  6388                           ;onewire.c: 26: _delay((unsigned long)((1)*(64000000/4000000.0)));
  6389  001E8C  0E05               	movlw	5
  6390  001E8E                     u5507:
  6391  001E8E  2EE8               	decfsz	wreg,f,c
  6392  001E90  D7FE               	bra	u5507
  6393  001E92  F000               	nop	
  6394                           
  6395                           ;onewire.c: 27: PORTBbits.RB7 = 1;
  6396  001E94  8E81               	bsf	129,7,c	;volatile
  6397                           
  6398                           ;onewire.c: 28: TRISBbits.TRISB7 = 1;
  6399  001E96  8E93               	bsf	147,7,c	;volatile
  6400                           
  6401                           ;onewire.c: 29: _delay((unsigned long)((6)*(64000000/4000000.0)));
  6402  001E98  0E20               	movlw	32
  6403  001E9A                     u5517:
  6404  001E9A  2EE8               	decfsz	wreg,f,c
  6405  001E9C  D7FE               	bra	u5517
  6406                           
  6407                           ;onewire.c: 30: return(PORTBbits.RB7);
  6408  001E9E  BE81               	btfsc	129,7,c	;volatile
  6409  001EA0  0C01               	retlw	1
  6410  001EA2  0C00               	retlw	0	;funcret
  6411  001EA4                     __end_of_read_bit:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _ds18b20_crc8 *****************
  6415 ;; Defined at:
  6416 ;;		line 229 in file "ds18b20.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  data_in         1   21[COMRAM] PTR unsigned char 
  6419 ;;		 -> scratch(9), 
  6420 ;;  num_bytes       1   22[COMRAM] unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  crc             1   27[COMRAM] unsigned char 
  6423 ;;  loop_count      1   26[COMRAM] unsigned char 
  6424 ;;  feedback_bit    1   25[COMRAM] unsigned char 
  6425 ;;  data            1   24[COMRAM] unsigned char 
  6426 ;;  bit_counter     1   23[COMRAM] unsigned char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      unsigned char 
  6429 ;; Registers used:
  6430 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6436 ;;      Params:         2       0       0       0       0       0       0
  6437 ;;      Locals:         5       0       0       0       0       0       0
  6438 ;;      Temps:          0       0       0       0       0       0       0
  6439 ;;      Totals:         7       0       0       0       0       0       0
  6440 ;;Total ram usage:        7 bytes
  6441 ;; Hardware stack levels used: 1
  6442 ;; Hardware stack levels required when called: 3
  6443 ;; This function calls:
  6444 ;;		Nothing
  6445 ;; This function is called by:
  6446 ;;		_readTemp_Single
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text19
  6451  001B7E                     __ptext19:
  6452                           	callstack 0
  6453  001B7E                     _ds18b20_crc8:
  6454                           	callstack 26
  6455                           
  6456                           ;ds18b20.c: 230: uint8_t crc;;ds18b20.c: 231: uint8_t loop_count;;ds18b20.c: 232: uint8_
      +                          t bit_counter;;ds18b20.c: 233: uint8_t data;;ds18b20.c: 234: uint8_t feedback_bit;;ds18b
      +                          20.c: 236: crc = 0x00;
  6457                           
  6458                           ;incstack = 0
  6459  001B7E  6A1C               	clrf	ds18b20_crc8@crc^0,c
  6460                           
  6461                           ;ds18b20.c: 238: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  6462  001B80  6A1B               	clrf	ds18b20_crc8@loop_count^0,c
  6463  001B82  D01D               	goto	l3652
  6464  001B84                     l3632:
  6465                           
  6466                           ;ds18b20.c: 239: data = data_in[loop_count];
  6467  001B84  5016               	movf	ds18b20_crc8@data_in^0,w,c
  6468  001B86  241B               	addwf	ds18b20_crc8@loop_count^0,w,c
  6469  001B88  6ED9               	movwf	fsr2l,c
  6470  001B8A  6ADA               	clrf	fsr2h,c
  6471  001B8C  50DF               	movf	indf2,w,c
  6472  001B8E  6E19               	movwf	ds18b20_crc8@data^0,c
  6473                           
  6474                           ;ds18b20.c: 241: bit_counter = 8;
  6475  001B90  0E08               	movlw	8
  6476  001B92  6E18               	movwf	ds18b20_crc8@bit_counter^0,c
  6477  001B94                     l3636:
  6478                           
  6479                           ;ds18b20.c: 243: feedback_bit = (crc ^ data) & 0x01;
  6480  001B94  501C               	movf	ds18b20_crc8@crc^0,w,c
  6481  001B96  1819               	xorwf	ds18b20_crc8@data^0,w,c
  6482  001B98  0B01               	andlw	1
  6483  001B9A  6E1A               	movwf	ds18b20_crc8@feedback_bit^0,c
  6484                           
  6485                           ;ds18b20.c: 245: if (feedback_bit == 0x01) {
  6486  001B9C  041A               	decf	ds18b20_crc8@feedback_bit^0,w,c
  6487  001B9E  E102               	bnz	l732
  6488                           
  6489                           ;ds18b20.c: 246: crc = crc ^ 0x18;
  6490  001BA0  0E18               	movlw	24
  6491  001BA2  1A1C               	xorwf	ds18b20_crc8@crc^0,f,c
  6492  001BA4                     l732:
  6493                           
  6494                           ;ds18b20.c: 247: };ds18b20.c: 248: crc = (crc >> 1) & 0x7F;
  6495  001BA4  90D8               	bcf	status,0,c
  6496  001BA6  301C               	rrcf	ds18b20_crc8@crc^0,w,c
  6497  001BA8  0B7F               	andlw	127
  6498  001BAA  6E1C               	movwf	ds18b20_crc8@crc^0,c
  6499                           
  6500                           ;ds18b20.c: 249: if (feedback_bit == 0x01) {
  6501  001BAC  041A               	decf	ds18b20_crc8@feedback_bit^0,w,c
  6502  001BAE  E101               	bnz	l3644
  6503                           
  6504                           ;ds18b20.c: 250: crc = crc | 0x80;
  6505  001BB0  8E1C               	bsf	ds18b20_crc8@crc^0,7,c
  6506  001BB2                     l3644:
  6507                           
  6508                           ;ds18b20.c: 251: };ds18b20.c: 253: data = data >> 1;
  6509  001BB2  90D8               	bcf	status,0,c
  6510  001BB4  3219               	rrcf	ds18b20_crc8@data^0,f,c
  6511                           
  6512                           ;ds18b20.c: 254: bit_counter--;
  6513  001BB6  0618               	decf	ds18b20_crc8@bit_counter^0,f,c
  6514                           
  6515                           ;ds18b20.c: 256: } while (bit_counter > 0);
  6516  001BB8  5018               	movf	ds18b20_crc8@bit_counter^0,w,c
  6517  001BBA  E1EC               	bnz	l3636
  6518  001BBC  2A1B               	incf	ds18b20_crc8@loop_count^0,f,c
  6519  001BBE                     l3652:
  6520  001BBE  5017               	movf	ds18b20_crc8@num_bytes^0,w,c
  6521  001BC0  181B               	xorwf	ds18b20_crc8@loop_count^0,w,c
  6522  001BC2  E1E0               	bnz	l3632
  6523                           
  6524                           ;ds18b20.c: 257: };ds18b20.c: 259: return crc;
  6525  001BC4  501C               	movf	ds18b20_crc8@crc^0,w,c
  6526  001BC6  0012               	return		;funcret
  6527  001BC8                     __end_of_ds18b20_crc8:
  6528                           	callstack 0
  6529                           
  6530 ;; *************** function _lcd_preload *****************
  6531 ;; Defined at:
  6532 ;;		line 660 in file "main.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      void 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 3F/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6546 ;;      Params:         0       0       0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used: 1
  6552 ;; Hardware stack levels required when called: 7
  6553 ;; This function calls:
  6554 ;;		_cgrom_char
  6555 ;;		_clearLCD
  6556 ;;		_initLCD
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text20
  6563  001934                     __ptext20:
  6564                           	callstack 0
  6565  001934                     _lcd_preload:
  6566                           	callstack 23
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;main.c: 661: initLCD();
  6570                           
  6571                           ;incstack = 0
  6572  001934  EC33  F009         	call	_initLCD	;wreg free
  6573                           
  6574                           ;main.c: 662: cgrom_char(symbol_1, 1);
  6575  001938  D824               	call	PL52	;call to abstracted procedure
  6576  00193A  EC9C  F00E         	call	_cgrom_char	;wreg free
  6577                           
  6578                           ;main.c: 663: cgrom_char(symbol_2, 2);
  6579  00193E  D82F               	call	PL56	;call to abstracted procedure
  6580  001940  EC9C  F00E         	call	_cgrom_char	;wreg free
  6581                           
  6582                           ;main.c: 664: cgrom_char(symbol_3, 3);
  6583  001944  D825               	call	PL54	;call to abstracted procedure
  6584  001946  EC9C  F00E         	call	_cgrom_char	;wreg free
  6585                           
  6586                           ;main.c: 665: cgrom_char(symbol_4, 4);
  6587  00194A  D80D               	call	PL46	;call to abstracted procedure
  6588  00194C  EC9C  F00E         	call	_cgrom_char	;wreg free
  6589                           
  6590                           ;main.c: 666: cgrom_char(symbol_5, 5);
  6591  001950  D811               	call	PL50	;call to abstracted procedure
  6592  001952  EC9C  F00E         	call	_cgrom_char	;wreg free
  6593                           
  6594                           ;main.c: 667: cgrom_char(symbol_6, 6);
  6595  001956  D831               	call	PL60	;call to abstracted procedure
  6596  001958  EC9C  F00E         	call	_cgrom_char	;wreg free
  6597                           
  6598                           ;main.c: 668: cgrom_char(symbol_7, 7);
  6599  00195C  D827               	call	PL58	;call to abstracted procedure
  6600  00195E  EC9C  F00E         	call	_cgrom_char	;wreg free
  6601                           
  6602                           ;main.c: 669: clearLCD();
  6603  001962  EF52  F00F         	goto	_clearLCD	;wreg free
  6604  001966                     __end_of_lcd_preload:
  6605                           	callstack 0
  6606  001966                     PL46:
  6607                           	callstack 23
  6608  001966  0E5E               	movlw	low _symbol_4
  6609  001968  6E1A               	movwf	cgrom_char@symbol^0,c
  6610  00196A  0E7E               	movlw	high _symbol_4
  6611  00196C  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6612  00196E  0E04               	movlw	4
  6613  001970  6E1C               	movwf	cgrom_char@address^0,c
  6614  001972  0C04               	retlw	4
  6615  001974                     __end_ofPL46:
  6616                           	callstack 0
  6617  001974                     PL50:
  6618                           	callstack 23
  6619  001974  0E56               	movlw	low _symbol_5
  6620  001976  6E1A               	movwf	cgrom_char@symbol^0,c
  6621  001978  0E7E               	movlw	high _symbol_5
  6622  00197A  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6623  00197C  0E05               	movlw	5
  6624  00197E  6E1C               	movwf	cgrom_char@address^0,c
  6625  001980  0C05               	retlw	5
  6626  001982                     __end_ofPL50:
  6627                           	callstack 0
  6628  001982                     PL52:
  6629                           	callstack 23
  6630  001982  0E76               	movlw	low _symbol_1
  6631  001984  6E1A               	movwf	cgrom_char@symbol^0,c
  6632  001986  0E7E               	movlw	high _symbol_1
  6633  001988  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6634  00198A  0E01               	movlw	1
  6635  00198C  6E1C               	movwf	cgrom_char@address^0,c
  6636  00198E  0C01               	retlw	1
  6637  001990                     __end_ofPL52:
  6638                           	callstack 0
  6639  001990                     PL54:
  6640                           	callstack 23
  6641  001990  0E66               	movlw	low _symbol_3
  6642  001992  6E1A               	movwf	cgrom_char@symbol^0,c
  6643  001994  0E7E               	movlw	high _symbol_3
  6644  001996  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6645  001998  0E03               	movlw	3
  6646  00199A  6E1C               	movwf	cgrom_char@address^0,c
  6647  00199C  0C03               	retlw	3
  6648  00199E                     __end_ofPL54:
  6649                           	callstack 0
  6650  00199E                     PL56:
  6651                           	callstack 23
  6652  00199E  0E6E               	movlw	low _symbol_2
  6653  0019A0  6E1A               	movwf	cgrom_char@symbol^0,c
  6654  0019A2  0E7E               	movlw	high _symbol_2
  6655  0019A4  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6656  0019A6  0E02               	movlw	2
  6657  0019A8  6E1C               	movwf	cgrom_char@address^0,c
  6658  0019AA  0C02               	retlw	2
  6659  0019AC                     __end_ofPL56:
  6660                           	callstack 0
  6661  0019AC                     PL58:
  6662                           	callstack 23
  6663  0019AC  0E46               	movlw	low _symbol_7
  6664  0019AE  6E1A               	movwf	cgrom_char@symbol^0,c
  6665  0019B0  0E7E               	movlw	high _symbol_7
  6666  0019B2  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6667  0019B4  0E07               	movlw	7
  6668  0019B6  6E1C               	movwf	cgrom_char@address^0,c
  6669  0019B8  0C07               	retlw	7
  6670  0019BA                     __end_ofPL58:
  6671                           	callstack 0
  6672  0019BA                     PL60:
  6673                           	callstack 23
  6674  0019BA  0E4E               	movlw	low _symbol_6
  6675  0019BC  6E1A               	movwf	cgrom_char@symbol^0,c
  6676  0019BE  0E7E               	movlw	high _symbol_6
  6677  0019C0  6E1B               	movwf	(cgrom_char@symbol+1)^0,c
  6678  0019C2  0E06               	movlw	6
  6679  0019C4  6E1C               	movwf	cgrom_char@address^0,c
  6680  0019C6  0C06               	retlw	6
  6681  0019C8                     __end_ofPL60:
  6682                           	callstack 0
  6683                           
  6684 ;; *************** function _key_press *****************
  6685 ;; Defined at:
  6686 ;;		line 5 in file "key.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  key             1   21[COMRAM] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0
  6695 ;; Tracked objects:
  6696 ;;		On entry : 3F/0
  6697 ;;		On exit  : 3F/0
  6698 ;;		Unchanged: 3F/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6700 ;;      Params:         0       0       0       0       0       0       0
  6701 ;;      Locals:         1       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0
  6703 ;;      Totals:         1       0       0       0       0       0       0
  6704 ;;Total ram usage:        1 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 3
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text21
  6715  001CC4                     __ptext21:
  6716                           	callstack 0
  6717  001CC4                     _key_press:
  6718                           	callstack 27
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;key.c: 7: static uint16_t count = 0;;key.c: 8: uint8_t key;;key.c: 10: if ((PORTB & (1 
      +                          << 3)) == 0)
  6722                           
  6723                           ;incstack = 0
  6724  001CC4  B681               	btfsc	129,3,c	;volatile
  6725  001CC6  D003               	goto	l682
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;key.c: 11: key = 1;
  6729  001CC8  0E01               	movlw	1
  6730  001CCA  6E16               	movwf	key_press@key^0,c
  6731  001CCC  D001               	goto	l3812
  6732  001CCE                     l682:
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;key.c: 12: else;key.c: 13: key = 0;
  6736  001CCE  6A16               	clrf	key_press@key^0,c
  6737  001CD0                     l3812:
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;key.c: 16: if (key) {
  6741  001CD0  5016               	movf	key_press@key^0,w,c
  6742  001CD2  E013               	bz	l684
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;key.c: 17: if (count == 50) {
  6746  001CD4  0E32               	movlw	50
  6747  001CD6  1834               	xorwf	key_press@count^0,w,c
  6748  001CD8  1035               	iorwf	(key_press@count+1)^0,w,c
  6749  001CDA  E106               	bnz	l3822
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;key.c: 18: count = 50 + 10;
  6753  001CDC  6A35               	clrf	(key_press@count+1)^0,c
  6754  001CDE  0E3C               	movlw	60
  6755  001CE0  6E34               	movwf	key_press@count^0,c
  6756                           
  6757                           ;key.c: 19: key_pressed = 2;
  6758  001CE2  0E02               	movlw	2
  6759  001CE4  6E3A               	movwf	_key_pressed^0,c	;volatile
  6760  001CE6  0C02               	retlw	2
  6761  001CE8                     l3822:
  6762                           
  6763                           ; BSR set to: 0
  6764  001CE8  4A34               	infsnz	key_press@count^0,f,c
  6765  001CEA  2A35               	incf	(key_press@count+1)^0,f,c
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;key.c: 23: if (count == 7) {
  6769  001CEC  0E07               	movlw	7
  6770  001CEE  1834               	xorwf	key_press@count^0,w,c
  6771  001CF0  1035               	iorwf	(key_press@count+1)^0,w,c
  6772  001CF2  B4D8               	btfsc	status,2,c
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;key.c: 24: key_pressed = key;
  6776  001CF4  C016  F03A         	movff	key_press@key,_key_pressed	;volatile
  6777                           
  6778                           ;key.c: 25: return;
  6779  001CF8  0012               	return	
  6780  001CFA                     l684:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;key.c: 28: count = 0;
  6784  001CFA  6A34               	clrf	key_press@count^0,c
  6785  001CFC  6A35               	clrf	(key_press@count+1)^0,c
  6786                           
  6787                           ; BSR set to: 0
  6788  001CFE  0012               	return		;funcret
  6789  001D00                     __end_of_key_press:
  6790                           	callstack 0
  6791                           
  6792 ;; *************** function _key_GetKey *****************
  6793 ;; Defined at:
  6794 ;;		line 46 in file "key.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  key             1   21[COMRAM] unsigned char 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  1    wreg      unsigned char 
  6801 ;; Registers used:
  6802 ;;		wreg, status,2
  6803 ;; Tracked objects:
  6804 ;;		On entry : 3F/0
  6805 ;;		On exit  : 3F/0
  6806 ;;		Unchanged: 3F/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6808 ;;      Params:         0       0       0       0       0       0       0
  6809 ;;      Locals:         1       0       0       0       0       0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0
  6811 ;;      Totals:         1       0       0       0       0       0       0
  6812 ;;Total ram usage:        1 bytes
  6813 ;; Hardware stack levels used: 1
  6814 ;; Hardware stack levels required when called: 3
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text22
  6823  001EDA                     __ptext22:
  6824                           	callstack 0
  6825  001EDA                     _key_GetKey:
  6826                           	callstack 27
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;key.c: 48: uint8_t key = key_pressed;
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;incstack = 0
  6833  001EDA  C03A  F016         	movff	_key_pressed,key_GetKey@key	;volatile
  6834                           
  6835                           ;key.c: 50: key_pressed = 0;
  6836  001EDE  6A3A               	clrf	_key_pressed^0,c	;volatile
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;key.c: 51: return key;
  6840  001EE0  5016               	movf	key_GetKey@key^0,w,c
  6841                           
  6842                           ; BSR set to: 0
  6843  001EE2  0012               	return		;funcret
  6844  001EE4                     __end_of_key_GetKey:
  6845                           	callstack 0
  6846                           
  6847 ;; *************** function _init_cpu *****************
  6848 ;; Defined at:
  6849 ;;		line 507 in file "main.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6863 ;;      Params:         0       0       0       0       0       0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0
  6865 ;;      Temps:          2       0       0       0       0       0       0
  6866 ;;      Totals:         2       0       0       0       0       0       0
  6867 ;;Total ram usage:        2 bytes
  6868 ;; Hardware stack levels used: 1
  6869 ;; Hardware stack levels required when called: 7
  6870 ;; This function calls:
  6871 ;;		_cgrom_char
  6872 ;;		_initLCD
  6873 ;;		_init_ds18b20
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text23
  6880  001144                     __ptext23:
  6881                           	callstack 0
  6882  001144                     _init_cpu:
  6883                           	callstack 23
  6884                           
  6885                           ;main.c: 508: OSCCONbits.SCS = 0b00;
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;incstack = 0
  6889  001144  0EFC               	movlw	-4
  6890  001146  16D3               	andwf	211,f,c	;volatile
  6891                           
  6892                           ;main.c: 509: OSCCONbits.IRCF = 0b111;
  6893  001148  0E70               	movlw	112
  6894  00114A  12D3               	iorwf	211,f,c	;volatile
  6895                           
  6896                           ;main.c: 510: OSCTUNEbits.PLLEN = 1;
  6897  00114C  8C9B               	bsf	155,6,c	;volatile
  6898                           
  6899                           ;main.c: 511: TRISA = 0b00010111;
  6900  00114E  0E17               	movlw	23
  6901  001150  6E92               	movwf	146,c	;volatile
  6902                           
  6903                           ;main.c: 512: PORTA = 0;
  6904  001152  6A80               	clrf	128,c	;volatile
  6905                           
  6906                           ;main.c: 513: LATA = 0;
  6907  001154  6A89               	clrf	137,c	;volatile
  6908                           
  6909                           ;main.c: 515: PORTC = 0;
  6910  001156  6A82               	clrf	130,c	;volatile
  6911                           
  6912                           ;main.c: 516: LATC = 0;
  6913  001158  6A8B               	clrf	139,c	;volatile
  6914                           
  6915                           ;main.c: 517: TRISC = 0b00000000;
  6916  00115A  6A94               	clrf	148,c	;volatile
  6917                           
  6918                           ;main.c: 518: LATCbits.LATC4 = 0;
  6919  00115C  988B               	bcf	139,4,c	;volatile
  6920                           
  6921                           ;main.c: 519: LATCbits.LATC5 = 0;
  6922  00115E  9A8B               	bcf	139,5,c	;volatile
  6923                           
  6924                           ;main.c: 521: RBPU = 0;
  6925  001160  9EF1               	bcf	4081,7,c	;volatile
  6926                           
  6927                           ;main.c: 524: WPUB = 0b00111000;
  6928  001162  0E38               	movlw	56
  6929  001164  6E7C               	movwf	124,c	;volatile
  6930                           
  6931                           ;main.c: 529: PORTB = 0;
  6932  001166  6A81               	clrf	129,c	;volatile
  6933                           
  6934                           ;main.c: 530: LATB = 0;
  6935  001168  6A8A               	clrf	138,c	;volatile
  6936                           
  6937                           ;main.c: 531: TRISB = 0b00111111;
  6938  00116A  0E3F               	movlw	63
  6939  00116C  6E93               	movwf	147,c	;volatile
  6940                           
  6941                           ;main.c: 534: T0CONbits.T0PS = 0b010;
  6942  00116E  50D5               	movf	213,w,c	;volatile
  6943  001170  0BF8               	andlw	-8
  6944  001172  0902               	iorlw	2
  6945  001174  6ED5               	movwf	213,c	;volatile
  6946                           
  6947                           ;main.c: 535: T0CONbits.PSA = 0;
  6948  001176  96D5               	bcf	213,3,c	;volatile
  6949                           
  6950                           ;main.c: 537: T0CONbits.T0CS = 0;
  6951  001178  9AD5               	bcf	213,5,c	;volatile
  6952                           
  6953                           ;main.c: 538: T0CONbits.T08BIT = 0;
  6954  00117A  9CD5               	bcf	213,6,c	;volatile
  6955                           
  6956                           ;main.c: 539: T0CONbits.TMR0ON = 1;
  6957  00117C  8ED5               	bsf	213,7,c	;volatile
  6958                           
  6959                           ;main.c: 540: INTCON2bits.TMR0IP = 0;
  6960  00117E  94F1               	bcf	241,2,c	;volatile
  6961                           
  6962                           ;main.c: 544: ADCON2bits.ADCS = 0b110;
  6963  001180  50C0               	movf	192,w,c	;volatile
  6964  001182  0BF8               	andlw	-8
  6965  001184  0906               	iorlw	6
  6966  001186  6EC0               	movwf	192,c	;volatile
  6967                           
  6968                           ;main.c: 545: ADCON2bits.ACQT = 0b101;
  6969  001188  50C0               	movf	192,w,c	;volatile
  6970  00118A  0BC7               	andlw	-57
  6971  00118C  0928               	iorlw	40
  6972  00118E  6EC0               	movwf	192,c	;volatile
  6973                           
  6974                           ;main.c: 546: ADCON2bits.ADFM = 1;
  6975  001190  8EC0               	bsf	192,7,c	;volatile
  6976                           
  6977                           ;main.c: 548: ADCON1 = 0;
  6978  001192  6AC1               	clrf	193,c	;volatile
  6979                           
  6980                           ;main.c: 550: ADCON0bits.ADON = 1;
  6981  001194  80C2               	bsf	194,0,c	;volatile
  6982                           
  6983                           ;main.c: 551: ADCON0bits.CHS = 0b0000;
  6984  001196  0EC3               	movlw	-61
  6985  001198  16C2               	andwf	194,f,c	;volatile
  6986                           
  6987                           ;main.c: 552: ANSELbits.ANS0 = 1;
  6988  00119A  807E               	bsf	126,0,c	;volatile
  6989                           
  6990                           ;main.c: 553: IPR1bits.ADIP = 1;
  6991  00119C  8C9F               	bsf	159,6,c	;volatile
  6992                           
  6993                           ;main.c: 554: PIE1bits.ADIE = 1;
  6994  00119E  8C9D               	bsf	157,6,c	;volatile
  6995                           
  6996                           ;main.c: 557: TMR1CS = 0;
  6997  0011A0  92CD               	bcf	4045,1,c	;volatile
  6998                           
  6999                           ;main.c: 558: T1OSCEN = 0;
  7000  0011A2  96CD               	bcf	4045,3,c	;volatile
  7001                           
  7002                           ;main.c: 559: T1CONbits.T1CKPS = 0b11;
  7003  0011A4  0E30               	movlw	48
  7004  0011A6  12CD               	iorwf	205,f,c	;volatile
  7005                           
  7006                           ;main.c: 560: T1CONbits.RD16 = 0;
  7007  0011A8  9ECD               	bcf	205,7,c	;volatile
  7008                           
  7009                           ;main.c: 561: TMR1IE = 1;
  7010  0011AA  809D               	bsf	3997,0,c	;volatile
  7011                           
  7012                           ;main.c: 562: TMR1IP = 0;
  7013  0011AC  909F               	bcf	3999,0,c	;volatile
  7014                           
  7015                           ;main.c: 563: TMR1ON = 1;
  7016  0011AE  80CD               	bsf	4045,0,c	;volatile
  7017                           
  7018                           ;main.c: 566: T3CONbits.RD16 = 1;
  7019  0011B0  8EB1               	bsf	177,7,c	;volatile
  7020                           
  7021                           ;main.c: 568: T3CONbits.T3CCP2 = 0;
  7022  0011B2  9CB1               	bcf	177,6,c	;volatile
  7023                           
  7024                           ;main.c: 569: T3CONbits.T3CCP1 = 1;
  7025  0011B4  86B1               	bsf	177,3,c	;volatile
  7026                           
  7027                           ;main.c: 573: T3CONbits.TMR3CS = 0;
  7028  0011B6  92B1               	bcf	177,1,c	;volatile
  7029                           
  7030                           ;main.c: 576: T3CONbits.T3CKPS = 0b11;
  7031  0011B8  12B1               	iorwf	177,f,c	;volatile
  7032                           
  7033                           ;main.c: 580: TMR3IP = 0;
  7034  0011BA  92A2               	bcf	4002,1,c	;volatile
  7035                           
  7036                           ;main.c: 581: TMR3IE = 0;
  7037  0011BC  92A0               	bcf	4000,1,c	;volatile
  7038                           
  7039                           ;main.c: 582: TMR3ON = 1;
  7040  0011BE  80B1               	bsf	4017,0,c	;volatile
  7041                           
  7042                           ;main.c: 585: CCP1CONbits.CCP1M = 0b1010;
  7043  0011C0  50BD               	movf	189,w,c	;volatile
  7044  0011C2  0BF0               	andlw	-16
  7045  0011C4  090A               	iorlw	10
  7046  0011C6  6EBD               	movwf	189,c	;volatile
  7047                           
  7048                           ;main.c: 586: PIE1bits.CCP1IE = 1;
  7049  0011C8  849D               	bsf	157,2,c	;volatile
  7050                           
  7051                           ;main.c: 587: IPR1bits.CCP1IP = 1;
  7052  0011CA  849F               	bsf	159,2,c	;volatile
  7053                           
  7054                           ;main.c: 588: {CCPR1L = (18000 & 0xFF); CCPR1H = (18000 >> 8);};
  7055  0011CC  0E50               	movlw	80
  7056  0011CE  6EBE               	movwf	190,c	;volatile
  7057  0011D0  0E46               	movlw	70
  7058  0011D2  6EBF               	movwf	191,c	;volatile
  7059                           
  7060                           ;main.c: 592: CCP2CONbits.CCP2M = 0b1011;
  7061  0011D4  50BA               	movf	186,w,c	;volatile
  7062  0011D6  0BF0               	andlw	-16
  7063  0011D8  090B               	iorlw	11
  7064  0011DA  6EBA               	movwf	186,c	;volatile
  7065                           
  7066                           ;main.c: 595: {CCPR2L = (100 & 0xFF); CCPR2H = (100 >> 8);};
  7067  0011DC  0E64               	movlw	100
  7068  0011DE  6EBB               	movwf	187,c	;volatile
  7069  0011E0  6ABC               	clrf	188,c	;volatile
  7070                           
  7071                           ;main.c: 599: T2CONbits.T2CKPS = 0b10;
  7072  0011E2  50CA               	movf	202,w,c	;volatile
  7073  0011E4  0BFC               	andlw	-4
  7074  0011E6  0902               	iorlw	2
  7075  0011E8  6ECA               	movwf	202,c	;volatile
  7076                           
  7077                           ;main.c: 600: T2CONbits.T2OUTPS = 0b1111;
  7078  0011EA  0E78               	movlw	120
  7079  0011EC  12CA               	iorwf	202,f,c	;volatile
  7080                           
  7081                           ;main.c: 601: TMR2ON = 0;
  7082  0011EE  94CA               	bcf	4042,2,c	;volatile
  7083                           
  7084                           ;main.c: 602: IPR1bits.TMR2IP = 0;
  7085  0011F0  929F               	bcf	159,1,c	;volatile
  7086                           
  7087                           ;main.c: 603: PIE1bits.TMR2IE = 1;
  7088  0011F2  829D               	bsf	157,1,c	;volatile
  7089                           
  7090                           ;main.c: 604: PR2 = 64;
  7091  0011F4  0E40               	movlw	64
  7092  0011F6  6ECB               	movwf	203,c	;volatile
  7093                           
  7094                           ;main.c: 607: INT0IE = 1;
  7095  0011F8  88F2               	bsf	4082,4,c	;volatile
  7096                           
  7097                           ;main.c: 608: INTCON2bits.INTEDG0 = 0;
  7098  0011FA  9CF1               	bcf	241,6,c	;volatile
  7099                           
  7100                           ;main.c: 609: INT0IF = 0;
  7101  0011FC  92F2               	bcf	4082,1,c	;volatile
  7102                           
  7103                           ;main.c: 612: RCONbits.IPEN = 1;
  7104  0011FE  8ED0               	bsf	208,7,c	;volatile
  7105                           
  7106                           ;main.c: 613: INTCONbits.TMR0IE = 1;
  7107  001200  8AF2               	bsf	242,5,c	;volatile
  7108                           
  7109                           ;main.c: 614: INTCONbits.GIEL = 1;
  7110  001202  8CF2               	bsf	242,6,c	;volatile
  7111                           
  7112                           ;main.c: 616: (INTCONbits.GIE = 1);
  7113  001204  8EF2               	bsf	242,7,c	;volatile
  7114                           
  7115                           ;main.c: 617: _delay((unsigned long)((50)*(64000000/4000.0)));
  7116  001206  0E05               	movlw	5
  7117  001208  6E1F               	movwf	(??_init_cpu+1)^0,c
  7118  00120A  0E0F               	movlw	15
  7119  00120C  6E1E               	movwf	??_init_cpu^0,c
  7120  00120E  0EF1               	movlw	241
  7121  001210                     u5527:
  7122  001210  2EE8               	decfsz	wreg,f,c
  7123  001212  D7FE               	bra	u5527
  7124  001214  2E1E               	decfsz	??_init_cpu^0,f,c
  7125  001216  D7FC               	bra	u5527
  7126  001218  2E1F               	decfsz	(??_init_cpu+1)^0,f,c
  7127  00121A  D7FA               	bra	u5527
  7128  00121C  F000               	nop	
  7129                           
  7130                           ;main.c: 619: initLCD();
  7131  00121E  EC33  F009         	call	_initLCD	;wreg free
  7132                           
  7133                           ;main.c: 621: PORTBbits.RB7 = 1;
  7134  001222  8E81               	bsf	129,7,c	;volatile
  7135                           
  7136                           ;main.c: 625: is_power = 1;
  7137  001224  ECFD  F00E         	call	_init_ds18b20	;wreg free
  7138                           
  7139                           ;main.c: 627: cgrom_char(symbol_1, 1);
  7140  001228  ECC1  F00C         	call	PL52	;call to abstracted procedure
  7141  00122C  EC9C  F00E         	call	_cgrom_char	;wreg free
  7142                           
  7143                           ;main.c: 628: cgrom_char(symbol_2, 2);
  7144  001230  ECCF  F00C         	call	PL56	;call to abstracted procedure
  7145  001234  EC9C  F00E         	call	_cgrom_char	;wreg free
  7146                           
  7147                           ;main.c: 629: cgrom_char(symbol_3, 3);
  7148  001238  ECC8  F00C         	call	PL54	;call to abstracted procedure
  7149  00123C  EC9C  F00E         	call	_cgrom_char	;wreg free
  7150                           
  7151                           ;main.c: 630: cgrom_char(symbol_4, 4);
  7152  001240  ECB3  F00C         	call	PL46	;call to abstracted procedure
  7153  001244  EC9C  F00E         	call	_cgrom_char	;wreg free
  7154                           
  7155                           ;main.c: 631: cgrom_char(symbol_5, 5);
  7156  001248  ECBA  F00C         	call	PL50	;call to abstracted procedure
  7157  00124C  EC9C  F00E         	call	_cgrom_char	;wreg free
  7158                           
  7159                           ;main.c: 632: cgrom_char(symbol_6, 6);
  7160  001250  ECDD  F00C         	call	PL60	;call to abstracted procedure
  7161  001254  EC9C  F00E         	call	_cgrom_char	;wreg free
  7162                           
  7163                           ;main.c: 633: cgrom_char(symbol_7, 7);
  7164  001258  ECD6  F00C         	call	PL58	;call to abstracted procedure
  7165  00125C  EC9C  F00E         	call	_cgrom_char	;wreg free
  7166                           
  7167                           ;main.c: 634: getU = 1;
  7168  001260  0E01               	movlw	1
  7169  001262  6E3E               	movwf	_getU^0,c
  7170  001264  0C01               	retlw	1	;funcret
  7171  001266                     __end_of_init_cpu:
  7172                           	callstack 0
  7173                           
  7174 ;; *************** function _init_ds18b20 *****************
  7175 ;; Defined at:
  7176 ;;		line 18 in file "ds18b20.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;		None
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;		None
  7181 ;; Return value:  Size  Location     Type
  7182 ;;                  1    wreg      void 
  7183 ;; Registers used:
  7184 ;;		wreg, status,2, status,0, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7190 ;;      Params:         0       0       0       0       0       0       0
  7191 ;;      Locals:         0       0       0       0       0       0       0
  7192 ;;      Temps:          0       0       0       0       0       0       0
  7193 ;;      Totals:         0       0       0       0       0       0       0
  7194 ;;Total ram usage:        0 bytes
  7195 ;; Hardware stack levels used: 1
  7196 ;; Hardware stack levels required when called: 5
  7197 ;; This function calls:
  7198 ;;		_ow_reset
  7199 ;;		_write_byte
  7200 ;; This function is called by:
  7201 ;;		_init_cpu
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text24
  7206  001DFA                     __ptext24:
  7207                           	callstack 0
  7208  001DFA                     _init_ds18b20:
  7209                           	callstack 24
  7210                           
  7211                           ;ds18b20.c: 20: if (!ow_reset())
  7212                           
  7213                           ;incstack = 0
  7214  001DFA  EC04  F00E         	call	_ow_reset	;wreg free
  7215  001DFE  0900               	iorlw	0
  7216  001E00  A4D8               	btfss	status,2,c
  7217  001E02  0012               	return	
  7218                           
  7219                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  7220  001E04  0ECC               	movlw	204
  7221  001E06  EC43  F00E         	call	_write_byte
  7222                           
  7223                           ;ds18b20.c: 24: write_byte(0x4E);
  7224  001E0A  0E4E               	movlw	78
  7225  001E0C  EC43  F00E         	call	_write_byte
  7226                           
  7227                           ;ds18b20.c: 25: write_byte(0x00);
  7228  001E10  0E00               	movlw	0
  7229  001E12  EC43  F00E         	call	_write_byte
  7230                           
  7231                           ;ds18b20.c: 26: write_byte(0x00);
  7232  001E16  0E00               	movlw	0
  7233  001E18  EC43  F00E         	call	_write_byte
  7234                           
  7235                           ;ds18b20.c: 27: write_byte(0x1F);
  7236  001E1C  0E1F               	movlw	31
  7237  001E1E  EF43  F00E         	goto	_write_byte
  7238  001E22                     __end_of_init_ds18b20:
  7239                           	callstack 0
  7240                           
  7241 ;; *************** function _write_byte *****************
  7242 ;; Defined at:
  7243 ;;		line 66 in file "onewire.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  val             1    wreg     unsigned char 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  val             1   24[COMRAM] unsigned char 
  7248 ;;  i               1   26[COMRAM] unsigned char 
  7249 ;;  temp            1   25[COMRAM] unsigned char 
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  1    wreg      void 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7259 ;;      Params:         0       0       0       0       0       0       0
  7260 ;;      Locals:         3       0       0       0       0       0       0
  7261 ;;      Temps:          2       0       0       0       0       0       0
  7262 ;;      Totals:         5       0       0       0       0       0       0
  7263 ;;Total ram usage:        5 bytes
  7264 ;; Hardware stack levels used: 1
  7265 ;; Hardware stack levels required when called: 4
  7266 ;; This function calls:
  7267 ;;		_write_bit
  7268 ;; This function is called by:
  7269 ;;		_init_ds18b20
  7270 ;;		_readTemp_Single
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text25
  7275  001C86                     __ptext25:
  7276                           	callstack 0
  7277  001C86                     _write_byte:
  7278                           	callstack 25
  7279                           
  7280                           ;incstack = 0
  7281                           ;write_byte@val stored from wreg
  7282  001C86  6E19               	movwf	write_byte@val^0,c
  7283                           
  7284                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  7285  001C88  6A1B               	clrf	write_byte@i^0,c
  7286  001C8A                     l3276:
  7287                           
  7288                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  7289  001C8A  C01B  F017         	movff	write_byte@i,??_write_byte
  7290  001C8E  C019  F018         	movff	write_byte@val,??_write_byte+1
  7291  001C92  2A17               	incf	??_write_byte^0,f,c
  7292  001C94  D002               	goto	u2144
  7293  001C96                     u2145:
  7294  001C96  90D8               	bcf	status,0,c
  7295  001C98  3218               	rrcf	(??_write_byte+1)^0,f,c
  7296  001C9A                     u2144:
  7297  001C9A  2E17               	decfsz	??_write_byte^0,f,c
  7298  001C9C  D7FC               	goto	u2145
  7299  001C9E  5018               	movf	(??_write_byte+1)^0,w,c
  7300  001CA0  6E1A               	movwf	write_byte@temp^0,c
  7301                           
  7302                           ;onewire.c: 74: temp &= 0x01;
  7303  001CA2  0E01               	movlw	1
  7304  001CA4  161A               	andwf	write_byte@temp^0,f,c
  7305                           
  7306                           ;onewire.c: 75: write_bit(temp);
  7307  001CA6  501A               	movf	write_byte@temp^0,w,c
  7308  001CA8  ECE7  F00E         	call	_write_bit
  7309  001CAC  2A1B               	incf	write_byte@i^0,f,c
  7310  001CAE  0E07               	movlw	7
  7311  001CB0  641B               	cpfsgt	write_byte@i^0,c
  7312  001CB2  D7EB               	goto	l3276
  7313                           
  7314                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(64000000/4000000.0)));
  7315  001CB4  0EF0               	movlw	240
  7316  001CB6                     u5537:
  7317  001CB6  F000 F000          	nop2	
  7318  001CBA  F000 F000          	nop2	
  7319  001CBE  2EE8               	decfsz	wreg,f,c
  7320  001CC0  D7FA               	bra	u5537
  7321  001CC2  0012               	return		;funcret
  7322  001CC4                     __end_of_write_byte:
  7323                           	callstack 0
  7324                           
  7325 ;; *************** function _write_bit *****************
  7326 ;; Defined at:
  7327 ;;		line 34 in file "onewire.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  bitval          1    wreg     unsigned char 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  bitval          1   21[COMRAM] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7341 ;;      Params:         0       0       0       0       0       0       0
  7342 ;;      Locals:         1       0       0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0       0       0
  7344 ;;      Totals:         1       0       0       0       0       0       0
  7345 ;;Total ram usage:        1 bytes
  7346 ;; Hardware stack levels used: 1
  7347 ;; Hardware stack levels required when called: 3
  7348 ;; This function calls:
  7349 ;;		Nothing
  7350 ;; This function is called by:
  7351 ;;		_write_byte
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text26
  7356  001DCE                     __ptext26:
  7357                           	callstack 0
  7358  001DCE                     _write_bit:
  7359                           	callstack 25
  7360                           
  7361                           ;incstack = 0
  7362                           ;write_bit@bitval stored from wreg
  7363  001DCE  6E16               	movwf	write_bit@bitval^0,c
  7364                           
  7365                           ;onewire.c: 36: PORTBbits.RB7 = 0;
  7366  001DD0  9E81               	bcf	129,7,c	;volatile
  7367                           
  7368                           ;onewire.c: 37: TRISBbits.TRISB7 = 0;
  7369  001DD2  9E93               	bcf	147,7,c	;volatile
  7370                           
  7371                           ;onewire.c: 38: if(bitval == 1) {
  7372  001DD4  0416               	decf	write_bit@bitval^0,w,c
  7373  001DD6  E107               	bnz	l755
  7374                           
  7375                           ;onewire.c: 39: _delay((unsigned long)((2)*(64000000/4000000.0)));
  7376  001DD8  0E0A               	movlw	10
  7377  001DDA                     u5547:
  7378  001DDA  2EE8               	decfsz	wreg,f,c
  7379  001DDC  D7FE               	bra	u5547
  7380  001DDE  F000 F000          	nop2	
  7381                           
  7382                           ;onewire.c: 40: PORTBbits.RB7 = 1;
  7383  001DE2  8E81               	bsf	129,7,c	;volatile
  7384                           
  7385                           ;onewire.c: 41: TRISBbits.TRISB7 = 1;
  7386  001DE4  8E93               	bsf	147,7,c	;volatile
  7387  001DE6                     l755:
  7388                           
  7389                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(64000000/4000000.0)));
  7390  001DE6  0EF0               	movlw	240
  7391  001DE8                     u5557:
  7392  001DE8  F000 F000          	nop2	
  7393  001DEC  F000 F000          	nop2	
  7394  001DF0  2EE8               	decfsz	wreg,f,c
  7395  001DF2  D7FA               	bra	u5557
  7396                           
  7397                           ;onewire.c: 44: PORTBbits.RB7 = 1;
  7398  001DF4  8E81               	bsf	129,7,c	;volatile
  7399                           
  7400                           ;onewire.c: 45: TRISBbits.TRISB7 = 1;
  7401  001DF6  8E93               	bsf	147,7,c	;volatile
  7402  001DF8  0012               	return		;funcret
  7403  001DFA                     __end_of_write_bit:
  7404                           	callstack 0
  7405                           
  7406 ;; *************** function _ow_reset *****************
  7407 ;; Defined at:
  7408 ;;		line 5 in file "onewire.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;  presence        1   22[COMRAM] unsigned char 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      unsigned char 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7422 ;;      Params:         0       0       0       0       0       0       0
  7423 ;;      Locals:         1       0       0       0       0       0       0
  7424 ;;      Temps:          1       0       0       0       0       0       0
  7425 ;;      Totals:         2       0       0       0       0       0       0
  7426 ;;Total ram usage:        2 bytes
  7427 ;; Hardware stack levels used: 1
  7428 ;; Hardware stack levels required when called: 3
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_init_ds18b20
  7433 ;;		_readTemp_Single
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text27
  7438  001C08                     __ptext27:
  7439                           	callstack 0
  7440  001C08                     _ow_reset:
  7441                           	callstack 26
  7442                           
  7443                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTBbits.RB7 = 0;
  7444                           
  7445                           ;incstack = 0
  7446  001C08  9E81               	bcf	129,7,c	;volatile
  7447                           
  7448                           ;onewire.c: 9: TRISBbits.TRISB7 = 0;
  7449  001C0A  9E93               	bcf	147,7,c	;volatile
  7450                           
  7451                           ;onewire.c: 10: _delay((unsigned long)((500)*(64000000/4000000.0)));
  7452  001C0C  0E0B               	movlw	11
  7453  001C0E  6E16               	movwf	??_ow_reset^0,c
  7454  001C10  0E62               	movlw	98
  7455  001C12                     u5567:
  7456  001C12  2EE8               	decfsz	wreg,f,c
  7457  001C14  D7FE               	bra	u5567
  7458  001C16  2E16               	decfsz	??_ow_reset^0,f,c
  7459  001C18  D7FC               	bra	u5567
  7460  001C1A  F000 F000          	nop2	
  7461                           
  7462                           ;onewire.c: 11: PORTBbits.RB7 = 1;
  7463  001C1E  8E81               	bsf	129,7,c	;volatile
  7464                           
  7465                           ;onewire.c: 12: TRISBbits.TRISB7 = 1;
  7466  001C20  8E93               	bsf	147,7,c	;volatile
  7467                           
  7468                           ;onewire.c: 13: _delay((unsigned long)((40)*(64000000/4000000.0)));
  7469  001C22  0ED5               	movlw	213
  7470  001C24                     u5577:
  7471  001C24  2EE8               	decfsz	wreg,f,c
  7472  001C26  D7FE               	bra	u5577
  7473  001C28  F000               	nop	
  7474                           
  7475                           ;onewire.c: 14: presence = PORTBbits.RB7;
  7476  001C2A  0E00               	movlw	0
  7477  001C2C  BE81               	btfsc	129,7,c	;volatile
  7478  001C2E  0E01               	movlw	1
  7479  001C30  6E17               	movwf	ow_reset@presence^0,c
  7480                           
  7481                           ;onewire.c: 15: _delay((unsigned long)((424)*(64000000/4000000.0)));
  7482  001C32  0E09               	movlw	9
  7483  001C34  6E16               	movwf	??_ow_reset^0,c
  7484  001C36  0ECE               	movlw	206
  7485  001C38                     u5587:
  7486  001C38  2EE8               	decfsz	wreg,f,c
  7487  001C3A  D7FE               	bra	u5587
  7488  001C3C  2E16               	decfsz	??_ow_reset^0,f,c
  7489  001C3E  D7FC               	bra	u5587
  7490  001C40  F000 F000          	nop2	
  7491                           
  7492                           ;onewire.c: 16: return(presence);
  7493  001C44  5017               	movf	ow_reset@presence^0,w,c
  7494  001C46  0012               	return		;funcret
  7495  001C48                     __end_of_ow_reset:
  7496                           	callstack 0
  7497                           
  7498 ;; *************** function _initLCD *****************
  7499 ;; Defined at:
  7500 ;;		line 10 in file "hd44780.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7514 ;;      Params:         0       0       0       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0
  7516 ;;      Temps:          1       0       0       0       0       0       0
  7517 ;;      Totals:         1       0       0       0       0       0       0
  7518 ;;Total ram usage:        1 bytes
  7519 ;; Hardware stack levels used: 1
  7520 ;; Hardware stack levels required when called: 6
  7521 ;; This function calls:
  7522 ;;		_clearLCD
  7523 ;;		_lcdNibble
  7524 ;;		_lcdWrite
  7525 ;; This function is called by:
  7526 ;;		_init_cpu
  7527 ;;		_lcd_preload
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text28
  7532  001266                     __ptext28:
  7533                           	callstack 0
  7534  001266                     _initLCD:
  7535                           	callstack 23
  7536                           
  7537                           ;hd44780.c: 11: LATAbits.LA7 = 0;
  7538                           
  7539                           ;incstack = 0
  7540  001266  9E89               	bcf	137,7,c	;volatile
  7541                           
  7542                           ;hd44780.c: 12: LATAbits.LA6 = 0;
  7543  001268  9C89               	bcf	137,6,c	;volatile
  7544                           
  7545                           ;hd44780.c: 14: _delay((unsigned long)((10)*(64000000/4000.0)));
  7546  00126A  0ED0               	movlw	208
  7547  00126C  6E1B               	movwf	??_initLCD^0,c
  7548  00126E  0ECA               	movlw	202
  7549  001270                     u5597:
  7550  001270  2EE8               	decfsz	wreg,f,c
  7551  001272  D7FE               	bra	u5597
  7552  001274  2E1B               	decfsz	??_initLCD^0,f,c
  7553  001276  D7FC               	bra	u5597
  7554                           
  7555                           ;hd44780.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  7556  001278  0ED0               	movlw	208
  7557  00127A  6E1B               	movwf	??_initLCD^0,c
  7558  00127C  0ECA               	movlw	202
  7559  00127E                     u5607:
  7560  00127E  2EE8               	decfsz	wreg,f,c
  7561  001280  D7FE               	bra	u5607
  7562  001282  2E1B               	decfsz	??_initLCD^0,f,c
  7563  001284  D7FC               	bra	u5607
  7564                           
  7565                           ;hd44780.c: 16: _delay((unsigned long)((10)*(64000000/4000.0)));
  7566  001286  0ED0               	movlw	208
  7567  001288  6E1B               	movwf	??_initLCD^0,c
  7568  00128A  0ECA               	movlw	202
  7569  00128C                     u5617:
  7570  00128C  2EE8               	decfsz	wreg,f,c
  7571  00128E  D7FE               	bra	u5617
  7572  001290  2E1B               	decfsz	??_initLCD^0,f,c
  7573  001292  D7FC               	bra	u5617
  7574                           
  7575                           ;hd44780.c: 17: _delay((unsigned long)((10)*(64000000/4000.0)));
  7576  001294  0ED0               	movlw	208
  7577  001296  6E1B               	movwf	??_initLCD^0,c
  7578  001298  0ECA               	movlw	202
  7579  00129A                     u5627:
  7580  00129A  2EE8               	decfsz	wreg,f,c
  7581  00129C  D7FE               	bra	u5627
  7582  00129E  2E1B               	decfsz	??_initLCD^0,f,c
  7583  0012A0  D7FC               	bra	u5627
  7584                           
  7585                           ;hd44780.c: 21: lcdNibble(0b0011);
  7586  0012A2  0E03               	movlw	3
  7587  0012A4  EC4F  F00C         	call	_lcdNibble
  7588                           
  7589                           ;hd44780.c: 22: _delay((unsigned long)((5)*(64000000/4000.0)));
  7590  0012A8  0E68               	movlw	104
  7591  0012AA  6E1B               	movwf	??_initLCD^0,c
  7592  0012AC  0EE4               	movlw	228
  7593  0012AE                     u5637:
  7594  0012AE  2EE8               	decfsz	wreg,f,c
  7595  0012B0  D7FE               	bra	u5637
  7596  0012B2  2E1B               	decfsz	??_initLCD^0,f,c
  7597  0012B4  D7FC               	bra	u5637
  7598  0012B6  F000 F000          	nop2	
  7599                           
  7600                           ;hd44780.c: 23: lcdNibble(0b0011);
  7601  0012BA  0E03               	movlw	3
  7602  0012BC  EC4F  F00C         	call	_lcdNibble
  7603                           
  7604                           ;hd44780.c: 24: _delay((unsigned long)((5)*(64000000/4000.0)));
  7605  0012C0  0E68               	movlw	104
  7606  0012C2  6E1B               	movwf	??_initLCD^0,c
  7607  0012C4  0EE4               	movlw	228
  7608  0012C6                     u5647:
  7609  0012C6  2EE8               	decfsz	wreg,f,c
  7610  0012C8  D7FE               	bra	u5647
  7611  0012CA  2E1B               	decfsz	??_initLCD^0,f,c
  7612  0012CC  D7FC               	bra	u5647
  7613  0012CE  F000 F000          	nop2	
  7614                           
  7615                           ;hd44780.c: 25: lcdNibble(0b0011);
  7616  0012D2  0E03               	movlw	3
  7617  0012D4  EC4F  F00C         	call	_lcdNibble
  7618                           
  7619                           ;hd44780.c: 26: _delay((unsigned long)((5)*(64000000/4000.0)));
  7620  0012D8  0E68               	movlw	104
  7621  0012DA  6E1B               	movwf	??_initLCD^0,c
  7622  0012DC  0EE4               	movlw	228
  7623  0012DE                     u5657:
  7624  0012DE  2EE8               	decfsz	wreg,f,c
  7625  0012E0  D7FE               	bra	u5657
  7626  0012E2  2E1B               	decfsz	??_initLCD^0,f,c
  7627  0012E4  D7FC               	bra	u5657
  7628  0012E6  F000 F000          	nop2	
  7629                           
  7630                           ;hd44780.c: 27: lcdNibble(0b0010);
  7631  0012EA  0E02               	movlw	2
  7632  0012EC  EC4F  F00C         	call	_lcdNibble
  7633                           
  7634                           ;hd44780.c: 28: _delay((unsigned long)((5)*(64000000/4000.0)));
  7635  0012F0  0E68               	movlw	104
  7636  0012F2  6E1B               	movwf	??_initLCD^0,c
  7637  0012F4  0EE4               	movlw	228
  7638  0012F6                     u5667:
  7639  0012F6  2EE8               	decfsz	wreg,f,c
  7640  0012F8  D7FE               	bra	u5667
  7641  0012FA  2E1B               	decfsz	??_initLCD^0,f,c
  7642  0012FC  D7FC               	bra	u5667
  7643  0012FE  F000 F000          	nop2	
  7644                           
  7645                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  7646  001302  0E00               	movlw	0
  7647  001304  6E18               	movwf	lcdWrite@type^0,c
  7648  001306  0E28               	movlw	40
  7649  001308  ECB5  F00E         	call	_lcdWrite
  7650                           
  7651                           ;hd44780.c: 32: _delay((unsigned long)((5)*(64000000/4000.0)));
  7652  00130C  0E68               	movlw	104
  7653  00130E  6E1B               	movwf	??_initLCD^0,c
  7654  001310  0EE4               	movlw	228
  7655  001312                     u5677:
  7656  001312  2EE8               	decfsz	wreg,f,c
  7657  001314  D7FE               	bra	u5677
  7658  001316  2E1B               	decfsz	??_initLCD^0,f,c
  7659  001318  D7FC               	bra	u5677
  7660  00131A  F000 F000          	nop2	
  7661                           
  7662                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  7663  00131E  0E00               	movlw	0
  7664  001320  6E18               	movwf	lcdWrite@type^0,c
  7665  001322  0E0C               	movlw	12
  7666  001324  ECB5  F00E         	call	_lcdWrite
  7667                           
  7668                           ;hd44780.c: 34: _delay((unsigned long)((8)*(64000000/4000.0)));
  7669  001328  0EA7               	movlw	167
  7670  00132A  6E1B               	movwf	??_initLCD^0,c
  7671  00132C  0E3A               	movlw	58
  7672  00132E                     u5687:
  7673  00132E  2EE8               	decfsz	wreg,f,c
  7674  001330  D7FE               	bra	u5687
  7675  001332  2E1B               	decfsz	??_initLCD^0,f,c
  7676  001334  D7FC               	bra	u5687
  7677  001336  F000 F000          	nop2	
  7678                           
  7679                           ;hd44780.c: 35: clearLCD();
  7680  00133A  EC52  F00F         	call	_clearLCD	;wreg free
  7681                           
  7682                           ;hd44780.c: 36: _delay((unsigned long)((5)*(64000000/4000.0)));
  7683  00133E  0E68               	movlw	104
  7684  001340  6E1B               	movwf	??_initLCD^0,c
  7685  001342  0EE4               	movlw	228
  7686  001344                     u5697:
  7687  001344  2EE8               	decfsz	wreg,f,c
  7688  001346  D7FE               	bra	u5697
  7689  001348  2E1B               	decfsz	??_initLCD^0,f,c
  7690  00134A  D7FC               	bra	u5697
  7691  00134C  F000 F000          	nop2	
  7692                           
  7693                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  7694  001350  0E00               	movlw	0
  7695  001352  6E18               	movwf	lcdWrite@type^0,c
  7696  001354  0E06               	movlw	6
  7697  001356  ECB5  F00E         	call	_lcdWrite
  7698                           
  7699                           ;hd44780.c: 38: _delay((unsigned long)((5)*(64000000/4000.0)));
  7700  00135A  0E68               	movlw	104
  7701  00135C  6E1B               	movwf	??_initLCD^0,c
  7702  00135E  0EE4               	movlw	228
  7703  001360                     u5707:
  7704  001360  2EE8               	decfsz	wreg,f,c
  7705  001362  D7FE               	bra	u5707
  7706  001364  2E1B               	decfsz	??_initLCD^0,f,c
  7707  001366  D7FC               	bra	u5707
  7708  001368  F000 F000          	nop2	
  7709                           
  7710                           ;hd44780.c: 39: clearLCD();
  7711  00136C  EC52  F00F         	call	_clearLCD	;wreg free
  7712                           
  7713                           ;hd44780.c: 41: LATAbits.LA7 = 1;
  7714  001370  8E89               	bsf	137,7,c	;volatile
  7715  001372  0012               	return		;funcret
  7716  001374                     __end_of_initLCD:
  7717                           	callstack 0
  7718                           
  7719 ;; *************** function _clearLCD *****************
  7720 ;; Defined at:
  7721 ;;		line 45 in file "hd44780.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7735 ;;      Params:         0       0       0       0       0       0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0
  7737 ;;      Temps:          1       0       0       0       0       0       0
  7738 ;;      Totals:         1       0       0       0       0       0       0
  7739 ;;Total ram usage:        1 bytes
  7740 ;; Hardware stack levels used: 1
  7741 ;; Hardware stack levels required when called: 5
  7742 ;; This function calls:
  7743 ;;		_lcdWrite
  7744 ;; This function is called by:
  7745 ;;		_initLCD
  7746 ;;		_main
  7747 ;;		_lcd_preload
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text29
  7752  001EA4                     __ptext29:
  7753                           	callstack 0
  7754  001EA4                     _clearLCD:
  7755                           	callstack 0
  7756                           
  7757                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  7758                           
  7759                           ;incstack = 0
  7760  001EA4  ECB3  F00B         	call	PL92	;call to abstracted procedure
  7761  001EA8  ECB5  F00E         	call	_lcdWrite
  7762                           
  7763                           ;hd44780.c: 47: _delay((unsigned long)((2)*(64000000/4000.0)));
  7764  001EAC  0E2A               	movlw	42
  7765  001EAE  6E1A               	movwf	??_clearLCD^0,c
  7766  001EB0  0E8E               	movlw	142
  7767  001EB2                     u5717:
  7768  001EB2  2EE8               	decfsz	wreg,f,c
  7769  001EB4  D7FE               	bra	u5717
  7770  001EB6  2E1A               	decfsz	??_clearLCD^0,f,c
  7771  001EB8  D7FC               	bra	u5717
  7772  001EBA  0012               	return		;funcret
  7773  001EBC                     __end_of_clearLCD:
  7774                           	callstack 0
  7775                           
  7776 ;; *************** function _cgrom_char *****************
  7777 ;; Defined at:
  7778 ;;		line 149 in file "hd44780.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  symbol          2   25[COMRAM] PTR unsigned char 
  7781 ;;		 -> symbol_7(8), symbol_6(8), symbol_5(8), symbol_4(8), 
  7782 ;;		 -> symbol_3(8), symbol_2(8), symbol_1(8), 
  7783 ;;  address         1   27[COMRAM] unsigned char 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  i               1   28[COMRAM] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7795 ;;      Params:         3       0       0       0       0       0       0
  7796 ;;      Locals:         1       0       0       0       0       0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0
  7798 ;;      Totals:         4       0       0       0       0       0       0
  7799 ;;Total ram usage:        4 bytes
  7800 ;; Hardware stack levels used: 1
  7801 ;; Hardware stack levels required when called: 5
  7802 ;; This function calls:
  7803 ;;		_lcdWrite
  7804 ;; This function is called by:
  7805 ;;		_init_cpu
  7806 ;;		_lcd_preload
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text30
  7811  001D38                     __ptext30:
  7812                           	callstack 0
  7813  001D38                     _cgrom_char:
  7814                           	callstack 24
  7815                           
  7816                           ;hd44780.c: 150: uint8_t i;;hd44780.c: 151: lcdWrite(0x40 | (address * 8), COMMAND);
  7817                           
  7818                           ;incstack = 0
  7819  001D38  6A18               	clrf	lcdWrite@type^0,c
  7820  001D3A  501C               	movf	cgrom_char@address^0,w,c
  7821  001D3C  0D08               	mullw	8
  7822  001D3E  50F3               	movf	243,w,c
  7823  001D40  0940               	iorlw	64
  7824  001D42  ECB5  F00E         	call	_lcdWrite
  7825                           
  7826                           ;hd44780.c: 152: for (i = 0; i < 8; i++)
  7827  001D46  6A1D               	clrf	cgrom_char@i^0,c
  7828  001D48                     l5038:
  7829                           
  7830                           ;hd44780.c: 153: lcdWrite(*symbol++, DATA);
  7831  001D48  0E01               	movlw	1
  7832  001D4A  6E18               	movwf	lcdWrite@type^0,c
  7833  001D4C  C01A  FFF6         	movff	cgrom_char@symbol,tblptrl
  7834  001D50  C01B  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  7835  001D54                     	if	0	;tblptru may be non-zero
  7836  001D54                     	endif
  7837  001D54                     	if	0	;tblptru may be non-zero
  7838  001D54                     	endif
  7839  001D54  0008               	tblrd		*
  7840  001D56  50F5               	movf	tablat,w,c
  7841  001D58  ECB5  F00E         	call	_lcdWrite
  7842  001D5C  4A1A               	infsnz	cgrom_char@symbol^0,f,c
  7843  001D5E  2A1B               	incf	(cgrom_char@symbol+1)^0,f,c
  7844  001D60  2A1D               	incf	cgrom_char@i^0,f,c
  7845  001D62  0E07               	movlw	7
  7846  001D64  641D               	cpfsgt	cgrom_char@i^0,c
  7847  001D66  D7F0               	goto	l5038
  7848  001D68  0C07               	retlw	7
  7849  001D6A                     __end_of_cgrom_char:
  7850                           	callstack 0
  7851                           
  7852 ;; *************** function _lcdWrite *****************
  7853 ;; Defined at:
  7854 ;;		line 50 in file "hd44780.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  byte            1    wreg     unsigned char 
  7857 ;;  type            1   23[COMRAM] enum E2616
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  byte            1   24[COMRAM] unsigned char 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      void 
  7862 ;; Registers used:
  7863 ;;		wreg, status,2, status,0, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7869 ;;      Params:         1       0       0       0       0       0       0
  7870 ;;      Locals:         1       0       0       0       0       0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0
  7872 ;;      Totals:         2       0       0       0       0       0       0
  7873 ;;Total ram usage:        2 bytes
  7874 ;; Hardware stack levels used: 1
  7875 ;; Hardware stack levels required when called: 4
  7876 ;; This function calls:
  7877 ;;		_lcdNibble
  7878 ;; This function is called by:
  7879 ;;		_initLCD
  7880 ;;		_clearLCD
  7881 ;;		_lcd_gotoxy
  7882 ;;		_lcd_putc
  7883 ;;		_lcdPrint
  7884 ;;		_cgrom_char
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text31
  7889  001D6A                     __ptext31:
  7890                           	callstack 0
  7891  001D6A                     _lcdWrite:
  7892                           	callstack 24
  7893                           
  7894                           ;incstack = 0
  7895                           ;lcdWrite@byte stored from wreg
  7896  001D6A  6E19               	movwf	lcdWrite@byte^0,c
  7897                           
  7898                           ;hd44780.c: 51: if (type == COMMAND)
  7899  001D6C  5018               	movf	lcdWrite@type^0,w,c
  7900  001D6E  E102               	bnz	l116
  7901                           
  7902                           ;hd44780.c: 52: LATAbits.LA7 = 0;
  7903  001D70  9E89               	bcf	137,7,c	;volatile
  7904  001D72  D001               	goto	l4862
  7905  001D74                     l116:
  7906                           
  7907                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LA7 = 1;
  7908  001D74  8E89               	bsf	137,7,c	;volatile
  7909  001D76                     l4862:
  7910                           
  7911                           ;hd44780.c: 56: _delay((unsigned long)((100)*(64000000/4000000.0)));
  7912  001D76  0EE4               	movlw	228
  7913  001D78                     u5727:
  7914  001D78  F000 F000          	nop2	
  7915  001D7C  F000 F000          	nop2	
  7916  001D80  2EE8               	decfsz	wreg,f,c
  7917  001D82  D7FA               	bra	u5727
  7918  001D84  F000 F000          	nop2	
  7919  001D88  F000 F000          	nop2	
  7920                           
  7921                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  7922  001D8C  3819               	swapf	lcdWrite@byte^0,w,c
  7923  001D8E  0B0F               	andlw	15
  7924  001D90  EC4F  F00C         	call	_lcdNibble
  7925                           
  7926                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  7927  001D94  5019               	movf	lcdWrite@byte^0,w,c
  7928  001D96  0B0F               	andlw	15
  7929  001D98  EF4F  F00C         	goto	_lcdNibble
  7930  001D9C                     __end_of_lcdWrite:
  7931                           	callstack 0
  7932                           
  7933 ;; *************** function _lcdNibble *****************
  7934 ;; Defined at:
  7935 ;;		line 63 in file "hd44780.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;  nibble          1    wreg     unsigned char 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  nibble          1   22[COMRAM] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      void 
  7942 ;; Registers used:
  7943 ;;		wreg, status,2, status,0
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7949 ;;      Params:         0       0       0       0       0       0       0
  7950 ;;      Locals:         1       0       0       0       0       0       0
  7951 ;;      Temps:          1       0       0       0       0       0       0
  7952 ;;      Totals:         2       0       0       0       0       0       0
  7953 ;;Total ram usage:        2 bytes
  7954 ;; Hardware stack levels used: 1
  7955 ;; Hardware stack levels required when called: 3
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		_initLCD
  7960 ;;		_lcdWrite
  7961 ;; This function uses a non-reentrant model
  7962 ;;
  7963                           
  7964                           	psect	text32
  7965  00189E                     __ptext32:
  7966                           	callstack 0
  7967  00189E                     _lcdNibble:
  7968                           	callstack 24
  7969                           
  7970                           ;incstack = 0
  7971                           ;lcdNibble@nibble stored from wreg
  7972  00189E  6E17               	movwf	lcdNibble@nibble^0,c
  7973                           
  7974                           ;hd44780.c: 64: LATCbits.LC0 = (nibble & 0x01) ? 1 : 0;
  7975  0018A0  A017               	btfss	lcdNibble@nibble^0,0,c
  7976  0018A2  D003               	goto	u4070
  7977  0018A4  6A16               	clrf	??_lcdNibble^0,c
  7978  0018A6  2A16               	incf	??_lcdNibble^0,f,c
  7979  0018A8  D001               	goto	u4088
  7980  0018AA                     u4070:
  7981  0018AA  6A16               	clrf	??_lcdNibble^0,c
  7982  0018AC                     u4088:
  7983  0018AC  508B               	movf	139,w,c	;volatile
  7984  0018AE  1816               	xorwf	??_lcdNibble^0,w,c
  7985  0018B0  0BFE               	andlw	-2
  7986  0018B2  1816               	xorwf	??_lcdNibble^0,w,c
  7987  0018B4  6E8B               	movwf	139,c	;volatile
  7988                           
  7989                           ;hd44780.c: 65: LATCbits.LC1 = (nibble & 0x02) ? 1 : 0;
  7990  0018B6  A217               	btfss	lcdNibble@nibble^0,1,c
  7991  0018B8  D003               	goto	u4090
  7992  0018BA  6A16               	clrf	??_lcdNibble^0,c
  7993  0018BC  2A16               	incf	??_lcdNibble^0,f,c
  7994  0018BE  D001               	goto	u4108
  7995  0018C0                     u4090:
  7996  0018C0  6A16               	clrf	??_lcdNibble^0,c
  7997  0018C2                     u4108:
  7998  0018C2  4616               	rlncf	??_lcdNibble^0,f,c
  7999  0018C4  508B               	movf	139,w,c	;volatile
  8000  0018C6  1816               	xorwf	??_lcdNibble^0,w,c
  8001  0018C8  0BFD               	andlw	-3
  8002  0018CA  1816               	xorwf	??_lcdNibble^0,w,c
  8003  0018CC  6E8B               	movwf	139,c	;volatile
  8004                           
  8005                           ;hd44780.c: 66: LATCbits.LC2 = (nibble & 0x04) ? 1 : 0;
  8006  0018CE  A417               	btfss	lcdNibble@nibble^0,2,c
  8007  0018D0  D003               	goto	u4110
  8008  0018D2  6A16               	clrf	??_lcdNibble^0,c
  8009  0018D4  2A16               	incf	??_lcdNibble^0,f,c
  8010  0018D6  D001               	goto	u4128
  8011  0018D8                     u4110:
  8012  0018D8  6A16               	clrf	??_lcdNibble^0,c
  8013  0018DA                     u4128:
  8014  0018DA  D827               	call	PL90	;call to abstracted procedure
  8015  0018DC  0BFB               	andlw	-5
  8016  0018DE  1816               	xorwf	??_lcdNibble^0,w,c
  8017  0018E0  6E8B               	movwf	139,c	;volatile
  8018                           
  8019                           ;hd44780.c: 67: LATCbits.LC3 = (nibble & 0x08) ? 1 : 0;
  8020  0018E2  A617               	btfss	lcdNibble@nibble^0,3,c
  8021  0018E4  D003               	goto	u4130
  8022  0018E6  6A16               	clrf	??_lcdNibble^0,c
  8023  0018E8  2A16               	incf	??_lcdNibble^0,f,c
  8024  0018EA  D001               	goto	u4148
  8025  0018EC                     u4130:
  8026  0018EC  6A16               	clrf	??_lcdNibble^0,c
  8027  0018EE                     u4148:
  8028  0018EE  4616               	rlncf	??_lcdNibble^0,f,c
  8029  0018F0  D81C               	call	PL90	;call to abstracted procedure
  8030  0018F2  0BF7               	andlw	-9
  8031  0018F4  1816               	xorwf	??_lcdNibble^0,w,c
  8032  0018F6  6E8B               	movwf	139,c	;volatile
  8033                           
  8034                           ;hd44780.c: 70: LATAbits.LA6 = 1;
  8035  0018F8  8C89               	bsf	137,6,c	;volatile
  8036                           
  8037                           ;hd44780.c: 71: _delay((unsigned long)((100)*(64000000/4000000.0)));
  8038  0018FA  0EE4               	movlw	228
  8039  0018FC                     u5737:
  8040  0018FC  F000 F000          	nop2	
  8041  001900  F000 F000          	nop2	
  8042  001904  2EE8               	decfsz	wreg,f,c
  8043  001906  D7FA               	bra	u5737
  8044  001908  F000 F000          	nop2	
  8045  00190C  F000 F000          	nop2	
  8046                           
  8047                           ;hd44780.c: 72: LATAbits.LA6 = 0;
  8048  001910  9C89               	bcf	137,6,c	;volatile
  8049                           
  8050                           ;hd44780.c: 73: _delay((unsigned long)((100)*(64000000/4000000.0)));
  8051  001912  0EE4               	movlw	228
  8052  001914                     u5747:
  8053  001914  F000 F000          	nop2	
  8054  001918  F000 F000          	nop2	
  8055  00191C  2EE8               	decfsz	wreg,f,c
  8056  00191E  D7FA               	bra	u5747
  8057  001920  F000 F000          	nop2	
  8058  001924  F000 F000          	nop2	
  8059  001928  0012               	return		;funcret
  8060  00192A                     __end_of_lcdNibble:
  8061                           	callstack 0
  8062  00192A                     PL90:
  8063                           	callstack 24
  8064  00192A  4616               	rlncf	??_lcdNibble^0,f,c
  8065  00192C  4616               	rlncf	??_lcdNibble^0,f,c
  8066  00192E  508B               	movf	139,w,c	;volatile
  8067  001930  1816               	xorwf	??_lcdNibble^0,w,c
  8068  001932  0012               	return	
  8069  001934                     __end_ofPL90:
  8070                           	callstack 0
  8071                           
  8072 ;; *************** function ___xxtofl *****************
  8073 ;; Defined at:
  8074 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\xxtofl.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  sign            1    wreg     unsigned char 
  8077 ;;  val             4   21[COMRAM] long 
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;  sign            1   29[COMRAM] unsigned char 
  8080 ;;  arg             4   31[COMRAM] unsigned long 
  8081 ;;  exp             1   30[COMRAM] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  4   21[COMRAM] unsigned char 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8091 ;;      Params:         4       0       0       0       0       0       0
  8092 ;;      Locals:         6       0       0       0       0       0       0
  8093 ;;      Temps:          4       0       0       0       0       0       0
  8094 ;;      Totals:        14       0       0       0       0       0       0
  8095 ;;Total ram usage:       14 bytes
  8096 ;; Hardware stack levels used: 1
  8097 ;; Hardware stack levels required when called: 3
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_main
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text33
  8106  001374                     __ptext33:
  8107                           	callstack 0
  8108  001374                     ___xxtofl:
  8109                           	callstack 27
  8110                           
  8111                           ;incstack = 0
  8112                           ;___xxtofl@sign stored from wreg
  8113  001374  6E1E               	movwf	___xxtofl@sign^0,c
  8114  001376  501E               	movf	___xxtofl@sign^0,w,c
  8115  001378  E01C               	bz	l1507
  8116  00137A  AE19               	btfss	(___xxtofl@val+3)^0,7,c
  8117  00137C  D01A               	goto	l1507
  8118  00137E  C016  F01A         	movff	___xxtofl@val,??___xxtofl
  8119  001382  C017  F01B         	movff	___xxtofl@val+1,??___xxtofl+1
  8120  001386  C018  F01C         	movff	___xxtofl@val+2,??___xxtofl+2
  8121  00138A  C019  F01D         	movff	___xxtofl@val+3,??___xxtofl+3
  8122  00138E  1E1A               	comf	??___xxtofl^0,f,c
  8123  001390  1E1B               	comf	(??___xxtofl+1)^0,f,c
  8124  001392  1E1C               	comf	(??___xxtofl+2)^0,f,c
  8125  001394  1E1D               	comf	(??___xxtofl+3)^0,f,c
  8126  001396  2A1A               	incf	??___xxtofl^0,f,c
  8127  001398  0E00               	movlw	0
  8128  00139A  221B               	addwfc	(??___xxtofl+1)^0,f,c
  8129  00139C  221C               	addwfc	(??___xxtofl+2)^0,f,c
  8130  00139E  221D               	addwfc	(??___xxtofl+3)^0,f,c
  8131  0013A0  C01A  F020         	movff	??___xxtofl,___xxtofl@arg
  8132  0013A4  C01B  F021         	movff	??___xxtofl+1,___xxtofl@arg+1
  8133  0013A8  C01C  F022         	movff	??___xxtofl+2,___xxtofl@arg+2
  8134  0013AC  C01D  F023         	movff	??___xxtofl+3,___xxtofl@arg+3
  8135  0013B0  D008               	goto	l4178
  8136  0013B2                     l1507:
  8137  0013B2  C016  F020         	movff	___xxtofl@val,___xxtofl@arg
  8138  0013B6  C017  F021         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8139  0013BA  C018  F022         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8140  0013BE  C019  F023         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8141  0013C2                     l4178:
  8142  0013C2  5016               	movf	___xxtofl@val^0,w,c
  8143  0013C4  1017               	iorwf	(___xxtofl@val+1)^0,w,c
  8144  0013C6  1018               	iorwf	(___xxtofl@val+2)^0,w,c
  8145  0013C8  1019               	iorwf	(___xxtofl@val+3)^0,w,c
  8146  0013CA  E105               	bnz	l4182
  8147  0013CC  6A16               	clrf	?___xxtofl^0,c
  8148  0013CE  6A17               	clrf	(?___xxtofl+1)^0,c
  8149  0013D0  6A18               	clrf	(?___xxtofl+2)^0,c
  8150  0013D2  6A19               	clrf	(?___xxtofl+3)^0,c
  8151  0013D4  0012               	return	
  8152  0013D6                     l4182:
  8153  0013D6  0E96               	movlw	150
  8154  0013D8  6E1F               	movwf	___xxtofl@exp^0,c
  8155  0013DA  D002               	goto	l4186
  8156  0013DC                     l4184:
  8157  0013DC  2A1F               	incf	___xxtofl@exp^0,f,c
  8158  0013DE  D84A               	call	PL70	;call to abstracted procedure
  8159  0013E0                     l4186:
  8160  0013E0  6A1A               	clrf	??___xxtofl^0,c
  8161  0013E2  6A1B               	clrf	(??___xxtofl+1)^0,c
  8162  0013E4  6A1C               	clrf	(??___xxtofl+2)^0,c
  8163  0013E6  0EFE               	movlw	254
  8164  0013E8  1423               	andwf	(___xxtofl@arg+3)^0,w,c
  8165  0013EA  D83E               	call	PL66	;call to abstracted procedure
  8166  0013EC  E008               	bz	l1514
  8167  0013EE  D7F6               	goto	l4184
  8168  0013F0                     l4188:
  8169  0013F0  2A1F               	incf	___xxtofl@exp^0,f,c
  8170  0013F2  2A20               	incf	___xxtofl@arg^0,f,c
  8171  0013F4  0E00               	movlw	0
  8172  0013F6  2221               	addwfc	(___xxtofl@arg+1)^0,f,c
  8173  0013F8  2222               	addwfc	(___xxtofl@arg+2)^0,f,c
  8174  0013FA  2223               	addwfc	(___xxtofl@arg+3)^0,f,c
  8175  0013FC  D83B               	call	PL70	;call to abstracted procedure
  8176  0013FE                     l1514:
  8177  0013FE  6A1A               	clrf	??___xxtofl^0,c
  8178  001400  6A1B               	clrf	(??___xxtofl+1)^0,c
  8179  001402  6A1C               	clrf	(??___xxtofl+2)^0,c
  8180  001404  5023               	movf	(___xxtofl@arg+3)^0,w,c
  8181  001406  D830               	call	PL66	;call to abstracted procedure
  8182  001408  E007               	bz	l4196
  8183  00140A  D7F2               	goto	l4188
  8184  00140C                     l4194:
  8185  00140C  061F               	decf	___xxtofl@exp^0,f,c
  8186  00140E  90D8               	bcf	status,0,c
  8187  001410  3620               	rlcf	___xxtofl@arg^0,f,c
  8188  001412  3621               	rlcf	(___xxtofl@arg+1)^0,f,c
  8189  001414  3622               	rlcf	(___xxtofl@arg+2)^0,f,c
  8190  001416  3623               	rlcf	(___xxtofl@arg+3)^0,f,c
  8191  001418                     l4196:
  8192  001418  BE22               	btfsc	(___xxtofl@arg+2)^0,7,c
  8193  00141A  D003               	goto	u3180
  8194  00141C  0E02               	movlw	2
  8195  00141E  601F               	cpfslt	___xxtofl@exp^0,c
  8196  001420  D7F5               	goto	l4194
  8197  001422                     u3180:
  8198  001422  A01F               	btfss	___xxtofl@exp^0,0,c
  8199  001424  9E22               	bcf	(___xxtofl@arg+2)^0,7,c
  8200  001426  90D8               	bcf	status,0,c
  8201  001428  321F               	rrcf	___xxtofl@exp^0,f,c
  8202  00142A  C01F  F01A         	movff	___xxtofl@exp,??___xxtofl
  8203  00142E  6A1B               	clrf	(??___xxtofl+1)^0,c
  8204  001430  6A1C               	clrf	(??___xxtofl+2)^0,c
  8205  001432  6A1D               	clrf	(??___xxtofl+3)^0,c
  8206  001434  C01A  F01D         	movff	??___xxtofl,??___xxtofl+3
  8207  001438  6A1C               	clrf	(??___xxtofl+2)^0,c
  8208  00143A  6A1B               	clrf	(??___xxtofl+1)^0,c
  8209  00143C  6A1A               	clrf	??___xxtofl^0,c
  8210  00143E  501A               	movf	??___xxtofl^0,w,c
  8211  001440  1220               	iorwf	___xxtofl@arg^0,f,c
  8212  001442  501B               	movf	(??___xxtofl+1)^0,w,c
  8213  001444  1221               	iorwf	(___xxtofl@arg+1)^0,f,c
  8214  001446  501C               	movf	(??___xxtofl+2)^0,w,c
  8215  001448  1222               	iorwf	(___xxtofl@arg+2)^0,f,c
  8216  00144A  501D               	movf	(??___xxtofl+3)^0,w,c
  8217  00144C  1223               	iorwf	(___xxtofl@arg+3)^0,f,c
  8218  00144E  501E               	movf	___xxtofl@sign^0,w,c
  8219  001450  E002               	bz	l4212
  8220  001452  BE19               	btfsc	(___xxtofl@val+3)^0,7,c
  8221  001454  8E23               	bsf	(___xxtofl@arg+3)^0,7,c
  8222  001456                     l4212:
  8223  001456  C020  F016         	movff	___xxtofl@arg,?___xxtofl
  8224  00145A  C021  F017         	movff	___xxtofl@arg+1,?___xxtofl+1
  8225  00145E  C022  F018         	movff	___xxtofl@arg+2,?___xxtofl+2
  8226  001462  C023  F019         	movff	___xxtofl@arg+3,?___xxtofl+3
  8227  001466  0012               	return		;funcret
  8228  001468                     __end_of___xxtofl:
  8229                           	callstack 0
  8230  001468                     PL66:
  8231                           	callstack 27
  8232  001468  6E1D               	movwf	(??___xxtofl+3)^0,c
  8233  00146A  501A               	movf	??___xxtofl^0,w,c
  8234  00146C  101B               	iorwf	(??___xxtofl+1)^0,w,c
  8235  00146E  101C               	iorwf	(??___xxtofl+2)^0,w,c
  8236  001470  101D               	iorwf	(??___xxtofl+3)^0,w,c
  8237  001472  0012               	return	
  8238  001474                     __end_ofPL66:
  8239                           	callstack 0
  8240  001474                     PL70:
  8241                           	callstack 27
  8242  001474  90D8               	bcf	status,0,c
  8243  001476  3223               	rrcf	(___xxtofl@arg+3)^0,f,c
  8244  001478  3222               	rrcf	(___xxtofl@arg+2)^0,f,c
  8245  00147A  3221               	rrcf	(___xxtofl@arg+1)^0,f,c
  8246  00147C  3220               	rrcf	___xxtofl@arg^0,f,c
  8247  00147E  0012               	return	
  8248  001480                     __end_ofPL70:
  8249                           	callstack 0
  8250                           
  8251 ;; *************** function ___fltol *****************
  8252 ;; Defined at:
  8253 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fltol.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  f1              4   43[COMRAM] unsigned char 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  exp1            1   26[BANK0 ] unsigned char 
  8258 ;;  sign1           1   25[BANK0 ] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  4   43[COMRAM] long 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 3F/0
  8265 ;;		On exit  : 3F/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8268 ;;      Params:         4       0       0       0       0       0       0
  8269 ;;      Locals:         0       2       0       0       0       0       0
  8270 ;;      Temps:          0       4       0       0       0       0       0
  8271 ;;      Totals:         4       6       0       0       0       0       0
  8272 ;;Total ram usage:       10 bytes
  8273 ;; Hardware stack levels used: 1
  8274 ;; Hardware stack levels required when called: 3
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_main
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           	psect	text34
  8283  00176C                     __ptext34:
  8284                           	callstack 0
  8285  00176C                     ___fltol:
  8286                           	callstack 27
  8287                           
  8288                           ; BSR set to: 0
  8289                           
  8290                           ;incstack = 0
  8291  00176C  342E               	rlcf	(___fltol@f1+2)^0,w,c
  8292  00176E  342F               	rlcf	(___fltol@f1+3)^0,w,c
  8293  001770  6FC7               	movwf	___fltol@exp1& (0+255),b
  8294  001772  51C7               	movf	___fltol@exp1& (0+255),w,b
  8295  001774  E105               	bnz	l5522
  8296  001776                     u4780:
  8297                           
  8298                           ; BSR set to: 0
  8299  001776  6A2C               	clrf	?___fltol^0,c
  8300  001778  6A2D               	clrf	(?___fltol+1)^0,c
  8301  00177A  6A2E               	clrf	(?___fltol+2)^0,c
  8302  00177C  6A2F               	clrf	(?___fltol+3)^0,c
  8303  00177E  0012               	return	
  8304  001780                     l5522:
  8305                           
  8306                           ; BSR set to: 0
  8307  001780  C02C  F0C2         	movff	___fltol@f1,??___fltol
  8308  001784  C02D  F0C3         	movff	___fltol@f1+1,??___fltol+1
  8309  001788  C02E  F0C4         	movff	___fltol@f1+2,??___fltol+2
  8310  00178C  C02F  F0C5         	movff	___fltol@f1+3,??___fltol+3
  8311  001790  0E20               	movlw	32
  8312  001792  D005               	goto	u4790
  8313  001794                     u4795:
  8314  001794  90D8               	bcf	status,0,c
  8315  001796  33C5               	rrcf	(??___fltol+3)& (0+255),f,b
  8316  001798  33C4               	rrcf	(??___fltol+2)& (0+255),f,b
  8317  00179A  33C3               	rrcf	(??___fltol+1)& (0+255),f,b
  8318  00179C  33C2               	rrcf	??___fltol& (0+255),f,b
  8319  00179E                     u4790:
  8320  00179E  2EE8               	decfsz	wreg,f,c
  8321  0017A0  D7F9               	goto	u4795
  8322  0017A2  51C2               	movf	??___fltol& (0+255),w,b
  8323  0017A4  6FC6               	movwf	___fltol@sign1& (0+255),b
  8324                           
  8325                           ; BSR set to: 0
  8326  0017A6  8E2E               	bsf	(___fltol@f1+2)^0,7,c
  8327                           
  8328                           ; BSR set to: 0
  8329  0017A8  6A2F               	clrf	(___fltol@f1+3)^0,c
  8330                           
  8331                           ; BSR set to: 0
  8332  0017AA  0E96               	movlw	150
  8333  0017AC  5FC7               	subwf	___fltol@exp1& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 0
  8336  0017AE  AFC7               	btfss	___fltol@exp1& (0+255),7,b
  8337  0017B0  D00C               	goto	l5540
  8338                           
  8339                           ; BSR set to: 0
  8340  0017B2  51C7               	movf	___fltol@exp1& (0+255),w,b
  8341  0017B4  0A80               	xorlw	128
  8342  0017B6  0F97               	addlw	151
  8343  0017B8  E3DE               	bnc	u4780
  8344  0017BA                     l5536:
  8345                           
  8346                           ; BSR set to: 0
  8347  0017BA  90D8               	bcf	status,0,c
  8348  0017BC  322F               	rrcf	(___fltol@f1+3)^0,f,c
  8349  0017BE  322E               	rrcf	(___fltol@f1+2)^0,f,c
  8350  0017C0  322D               	rrcf	(___fltol@f1+1)^0,f,c
  8351  0017C2  322C               	rrcf	___fltol@f1^0,f,c
  8352                           
  8353                           ; BSR set to: 0
  8354  0017C4  3FC7               	incfsz	___fltol@exp1& (0+255),f,b
  8355  0017C6  D7F9               	goto	l5536
  8356  0017C8  D00C               	goto	u4830
  8357  0017CA                     l5540:
  8358                           
  8359                           ; BSR set to: 0
  8360  0017CA  0E1F               	movlw	31
  8361  0017CC  65C7               	cpfsgt	___fltol@exp1& (0+255),b
  8362  0017CE  D007               	goto	l5546
  8363  0017D0  D7D2               	goto	u4780
  8364  0017D2                     l5544:
  8365                           
  8366                           ; BSR set to: 0
  8367  0017D2  90D8               	bcf	status,0,c
  8368  0017D4  362C               	rlcf	___fltol@f1^0,f,c
  8369  0017D6  362D               	rlcf	(___fltol@f1+1)^0,f,c
  8370  0017D8  362E               	rlcf	(___fltol@f1+2)^0,f,c
  8371  0017DA  362F               	rlcf	(___fltol@f1+3)^0,f,c
  8372  0017DC  07C7               	decf	___fltol@exp1& (0+255),f,b
  8373  0017DE                     l5546:
  8374                           
  8375                           ; BSR set to: 0
  8376  0017DE  51C7               	movf	___fltol@exp1& (0+255),w,b
  8377  0017E0  E1F8               	bnz	l5544
  8378  0017E2                     u4830:
  8379                           
  8380                           ; BSR set to: 0
  8381  0017E2  51C6               	movf	___fltol@sign1& (0+255),w,b
  8382  0017E4  E008               	bz	l5552
  8383                           
  8384                           ; BSR set to: 0
  8385  0017E6  1E2F               	comf	(___fltol@f1+3)^0,f,c
  8386  0017E8  1E2E               	comf	(___fltol@f1+2)^0,f,c
  8387  0017EA  1E2D               	comf	(___fltol@f1+1)^0,f,c
  8388  0017EC  6C2C               	negf	___fltol@f1^0,c
  8389  0017EE  0E00               	movlw	0
  8390  0017F0  222D               	addwfc	(___fltol@f1+1)^0,f,c
  8391  0017F2  222E               	addwfc	(___fltol@f1+2)^0,f,c
  8392  0017F4  222F               	addwfc	(___fltol@f1+3)^0,f,c
  8393  0017F6                     l5552:
  8394                           
  8395                           ; BSR set to: 0
  8396  0017F6  C02C  F02C         	movff	___fltol@f1,?___fltol
  8397  0017FA  C02D  F02D         	movff	___fltol@f1+1,?___fltol+1
  8398  0017FE  C02E  F02E         	movff	___fltol@f1+2,?___fltol+2
  8399  001802  C02F  F02F         	movff	___fltol@f1+3,?___fltol+3
  8400                           
  8401                           ; BSR set to: 0
  8402  001806  0012               	return		;funcret
  8403  001808                     __end_of___fltol:
  8404                           	callstack 0
  8405                           
  8406 ;; *************** function _EncPoll *****************
  8407 ;; Defined at:
  8408 ;;		line 646 in file "main.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;		None
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      char 
  8415 ;; Registers used:
  8416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8417 ;; Tracked objects:
  8418 ;;		On entry : 3F/0
  8419 ;;		On exit  : 3F/0
  8420 ;;		Unchanged: 3F/0
  8421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8422 ;;      Params:         0       0       0       0       0       0       0
  8423 ;;      Locals:         0       0       0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0
  8425 ;;      Totals:         0       0       0       0       0       0       0
  8426 ;;Total ram usage:        0 bytes
  8427 ;; Hardware stack levels used: 1
  8428 ;; Hardware stack levels required when called: 3
  8429 ;; This function calls:
  8430 ;;		Nothing
  8431 ;; This function is called by:
  8432 ;;		_main
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text35
  8437  001D9C                     __ptext35:
  8438                           	callstack 0
  8439  001D9C                     _EncPoll:
  8440                           	callstack 27
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 647: static int8_t EncVal = 0;;main.c: 648: static uint8_t Enc = 0;;main.c: 650
      +                          : Enc <<= 2;
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;incstack = 0
  8447  001D9C  90D8               	bcf	status,0,c
  8448  001D9E  363B               	rlcf	EncPoll@Enc^0,f,c
  8449  001DA0  90D8               	bcf	status,0,c
  8450  001DA2  363B               	rlcf	EncPoll@Enc^0,f,c
  8451                           
  8452                           ;main.c: 651: Enc &= 0b00001111;
  8453  001DA4  0E0F               	movlw	15
  8454  001DA6  163B               	andwf	EncPoll@Enc^0,f,c
  8455                           
  8456                           ;main.c: 652: Enc += ((PORTB & ((1 << 4) | (1 << 5))) >> 4);
  8457  001DA8  3881               	swapf	129,w,c	;volatile
  8458  001DAA  0B0F               	andlw	15
  8459  001DAC  0B03               	andlw	3
  8460  001DAE  263B               	addwf	EncPoll@Enc^0,f,c
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;main.c: 653: EncVal = EncState_[Enc];
  8464  001DB0  0E07               	movlw	low _EncState_
  8465  001DB2  243B               	addwf	EncPoll@Enc^0,w,c
  8466  001DB4  6EF6               	movwf	tblptrl,c
  8467  001DB6  6AF7               	clrf	tblptrh,c
  8468  001DB8  0E7E               	movlw	high _EncState_
  8469  001DBA  22F7               	addwfc	tblptrh,f,c
  8470  001DBC                     	if	0	;There are less than 3 active tblptr bytes
  8471  001DBC                     	endif
  8472  001DBC  0008               	tblrd		*
  8473  001DBE  CFF5 F03C          	movff	tablat,EncPoll@EncVal
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;main.c: 655: if (EncVal == 0x7F) EncVal = 0;
  8477  001DC2  0E7F               	movlw	127
  8478  001DC4  183C               	xorwf	EncPoll@EncVal^0,w,c
  8479  001DC6  E101               	bnz	l3930
  8480                           
  8481                           ; BSR set to: 0
  8482  001DC8  6A3C               	clrf	EncPoll@EncVal^0,c
  8483  001DCA                     l3930:
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 657: return EncVal;
  8487  001DCA  503C               	movf	EncPoll@EncVal^0,w,c
  8488                           
  8489                           ; BSR set to: 0
  8490  001DCC  0012               	return		;funcret
  8491  001DCE                     __end_of_EncPoll:
  8492                           	callstack 0
  8493                           
  8494 ;; *************** function _Inter_lo *****************
  8495 ;; Defined at:
  8496 ;;		line 7 in file "interrupt.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  tmrtmp          2   19[COMRAM] unsigned int 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8510 ;;      Params:         0       0       0       0       0       0       0
  8511 ;;      Locals:         2       0       0       0       0       0       0
  8512 ;;      Temps:          5       0       0       0       0       0       0
  8513 ;;      Totals:         7       0       0       0       0       0       0
  8514 ;;Total ram usage:        7 bytes
  8515 ;; Hardware stack levels used: 1
  8516 ;; Hardware stack levels required when called: 2
  8517 ;; This function calls:
  8518 ;;		Nothing
  8519 ;; This function is called by:
  8520 ;;		Interrupt level 1
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           	psect	intcodelo
  8525  000018                     __pintcodelo:
  8526                           	callstack 0
  8527  000018                     _Inter_lo:
  8528                           	callstack 23
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;incstack = 0
  8532  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8533  00001A  CFD8 F011          	movff	status,??_Inter_lo+2
  8534  00001E  CFE8 F012          	movff	wreg,??_Inter_lo+3
  8535  000022  CFE0 F013          	movff	bsr,??_Inter_lo+4
  8536                           
  8537                           ;interrupt.c: 8: uint16_t tmrtmp;;interrupt.c: 10: if (TMR0IE && TMR0IF) {
  8538  000026  BAF2               	btfsc	4082,5,c	;volatile
  8539  000028  A4F2               	btfss	4082,2,c	;volatile
  8540  00002A  D006               	goto	i1l4234
  8541                           
  8542                           ;interrupt.c: 11: TMR0IF = 0;
  8543  00002C  94F2               	bcf	4082,2,c	;volatile
  8544                           
  8545                           ;interrupt.c: 12: tick_t1++;
  8546  00002E  0100               	movlb	0	; () banked
  8547  000030  2B8A               	incf	_tick_t1& (0+255),f,b
  8548                           
  8549                           ;interrupt.c: 13: tick_t1_1++;
  8550  000032  2A42               	incf	_tick_t1_1^0,f,c
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;interrupt.c: 14: read_key = 1;
  8554  000034  0E01               	movlw	1
  8555  000036  6F89               	movwf	_read_key& (0+255),b
  8556  000038                     i1l4234:
  8557                           
  8558                           ;interrupt.c: 15: };interrupt.c: 19: if (TMR1IE && TMR1IF) {
  8559  000038  B09D               	btfsc	3997,0,c	;volatile
  8560  00003A  A09E               	btfss	3998,0,c	;volatile
  8561  00003C  D015               	goto	i1l4252
  8562                           
  8563                           ;interrupt.c: 20: LATAbits.LA5 = 0;
  8564  00003E  9A89               	bcf	137,5,c	;volatile
  8565                           
  8566                           ;interrupt.c: 21: tmrtmp = ((uint16_t) CCPR1H << 8 | CCPR1L) + 1;
  8567  000040  50BE               	movf	190,w,c	;volatile
  8568  000042  CFBF F00F          	movff	4031,??_Inter_lo	;volatile
  8569  000046  6A10               	clrf	(??_Inter_lo+1)^0,c
  8570  000048  C00F  F010         	movff	??_Inter_lo,??_Inter_lo+1
  8571  00004C  6A0F               	clrf	??_Inter_lo^0,c
  8572  00004E  120F               	iorwf	??_Inter_lo^0,f,c
  8573  000050  280F               	incf	??_Inter_lo^0,w,c
  8574  000052  6E14               	movwf	Inter_lo@tmrtmp^0,c
  8575  000054  0E00               	movlw	0
  8576  000056  2010               	addwfc	(??_Inter_lo+1)^0,w,c
  8577  000058  6E15               	movwf	(Inter_lo@tmrtmp+1)^0,c
  8578                           
  8579                           ;interrupt.c: 22: TMR1ON = 0;
  8580  00005A  90CD               	bcf	4045,0,c	;volatile
  8581                           
  8582                           ;interrupt.c: 23: {TMR1L = (tmrtmp & 0xFF); TMR1H = (tmrtmp >> 8);};
  8583  00005C  C014  FFCE         	movff	Inter_lo@tmrtmp,4046	;volatile
  8584  000060  C015  FFCF         	movff	Inter_lo@tmrtmp+1,4047	;volatile
  8585                           
  8586                           ;interrupt.c: 24: TMR1ON = 1;
  8587  000064  80CD               	bsf	4045,0,c	;volatile
  8588                           
  8589                           ;interrupt.c: 29: TMR1IF = 0;
  8590  000066  909E               	bcf	3998,0,c	;volatile
  8591  000068                     i1l4252:
  8592                           
  8593                           ;interrupt.c: 30: };interrupt.c: 47: if (TMR2IE && TMR2IF) {
  8594  000068  B29D               	btfsc	3997,1,c	;volatile
  8595  00006A  A29E               	btfss	3998,1,c	;volatile
  8596  00006C  D029               	goto	i1l251
  8597                           
  8598                           ;interrupt.c: 48: TMR2IF = 0;
  8599  00006E  929E               	bcf	3998,1,c	;volatile
  8600                           
  8601                           ;interrupt.c: 49: if (++timer_val >= 782)
  8602  000070  4A45               	infsnz	_timer_val^0,f,c
  8603  000072  2A46               	incf	(_timer_val+1)^0,f,c
  8604  000074  0E0E               	movlw	14
  8605  000076  5C45               	subwf	_timer_val^0,w,c
  8606  000078  0E03               	movlw	3
  8607  00007A  5846               	subwfb	(_timer_val+1)^0,w,c
  8608  00007C  E306               	bnc	i1l245
  8609                           
  8610                           ;interrupt.c: 50: {;interrupt.c: 51: timer_val = 0;
  8611  00007E  6A45               	clrf	_timer_val^0,c
  8612  000080  6A46               	clrf	(_timer_val+1)^0,c
  8613                           
  8614                           ;interrupt.c: 52: time_flag = 1;
  8615  000082  0E01               	movlw	1
  8616  000084  0100               	movlb	0	; () banked
  8617  000086  6FAC               	movwf	_time_flag& (0+255),b
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;interrupt.c: 53: TMR2ON = 0;
  8621  000088  94CA               	bcf	4042,2,c	;volatile
  8622  00008A                     i1l245:
  8623                           
  8624                           ;interrupt.c: 54: };interrupt.c: 55: if (sound_enable) {
  8625  00008A  5041               	movf	_sound_enable^0,w,c
  8626  00008C  E019               	bz	i1l251
  8627                           
  8628                           ;interrupt.c: 56: TMR2ON = 1;
  8629  00008E  84CA               	bsf	4042,2,c	;volatile
  8630                           
  8631                           ;interrupt.c: 57: sound_delay++;
  8632  000090  4A38               	infsnz	_sound_delay^0,f,c
  8633  000092  2A39               	incf	(_sound_delay+1)^0,f,c
  8634                           
  8635                           ;interrupt.c: 58: if (sound_delay <= 400) {
  8636  000094  0E91               	movlw	145
  8637  000096  5C38               	subwf	_sound_delay^0,w,c
  8638  000098  0E01               	movlw	1
  8639  00009A  5839               	subwfb	(_sound_delay+1)^0,w,c
  8640  00009C  E202               	bc	i1l4274
  8641                           
  8642                           ;interrupt.c: 61: LATCbits.LATC5 = 1;
  8643  00009E  8A8B               	bsf	139,5,c	;volatile
  8644                           
  8645                           ;interrupt.c: 62: } else if ((sound_delay > 400)&&(sound_delay < 800))
  8646  0000A0  D00F               	goto	i1l251
  8647  0000A2                     i1l4274:
  8648  0000A2  0E91               	movlw	145
  8649  0000A4  5C38               	subwf	_sound_delay^0,w,c
  8650  0000A6  0E01               	movlw	1
  8651  0000A8  5839               	subwfb	(_sound_delay+1)^0,w,c
  8652  0000AA  E307               	bnc	i1l249
  8653  0000AC  0E20               	movlw	32
  8654  0000AE  5C38               	subwf	_sound_delay^0,w,c
  8655  0000B0  0E03               	movlw	3
  8656  0000B2  5839               	subwfb	(_sound_delay+1)^0,w,c
  8657  0000B4  E202               	bc	i1l249
  8658                           
  8659                           ;interrupt.c: 63: LATCbits.LATC5 = 0;
  8660  0000B6  9A8B               	bcf	139,5,c	;volatile
  8661  0000B8  D003               	goto	i1l251
  8662  0000BA                     i1l249:
  8663                           
  8664                           ;interrupt.c: 64: else {;interrupt.c: 65: LATCbits.LATC5 = 0;
  8665  0000BA  9A8B               	bcf	139,5,c	;volatile
  8666                           
  8667                           ;interrupt.c: 66: sound_delay = 0;
  8668  0000BC  6A38               	clrf	_sound_delay^0,c
  8669  0000BE  6A39               	clrf	(_sound_delay+1)^0,c
  8670  0000C0                     i1l251:
  8671  0000C0  C013  FFE0         	movff	??_Inter_lo+4,bsr
  8672  0000C4  C012  FFE8         	movff	??_Inter_lo+3,wreg
  8673  0000C8  C011  FFD8         	movff	??_Inter_lo+2,status
  8674  0000CC  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  8675  0000CE  0010               	retfie	
  8676  0000D0                     __end_of_Inter_lo:
  8677                           	callstack 0
  8678                           
  8679 ;; *************** function _Inter_hi *****************
  8680 ;; Defined at:
  8681 ;;		line 76 in file "interrupt.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  1    wreg      void 
  8688 ;; Registers used:
  8689 ;;		wreg, status,2, status,0, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8695 ;;      Params:         0       0       0       0       0       0       0
  8696 ;;      Locals:         0       0       0       0       0       0       0
  8697 ;;      Temps:          2       0       0       0       0       0       0
  8698 ;;      Totals:         2       0       0       0       0       0       0
  8699 ;;Total ram usage:        2 bytes
  8700 ;; Hardware stack levels used: 1
  8701 ;; Hardware stack levels required when called: 1
  8702 ;; This function calls:
  8703 ;;		i2___lmul
  8704 ;; This function is called by:
  8705 ;;		Interrupt level 2
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	intcode
  8710  000008                     __pintcode:
  8711                           	callstack 0
  8712  000008                     _Inter_hi:
  8713                           	callstack 23
  8714                           
  8715                           ;incstack = 0
  8716  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8717  00000A  EFC4  F00A         	goto	int_func
  8718                           
  8719                           	psect	intcode_body
  8720  001588                     __pintcode_body:
  8721                           	callstack 23
  8722  001588                     int_func:
  8723                           	callstack 23
  8724                           
  8725                           ;interrupt.c: 79: if (INT0IE && INT0IF) {
  8726  001588  B8F2               	btfsc	4082,4,c	;volatile
  8727  00158A  A2F2               	btfss	4082,1,c	;volatile
  8728  00158C  D018               	goto	i2l256
  8729                           
  8730                           ;interrupt.c: 82: (power_100) ? LATAbits.LA5 = 1 : LATAbits.LA5 = 0;
  8731  00158E  AC47               	btfss	(_power_100/(0+8))^0,_power_100& (0+7),c
  8732  001590  D002               	goto	i2l258
  8733  001592  8A89               	bsf	137,5,c	;volatile
  8734  001594  D001               	goto	i2l260
  8735  001596                     i2l258:
  8736  001596  9A89               	bcf	137,5,c	;volatile
  8737  001598                     i2l260:
  8738                           
  8739                           ;interrupt.c: 83: triacON = 0;
  8740  001598  6A40               	clrf	_triacON^0,c
  8741                           
  8742                           ;interrupt.c: 84: TMR1H = 0;
  8743  00159A  6ACF               	clrf	207,c	;volatile
  8744                           
  8745                           ;interrupt.c: 85: TMR1L = 0;
  8746  00159C  6ACE               	clrf	206,c	;volatile
  8747                           
  8748                           ;interrupt.c: 86: {CCPR1L = (angle_U_ocr & 0xFF); CCPR1H = (angle_U_ocr >> 8);};
  8749  00159E  C048  FFBE         	movff	_angle_U_ocr,4030	;volatile
  8750  0015A2  C049  FFBF         	movff	_angle_U_ocr+1,4031	;volatile
  8751                           
  8752                           ;interrupt.c: 87: if (zero < 10)
  8753  0015A6  0E0A               	movlw	10
  8754  0015A8  603F               	cpfslt	_zero^0,c
  8755  0015AA  D001               	goto	i2l4292
  8756                           
  8757                           ;interrupt.c: 88: zero++;
  8758  0015AC  2A3F               	incf	_zero^0,f,c
  8759  0015AE                     i2l4292:
  8760                           
  8761                           ;interrupt.c: 89: if (getU == 1) {
  8762  0015AE  043E               	decf	_getU^0,w,c
  8763  0015B0  E105               	bnz	i2l262
  8764                           
  8765                           ;interrupt.c: 90: getU = 0;
  8766  0015B2  6A3E               	clrf	_getU^0,c
  8767                           
  8768                           ;interrupt.c: 91: cnt_adc = 0;
  8769  0015B4  0100               	movlb	0	; () banked
  8770  0015B6  6B7A               	clrf	_cnt_adc& (0+255),b
  8771  0015B8  6B7B               	clrf	(_cnt_adc+1)& (0+255),b
  8772                           
  8773                           ;interrupt.c: 92: zero = 0;
  8774  0015BA  6A3F               	clrf	_zero^0,c
  8775  0015BC                     i2l262:
  8776                           
  8777                           ;interrupt.c: 94: };interrupt.c: 95: INT0IF = 0;
  8778  0015BC  92F2               	bcf	4082,1,c	;volatile
  8779  0015BE                     i2l256:
  8780                           
  8781                           ;interrupt.c: 99: };interrupt.c: 102: if (CCP1IE && CCP1IF) {
  8782  0015BE  B49D               	btfsc	3997,2,c	;volatile
  8783  0015C0  A49E               	btfss	3998,2,c	;volatile
  8784  0015C2  D008               	goto	i2l4302
  8785                           
  8786                           ;interrupt.c: 103: CCP1IF = 0;
  8787  0015C4  949E               	bcf	3998,2,c	;volatile
  8788                           
  8789                           ;interrupt.c: 104: LATAbits.LA5 = 1;
  8790  0015C6  8A89               	bsf	137,5,c	;volatile
  8791                           
  8792                           ;interrupt.c: 105: triacON = 1;
  8793  0015C8  0E01               	movlw	1
  8794  0015CA  6E40               	movwf	_triacON^0,c
  8795                           
  8796                           ;interrupt.c: 106: TMR1H = 0xFE;
  8797  0015CC  0EFE               	movlw	254
  8798  0015CE  6ECF               	movwf	207,c	;volatile
  8799                           
  8800                           ;interrupt.c: 107: TMR1L = 0x0B;
  8801  0015D0  0E0B               	movlw	11
  8802  0015D2  6ECE               	movwf	206,c	;volatile
  8803  0015D4                     i2l4302:
  8804                           
  8805                           ;interrupt.c: 108: };interrupt.c: 116: if (ADIE && ADIF) {
  8806  0015D4  BC9D               	btfsc	3997,6,c	;volatile
  8807  0015D6  AC9E               	btfss	3998,6,c	;volatile
  8808  0015D8  D052               	goto	i2l267
  8809                           
  8810                           ;interrupt.c: 117: if (zero < 10) {
  8811  0015DA  0E0A               	movlw	10
  8812  0015DC  603F               	cpfslt	_zero^0,c
  8813  0015DE  D04C               	goto	i2l4318
  8814                           
  8815                           ;interrupt.c: 119: U_meas = ((ADRESH << 8) + ADRESL);
  8816  0015E0  50C3               	movf	195,w,c	;volatile
  8817  0015E2  CFC4 F00D          	movff	4036,??_Inter_hi	;volatile
  8818  0015E6  6A0E               	clrf	(??_Inter_hi+1)^0,c
  8819  0015E8  C00D  F00E         	movff	??_Inter_hi,??_Inter_hi+1
  8820  0015EC  6A0D               	clrf	??_Inter_hi^0,c
  8821  0015EE  260D               	addwf	??_Inter_hi^0,f,c
  8822  0015F0  0E00               	movlw	0
  8823  0015F2  220E               	addwfc	(??_Inter_hi+1)^0,f,c
  8824  0015F4  C00D  F030         	movff	??_Inter_hi,_U_meas
  8825  0015F8  C00E  F031         	movff	??_Inter_hi+1,_U_meas+1
  8826  0015FC  BE31               	btfsc	(_U_meas+1)^0,7,c
  8827  0015FE  0EFF               	movlw	-1
  8828  001600  6E32               	movwf	(_U_meas+2)^0,c
  8829  001602  6E33               	movwf	(_U_meas+3)^0,c
  8830                           
  8831                           ;interrupt.c: 120: U_summ += U_meas*U_meas;
  8832  001604  C030  F001         	movff	_U_meas,i2___lmul@multiplier
  8833  001608  C031  F002         	movff	_U_meas+1,i2___lmul@multiplier+1
  8834  00160C  C032  F003         	movff	_U_meas+2,i2___lmul@multiplier+2
  8835  001610  C033  F004         	movff	_U_meas+3,i2___lmul@multiplier+3
  8836  001614  C030  F005         	movff	_U_meas,i2___lmul@multiplicand
  8837  001618  C031  F006         	movff	_U_meas+1,i2___lmul@multiplicand+1
  8838  00161C  C032  F007         	movff	_U_meas+2,i2___lmul@multiplicand+2
  8839  001620  C033  F008         	movff	_U_meas+3,i2___lmul@multiplicand+3
  8840  001624  EC74  F00D         	call	i2___lmul	;wreg free
  8841  001628  5001               	movf	?i2___lmul^0,w,c
  8842  00162A  0100               	movlb	0	; () banked
  8843  00162C  276C               	addwf	_U_summ& (0+255),f,b
  8844  00162E  5002               	movf	(?i2___lmul+1)^0,w,c
  8845  001630  236D               	addwfc	(_U_summ+1)& (0+255),f,b
  8846  001632  5003               	movf	(?i2___lmul+2)^0,w,c
  8847  001634  236E               	addwfc	(_U_summ+2)& (0+255),f,b
  8848  001636  5004               	movf	(?i2___lmul+3)^0,w,c
  8849  001638  236F               	addwfc	(_U_summ+3)& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;interrupt.c: 121: if (triacON)
  8853  00163A  5040               	movf	_triacON^0,w,c
  8854  00163C  E01B               	bz	i2l4316
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;interrupt.c: 122: U_summTriac += U_meas * U_meas;
  8858  00163E  C030  F001         	movff	_U_meas,i2___lmul@multiplier
  8859  001642  C031  F002         	movff	_U_meas+1,i2___lmul@multiplier+1
  8860  001646  C032  F003         	movff	_U_meas+2,i2___lmul@multiplier+2
  8861  00164A  C033  F004         	movff	_U_meas+3,i2___lmul@multiplier+3
  8862  00164E  C030  F005         	movff	_U_meas,i2___lmul@multiplicand
  8863  001652  C031  F006         	movff	_U_meas+1,i2___lmul@multiplicand+1
  8864  001656  C032  F007         	movff	_U_meas+2,i2___lmul@multiplicand+2
  8865  00165A  C033  F008         	movff	_U_meas+3,i2___lmul@multiplicand+3
  8866  00165E  EC74  F00D         	call	i2___lmul	;wreg free
  8867  001662  5001               	movf	?i2___lmul^0,w,c
  8868  001664  0100               	movlb	0	; () banked
  8869  001666  2768               	addwf	_U_summTriac& (0+255),f,b
  8870  001668  5002               	movf	(?i2___lmul+1)^0,w,c
  8871  00166A  2369               	addwfc	(_U_summTriac+1)& (0+255),f,b
  8872  00166C  5003               	movf	(?i2___lmul+2)^0,w,c
  8873  00166E  236A               	addwfc	(_U_summTriac+2)& (0+255),f,b
  8874  001670  5004               	movf	(?i2___lmul+3)^0,w,c
  8875  001672  236B               	addwfc	(_U_summTriac+3)& (0+255),f,b
  8876  001674                     i2l4316:
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;interrupt.c: 123: cnt_adc++;
  8880  001674  4B7A               	infsnz	_cnt_adc& (0+255),f,b
  8881  001676  2B7B               	incf	(_cnt_adc+1)& (0+255),f,b
  8882  001678                     i2l4318:
  8883                           
  8884                           ;interrupt.c: 124: };interrupt.c: 125: stab++;
  8885  001678  0100               	movlb	0	; () banked
  8886  00167A  2BD0               	incf	_stab& (0+255),f,b
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;interrupt.c: 126: PIR1bits.ADIF = 0;
  8890  00167C  9C9E               	bcf	158,6,c	;volatile
  8891  00167E                     i2l267:
  8892  00167E  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8893  001680  0011               	retfie		f
  8894  001682                     __end_of_Inter_hi:
  8895                           	callstack 0
  8896                           
  8897 ;; *************** function i2___lmul *****************
  8898 ;; Defined at:
  8899 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul32.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;  multiplier      4    0[COMRAM] unsigned long 
  8902 ;;  multiplicand    4    4[COMRAM] unsigned long 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  product         4    8[COMRAM] unsigned long 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  4    0[COMRAM] unsigned long 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8914 ;;      Params:         8       0       0       0       0       0       0
  8915 ;;      Locals:         4       0       0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0
  8917 ;;      Totals:        12       0       0       0       0       0       0
  8918 ;;Total ram usage:       12 bytes
  8919 ;; Hardware stack levels used: 1
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_Inter_hi
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text38
  8928  001AE8                     __ptext38:
  8929                           	callstack 0
  8930  001AE8                     i2___lmul:
  8931                           	callstack 23
  8932                           
  8933                           ;incstack = 0
  8934  001AE8  6A09               	clrf	i2___lmul@product^0,c
  8935  001AEA  6A0A               	clrf	(i2___lmul@product+1)^0,c
  8936  001AEC  6A0B               	clrf	(i2___lmul@product+2)^0,c
  8937  001AEE  6A0C               	clrf	(i2___lmul@product+3)^0,c
  8938  001AF0                     i2l853:
  8939  001AF0  A001               	btfss	i2___lmul@multiplier^0,0,c
  8940  001AF2  D008               	goto	i2l4220
  8941  001AF4  5005               	movf	i2___lmul@multiplicand^0,w,c
  8942  001AF6  2609               	addwf	i2___lmul@product^0,f,c
  8943  001AF8  5006               	movf	(i2___lmul@multiplicand+1)^0,w,c
  8944  001AFA  220A               	addwfc	(i2___lmul@product+1)^0,f,c
  8945  001AFC  5007               	movf	(i2___lmul@multiplicand+2)^0,w,c
  8946  001AFE  220B               	addwfc	(i2___lmul@product+2)^0,f,c
  8947  001B00  5008               	movf	(i2___lmul@multiplicand+3)^0,w,c
  8948  001B02  220C               	addwfc	(i2___lmul@product+3)^0,f,c
  8949  001B04                     i2l4220:
  8950  001B04  90D8               	bcf	status,0,c
  8951  001B06  3605               	rlcf	i2___lmul@multiplicand^0,f,c
  8952  001B08  3606               	rlcf	(i2___lmul@multiplicand+1)^0,f,c
  8953  001B0A  3607               	rlcf	(i2___lmul@multiplicand+2)^0,f,c
  8954  001B0C  3608               	rlcf	(i2___lmul@multiplicand+3)^0,f,c
  8955  001B0E  90D8               	bcf	status,0,c
  8956  001B10  3204               	rrcf	(i2___lmul@multiplier+3)^0,f,c
  8957  001B12  3203               	rrcf	(i2___lmul@multiplier+2)^0,f,c
  8958  001B14  3202               	rrcf	(i2___lmul@multiplier+1)^0,f,c
  8959  001B16  3201               	rrcf	i2___lmul@multiplier^0,f,c
  8960  001B18  5001               	movf	i2___lmul@multiplier^0,w,c
  8961  001B1A  1002               	iorwf	(i2___lmul@multiplier+1)^0,w,c
  8962  001B1C  1003               	iorwf	(i2___lmul@multiplier+2)^0,w,c
  8963  001B1E  1004               	iorwf	(i2___lmul@multiplier+3)^0,w,c
  8964  001B20  E1E7               	bnz	i2l853
  8965  001B22  C009  F001         	movff	i2___lmul@product,?i2___lmul
  8966  001B26  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
  8967  001B2A  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
  8968  001B2E  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
  8969  001B32  0012               	return		;funcret
  8970  001B34                     __end_ofi2___lmul:
  8971                           	callstack 0
  8972                           
  8973                           	psect	rparam
  8974  0000                     
  8975                           	psect	temp
  8976  00004A                     btemp:
  8977                           	callstack 0
  8978  00004A                     	ds	1
  8979  0000                     int$flags	set	btemp
  8980  0000                     wtemp8	set	btemp+1
  8981  0000                     ttemp5	set	btemp+1
  8982  0000                     ttemp6	set	btemp+4
  8983  0000                     ttemp7	set	btemp+8
  8984                           
  8985                           	psect	idloc
  8986                           
  8987                           ;Config register IDLOC0 @ 0x200000
  8988                           ;	unspecified, using default values
  8989  200000                     	org	2097152
  8990  200000  FF                 	db	255
  8991                           
  8992                           ;Config register IDLOC1 @ 0x200001
  8993                           ;	unspecified, using default values
  8994  200001                     	org	2097153
  8995  200001  FF                 	db	255
  8996                           
  8997                           ;Config register IDLOC2 @ 0x200002
  8998                           ;	unspecified, using default values
  8999  200002                     	org	2097154
  9000  200002  FF                 	db	255
  9001                           
  9002                           ;Config register IDLOC3 @ 0x200003
  9003                           ;	unspecified, using default values
  9004  200003                     	org	2097155
  9005  200003  FF                 	db	255
  9006                           
  9007                           ;Config register IDLOC4 @ 0x200004
  9008                           ;	unspecified, using default values
  9009  200004                     	org	2097156
  9010  200004  FF                 	db	255
  9011                           
  9012                           ;Config register IDLOC5 @ 0x200005
  9013                           ;	unspecified, using default values
  9014  200005                     	org	2097157
  9015  200005  FF                 	db	255
  9016                           
  9017                           ;Config register IDLOC6 @ 0x200006
  9018                           ;	unspecified, using default values
  9019  200006                     	org	2097158
  9020  200006  FF                 	db	255
  9021                           
  9022                           ;Config register IDLOC7 @ 0x200007
  9023                           ;	unspecified, using default values
  9024  200007                     	org	2097159
  9025  200007  FF                 	db	255
  9026                           
  9027                           	psect	config
  9028                           
  9029                           ; Padding undefined space
  9030  300000                     	org	3145728
  9031  300000  FF                 	db	255
  9032                           
  9033                           ;Config register CONFIG1H @ 0x300001
  9034                           ;	Oscillator Selection bits
  9035                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  9036                           ;	Fail-Safe Clock Monitor Enable bit
  9037                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  9038                           ;	Internal/External Oscillator Switchover bit
  9039                           ;	IESO = OFF, Oscillator Switchover mode disabled
  9040  300001                     	org	3145729
  9041  300001  08                 	db	8
  9042                           
  9043                           ;Config register CONFIG2L @ 0x300002
  9044                           ;	Power-up Timer Enable bit
  9045                           ;	PWRT = ON, PWRT enabled
  9046                           ;	Brown-out Reset Enable bits
  9047                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  9048                           ;	Brown Out Reset Voltage bits
  9049                           ;	BORV = 18, VBOR set to 1.8 V nominal
  9050  300002                     	org	3145730
  9051  300002  1E                 	db	30
  9052                           
  9053                           ;Config register CONFIG2H @ 0x300003
  9054                           ;	Watchdog Timer Enable bit
  9055                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
  9056                           ;	Watchdog Timer Postscale Select bits
  9057                           ;	WDTPS = 2048, 1:2048
  9058  300003                     	org	3145731
  9059  300003  17                 	db	23
  9060                           
  9061                           ; Padding undefined space
  9062  300004                     	org	3145732
  9063  300004  FF                 	db	255
  9064                           
  9065                           ;Config register CONFIG3H @ 0x300005
  9066                           ;	CCP2 MUX bit
  9067                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
  9068                           ;	PORTB A/D Enable bit
  9069                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  9070                           ;	Low-Power Timer1 Oscillator Enable bit
  9071                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  9072                           ;	HFINTOSC Fast Start-up
  9073                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  9074                           ;	MCLR Pin Enable bit
  9075                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9076  300005                     	org	3145733
  9077  300005  80                 	db	128
  9078                           
  9079                           ;Config register CONFIG4L @ 0x300006
  9080                           ;	Stack Full/Underflow Reset Enable bit
  9081                           ;	STVREN = ON, Stack full/underflow will cause Reset
  9082                           ;	Single-Supply ICSP Enable bit
  9083                           ;	LVP = OFF, Single-Supply ICSP disabled
  9084                           ;	Extended Instruction Set Enable bit
  9085                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  9086                           ;	Background Debugger Enable bit
  9087                           ;	DEBUG = 0x1, unprogrammed default
  9088  300006                     	org	3145734
  9089  300006  81                 	db	129
  9090                           
  9091                           ; Padding undefined space
  9092  300007                     	org	3145735
  9093  300007  FF                 	db	255
  9094                           
  9095                           ;Config register CONFIG5L @ 0x300008
  9096                           ;	Code Protection Block 0
  9097                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  9098                           ;	Code Protection Block 1
  9099                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  9100                           ;	Code Protection Block 2
  9101                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  9102                           ;	Code Protection Block 3
  9103                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  9104  300008                     	org	3145736
  9105  300008  0F                 	db	15
  9106                           
  9107                           ;Config register CONFIG5H @ 0x300009
  9108                           ;	Boot Block Code Protection bit
  9109                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  9110                           ;	Data EEPROM Code Protection bit
  9111                           ;	CPD = OFF, Data EEPROM not code-protected
  9112  300009                     	org	3145737
  9113  300009  C0                 	db	192
  9114                           
  9115                           ;Config register CONFIG6L @ 0x30000A
  9116                           ;	Write Protection Block 0
  9117                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  9118                           ;	Write Protection Block 1
  9119                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  9120                           ;	Write Protection Block 2
  9121                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  9122                           ;	Write Protection Block 3
  9123                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  9124  30000A                     	org	3145738
  9125  30000A  0F                 	db	15
  9126                           
  9127                           ;Config register CONFIG6H @ 0x30000B
  9128                           ;	Configuration Register Write Protection bit
  9129                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  9130                           ;	Boot Block Write Protection bit
  9131                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  9132                           ;	Data EEPROM Write Protection bit
  9133                           ;	WRTD = OFF, Data EEPROM not write-protected
  9134  30000B                     	org	3145739
  9135  30000B  E0                 	db	224
  9136                           
  9137                           ;Config register CONFIG7L @ 0x30000C
  9138                           ;	Table Read Protection Block 0
  9139                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  9140                           ;	Table Read Protection Block 1
  9141                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  9142                           ;	Table Read Protection Block 2
  9143                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  9144                           ;	Table Read Protection Block 3
  9145                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  9146  30000C                     	org	3145740
  9147  30000C  0F                 	db	15
  9148                           
  9149                           ;Config register CONFIG7H @ 0x30000D
  9150                           ;	Boot Block Table Read Protection bit
  9151                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  9152  30000D                     	org	3145741
  9153  30000D  40                 	db	64
  9154                           tosu	equ	0xFFF
  9155                           tosh	equ	0xFFE
  9156                           tosl	equ	0xFFD
  9157                           stkptr	equ	0xFFC
  9158                           pclatu	equ	0xFFB
  9159                           pclath	equ	0xFFA
  9160                           pcl	equ	0xFF9
  9161                           tblptru	equ	0xFF8
  9162                           tblptrh	equ	0xFF7
  9163                           tblptrl	equ	0xFF6
  9164                           tablat	equ	0xFF5
  9165                           prodh	equ	0xFF4
  9166                           prodl	equ	0xFF3
  9167                           indf0	equ	0xFEF
  9168                           postinc0	equ	0xFEE
  9169                           postdec0	equ	0xFED
  9170                           preinc0	equ	0xFEC
  9171                           plusw0	equ	0xFEB
  9172                           fsr0h	equ	0xFEA
  9173                           fsr0l	equ	0xFE9
  9174                           wreg	equ	0xFE8
  9175                           indf1	equ	0xFE7
  9176                           postinc1	equ	0xFE6
  9177                           postdec1	equ	0xFE5
  9178                           preinc1	equ	0xFE4
  9179                           plusw1	equ	0xFE3
  9180                           fsr1h	equ	0xFE2
  9181                           fsr1l	equ	0xFE1
  9182                           bsr	equ	0xFE0
  9183                           indf2	equ	0xFDF
  9184                           postinc2	equ	0xFDE
  9185                           postdec2	equ	0xFDD
  9186                           preinc2	equ	0xFDC
  9187                           plusw2	equ	0xFDB
  9188                           fsr2h	equ	0xFDA
  9189                           fsr2l	equ	0xFD9
  9190                           status	equ	0xFD8

Data Sizes:
    Strings     385
    Constant    183
    Data        5
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      73
    BANK0           160     33     113
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_31(CODE[7]), sprintf@c(BANK0[1]), ?_sprintf(COMRAM[2]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), compile_time(CODE[9]), compile_date(CODE[12]), STR_3(CODE[9]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_30(CODE[11]), STR_29(CODE[11]), STR_28(CODE[9]), STR_27(CODE[11]), 
		 -> STR_26(CODE[12]), STR_25(CODE[12]), STR_24(CODE[12]), STR_21(CODE[11]), 
		 -> STR_18(CODE[11]), STR_17(CODE[14]), STR_14(CODE[20]), STR_4(CODE[6]), 
		 -> STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 21
		 -> TxtBuf(BANK0[21]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> scratch(BANK0[9]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(BANK0[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(BANK0[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 2
		 -> timer_val(COMRAM[2]), 

    readTemp_Single@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus(BANK0[1]), 

    main$1571	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_20(CODE[4]), STR_19(CODE[3]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_7(CODE[8]), symbol_6(CODE[8]), symbol_5(CODE[8]), symbol_4(CODE[8]), 
		 -> symbol_3(CODE[8]), symbol_2(CODE[8]), symbol_1(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_23(CODE[10]), STR_22(CODE[10]), STR_16(CODE[19]), STR_15(CODE[19]), 
		 -> STR_13(CODE[21]), STR_12(CODE[15]), STR_11(CODE[20]), STR_10(CODE[19]), 
		 -> STR_9(CODE[22]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), TxtBuf(BANK0[21]), STR_1(CODE[20]), 


Critical Paths under _main in COMRAM

    _main->___fltol
    _sqrt->___xxtofl
    _show_lcd_main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _calc_power->___lldiv
    _readTemp_Single->_ds18b20_crc8
    _lcd_preload->_cgrom_char
    _init_cpu->_cgrom_char
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble
    ___fltol->_sqrt

Critical Paths under _Inter_lo in COMRAM

    None.

Critical Paths under _Inter_hi in COMRAM

    _Inter_hi->i2___lmul

Critical Paths under _main in BANK0

    _main->___fltol
    _show_lcd_main->_sprintf
    ___fltol->_sqrt

Critical Paths under _Inter_lo in BANK0

    None.

Critical Paths under _Inter_hi in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Inter_lo in BANK1

    None.

Critical Paths under _Inter_hi in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Inter_lo in BANK2

    None.

Critical Paths under _Inter_hi in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Inter_lo in BANK3

    None.

Critical Paths under _Inter_hi in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Inter_lo in BANK4

    None.

Critical Paths under _Inter_hi in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Inter_lo in BANK5

    None.

Critical Paths under _Inter_hi in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   79750
                                             27 BANK0      6     6      0
                            _EncPoll
                            ___fltol
                            ___lldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
                           ___xxtofl
                         _calc_power
                           _clearLCD
                           _init_cpu
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                        _lcd_preload
                           _lcd_putc
                    _readTemp_Single
                           _read_eep
                      _show_lcd_main
                            _sprintf
                               _sqrt
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     424
                                             21 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                29    25      4     945
                                             35 COMRAM     8     4      4
                                              0 BANK0     21    21      0
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _show_lcd_main                                        2     2      0   29333
                                             12 BANK0      2     2      0
                            ___lwdiv
                            ___lwmod
                         _calc_power
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    20      9    8795
                                             33 COMRAM    13     4      9
                                              0 BANK0     12    12      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     592
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1852
                                             28 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    2041
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1328
                                             25 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdPrint                                             6     4      2    8263
                                             28 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    4468
                                             25 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _calc_power                                          16    10      6    2552
                                             34 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1036
                                             21 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             21 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     402
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readTemp_Single                                     11     7      4    1604
                                             28 COMRAM    10     6      4
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      92
                                             21 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     405
                                             21 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _lcd_preload                                          0     0      0    7965
                         _cgrom_char
                           _clearLCD
                            _initLCD
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      46
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_cpu                                             2     2      0    6827
                                             29 COMRAM     2     2      0
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     159
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     136
                                             22 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             2     2      0      23
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2718
                                             26 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             1     1      0    1297
                                             25 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    3950
                                             25 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1297
                                             23 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     124
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     474
                                             21 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     517
                                             43 COMRAM     4     0      4
                                             21 BANK0      6     6      0
                           ___xxtofl (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (1) _EncPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Inter_lo                                             7     7      0      46
                                             14 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Inter_hi                                             2     2      0     196
                                             12 COMRAM     2     2      0
                           i2___lmul
 ---------------------------------------------------------------------------------
 (8) i2___lmul                                            12     4      8     196
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EncPoll
   ___fltol
     ___xxtofl (ARG)
     _sqrt (ARG)
       ___xxtofl (ARG)
   ___lldiv
   ___lmul
   ___lwdiv
   ___wmul
   ___xxtofl
   _calc_power
     ___lldiv
     ___lmul
   _clearLCD
     _lcdWrite
       _lcdNibble
   _init_cpu
     _cgrom_char
       _lcdWrite
     _initLCD
       _clearLCD
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_preload
     _cgrom_char
     _clearLCD
     _initLCD
   _lcd_putc
     _lcdWrite
   _readTemp_Single
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _read_eep
   _show_lcd_main
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _calc_power
     _lcdPrint
     _lcd_gotoxy
     _lcd_putc
     _sprintf
       ___lwdiv
       ___lwmod
       ___wmul
       _isdigit
   _sprintf
   _sqrt
   _write_eep

 _Inter_lo (ROOT)

 _Inter_hi (ROOT)
   i2___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      36        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      71       5       70.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2F      49       1       77.7%
BITBIGSFRllllll     1C      0       0      34        0.0%
BITBIGSFRhhlhhh     1B      0       0      17        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRllllhh      6      0       0      31        0.0%
BITBIGSFRlllhhl      6      0       0      30        0.0%
BITBIGSFRhhlhlh      6      0       0      23        0.0%
BITBIGSFRllhl        6      0       0      29        0.0%
BITBIGSFRhhlhhh      5      0       0      21        0.0%
BITBIGSFRlhh         3      0       0      26        0.0%
BITBIGSFRhhlhhh      2      0       0      19        0.0%
BITBIGSFRlllllh      1      0       0      32        0.0%
BITBIGSFRlllllh      1      0       0      33        0.0%
BITBIGSFRllhh        1      0       0      28        0.0%
BITBIGSFRhhlhhh      1      0       0      18        0.0%
BITBIGSFRhhlhhh      1      0       0      20        0.0%
BITBIGSFRhhlhhl      1      0       0      22        0.0%
BITBIGSFRhhlhll      1      0       0      24        0.0%
BITBIGSFRlhl         1      0       0      27        0.0%
BITBIGSFRhhll        1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      35        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Sep 29 15:25:24 2023

            ?_lcd_preload 0001                        PL2 0C62                        PL4 0C72  
                      PL6 174C                        PL8 08E2                        bsr 000FE0  
     ___wmul@multiplicand 0018              lcdWrite@byte 0019                       PL10 1758  
                     PL20 0920                       PL12 0904                       PL30 0C84  
                     PL22 0932                       PL14 0F3C                       PL40 0950  
                     PL32 1122                       PL24 1110                       PL16 0F4A  
                     PL50 1974                       PL42 095E                       PL34 0944  
                     PL26 0F58                       PL18 0916                       PL60 19BA  
                     PL52 1982                       PL44 0F7A                       PL36 0F6A  
                     PL28 0C7E                       PL70 1474                       PL62 0C8C  
                     PL54 1990                       PL46 1966                       PL38 094A  
                     PL80 0978                       PL72 0C9A                       PL64 096C  
                     PL56 199E                       PL48 1890                       PL90 192A  
                     PL82 0982                       PL74 0F88                       PL66 1468  
                     PL58 19AC                       PL92 1766                       PL84 157E  
                     PL76 0CA6                       PL68 112E                       PL94 0CB0  
                     PL86 0F94                       PL78 113A                       PL96 0CB6  
                     PL88 098C                       PL98 0CBC              lcdWrite@type 0018  
                     l116 1D74                       l125 1D04                       l601 0614  
                     l602 063A                       l611 06C0                       l605 065A  
                     l616 0792                       l544 01F0                       l562 0370  
                     l619 07B2                       l555 02CC                       l732 1BA4  
                     l804 0DB6                       l572 03F2                       l564 0378  
                     l548 0252                       l805 0DBA                       l655 0BCE  
                     l824 0EA8                       l825 0EAC                       l682 1CCE  
                     l755 1DE6                       l684 1CFA                       l853 1AA4  
                     l598 05BC                       l871 1A2C                       l783 0CD4  
                     l599 05D0                       _PR2 000FCB                       wreg 000FE8  
         lcdNibble@nibble 0017             write_eep@data 0016               lcd_gotoxy@x 001B  
             lcd_gotoxy@y 001A               _sound_delay 0038              ___fltol@exp1 00C7  
                    l1323 1B74                      l1333 1C7C                      l1514 13FE  
                    l4010 10EE                      l1507 13B2                      l4212 1456  
                    l5020 16DE                      l5012 169A                      l5100 0DC2  
                    l5014 16A4                      l5102 0DCC                      l5024 1718  
                    l5016 16B0                      l5008 1684                      l5112 0E0A  
                    l5026 1734                      l5122 0E26                      l5130 0E3A  
                    l3276 1C8A                      l5028 1738                      l5132 0E56  
                    l5116 0E0C                      l5108 0DF6                      l5060 0CE6  
                    l4182 13D6                      l5038 1D48                      l3622 1BEC  
                    l5150 0E86                      l5126 0E34                      l5118 0E18  
                    l5054 0CDC                      l6006 08C2                      l4184 13DC  
                    l3632 1B84                      l5056 0CE0                      l5048 0CCA  
                    l4194 140C                      l4186 13E0                      l4178 13C2  
                    l3618 1BCC                      l5162 0ECA                      l5138 0E6C  
                    l4196 1418                      l4188 13F0                      l3812 1CD0  
                    l3644 1BB2                      l3636 1B94                      l3652 1BBE  
                    l5172 0EE0                      l5084 0D6A                      l5076 0D4A  
                    l5068 0D04                      l3822 1CE8                      l5326 148C  
                    l5086 0D70                      l5422 09CE                      l5408 1568  
                    l5096 0DC0                      l5088 0D76                      l5600 01FE  
                    l3930 1DCA                      l5522 1780                      l5346 14B8  
                    l5178 0F0C                      l5426 09E0                      l3658 1E4A  
                    l5540 17CA                      l5380 1518                      l5372 14F4  
                    l5436 0A12                      l5700 03DE                      l5612 023E  
                    l5358 14CA                      l4910 1AB8                      l5470 0B46  
                    l5438 0A20                      l5710 041A                      l5630 028E  
                    l5622 025A                      l5552 17F6                      l5544 17D2  
                    l5536 17BA                      l4920 19E0                      l5480 0BFC  
                    l5472 0B9A                      l3952 0FD6                      l5720 0432  
                    l5704 0404                      l5546 17DE                      l4922 19EC  
                    l5490 0C3A                      l3962 0FFC                      l5802 0540  
                    l5810 056C                      l5650 02C4                      l5634 0296  
                    l5618 0246                      l4932 1A1E                      l5492 0C40  
                    l5468 0B02                      l3956 0FE6                      l5900 06C4  
                    l5724 0446                      l5716 0426                      l5708 0410  
                    l4862 1D76                      l4942 1B44                      l3990 109E  
                    l3974 1022                      l3966 100E                      l5814 0574  
                    l5742 0466                      l5654 02DA                      l5662 02E4  
                    l5638 02A0                      _ADIE 007CEE                      l4944 1B4C  
                    l3992 10BE                      l3984 1064                      l5808 0554  
                    l5656 02DE                      _ADIF 007CF6                      l4874 1D08  
                    l4882 1D16                      l4954 1B6A                      l4970 1C72  
                    l4962 1C54                      l3986 1068                      l5922 0730  
                    l5690 03B2                      l4876 1D0C                      l4884 1D2A  
                    l4964 1C5C                      l5916 0716                      l5844 05DE  
                    l5684 0380                      l5692 03C8                      l4878 1D10  
                    l3998 10CC                      l5942 07AA                      l5870 061E  
                    l5790 050A                      l5782 04EC                      l5678 0372  
                    l4896 1E80                      l5880 0660                      l5954 07C8  
                    l5946 07B8                      l5890 0698                      l5794 051E  
                    l5786 04F6                      l5778 04D8                      l5964 080C  
                    l5884 0676                      l5876 0652                      l5798 0532  
                    l5896 06B8                      l5978 086C                      l5988 0890  
                    STR_1 7EFC                      STR_2 7F59                      STR_3 7FD9  
                    STR_4 7FF2                      STR_5 7EBE                      STR_6 7ED3  
                    STR_7 7EA9                      STR_8 7E94                      STR_9 7E7E  
        ow_reset@presence 0017                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B                      u2144 1C9A                      u2145 1C96  
                    u4110 18D8                      u4130 18EC                      u4210 19F0  
                    u3180 1422                      u4108 18C2                      u5100 03DA  
                    u4070 18AA                      u4310 16D8                      u4128 18DA  
                    u4320 16F6                      u4240 1B50                      u4090 18C0  
                    u4330 1726                      u5050 038A                      u4148 18EE  
                    u4340 1746                      u4420 0D9C                      u5220 064C  
                    u4317 16D6                      u4270 1C60                      u4430 0DA0  
                    u5310 06FE                      u5150 0440                      u4327 16F4  
                    u4088 18AC                      u5240 066E                      u4337 1724  
                    u4290 16BE                      u5250 0684                      u4347 1744  
                    u4427 0D98                      u2684 1BE4                      u4620 0F20  
                    u5420 084C                      u5260 0692                      u5180 04E6  
                    u5068 038E                      u2685 1BE0                      u5325 0700  
                    u4630 0F26                      u4470 0DEC                      u2870 0FD4  
                    u5270 06A4                      u4640 0F32                      u5360 07A4  
                    u5280 06B2                      u4297 16BC                      u5507 1E8E  
                    u5435 084E                      u4580 0ED4                      u5517 1E9A  
                    u4477 0DE8                      u4830 17E2                      u4590 0EDA  
                    u5607 127E                      u5527 1210                      u5617 128C  
                    u5537 1CB6                      u5707 1360                      u5627 129A  
                    u5547 1DDA                      u5467 00E0                      u4780 1776  
                    u4860 0230                      u5717 1EB2                      u5637 12AE  
                    u5557 1DE8                      u5477 0164                      u4790 179E  
                    u5727 1D78                      u5647 12C6                      u5567 1C12  
                    u5487 1690                      u5737 18FC                      u5657 12DE  
                    u5577 1C24                      u5497 1BF2                      u4795 1794  
                    u5747 1914                      u5667 12F6                      u5587 1C38  
                    u5677 1312                      u5597 1270                      u5687 132E  
                    u5697 1344                      _RBPU 007F8F                      _TXIF 007CF4  
                    _WPUB 000F7C                _AlarmTempT 0086             calc_power@p_w 00B5  
           calc_power@res 0023                      _getU 003E                      _main 00D4  
                    _stab 00D0                      fsr0h 000FEA                      indf0 000FEF  
                    fsr2h 000FDA                      fsr0l 000FE9                      indf2 000FDF  
                    fsr2l 000FD9                      btemp 004A                      _sqrt 0F9E  
                    _zero 003F             write_byte@val 0019                      prodh 000FF4  
                    prodl 000FF3                      start 00D0           __end_of_EncPoll 1DCE  
            ___param_bank 000000              _sound_enable 0041             ___fltol@sign1 00C6  
                   ?_main 0001                     _EEADR 000FA9                     STR_10 7F24  
                   STR_11 7F10                     STR_20 7FF8                     STR_12 7F4A  
                   STR_13 7E94                     STR_21 7F99                     STR_22 7FC5  
                   STR_30 7FAF                     STR_14 7EE8                     STR_15 7F24  
                   STR_31 7FEB                     STR_23 7FCF                     STR_24 7F76  
                   STR_16 7F37                     STR_25 7F82                     STR_17 7F68  
                   STR_26 7F82                     STR_18 7FBA                     STR_19 7FFC  
                   STR_27 7F8E                     STR_28 7FE2                     STR_29 7FA4  
         __end_of___fltol 1808           __end_of___lldiv 1A3E                     ?_sqrt 0024  
         ??_show_lcd_main 002F           __end_of___lwdiv 1B7E                     i1l251 00C0  
                   i1l245 008A                     i1l249 00BA           __end_of___lwmod 1C86  
                   i2l260 1598                     i2l262 15BC                     i2l256 15BE  
                   i2l258 1596                     i2l267 167E                     i2l853 1AF0  
                   _TMR1H 000FCF                     _TMR1L 000FCE                     _SPBRG 000FAF  
                   _PORTA 000F80                     _PORTB 000F81                     _PORTC 000F82  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TXREG 000FAD       ___lmul@multiplicand 001A                     _U_Out 0072  
         __end_of_initLCD 1374            calc_power@u_rl 0027                     _enTmp 023D  
         __end_of_dpowers 7E31                     _fract 7E17                     _r_dec 007E  
         __end_of_isdigit 1E88                     _minus 00AB                     _t_res 0060  
                   _u_set 0081            write_byte@temp 001A            __pbitbssCOMRAM 0238  
            main@powerOFF 007C                     tablat 000FF5          __end_ofi2___lmul 1B34  
                   ttemp5 004B                     sqrt@a 0024                     ttemp6 004E  
                   ttemp7 0052                     sqrt@i 00AE                     sqrt@p 00B7  
                   status 000FD8                     wtemp8 004B           __end_of_sprintf 0F3C  
         write_bit@bitval 0016           __initialization 1A3E           ds18b20_crc8@crc 001C  
            __end_of_main 08E2              __end_of_sqrt 1110           _readTemp_Single 1480  
     ds18b20_crc8@data_in 0016          __end_of_Inter_hi 1682          __end_of_Inter_lo 00D0  
                  ??_main 00C8          main@alarm_enable 0238                    ??_sqrt 0028  
           __activetblptr 000002             ?_init_ds18b20 0001                    _ADCON1 000FC1  
                  _CCP1IE 007CEA                    _CCP1IF 007CF2                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _EEDATA 000FA8                    _CCPR1H 000FBF  
                  _CCPR2H 000FBC                    _CCPR1L 000FBE                    _CCPR2L 000FBB  
                  _EECON2 000FA7                    _INT0IE 007F94                    _INT0IF 007F91  
                  i1l4234 0038                    i1l4252 0068                    i1l4274 00A2  
                  i2l4220 1B04                    i2l4302 15D4                    i2l4316 1674  
                  i2l4318 1678                    i2l4292 15AE                 ??_EncPoll 0016  
                  _TMR0IE 007F95                    _TMR0IF 007F92                    _TMR1IE 007CE8  
                  _TMR1IF 007CF0                    _TMR1CS 007E69                    _TMR2IE 007CE9  
                  _TMR2IF 007CF1                    _TMR3IE 007D01                    _TMR1IP 007CF8  
                  _SPBRGH 000FB0                    _TMR3IP 007D11                    _TMR1ON 007E68  
        i2___lmul@product 0009                    _TMR2ON 007E52                    _TMR3ON 007D88  
        __end_of___xxtofl 1468          __end_of_clearLCD 1EBC                    _U_meas 0030  
        __end_of_lcdPrint 174C                    _U_real 0074                    _TempEn 0085  
                  _U_summ 006C          __end_of_lcdWrite 1D9C          __end_of_lcd_putc 1EDA  
                  _TxtBuf 008B                    ___lmul 1A9C                    ___wmul 1E22  
               ??___fltol 00C2                    _angleU 00CE                 ??___lldiv 001E  
               ??___lwdiv 001A                 ??___lwmod 0021                    _isTemp 003D  
        __end_of_init_cpu 1266          __end_of_read_bit 1EA4          __end_of_read_eep 1ECE  
                  clear_0 1A7A                    clear_1 1A88                    isa$std 000001  
          ??_init_ds18b20 001C                 ??_initLCD 001B              __pdataCOMRAM 0048  
               ??_isdigit 0016              __mediumconst 7DC6          __end_of_ow_reset 1C48  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
           main@whole_dec 0239                 ??_sprintf 002B          __end_of_symbol_1 7E7E  
        __end_of_symbol_2 7E76          __end_of_symbol_3 7E6E          __end_of_symbol_4 7E66  
        __end_of_symbol_5 7E5E          __end_of_symbol_6 7E56          __end_of_symbol_7 7E4E  
            ___xxtofl@arg 0020              ___xxtofl@exp 001F              ___xxtofl@val 0016  
              __accesstop 0060   __end_of__initialization 1A8E         __end_of_EncState_ 7E17  
           ___rparam_used 000001   __end_of_readTemp_Single 157E          write_eep@address 0017  
              ___fltol@f1 002C      __end_of_compile_date 7E3D          ds18b20_crc8@data 0019  
    __end_of_compile_time 7E46            __pcstackCOMRAM 0001              __pidataBANK0 1EE4  
       _oldOldTemperature 0076             __end_of_fract 7E27    ds18b20_crc8@loop_count 001B  
              __end_ofPL2 0C72                __end_ofPL4 0C7E                __end_ofPL6 1758  
              __end_ofPL8 0904             EncPoll@EncVal 003C             ?_ds18b20_crc8 0016  
               ?i2___lmul 0001                _calc_power 1808         lcd_gotoxy@address 001C  
            sprintf@width 00B7                __pbssBANK0 0060                 ?_Inter_hi 0001  
               ?_Inter_lo 0001   ds18b20_crc8@bit_counter 0018                   ?___lmul 0016  
                 ?___wmul 0016       __end_of_HD44780_CYR 7E07            ___lmul@product 001E  
          ??_ds18b20_crc8 0018                _cgrom_char 1D38                ??i2___lmul 0009  
                 _T1OSCEN 007E6B             _eusartRxCount 0043                 ?___xxtofl 0016  
               ?_clearLCD 0001                _lcd_gotoxy 1D00                 ?_lcdPrint 001D  
               ?_lcdWrite 0018                 ?_lcd_putc 0001                   _EncData 0070  
                 _EncPoll 1D9C                 ?_init_cpu 0001                 ?_read_eep 0016  
               ?_read_bit 0001                ??_Inter_hi 000D                ??_Inter_lo 000F  
              _key_GetKey 1EDA      __end_of_init_ds18b20 1E22         __end_of_lcdNibble 192A  
        ?_readTemp_Single 001D                   __Hparam 0000                   _TempEnT 0084  
                 __Lparam 0000                 ?_ow_reset 0001                   ___fltol 176C  
                 ___lldiv 19C8                   ___lwdiv 1B34                   ___lwmod 1C48  
                 __pcinit 1A3E                 _ANSELbits 000F7E                   __ramtop 0600  
             _U_summTriac 0068  readTemp_Single@time_flag 001F                   __ptext0 00D4  
                 __ptext1 1E48                   __ptext2 0F9E                   __ptext3 0996  
                 __ptext4 0CC2                   __ptext5 1E6C                   __ptext6 1E22  
                 __ptext7 1C48                   __ptext8 1B34                   __ptext9 1ECE  
                 _cnt_adc 007A                 _T0CONbits 000FD5  readTemp_Single@timer_val 0020  
                 _initLCD 1266                 _T1CONbits 000FCD                   _dpowers 7E27  
               _T2CONbits 000FCA                   _isdigit 1E6C                   _is_stab 023C  
              ??___xxtofl 001A                 _T3CONbits 000FB1         __end_of_key_press 1D00  
   __end_of_show_lcd_main 0C62         __end_of_read_byte 1C08                ??_clearLCD 001A  
                 _r_whole 007F               ?_calc_power 0023                   _tick_t1 008A  
                 _scratch 00A0                   _show_tp 023B                   _triacON 0040  
              ??_lcdPrint 001F                ??_lcdWrite 0019                   _sprintf 0CC2  
          __pintcode_body 1588                ??_lcd_putc 001A      end_of_initialization 1A8E  
            key_press@key 0016             __Lmediumconst 7DC6                ??_init_cpu 001E  
                 int_func 1588                ??_read_eep 0018                ??_read_bit 0016  
         ___lldiv@divisor 001A           ___lldiv@counter 0022               _HD44780_CYR 7DC7  
               _RCSTAbits 000FAB                ??_ow_reset 0016                   postdec2 000FDD  
                 postinc0 000FEE                   postinc2 000FDE       i2___lmul@multiplier 0001  
            read_byte@val 0018                   sqrt@grs 00B3                   sqrt@exp 00B8  
             ?_cgrom_char 001A                 _PORTBbits 000F81             key_GetKey@key 0016  
       __end_of_write_bit 1DFA         __end_of_write_eep 1E6C             ___xxtofl@sign 001E  
               _TRISBbits 000F93                 _TRISCbits 000F94               ?_lcd_gotoxy 001A  
            _compile_date 7E31              _compile_time 7E3D      __end_of_ds18b20_crc8 1BC8  
             _CCP1CONbits 000FBD               ?_key_GetKey 0001               _CCP2CONbits 000FBA  
               _TXSTAbits 000FAC                 _AlarmTemp 0087              calc_power@tt 00AD  
               _EncState_ 7E07             ??_lcd_preload 001E           _calc_power$2596 00B1  
          __end_of___lmul 1AE8            __end_of___wmul 1E48               _BAUDCONbits 000FB8  
           __pidataCOMRAM 1EE7                _write_byte 1C86            Inter_lo@tmrtmp 0014  
             __end_ofPL10 1766               __end_ofPL20 0932               __end_ofPL12 0916  
             __end_ofPL30 0C8C               __end_ofPL22 0944               __end_ofPL14 0F4A  
             __end_ofPL40 095E               __end_ofPL32 112E               __end_ofPL24 1122  
             __end_ofPL16 0F58               __end_ofPL50 1982               __end_ofPL42 096C  
             __end_ofPL34 094A               __end_ofPL26 0F6A               __end_ofPL18 0920  
             __end_ofPL60 19C8               __end_ofPL52 1990               __end_ofPL44 0F88  
             __end_ofPL36 0F7A               __end_ofPL28 0C84               __end_ofPL70 1480  
             __end_ofPL62 0C9A               __end_ofPL54 199E               __end_ofPL46 1974  
             __end_ofPL38 0950               __end_ofPL80 0982               __end_ofPL72 0CA6  
             __end_ofPL64 0978               __end_ofPL56 19AC               __end_ofPL48 189E  
             __end_ofPL90 1934               __end_ofPL82 098C               __end_ofPL74 0F94  
             __end_ofPL66 1474               __end_ofPL58 19BA               __end_ofPL92 176C  
             __end_ofPL84 1588               __end_ofPL76 0CB0               __end_ofPL68 113A  
             __end_ofPL94 0CB6               __end_ofPL86 0F9E               __end_ofPL78 1144  
             __end_ofPL96 0CBC               __end_ofPL88 0996               __end_ofPL98 0CC2  
     start_initialization 1A3E  ds18b20_crc8@feedback_bit 001A                  ??___lmul 001E  
                ??___wmul 001A               __pdataBANK0 00CE           read_eep@address 0016  
              read_byte@i 0019       __end_of_lcd_preload 1966              _init_ds18b20 1DFA  
             __pbssCOMRAM 0030             __pcstackBANK0 00AD              _isdigit$2376 0017  
                ?_EncPoll 0001      readTemp_Single@minus 001E               sprintf@flag 00B5  
   ds18b20_crc8@num_bytes 0017               sprintf@prec 00AF            _oldTemperature 0078  
             _angle_U_ocr 0048                 _main$1571 00CC          ___lwdiv@dividend 0016  
               __pintcode 0008             __pmediumconst 7DC6                 _lcdNibble 189E  
                ?___fltol 002C                  ?___lldiv 0016                  ?___lwdiv 0016  
                ?___lwmod 001D               __pintcodelo 0018               ?_write_byte 0001  
 _eusartTxBufferRemaining 0044                  ?_initLCD 0001                  ?_isdigit 0001  
               _count_enc 0080              ??_calc_power 0029          ___lwdiv@quotient 001B  
                ?_sprintf 0022                 _key_press 1CC4                 _read_byte 1BC8  
          ___wmul@product 001A                  _LATAbits 000F89                  _LATCbits 000F8B  
                _IPR1bits 000F9F                  _PIE1bits 000F9D                 _tick_t1_1 0042  
        readTemp_Single@i 0024                  _PIR1bits 000F9E                  _RCONbits 000FD0  
              ?_lcdNibble 0001                 _time_flag 00AC               _lcd_preload 1934  
      __end_of_calc_power 1890                 _power_100 023E                 _timer_val 0045  
               lcdPrint@t 001D              ??_cgrom_char 001D                 _watt_disp 0036  
              _ADCON0bits 000FC2                _ADCON2bits 000FC0              _ds18b20_crc8 1B7E  
       ___wmul@multiplier 0016                  i2___lmul 1AE8               _isTempReady 0083  
               _sqrtU_sum 0064                 lcd_putc@c 001A               write_byte@i 001B  
            ??_lcd_gotoxy 001B                ?_key_press 0001                 _write_bit 1DCE  
               _write_eep 1E48         ___lmul@multiplier 0016               _INTCON2bits 000FF1  
              ?_read_byte 0001              ??_key_GetKey 0016                  _Inter_hi 0008  
                _Inter_lo 0018                _EECON1bits 000FA6        __end_of_cgrom_char 1D6A  
                __Hrparam 0000                  __Lrparam 0000        __end_of_lcd_gotoxy 1D38  
          key_press@count 0034       readTemp_Single@temp 0025                sprintf@len 00B3  
              sprintf@val 00AD                  ___xxtofl 1374                  _clearLCD 1EA4  
             _key_pressed 003A        __end_of_key_GetKey 1EE4           ___lwdiv@divisor 0018  
         ___lwdiv@counter 001A                  __ptext10 1682                  __ptext11 1D00  
                __ptext20 1934                  __ptext12 1808                  __ptext21 1CC4  
                __ptext13 1A9C                  __ptext30 1D38                  __ptext22 1EDA  
                __ptext14 19C8                  __ptext31 1D6A                  __ptext23 1144  
                __ptext15 1EBC                  __ptext32 189E                  __ptext24 1DFA  
                __ptext16 1480                  __ptext33 1374                  __ptext25 1C86  
                __ptext17 1BC8                  __ptext34 176C                  __ptext26 1DCE  
                __ptext18 1E88                  __ptext35 1D9C                  __ptext27 1C08  
                __ptext19 1B7E                  __ptext28 1266                  __ptext29 1EA4  
                __ptext38 1AE8                  _lcdPrint 1682                  _lcdWrite 1D6A  
              ?_write_eep 0016                ?_write_bit 0001                  _lcd_putc 1ECE  
                _inc_data 023A                  _countTmp 0088                  _init_cpu 1144  
                _read_bit 1E88                  _read_eep 1EBC                  _read_key 0089  
                _sel_main 007D         cgrom_char@address 001C                  isa$xinst 000000  
             ??_lcdNibble 0016                  _ow_reset 1C08                  int$flags 004A  
    show_lcd_main@pwr_dsp 00B9                  _symbol_1 7E76                  _symbol_2 7E6E  
                _symbol_3 7E66                  _symbol_4 7E5E                  _symbol_5 7E56  
                _symbol_6 7E4E                  _symbol_7 7E46               _OSCTUNEbits 000F9B  
              _INTCONbits 000FF2     i2___lmul@multiplicand 0005         ??_readTemp_Single 0021  
           _show_lcd_main 0996                  isdigit@c 0018               ??_key_press 0016  
               sqrt@tfrac 00AF               ??_read_byte 0016                EncPoll@Enc 003B  
      readTemp_Single@buf 001D                  intlevel1 0000                  intlevel2 0000  
               sprintf@ap 00B2        readTemp_Single@tmp 0023                 sprintf@cp 00B0  
               sprintf@sp 0022          ___lwmod@dividend 001D          ___lldiv@dividend 0016  
              _OSCCONbits 000FD3          cgrom_char@symbol 001A              ??_write_byte 0017  
                sqrt@frac 00BA                  sqrt@sign 00AD                  sqrt@root 00BE  
             _temperature 00A9                  sprintf@c 00B6                  sprintf@f 0023  
        ___lldiv@quotient 001E           ___lwmod@divisor 001F            ?_show_lcd_main 0001  
         ___lwmod@counter 0021               cgrom_char@i 001D               ??_write_eep 0017  
             ??_write_bit 0016               _pressed_key 0082        __end_of_write_byte 1CC4  
